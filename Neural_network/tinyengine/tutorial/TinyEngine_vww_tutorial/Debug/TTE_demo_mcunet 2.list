
TTE_demo_mcunet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d82c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00080fc8  0800da00  0800da00  0000ea00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0808e9c8  0808e9c8  0008f9c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000014  0808e9d0  0808e9d0  0008f9d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  0808e9e4  0808e9e4  0008f9e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000006d8  20000000  0808e9ec  00090000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000f9f4  200006d8  0808f0c4  000906d8  2**3
                  ALLOC
  8 ._user_heap_stack 00000a00  200100cc  0808f0c4  000910cc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000906d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00091fd9  00000000  00000000  00090708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005c64  00000000  00000000  001226e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 000184ed  00000000  00000000  00128345  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000f78  00000000  00000000  00140838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00002511  00000000  00000000  001417b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001c986  00000000  00000000  00143cc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000082e8  00000000  00000000  00160647  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0016892f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004420  00000000  00000000  00168974  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000076  00000000  00000000  0016cd94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200006d8 	.word	0x200006d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d9e4 	.word	0x0800d9e4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200006dc 	.word	0x200006dc
 800020c:	0800d9e4 	.word	0x0800d9e4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <BSP_PB_Init>:
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000ed8:	4b27      	ldr	r3, [pc, #156]	@ (8000f78 <BSP_PB_Init+0xa0>)
 8000eda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000edc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
{
 8000ee0:	b510      	push	{r4, lr}
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000ee2:	631a      	str	r2, [r3, #48]	@ 0x30
{
 8000ee4:	b08a      	sub	sp, #40	@ 0x28
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee8:	4604      	mov	r4, r0
 8000eea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000eee:	bb28      	cbnz	r0, 8000f3c <BSP_PB_Init+0x64>
 8000ef0:	9301      	str	r3, [sp, #4]
 8000ef2:	9b01      	ldr	r3, [sp, #4]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8000ef4:	b341      	cbz	r1, 8000f48 <BSP_PB_Init+0x70>
    gpio_init_structure.Pull = GPIO_NOPULL;
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8000ef6:	2901      	cmp	r1, #1
 8000ef8:	d11e      	bne.n	8000f38 <BSP_PB_Init+0x60>
    gpio_init_structure.Pull = GPIO_NOPULL;
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
    
    if(Button != BUTTON_WAKEUP)
    {
      gpio_init_structure.Mode = GPIO_MODE_IT_FALLING; 
 8000efa:	4920      	ldr	r1, [pc, #128]	@ (8000f7c <BSP_PB_Init+0xa4>)
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000efc:	4a20      	ldr	r2, [pc, #128]	@ (8000f80 <BSP_PB_Init+0xa8>)
      gpio_init_structure.Mode = GPIO_MODE_IT_FALLING; 
 8000efe:	4b21      	ldr	r3, [pc, #132]	@ (8000f84 <BSP_PB_Init+0xac>)
    else
    {
      gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
    }
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000f00:	4821      	ldr	r0, [pc, #132]	@ (8000f88 <BSP_PB_Init+0xb0>)
      gpio_init_structure.Mode = GPIO_MODE_IT_FALLING; 
 8000f02:	2c00      	cmp	r4, #0
 8000f04:	bf18      	it	ne
 8000f06:	460b      	movne	r3, r1
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000f08:	f832 2014 	ldrh.w	r2, [r2, r4, lsl #1]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000f0c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8000f10:	a904      	add	r1, sp, #16
    gpio_init_structure.Pull = GPIO_NOPULL;
 8000f12:	ed9f 7b17 	vldr	d7, [pc, #92]	@ 8000f70 <BSP_PB_Init+0x98>
 8000f16:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000f1a:	ed8d 7b06 	vstr	d7, [sp, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000f1e:	f000 ff95 	bl	8001e4c <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8000f22:	4b1a      	ldr	r3, [pc, #104]	@ (8000f8c <BSP_PB_Init+0xb4>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	210f      	movs	r1, #15
 8000f28:	f913 4014 	ldrsb.w	r4, [r3, r4, lsl #1]
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	f000 fcd3 	bl	80018d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000f32:	4620      	mov	r0, r4
 8000f34:	f000 fd0c 	bl	8001950 <HAL_NVIC_EnableIRQ>
  }
}
 8000f38:	b00a      	add	sp, #40	@ 0x28
 8000f3a:	bd10      	pop	{r4, pc}
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000f3c:	2801      	cmp	r0, #1
 8000f3e:	d013      	beq.n	8000f68 <BSP_PB_Init+0x90>
 8000f40:	9303      	str	r3, [sp, #12]
 8000f42:	9b03      	ldr	r3, [sp, #12]
  if(ButtonMode == BUTTON_MODE_GPIO)
 8000f44:	2900      	cmp	r1, #0
 8000f46:	d1d6      	bne.n	8000ef6 <BSP_PB_Init+0x1e>
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000f48:	2202      	movs	r2, #2
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f80 <BSP_PB_Init+0xa8>)
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000f4c:	480e      	ldr	r0, [pc, #56]	@ (8000f88 <BSP_PB_Init+0xb0>)
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000f4e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000f52:	9105      	str	r1, [sp, #20]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000f54:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000f58:	9304      	str	r3, [sp, #16]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000f5a:	e9cd 1206 	strd	r1, r2, [sp, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000f5e:	a904      	add	r1, sp, #16
 8000f60:	f000 ff74 	bl	8001e4c <HAL_GPIO_Init>
}
 8000f64:	b00a      	add	sp, #40	@ 0x28
 8000f66:	bd10      	pop	{r4, pc}
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000f68:	9302      	str	r3, [sp, #8]
 8000f6a:	9b02      	ldr	r3, [sp, #8]
 8000f6c:	e7c2      	b.n	8000ef4 <BSP_PB_Init+0x1c>
 8000f6e:	bf00      	nop
 8000f70:	00000000 	.word	0x00000000
 8000f74:	00000002 	.word	0x00000002
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	10210000 	.word	0x10210000
 8000f80:	0800da08 	.word	0x0800da08
 8000f84:	10110000 	.word	0x10110000
 8000f88:	20000004 	.word	0x20000004
 8000f8c:	0800da00 	.word	0x0800da00

08000f90 <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8000f90:	4a03      	ldr	r2, [pc, #12]	@ (8000fa0 <BSP_LCD_GetXSize+0x10>)
 8000f92:	2134      	movs	r1, #52	@ 0x34
 8000f94:	4b03      	ldr	r3, [pc, #12]	@ (8000fa4 <BSP_LCD_GetXSize+0x14>)
 8000f96:	6812      	ldr	r2, [r2, #0]
 8000f98:	fb01 3302 	mla	r3, r1, r2, r3
}
 8000f9c:	6e18      	ldr	r0, [r3, #96]	@ 0x60
 8000f9e:	4770      	bx	lr
 8000fa0:	20000790 	.word	0x20000790
 8000fa4:	200007d8 	.word	0x200007d8

08000fa8 <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8000fa8:	4a03      	ldr	r2, [pc, #12]	@ (8000fb8 <BSP_LCD_GetYSize+0x10>)
 8000faa:	2134      	movs	r1, #52	@ 0x34
 8000fac:	4b03      	ldr	r3, [pc, #12]	@ (8000fbc <BSP_LCD_GetYSize+0x14>)
 8000fae:	6812      	ldr	r2, [r2, #0]
 8000fb0:	fb01 3302 	mla	r3, r1, r2, r3
}
 8000fb4:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8000fb6:	4770      	bx	lr
 8000fb8:	20000790 	.word	0x20000790
 8000fbc:	200007d8 	.word	0x200007d8

08000fc0 <BSP_LCD_LayerRgb565Init>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8000fc0:	4b1a      	ldr	r3, [pc, #104]	@ (800102c <BSP_LCD_LayerRgb565Init+0x6c>)
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerRgb565Init(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8000fc2:	b530      	push	{r4, r5, lr}
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8000fc4:	681a      	ldr	r2, [r3, #0]
{     
 8000fc6:	b08f      	sub	sp, #60	@ 0x3c
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8000fc8:	2300      	movs	r3, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8000fca:	4d19      	ldr	r5, [pc, #100]	@ (8001030 <BSP_LCD_LayerRgb565Init+0x70>)
 8000fcc:	2434      	movs	r4, #52	@ 0x34
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
  layer_cfg.WindowY0 = 0;
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
  layer_cfg.FBStartAdress = FB_Address;
 8000fce:	910a      	str	r1, [sp, #40]	@ 0x28
  layer_cfg.WindowX0 = 0;
 8000fd0:	9301      	str	r3, [sp, #4]
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8000fd2:	fb04 5c02 	mla	ip, r4, r2, r5
  layer_cfg.Alpha = 255;
 8000fd6:	22ff      	movs	r2, #255	@ 0xff
  layer_cfg.WindowY0 = 0;
 8000fd8:	9303      	str	r3, [sp, #12]
{     
 8000fda:	4604      	mov	r4, r0
  layer_cfg.Alpha0 = 0;
 8000fdc:	9307      	str	r3, [sp, #28]
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8000fde:	4628      	mov	r0, r5
  layer_cfg.Backcolor.Blue = 0;
 8000fe0:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
  layer_cfg.Backcolor.Red = 0;
 8000fe4:	f88d 3036 	strb.w	r3, [sp, #54]	@ 0x36
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000fe8:	2307      	movs	r3, #7
  layer_cfg.Alpha = 255;
 8000fea:	9206      	str	r2, [sp, #24]
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000fec:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000ff0:	9309      	str	r3, [sp, #36]	@ 0x24
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000ff2:	9208      	str	r2, [sp, #32]
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8000ff4:	4622      	mov	r2, r4

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8000ff6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8000ffa:	e9dc 1318 	ldrd	r1, r3, [ip, #96]	@ 0x60
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8000ffe:	9304      	str	r3, [sp, #16]
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8001000:	930c      	str	r3, [sp, #48]	@ 0x30
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001002:	2302      	movs	r3, #2
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8001004:	9102      	str	r1, [sp, #8]
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8001006:	910b      	str	r1, [sp, #44]	@ 0x2c
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8001008:	a901      	add	r1, sp, #4
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800100a:	9305      	str	r3, [sp, #20]
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 800100c:	f001 f8d8 	bl	80021c0 <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001010:	4b08      	ldr	r3, [pc, #32]	@ (8001034 <BSP_LCD_LayerRgb565Init+0x74>)
 8001012:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
  DrawProp[LayerIndex].pFont     = &Font24;
 8001016:	4808      	ldr	r0, [pc, #32]	@ (8001038 <BSP_LCD_LayerRgb565Init+0x78>)
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001018:	eb03 0284 	add.w	r2, r3, r4, lsl #2
 800101c:	6051      	str	r1, [r2, #4]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 800101e:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
  DrawProp[LayerIndex].pFont     = &Font24;
 8001022:	6090      	str	r0, [r2, #8]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8001024:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
}
 8001028:	b00f      	add	sp, #60	@ 0x3c
 800102a:	bd30      	pop	{r4, r5, pc}
 800102c:	20000790 	.word	0x20000790
 8001030:	200007d8 	.word	0x200007d8
 8001034:	20000778 	.word	0x20000778
 8001038:	2000001c 	.word	0x2000001c

0800103c <BSP_LCD_SelectLayer>:
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
  ActiveLayer = LayerIndex;
 800103c:	4b01      	ldr	r3, [pc, #4]	@ (8001044 <BSP_LCD_SelectLayer+0x8>)
 800103e:	6018      	str	r0, [r3, #0]
} 
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	20000790 	.word	0x20000790

08001048 <BSP_LCD_SetTransparency>:
  * @param  Transparency: Transparency
  *           This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFF 
  * @retval None
  */
void BSP_LCD_SetTransparency(uint32_t LayerIndex, uint8_t Transparency)
{    
 8001048:	4602      	mov	r2, r0
  HAL_LTDC_SetAlpha(&hLtdcHandler, Transparency, LayerIndex);
 800104a:	4801      	ldr	r0, [pc, #4]	@ (8001050 <BSP_LCD_SetTransparency+0x8>)
 800104c:	f001 b98c 	b.w	8002368 <HAL_LTDC_SetAlpha>
 8001050:	200007d8 	.word	0x200007d8

08001054 <BSP_LCD_SetTextColor>:
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
  DrawProp[ActiveLayer].TextColor = Color;
 8001054:	4b03      	ldr	r3, [pc, #12]	@ (8001064 <BSP_LCD_SetTextColor+0x10>)
 8001056:	4a04      	ldr	r2, [pc, #16]	@ (8001068 <BSP_LCD_SetTextColor+0x14>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800105e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 8001062:	4770      	bx	lr
 8001064:	20000790 	.word	0x20000790
 8001068:	20000778 	.word	0x20000778

0800106c <BSP_LCD_Clear>:
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800106c:	491e      	ldr	r1, [pc, #120]	@ (80010e8 <BSP_LCD_Clear+0x7c>)
 800106e:	2234      	movs	r2, #52	@ 0x34
 8001070:	4b1e      	ldr	r3, [pc, #120]	@ (80010ec <BSP_LCD_Clear+0x80>)
{ 
 8001072:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001076:	f8d1 9000 	ldr.w	r9, [r1]
{ 
 800107a:	b083      	sub	sp, #12
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800107c:	4c1c      	ldr	r4, [pc, #112]	@ (80010f0 <BSP_LCD_Clear+0x84>)
{ 
 800107e:	4605      	mov	r5, r0
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001080:	fb02 3309 	mla	r3, r2, r9, r3
  hDma2dHandler.Init.OutputOffset = OffLine;      
  
  hDma2dHandler.Instance = DMA2D;
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8001084:	4620      	mov	r0, r4
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001086:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8001088:	f8d3 8064 	ldr.w	r8, [r3, #100]	@ 0x64
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800108c:	e9d3 6717 	ldrd	r6, r7, [r3, #92]	@ 0x5c
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001090:	f1a2 0302 	sub.w	r3, r2, #2
 8001094:	fab3 f383 	clz	r3, r3
 8001098:	095b      	lsrs	r3, r3, #5
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	60a3      	str	r3, [r4, #8]
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800109e:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80010a2:	6063      	str	r3, [r4, #4]
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80010a4:	2300      	movs	r3, #0
 80010a6:	60e3      	str	r3, [r4, #12]
  hDma2dHandler.Instance = DMA2D;
 80010a8:	4b12      	ldr	r3, [pc, #72]	@ (80010f4 <BSP_LCD_Clear+0x88>)
 80010aa:	6023      	str	r3, [r4, #0]
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80010ac:	f000 fd58 	bl	8001b60 <HAL_DMA2D_Init>
 80010b0:	b110      	cbz	r0, 80010b8 <BSP_LCD_Clear+0x4c>
}
 80010b2:	b003      	add	sp, #12
 80010b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 80010b8:	4649      	mov	r1, r9
 80010ba:	4620      	mov	r0, r4
 80010bc:	f000 fe70 	bl	8001da0 <HAL_DMA2D_ConfigLayer>
 80010c0:	2800      	cmp	r0, #0
 80010c2:	d1f6      	bne.n	80010b2 <BSP_LCD_Clear+0x46>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80010c4:	463b      	mov	r3, r7
 80010c6:	4632      	mov	r2, r6
 80010c8:	4629      	mov	r1, r5
 80010ca:	4620      	mov	r0, r4
 80010cc:	f8cd 8000 	str.w	r8, [sp]
 80010d0:	f000 fd74 	bl	8001bbc <HAL_DMA2D_Start>
 80010d4:	2800      	cmp	r0, #0
 80010d6:	d1ec      	bne.n	80010b2 <BSP_LCD_Clear+0x46>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80010d8:	210a      	movs	r1, #10
 80010da:	4620      	mov	r0, r4
}
 80010dc:	b003      	add	sp, #12
 80010de:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80010e2:	f000 bdc1 	b.w	8001c68 <HAL_DMA2D_PollForTransfer>
 80010e6:	bf00      	nop
 80010e8:	20000790 	.word	0x20000790
 80010ec:	200007d8 	.word	0x200007d8
 80010f0:	20000798 	.word	0x20000798
 80010f4:	4002b000 	.word	0x4002b000

080010f8 <BSP_LCD_DisplayChar>:
{
 80010f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80010fc:	4c3c      	ldr	r4, [pc, #240]	@ (80011f0 <BSP_LCD_DisplayChar+0xf8>)
{
 80010fe:	b089      	sub	sp, #36	@ 0x24
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001100:	4b3c      	ldr	r3, [pc, #240]	@ (80011f4 <BSP_LCD_DisplayChar+0xfc>)
 8001102:	3a20      	subs	r2, #32
 8001104:	6825      	ldr	r5, [r4, #0]
{
 8001106:	9105      	str	r1, [sp, #20]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001108:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800110c:	eb03 0981 	add.w	r9, r3, r1, lsl #2
 8001110:	f8d9 3008 	ldr.w	r3, [r9, #8]
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001114:	f8b3 8004 	ldrh.w	r8, [r3, #4]
 8001118:	f8b3 b006 	ldrh.w	fp, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800111c:	6819      	ldr	r1, [r3, #0]
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800111e:	f108 0307 	add.w	r3, r8, #7
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001122:	fb0b f202 	mul.w	r2, fp, r2
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001126:	10dc      	asrs	r4, r3, #3
  offset =  8 *((width + 7)/8) -  width ;
 8001128:	ebc8 03c4 	rsb	r3, r8, r4, lsl #3
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800112c:	fb04 f202 	mul.w	r2, r4, r2
  offset =  8 *((width + 7)/8) -  width ;
 8001130:	b2db      	uxtb	r3, r3
 8001132:	9306      	str	r3, [sp, #24]
  for(i = 0; i < height; i++)
 8001134:	f1bb 0f00 	cmp.w	fp, #0
 8001138:	d04c      	beq.n	80011d4 <BSP_LCD_DisplayChar+0xdc>
 800113a:	188b      	adds	r3, r1, r2
 800113c:	4a2e      	ldr	r2, [pc, #184]	@ (80011f8 <BSP_LCD_DisplayChar+0x100>)
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800113e:	2134      	movs	r1, #52	@ 0x34
 8001140:	4682      	mov	sl, r0
  for(i = 0; i < height; i++)
 8001142:	2000      	movs	r0, #0
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001144:	fb01 2c05 	mla	ip, r1, r5, r2
 8001148:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800114c:	465d      	mov	r5, fp
 800114e:	9207      	str	r2, [sp, #28]
 8001150:	9a05      	ldr	r2, [sp, #20]
    switch(((width + 7)/8))
 8001152:	2c01      	cmp	r4, #1
      line =  pchar[0];      
 8001154:	781f      	ldrb	r7, [r3, #0]
 8001156:	eb02 0600 	add.w	r6, r2, r0
 800115a:	b2b6      	uxth	r6, r6
    switch(((width + 7)/8))
 800115c:	d004      	beq.n	8001168 <BSP_LCD_DisplayChar+0x70>
 800115e:	2c02      	cmp	r4, #2
 8001160:	d13b      	bne.n	80011da <BSP_LCD_DisplayChar+0xe2>
      line =  (pchar[0]<< 8) | pchar[1];      
 8001162:	881f      	ldrh	r7, [r3, #0]
 8001164:	ba7f      	rev16	r7, r7
 8001166:	b2bf      	uxth	r7, r7
      if(line & (1 << (width- j + offset- 1))) 
 8001168:	f04f 0e01 	mov.w	lr, #1
 800116c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8001170:	e9cd 5401 	strd	r5, r4, [sp, #4]
 8001174:	eb02 0b01 	add.w	fp, r2, r1
    for (j = 0; j < width; j++)
 8001178:	2200      	movs	r2, #0
      if(line & (1 << (width- j + offset- 1))) 
 800117a:	e9cd 0303 	strd	r0, r3, [sp, #12]
 800117e:	e008      	b.n	8001192 <BSP_LCD_DisplayChar+0x9a>
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001180:	2802      	cmp	r0, #2
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8001182:	f8d9 1000 	ldr.w	r1, [r9]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001186:	d017      	beq.n	80011b8 <BSP_LCD_DisplayChar+0xc0>
    for (j = 0; j < width; j++)
 8001188:	3201      	adds	r2, #1
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800118a:	f845 1023 	str.w	r1, [r5, r3, lsl #2]
    for (j = 0; j < width; j++)
 800118e:	4542      	cmp	r2, r8
 8001190:	d218      	bcs.n	80011c4 <BSP_LCD_DisplayChar+0xcc>
      if(line & (1 << (width- j + offset- 1))) 
 8001192:	ebab 0102 	sub.w	r1, fp, r2
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8001196:	eb0a 0302 	add.w	r3, sl, r2
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800119a:	f8dc 0048 	ldr.w	r0, [ip, #72]	@ 0x48
      if(line & (1 << (width- j + offset- 1))) 
 800119e:	fa0e f101 	lsl.w	r1, lr, r1
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	e9dc 5417 	ldrd	r5, r4, [ip, #92]	@ 0x5c
      if(line & (1 << (width- j + offset- 1))) 
 80011a8:	4239      	tst	r1, r7
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80011aa:	fb04 3306 	mla	r3, r4, r6, r3
      if(line & (1 << (width- j + offset- 1))) 
 80011ae:	d1e7      	bne.n	8001180 <BSP_LCD_DisplayChar+0x88>
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80011b0:	2802      	cmp	r0, #2
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80011b2:	f8d9 1004 	ldr.w	r1, [r9, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80011b6:	d1e7      	bne.n	8001188 <BSP_LCD_DisplayChar+0x90>
    for (j = 0; j < width; j++)
 80011b8:	3201      	adds	r2, #1
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80011ba:	b289      	uxth	r1, r1
    for (j = 0; j < width; j++)
 80011bc:	4542      	cmp	r2, r8
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80011be:	f825 1013 	strh.w	r1, [r5, r3, lsl #1]
    for (j = 0; j < width; j++)
 80011c2:	d3e6      	bcc.n	8001192 <BSP_LCD_DisplayChar+0x9a>
 80011c4:	e9dd 5401 	ldrd	r5, r4, [sp, #4]
 80011c8:	e9dd 0303 	ldrd	r0, r3, [sp, #12]
  for(i = 0; i < height; i++)
 80011cc:	3001      	adds	r0, #1
 80011ce:	4423      	add	r3, r4
 80011d0:	4285      	cmp	r5, r0
 80011d2:	d1bd      	bne.n	8001150 <BSP_LCD_DisplayChar+0x58>
}
 80011d4:	b009      	add	sp, #36	@ 0x24
 80011d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (j = 0; j < width; j++)
 80011da:	f1b8 0f00 	cmp.w	r8, #0
 80011de:	d0f5      	beq.n	80011cc <BSP_LCD_DisplayChar+0xd4>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80011e0:	785a      	ldrb	r2, [r3, #1]
 80011e2:	043f      	lsls	r7, r7, #16
 80011e4:	ea47 2702 	orr.w	r7, r7, r2, lsl #8
 80011e8:	789a      	ldrb	r2, [r3, #2]
 80011ea:	4317      	orrs	r7, r2
 80011ec:	e7bc      	b.n	8001168 <BSP_LCD_DisplayChar+0x70>
 80011ee:	bf00      	nop
 80011f0:	20000790 	.word	0x20000790
 80011f4:	20000778 	.word	0x20000778
 80011f8:	200007d8 	.word	0x200007d8

080011fc <BSP_LCD_DisplayStringAt>:
{
 80011fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001200:	4604      	mov	r4, r0
  while (*ptr++) size ++ ;
 8001202:	4610      	mov	r0, r2
{
 8001204:	4615      	mov	r5, r2
 8001206:	b082      	sub	sp, #8
  while (*ptr++) size ++ ;
 8001208:	f810 2b01 	ldrb.w	r2, [r0], #1
{
 800120c:	460e      	mov	r6, r1
 800120e:	4698      	mov	r8, r3
  while (*ptr++) size ++ ;
 8001210:	2a00      	cmp	r2, #0
 8001212:	d051      	beq.n	80012b8 <BSP_LCD_DisplayStringAt+0xbc>
 8001214:	9201      	str	r2, [sp, #4]
 8001216:	f7ff f84b 	bl	80002b0 <strlen>
 800121a:	9a01      	ldr	r2, [sp, #4]
 800121c:	f100 0a01 	add.w	sl, r0, #1
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8001220:	4b26      	ldr	r3, [pc, #152]	@ (80012bc <BSP_LCD_DisplayStringAt+0xc0>)
 8001222:	2134      	movs	r1, #52	@ 0x34
 8001224:	f8df 909c 	ldr.w	r9, [pc, #156]	@ 80012c4 <BSP_LCD_DisplayStringAt+0xc8>
  switch (Mode)
 8001228:	f1b8 0f01 	cmp.w	r8, #1
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800122c:	f8d3 c000 	ldr.w	ip, [r3]
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001230:	4b23      	ldr	r3, [pc, #140]	@ (80012c0 <BSP_LCD_DisplayStringAt+0xc4>)
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8001232:	fb01 910c 	mla	r1, r1, ip, r9
 8001236:	6e08      	ldr	r0, [r1, #96]	@ 0x60
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001238:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 800123c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8001240:	689f      	ldr	r7, [r3, #8]
 8001242:	f8b7 e004 	ldrh.w	lr, [r7, #4]
 8001246:	fbb0 f1fe 	udiv	r1, r0, lr
  switch (Mode)
 800124a:	d02d      	beq.n	80012a8 <BSP_LCD_DisplayStringAt+0xac>
 800124c:	f1b8 0f02 	cmp.w	r8, #2
 8001250:	d105      	bne.n	800125e <BSP_LCD_DisplayStringAt+0x62>
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8001252:	eba1 030a 	sub.w	r3, r1, sl
 8001256:	fb13 f30e 	smulbb	r3, r3, lr
 800125a:	1b1b      	subs	r3, r3, r4
 800125c:	b29c      	uxth	r4, r3
  if ((ref_column < 1) || (ref_column >= 0x8000))
 800125e:	b223      	sxth	r3, r4
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001260:	b280      	uxth	r0, r0
    ref_column = 1;
 8001262:	2b00      	cmp	r3, #0
 8001264:	bfd8      	it	le
 8001266:	2401      	movle	r4, #1
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001268:	4586      	cmp	lr, r0
 800126a:	d81a      	bhi.n	80012a2 <BSP_LCD_DisplayStringAt+0xa6>
 800126c:	b1ca      	cbz	r2, 80012a2 <BSP_LCD_DisplayStringAt+0xa6>
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800126e:	2334      	movs	r3, #52	@ 0x34
 8001270:	f1c5 0801 	rsb	r8, r5, #1
 8001274:	fb03 990c 	mla	r9, r3, ip, r9
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8001278:	4620      	mov	r0, r4
 800127a:	4631      	mov	r1, r6
 800127c:	f7ff ff3c 	bl	80010f8 <BSP_LCD_DisplayChar>
    i++;
 8001280:	eb08 0005 	add.w	r0, r8, r5
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8001284:	88b9      	ldrh	r1, [r7, #4]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001286:	f8d9 3060 	ldr.w	r3, [r9, #96]	@ 0x60
    i++;
 800128a:	b280      	uxth	r0, r0
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 800128c:	440c      	add	r4, r1
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800128e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8001292:	fb01 3310 	mls	r3, r1, r0, r3
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8001296:	b2a4      	uxth	r4, r4
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001298:	b29b      	uxth	r3, r3
 800129a:	428b      	cmp	r3, r1
 800129c:	d301      	bcc.n	80012a2 <BSP_LCD_DisplayStringAt+0xa6>
 800129e:	2a00      	cmp	r2, #0
 80012a0:	d1ea      	bne.n	8001278 <BSP_LCD_DisplayStringAt+0x7c>
}
 80012a2:	b002      	add	sp, #8
 80012a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80012a8:	eba1 030a 	sub.w	r3, r1, sl
 80012ac:	fb0e f303 	mul.w	r3, lr, r3
 80012b0:	eb04 0353 	add.w	r3, r4, r3, lsr #1
 80012b4:	b29c      	uxth	r4, r3
      break;
 80012b6:	e7d2      	b.n	800125e <BSP_LCD_DisplayStringAt+0x62>
  uint32_t size = 0, xsize = 0; 
 80012b8:	4692      	mov	sl, r2
 80012ba:	e7b1      	b.n	8001220 <BSP_LCD_DisplayStringAt+0x24>
 80012bc:	20000790 	.word	0x20000790
 80012c0:	20000778 	.word	0x20000778
 80012c4:	200007d8 	.word	0x200007d8

080012c8 <BSP_LCD_DrawPixel>:
{
 80012c8:	b430      	push	{r4, r5}
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80012ca:	4c0b      	ldr	r4, [pc, #44]	@ (80012f8 <BSP_LCD_DrawPixel+0x30>)
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80012cc:	f04f 0c34 	mov.w	ip, #52	@ 0x34
 80012d0:	4b0a      	ldr	r3, [pc, #40]	@ (80012fc <BSP_LCD_DrawPixel+0x34>)
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80012d2:	6824      	ldr	r4, [r4, #0]
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80012d4:	fb0c 3304 	mla	r3, ip, r4, r3
 80012d8:	e9d3 4517 	ldrd	r4, r5, [r3, #92]	@ 0x5c
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80012dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80012de:	fb05 0001 	mla	r0, r5, r1, r0
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d003      	beq.n	80012ee <BSP_LCD_DrawPixel+0x26>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80012e6:	f844 2020 	str.w	r2, [r4, r0, lsl #2]
}
 80012ea:	bc30      	pop	{r4, r5}
 80012ec:	4770      	bx	lr
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80012ee:	b292      	uxth	r2, r2
 80012f0:	f824 2010 	strh.w	r2, [r4, r0, lsl #1]
}
 80012f4:	bc30      	pop	{r4, r5}
 80012f6:	4770      	bx	lr
 80012f8:	20000790 	.word	0x20000790
 80012fc:	200007d8 	.word	0x200007d8

08001300 <BSP_LCD_DisplayOn>:
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8001300:	4b09      	ldr	r3, [pc, #36]	@ (8001328 <BSP_LCD_DisplayOn+0x28>)
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8001302:	2201      	movs	r2, #1
 8001304:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001308:	4808      	ldr	r0, [pc, #32]	@ (800132c <BSP_LCD_DisplayOn+0x2c>)
{
 800130a:	b510      	push	{r4, lr}
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 800130c:	681c      	ldr	r4, [r3, #0]
 800130e:	69a3      	ldr	r3, [r4, #24]
 8001310:	4313      	orrs	r3, r2
 8001312:	61a3      	str	r3, [r4, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8001314:	f000 fede 	bl	80020d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8001318:	2201      	movs	r2, #1
 800131a:	2108      	movs	r1, #8
 800131c:	4804      	ldr	r0, [pc, #16]	@ (8001330 <BSP_LCD_DisplayOn+0x30>)
}
 800131e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8001322:	f000 bed7 	b.w	80020d4 <HAL_GPIO_WritePin>
 8001326:	bf00      	nop
 8001328:	200007d8 	.word	0x200007d8
 800132c:	40022000 	.word	0x40022000
 8001330:	40022800 	.word	0x40022800

08001334 <BSP_LCD_MspInit>:
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001334:	4b4e      	ldr	r3, [pc, #312]	@ (8001470 <BSP_LCD_MspInit+0x13c>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001336:	2102      	movs	r1, #2
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001338:	484e      	ldr	r0, [pc, #312]	@ (8001474 <BSP_LCD_MspInit+0x140>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 800133a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800133c:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
{
 8001340:	b530      	push	{r4, r5, lr}
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001342:	645a      	str	r2, [r3, #68]	@ 0x44
{
 8001344:	b091      	sub	sp, #68	@ 0x44
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001346:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8001348:	240e      	movs	r4, #14
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800134a:	4d4b      	ldr	r5, [pc, #300]	@ (8001478 <BSP_LCD_MspInit+0x144>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 800134c:	f002 6280 	and.w	r2, r2, #67108864	@ 0x4000000
 8001350:	9201      	str	r2, [sp, #4]
 8001352:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8001354:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001356:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800135a:	631a      	str	r2, [r3, #48]	@ 0x30
 800135c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800135e:	f402 0200 	and.w	r2, r2, #8388608	@ 0x800000
 8001362:	9202      	str	r2, [sp, #8]
 8001364:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001366:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001368:	f042 0210 	orr.w	r2, r2, #16
 800136c:	631a      	str	r2, [r3, #48]	@ 0x30
 800136e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001370:	f002 0210 	and.w	r2, r2, #16
 8001374:	9203      	str	r2, [sp, #12]
 8001376:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001378:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800137a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800137e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001380:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001382:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8001386:	9204      	str	r2, [sp, #16]
 8001388:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800138a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800138c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001390:	631a      	str	r2, [r3, #48]	@ 0x30
 8001392:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001394:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8001398:	9205      	str	r2, [sp, #20]
 800139a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800139c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800139e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80013a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80013a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013a6:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 80013aa:	9206      	str	r2, [sp, #24]
 80013ac:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80013ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013b0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80013b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80013b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013b8:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
 80013bc:	9207      	str	r2, [sp, #28]
 80013be:	9a07      	ldr	r2, [sp, #28]
  LCD_DISP_GPIO_CLK_ENABLE();
 80013c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80013c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80013c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013ca:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 80013ce:	9208      	str	r2, [sp, #32]
 80013d0:	9a08      	ldr	r2, [sp, #32]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80013d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013d4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80013d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80013da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80013dc:	910b      	str	r1, [sp, #44]	@ 0x2c
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80013de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80013e2:	910d      	str	r1, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80013e4:	a90a      	add	r1, sp, #40	@ 0x28
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80013e6:	940e      	str	r4, [sp, #56]	@ 0x38
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80013e8:	9309      	str	r3, [sp, #36]	@ 0x24
  gpio_init_structure.Pin       = GPIO_PIN_4;
 80013ea:	2310      	movs	r3, #16
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80013ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  gpio_init_structure.Pin       = GPIO_PIN_4;
 80013ee:	930a      	str	r3, [sp, #40]	@ 0x28
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	930c      	str	r3, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80013f4:	f000 fd2a 	bl	8001e4c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_12;
 80013f8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80013fc:	2102      	movs	r1, #2
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80013fe:	2309      	movs	r3, #9
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8001400:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001404:	a90a      	add	r1, sp, #40	@ 0x28
 8001406:	481d      	ldr	r0, [pc, #116]	@ (800147c <BSP_LCD_MspInit+0x148>)
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8001408:	930e      	str	r3, [sp, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800140a:	f000 fd1f 	bl	8001e4c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | \
 800140e:	f44f 4267 	mov.w	r2, #59136	@ 0xe700
 8001412:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8001414:	a90a      	add	r1, sp, #40	@ 0x28
 8001416:	4628      	mov	r0, r5
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001418:	940e      	str	r4, [sp, #56]	@ 0x38
  gpio_init_structure.Pin       = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | \
 800141a:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800141e:	f000 fd15 	bl	8001e4c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8001422:	f64e 72ff 	movw	r2, #61439	@ 0xefff
 8001426:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8001428:	a90a      	add	r1, sp, #40	@ 0x28
 800142a:	4815      	ldr	r0, [pc, #84]	@ (8001480 <BSP_LCD_MspInit+0x14c>)
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800142c:	940e      	str	r4, [sp, #56]	@ 0x38
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800142e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8001432:	f000 fd0b 	bl	8001e4c <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001436:	940e      	str	r4, [sp, #56]	@ 0x38
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8001438:	4c12      	ldr	r4, [pc, #72]	@ (8001484 <BSP_LCD_MspInit+0x150>)
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 800143a:	22f7      	movs	r2, #247	@ 0xf7
 800143c:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 800143e:	a90a      	add	r1, sp, #40	@ 0x28
 8001440:	4620      	mov	r0, r4
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8001442:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8001446:	f000 fd01 	bl	8001e4c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 800144a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800144e:	2301      	movs	r3, #1
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8001450:	4628      	mov	r0, r5
 8001452:	a90a      	add	r1, sp, #40	@ 0x28
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8001454:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8001458:	f000 fcf8 	bl	8001e4c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 800145c:	2208      	movs	r2, #8
 800145e:	2301      	movs	r3, #1
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8001460:	a90a      	add	r1, sp, #40	@ 0x28
 8001462:	4620      	mov	r0, r4
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8001464:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8001468:	f000 fcf0 	bl	8001e4c <HAL_GPIO_Init>
}
 800146c:	b011      	add	sp, #68	@ 0x44
 800146e:	bd30      	pop	{r4, r5, pc}
 8001470:	40023800 	.word	0x40023800
 8001474:	40021000 	.word	0x40021000
 8001478:	40022000 	.word	0x40022000
 800147c:	40021800 	.word	0x40021800
 8001480:	40022400 	.word	0x40022400
 8001484:	40022800 	.word	0x40022800

08001488 <BSP_LCD_ClockConfig>:
{
 8001488:	b410      	push	{r4}
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800148a:	4807      	ldr	r0, [pc, #28]	@ (80014a8 <BSP_LCD_ClockConfig+0x20>)
 800148c:	2408      	movs	r4, #8
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 800148e:	21c0      	movs	r1, #192	@ 0xc0
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8001490:	2205      	movs	r2, #5
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8001492:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001496:	6004      	str	r4, [r0, #0]
}
 8001498:	f85d 4b04 	ldr.w	r4, [sp], #4
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 800149c:	6141      	str	r1, [r0, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 800149e:	61c2      	str	r2, [r0, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80014a0:	62c3      	str	r3, [r0, #44]	@ 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 80014a2:	f001 bae3 	b.w	8002a6c <HAL_RCCEx_PeriphCLKConfig>
 80014a6:	bf00      	nop
 80014a8:	200006f4 	.word	0x200006f4

080014ac <BSP_LCD_Init>:
{    
 80014ac:	b510      	push	{r4, lr}
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 80014ae:	2028      	movs	r0, #40	@ 0x28
 80014b0:	4c25      	ldr	r4, [pc, #148]	@ (8001548 <BSP_LCD_Init+0x9c>)
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80014b2:	2109      	movs	r1, #9
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80014b4:	2235      	movs	r2, #53	@ 0x35
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80014b6:	230b      	movs	r3, #11
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80014b8:	e9c4 0105 	strd	r0, r1, [r4, #20]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80014bc:	f240 101b 	movw	r0, #283	@ 0x11b
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80014c0:	f240 2115 	movw	r1, #533	@ 0x215
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80014c4:	e9c4 2307 	strd	r2, r3, [r4, #28]
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 80014c8:	f240 121d 	movw	r2, #285	@ 0x11d
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 80014cc:	f240 2335 	movw	r3, #565	@ 0x235
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80014d0:	e9c4 1009 	strd	r1, r0, [r4, #36]	@ 0x24
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 80014d4:	2100      	movs	r1, #0
 80014d6:	4620      	mov	r0, r4
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 80014d8:	e9c4 320b 	strd	r3, r2, [r4, #44]	@ 0x2c
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 80014dc:	f7ff ffd4 	bl	8001488 <BSP_LCD_ClockConfig>
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 80014e0:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
  hLtdcHandler.Init.Backcolor.Blue = 0;
 80014e4:	2300      	movs	r3, #0
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 80014e6:	f44f 7188 	mov.w	r1, #272	@ 0x110
  hLtdcHandler.Instance = LTDC;
 80014ea:	4a18      	ldr	r2, [pc, #96]	@ (800154c <BSP_LCD_Init+0xa0>)
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 80014ec:	6620      	str	r0, [r4, #96]	@ 0x60
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 80014ee:	4620      	mov	r0, r4
  hLtdcHandler.Init.Backcolor.Blue = 0;
 80014f0:	86a3      	strh	r3, [r4, #52]	@ 0x34
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 80014f2:	6661      	str	r1, [r4, #100]	@ 0x64
  hLtdcHandler.Init.Backcolor.Red = 0;
 80014f4:	f884 3036 	strb.w	r3, [r4, #54]	@ 0x36
  hLtdcHandler.Instance = LTDC;
 80014f8:	6022      	str	r2, [r4, #0]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 80014fa:	e9c4 3301 	strd	r3, r3, [r4, #4]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80014fe:	e9c4 3303 	strd	r3, r3, [r4, #12]
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8001502:	f000 ffdf 	bl	80024c4 <HAL_LTDC_GetState>
 8001506:	b1d0      	cbz	r0, 800153e <BSP_LCD_Init+0x92>
  HAL_LTDC_Init(&hLtdcHandler);
 8001508:	480f      	ldr	r0, [pc, #60]	@ (8001548 <BSP_LCD_Init+0x9c>)
 800150a:	f000 fde7 	bl	80020dc <HAL_LTDC_Init>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 800150e:	2201      	movs	r2, #1
 8001510:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001514:	480e      	ldr	r0, [pc, #56]	@ (8001550 <BSP_LCD_Init+0xa4>)
 8001516:	f000 fddd 	bl	80020d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 800151a:	2201      	movs	r2, #1
 800151c:	2108      	movs	r1, #8
 800151e:	480d      	ldr	r0, [pc, #52]	@ (8001554 <BSP_LCD_Init+0xa8>)
 8001520:	f000 fdd8 	bl	80020d4 <HAL_GPIO_WritePin>
  BSP_SDRAM_Init();
 8001524:	f000 f926 	bl	8001774 <BSP_SDRAM_Init>
  DrawProp[ActiveLayer].pFont = fonts;
 8001528:	4b0b      	ldr	r3, [pc, #44]	@ (8001558 <BSP_LCD_Init+0xac>)
 800152a:	4a0c      	ldr	r2, [pc, #48]	@ (800155c <BSP_LCD_Init+0xb0>)
}
 800152c:	2000      	movs	r0, #0
  DrawProp[ActiveLayer].pFont = fonts;
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	490b      	ldr	r1, [pc, #44]	@ (8001560 <BSP_LCD_Init+0xb4>)
 8001532:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001536:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800153a:	6099      	str	r1, [r3, #8]
}
 800153c:	bd10      	pop	{r4, pc}
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 800153e:	4601      	mov	r1, r0
 8001540:	4620      	mov	r0, r4
 8001542:	f7ff fef7 	bl	8001334 <BSP_LCD_MspInit>
 8001546:	e7df      	b.n	8001508 <BSP_LCD_Init+0x5c>
 8001548:	200007d8 	.word	0x200007d8
 800154c:	40016800 	.word	0x40016800
 8001550:	40022000 	.word	0x40022000
 8001554:	40022800 	.word	0x40022800
 8001558:	20000790 	.word	0x20000790
 800155c:	20000778 	.word	0x20000778
 8001560:	2000001c 	.word	0x2000001c

08001564 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8001564:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t tmpmrd = 0;
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8001568:	4c22      	ldr	r4, [pc, #136]	@ (80015f4 <BSP_SDRAM_Initialization_sequence+0x90>)
{
 800156a:	b083      	sub	sp, #12
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800156c:	4d22      	ldr	r5, [pc, #136]	@ (80015f8 <BSP_SDRAM_Initialization_sequence+0x94>)
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800156e:	2601      	movs	r6, #1
  __IO uint32_t tmpmrd = 0;
 8001570:	2700      	movs	r7, #0
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001572:	f04f 0910 	mov.w	r9, #16
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001576:	4621      	mov	r1, r4
{
 8001578:	4680      	mov	r8, r0
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800157a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800157e:	4628      	mov	r0, r5
  __IO uint32_t tmpmrd = 0;
 8001580:	9701      	str	r7, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8001582:	6026      	str	r6, [r4, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001584:	f8c4 9004 	str.w	r9, [r4, #4]
  Command.ModeRegisterDefinition = 0;
 8001588:	e9c4 6702 	strd	r6, r7, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800158c:	f001 fd2c 	bl	8002fe8 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8001590:	4630      	mov	r0, r6
 8001592:	f000 f97d 	bl	8001890 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8001596:	2302      	movs	r3, #2
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8001598:	4621      	mov	r1, r4
 800159a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800159e:	4628      	mov	r0, r5
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80015a0:	6023      	str	r3, [r4, #0]
  Command.ModeRegisterDefinition = 0;
 80015a2:	60e7      	str	r7, [r4, #12]
  Command.AutoRefreshNumber      = 1;
 80015a4:	e9c4 9601 	strd	r9, r6, [r4, #4]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80015a8:	f001 fd1e 	bl	8002fe8 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80015ac:	2303      	movs	r3, #3
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80015ae:	4621      	mov	r1, r4
 80015b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80015b4:	6023      	str	r3, [r4, #0]
  Command.AutoRefreshNumber      = 8;
 80015b6:	2308      	movs	r3, #8
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80015b8:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80015ba:	f8c4 9004 	str.w	r9, [r4, #4]
  Command.AutoRefreshNumber      = 8;
 80015be:	60a3      	str	r3, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 80015c0:	60e7      	str	r7, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80015c2:	f001 fd11 	bl	8002fe8 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80015c6:	f44f 7308 	mov.w	r3, #544	@ 0x220
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80015ca:	2204      	movs	r2, #4
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80015cc:	4621      	mov	r1, r4
 80015ce:	4628      	mov	r0, r5
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80015d0:	9301      	str	r3, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80015d2:	2310      	movs	r3, #16
  Command.AutoRefreshNumber      = 1;
 80015d4:	60a6      	str	r6, [r4, #8]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80015d6:	e9c4 2300 	strd	r2, r3, [r4]
  Command.ModeRegisterDefinition = tmpmrd;
 80015da:	9b01      	ldr	r3, [sp, #4]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80015dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
  Command.ModeRegisterDefinition = tmpmrd;
 80015e0:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80015e2:	f001 fd01 	bl	8002fe8 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80015e6:	4641      	mov	r1, r8
 80015e8:	4628      	mov	r0, r5
}
 80015ea:	b003      	add	sp, #12
 80015ec:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80015f0:	f001 bd16 	b.w	8003020 <HAL_SDRAM_ProgramRefreshRate>
 80015f4:	200008e0 	.word	0x200008e0
 80015f8:	20000910 	.word	0x20000910

080015fc <BSP_SDRAM_MspInit>:
{  
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80015fc:	4b54      	ldr	r3, [pc, #336]	@ (8001750 <BSP_SDRAM_MspInit+0x154>)
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80015fe:	210c      	movs	r1, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 8001600:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001602:	f042 0201 	orr.w	r2, r2, #1
{  
 8001606:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
 8001608:	639a      	str	r2, [r3, #56]	@ 0x38
{  
 800160a:	b08e      	sub	sp, #56	@ 0x38
  __HAL_RCC_FMC_CLK_ENABLE();
 800160c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
{  
 800160e:	4606      	mov	r6, r0
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8001610:	2008      	movs	r0, #8
  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8001612:	4c50      	ldr	r4, [pc, #320]	@ (8001754 <BSP_SDRAM_MspInit+0x158>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8001614:	f002 0201 	and.w	r2, r2, #1
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8001618:	2500      	movs	r5, #0
  __HAL_RCC_FMC_CLK_ENABLE();
 800161a:	9200      	str	r2, [sp, #0]
 800161c:	9a00      	ldr	r2, [sp, #0]
  __DMAx_CLK_ENABLE();
 800161e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001620:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8001624:	631a      	str	r2, [r3, #48]	@ 0x30
 8001626:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001628:	f402 0280 	and.w	r2, r2, #4194304	@ 0x400000
 800162c:	9201      	str	r2, [sp, #4]
 800162e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001630:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001632:	f042 0204 	orr.w	r2, r2, #4
 8001636:	631a      	str	r2, [r3, #48]	@ 0x30
 8001638:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800163a:	f002 0204 	and.w	r2, r2, #4
 800163e:	9202      	str	r2, [sp, #8]
 8001640:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001642:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001644:	f042 0208 	orr.w	r2, r2, #8
 8001648:	631a      	str	r2, [r3, #48]	@ 0x30
 800164a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800164c:	f002 0208 	and.w	r2, r2, #8
 8001650:	9203      	str	r2, [sp, #12]
 8001652:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001654:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001656:	f042 0210 	orr.w	r2, r2, #16
 800165a:	631a      	str	r2, [r3, #48]	@ 0x30
 800165c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800165e:	f002 0210 	and.w	r2, r2, #16
 8001662:	9204      	str	r2, [sp, #16]
 8001664:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001666:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001668:	f042 0220 	orr.w	r2, r2, #32
 800166c:	631a      	str	r2, [r3, #48]	@ 0x30
 800166e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001670:	f002 0220 	and.w	r2, r2, #32
 8001674:	9205      	str	r2, [sp, #20]
 8001676:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001678:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800167a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800167e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001680:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001682:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8001686:	9206      	str	r2, [sp, #24]
 8001688:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800168a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800168c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001690:	631a      	str	r2, [r3, #48]	@ 0x30
 8001692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8001694:	910c      	str	r1, [sp, #48]	@ 0x30
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8001696:	2102      	movs	r1, #2
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001698:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  gpio_init_structure.Pin   = GPIO_PIN_3;
 800169c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80016a0:	2001      	movs	r0, #1
 80016a2:	2102      	movs	r1, #2
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016a4:	9307      	str	r3, [sp, #28]
 80016a6:	9b07      	ldr	r3, [sp, #28]
  gpio_init_structure.Pin   = GPIO_PIN_3;
 80016a8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80016ac:	a908      	add	r1, sp, #32
 80016ae:	482a      	ldr	r0, [pc, #168]	@ (8001758 <BSP_SDRAM_MspInit+0x15c>)
 80016b0:	f000 fbcc 	bl	8001e4c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9 |
 80016b4:	f24c 730b 	movw	r3, #50955	@ 0xc70b
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80016b8:	a908      	add	r1, sp, #32
 80016ba:	4828      	ldr	r0, [pc, #160]	@ (800175c <BSP_SDRAM_MspInit+0x160>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9 |
 80016bc:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80016be:	f000 fbc5 	bl	8001e4c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80016c2:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80016c6:	a908      	add	r1, sp, #32
 80016c8:	4825      	ldr	r0, [pc, #148]	@ (8001760 <BSP_SDRAM_MspInit+0x164>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80016ca:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80016cc:	f000 fbbe 	bl	8001e4c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80016d0:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80016d4:	a908      	add	r1, sp, #32
 80016d6:	4823      	ldr	r0, [pc, #140]	@ (8001764 <BSP_SDRAM_MspInit+0x168>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80016d8:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80016da:	f000 fbb7 	bl	8001e4c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80016de:	f248 1333 	movw	r3, #33075	@ 0x8133
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80016e2:	a908      	add	r1, sp, #32
 80016e4:	4820      	ldr	r0, [pc, #128]	@ (8001768 <BSP_SDRAM_MspInit+0x16c>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80016e6:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80016e8:	f000 fbb0 	bl	8001e4c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80016ec:	2328      	movs	r3, #40	@ 0x28
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80016ee:	a908      	add	r1, sp, #32
 80016f0:	481e      	ldr	r0, [pc, #120]	@ (800176c <BSP_SDRAM_MspInit+0x170>)
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80016f2:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80016f4:	f000 fbaa 	bl	8001e4c <HAL_GPIO_Init>
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80016f8:	2280      	movs	r2, #128	@ 0x80
 80016fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80016fe:	4620      	mov	r0, r4
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8001700:	61e5      	str	r5, [r4, #28]
 8001702:	60e3      	str	r3, [r4, #12]
 8001704:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001708:	6265      	str	r5, [r4, #36]	@ 0x24
 800170a:	6163      	str	r3, [r4, #20]
 800170c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001710:	e9c4 5201 	strd	r5, r2, [r4, #4]
 8001714:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001718:	6223      	str	r3, [r4, #32]
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 800171a:	4b15      	ldr	r3, [pc, #84]	@ (8001770 <BSP_SDRAM_MspInit+0x174>)
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800171c:	6122      	str	r2, [r4, #16]
 800171e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8001722:	6023      	str	r3, [r4, #0]
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8001724:	61a2      	str	r2, [r4, #24]
 8001726:	2203      	movs	r2, #3
 8001728:	e9c4 550b 	strd	r5, r5, [r4, #44]	@ 0x2c
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800172c:	6334      	str	r4, [r6, #48]	@ 0x30
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800172e:	62a2      	str	r2, [r4, #40]	@ 0x28
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8001730:	63a6      	str	r6, [r4, #56]	@ 0x38
  HAL_DMA_DeInit(&dma_handle);
 8001732:	f000 f9cd 	bl	8001ad0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8001736:	4620      	mov	r0, r4
 8001738:	f000 f92e 	bl	8001998 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 5, 0);
 800173c:	462a      	mov	r2, r5
 800173e:	2105      	movs	r1, #5
 8001740:	2038      	movs	r0, #56	@ 0x38
 8001742:	f000 f8c9 	bl	80018d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8001746:	2038      	movs	r0, #56	@ 0x38
 8001748:	f000 f902 	bl	8001950 <HAL_NVIC_EnableIRQ>
}
 800174c:	b00e      	add	sp, #56	@ 0x38
 800174e:	bd70      	pop	{r4, r5, r6, pc}
 8001750:	40023800 	.word	0x40023800
 8001754:	20000880 	.word	0x20000880
 8001758:	40020800 	.word	0x40020800
 800175c:	40020c00 	.word	0x40020c00
 8001760:	40021000 	.word	0x40021000
 8001764:	40021400 	.word	0x40021400
 8001768:	40021800 	.word	0x40021800
 800176c:	40021c00 	.word	0x40021c00
 8001770:	40026410 	.word	0x40026410

08001774 <BSP_SDRAM_Init>:
{ 
 8001774:	b538      	push	{r3, r4, r5, lr}
  Timing.ExitSelfRefreshDelay = 7;
 8001776:	2207      	movs	r2, #7
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001778:	4c1a      	ldr	r4, [pc, #104]	@ (80017e4 <BSP_SDRAM_Init+0x70>)
  Timing.LoadToActiveDelay    = 2;
 800177a:	4d1b      	ldr	r5, [pc, #108]	@ (80017e8 <BSP_SDRAM_Init+0x74>)
  Timing.SelfRefreshTime      = 4;
 800177c:	2304      	movs	r3, #4
  Timing.LoadToActiveDelay    = 2;
 800177e:	2102      	movs	r1, #2
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001780:	481a      	ldr	r0, [pc, #104]	@ (80017ec <BSP_SDRAM_Init+0x78>)
  Timing.RowCycleDelay        = 7;
 8001782:	60ea      	str	r2, [r5, #12]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8001784:	60e3      	str	r3, [r4, #12]
  Timing.LoadToActiveDelay    = 2;
 8001786:	6029      	str	r1, [r5, #0]
  Timing.RCDDelay             = 2;
 8001788:	61a9      	str	r1, [r5, #24]
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 800178a:	2100      	movs	r1, #0
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 800178c:	6020      	str	r0, [r4, #0]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800178e:	4620      	mov	r0, r4
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001790:	61e1      	str	r1, [r4, #28]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8001792:	62a1      	str	r1, [r4, #40]	@ 0x28
  Timing.SelfRefreshTime      = 4;
 8001794:	e9c5 2301 	strd	r2, r3, [r5, #4]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8001798:	2210      	movs	r2, #16
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800179a:	2340      	movs	r3, #64	@ 0x40
 800179c:	e9c4 2304 	strd	r2, r3, [r4, #16]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80017a0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 80017a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80017a8:	6223      	str	r3, [r4, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80017aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 80017ae:	61a2      	str	r2, [r4, #24]
  Timing.WriteRecoveryTime    = 2;
 80017b0:	2202      	movs	r2, #2
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80017b2:	6263      	str	r3, [r4, #36]	@ 0x24
  Timing.WriteRecoveryTime    = 2;
 80017b4:	2302      	movs	r3, #2
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80017b6:	e9c4 1101 	strd	r1, r1, [r4, #4]
  Timing.WriteRecoveryTime    = 2;
 80017ba:	e9c5 2304 	strd	r2, r3, [r5, #16]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80017be:	f7ff ff1d 	bl	80015fc <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80017c2:	4629      	mov	r1, r5
 80017c4:	4620      	mov	r0, r4
 80017c6:	4c0a      	ldr	r4, [pc, #40]	@ (80017f0 <BSP_SDRAM_Init+0x7c>)
 80017c8:	f001 fbec 	bl	8002fa4 <HAL_SDRAM_Init>
 80017cc:	4603      	mov	r3, r0
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80017ce:	f240 6003 	movw	r0, #1539	@ 0x603
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80017d2:	3b00      	subs	r3, #0
 80017d4:	bf18      	it	ne
 80017d6:	2301      	movne	r3, #1
 80017d8:	7023      	strb	r3, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80017da:	f7ff fec3 	bl	8001564 <BSP_SDRAM_Initialization_sequence>
}
 80017de:	7820      	ldrb	r0, [r4, #0]
 80017e0:	bd38      	pop	{r3, r4, r5, pc}
 80017e2:	bf00      	nop
 80017e4:	20000910 	.word	0x20000910
 80017e8:	200008f0 	.word	0x200008f0
 80017ec:	a0000140 	.word	0xa0000140
 80017f0:	20000010 	.word	0x20000010

080017f4 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop

080017f8 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017f8:	490e      	ldr	r1, [pc, #56]	@ (8001834 <HAL_InitTick+0x3c>)
 80017fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001838 <HAL_InitTick+0x40>)
{
 8001800:	b510      	push	{r4, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001802:	7809      	ldrb	r1, [r1, #0]
{
 8001804:	4604      	mov	r4, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001806:	6812      	ldr	r2, [r2, #0]
 8001808:	fbb3 f3f1 	udiv	r3, r3, r1
 800180c:	fbb2 f0f3 	udiv	r0, r2, r3
 8001810:	f000 f8ac 	bl	800196c <HAL_SYSTICK_Config>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001814:	b908      	cbnz	r0, 800181a <HAL_InitTick+0x22>
 8001816:	2c0f      	cmp	r4, #15
 8001818:	d901      	bls.n	800181e <HAL_InitTick+0x26>
    return HAL_ERROR;
 800181a:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800181c:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800181e:	2200      	movs	r2, #0
 8001820:	4621      	mov	r1, r4
 8001822:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001826:	f000 f857 	bl	80018d8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800182a:	4b04      	ldr	r3, [pc, #16]	@ (800183c <HAL_InitTick+0x44>)
 800182c:	2000      	movs	r0, #0
 800182e:	601c      	str	r4, [r3, #0]
}
 8001830:	bd10      	pop	{r4, pc}
 8001832:	bf00      	nop
 8001834:	20000011 	.word	0x20000011
 8001838:	20000018 	.word	0x20000018
 800183c:	20000014 	.word	0x20000014

08001840 <HAL_Init>:
{
 8001840:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 8001842:	4b09      	ldr	r3, [pc, #36]	@ (8001868 <HAL_Init+0x28>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001844:	2003      	movs	r0, #3
   __HAL_FLASH_ART_ENABLE();
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800184c:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001854:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001856:	f000 f82d 	bl	80018b4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800185a:	2000      	movs	r0, #0
 800185c:	f7ff ffcc 	bl	80017f8 <HAL_InitTick>
  HAL_MspInit();
 8001860:	f7ff ffc8 	bl	80017f4 <HAL_MspInit>
}
 8001864:	2000      	movs	r0, #0
 8001866:	bd08      	pop	{r3, pc}
 8001868:	40023c00 	.word	0x40023c00

0800186c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800186c:	4a03      	ldr	r2, [pc, #12]	@ (800187c <HAL_IncTick+0x10>)
 800186e:	4b04      	ldr	r3, [pc, #16]	@ (8001880 <HAL_IncTick+0x14>)
 8001870:	6811      	ldr	r1, [r2, #0]
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	440b      	add	r3, r1
 8001876:	6013      	str	r3, [r2, #0]
}
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	20000944 	.word	0x20000944
 8001880:	20000011 	.word	0x20000011

08001884 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001884:	4b01      	ldr	r3, [pc, #4]	@ (800188c <HAL_GetTick+0x8>)
 8001886:	6818      	ldr	r0, [r3, #0]
}
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	20000944 	.word	0x20000944

08001890 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001890:	b538      	push	{r3, r4, r5, lr}
 8001892:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001894:	f7ff fff6 	bl	8001884 <HAL_GetTick>
 8001898:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800189a:	1c63      	adds	r3, r4, #1
 800189c:	d002      	beq.n	80018a4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800189e:	4b04      	ldr	r3, [pc, #16]	@ (80018b0 <HAL_Delay+0x20>)
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018a4:	f7ff ffee 	bl	8001884 <HAL_GetTick>
 80018a8:	1b40      	subs	r0, r0, r5
 80018aa:	42a0      	cmp	r0, r4
 80018ac:	d3fa      	bcc.n	80018a4 <HAL_Delay+0x14>
  {
  }
}
 80018ae:	bd38      	pop	{r3, r4, r5, pc}
 80018b0:	20000011 	.word	0x20000011

080018b4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018b4:	4906      	ldr	r1, [pc, #24]	@ (80018d0 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018b6:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018ba:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 80018bc:	4b05      	ldr	r3, [pc, #20]	@ (80018d4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018be:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018c0:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018c4:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018c8:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 80018ca:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80018cc:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80018ce:	4770      	bx	lr
 80018d0:	e000ed00 	.word	0xe000ed00
 80018d4:	05fa0000 	.word	0x05fa0000

080018d8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001944 <HAL_NVIC_SetPriority+0x6c>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018e0:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018e2:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018e6:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018ea:	f1be 0f04 	cmp.w	lr, #4
 80018ee:	bf28      	it	cs
 80018f0:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018f4:	f1bc 0f06 	cmp.w	ip, #6
 80018f8:	d91a      	bls.n	8001930 <HAL_NVIC_SetPriority+0x58>
 80018fa:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001902:	fa03 f30c 	lsl.w	r3, r3, ip
 8001906:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800190a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
  if ((int32_t)(IRQn) >= 0)
 800190e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001910:	fa03 f30e 	lsl.w	r3, r3, lr
 8001914:	ea21 0303 	bic.w	r3, r1, r3
 8001918:	fa03 f30c 	lsl.w	r3, r3, ip
 800191c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001920:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001924:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8001926:	db06      	blt.n	8001936 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001928:	4a07      	ldr	r2, [pc, #28]	@ (8001948 <HAL_NVIC_SetPriority+0x70>)
 800192a:	5413      	strb	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800192c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001930:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001932:	4694      	mov	ip, r2
 8001934:	e7e9      	b.n	800190a <HAL_NVIC_SetPriority+0x32>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001936:	f000 000f 	and.w	r0, r0, #15
 800193a:	4a04      	ldr	r2, [pc, #16]	@ (800194c <HAL_NVIC_SetPriority+0x74>)
 800193c:	5413      	strb	r3, [r2, r0]
 800193e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001942:	bf00      	nop
 8001944:	e000ed00 	.word	0xe000ed00
 8001948:	e000e400 	.word	0xe000e400
 800194c:	e000ed14 	.word	0xe000ed14

08001950 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001950:	2800      	cmp	r0, #0
 8001952:	db07      	blt.n	8001964 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001954:	2301      	movs	r3, #1
 8001956:	f000 011f 	and.w	r1, r0, #31
 800195a:	4a03      	ldr	r2, [pc, #12]	@ (8001968 <HAL_NVIC_EnableIRQ+0x18>)
 800195c:	0940      	lsrs	r0, r0, #5
 800195e:	408b      	lsls	r3, r1
 8001960:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	e000e100 	.word	0xe000e100

0800196c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800196c:	1e43      	subs	r3, r0, #1
 800196e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001972:	d301      	bcc.n	8001978 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001974:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001976:	4770      	bx	lr
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001978:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800197c:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800197e:	4905      	ldr	r1, [pc, #20]	@ (8001994 <HAL_SYSTICK_Config+0x28>)
 8001980:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001984:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001986:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001988:	f881 c023 	strb.w	ip, [r1, #35]	@ 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800198c:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800198e:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001998:	b538      	push	{r3, r4, r5, lr}
 800199a:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 800199c:	f7ff ff72 	bl	8001884 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80019a0:	2c00      	cmp	r4, #0
 80019a2:	d074      	beq.n	8001a8e <HAL_DMA_Init+0xf6>

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80019a4:	6823      	ldr	r3, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 80019a6:	2202      	movs	r2, #2
  __HAL_UNLOCK(hdma);
 80019a8:	2100      	movs	r1, #0
 80019aa:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 80019ac:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 80019b0:	f884 1034 	strb.w	r1, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	f022 0201 	bic.w	r2, r2, #1
 80019ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019bc:	e005      	b.n	80019ca <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019be:	f7ff ff61 	bl	8001884 <HAL_GetTick>
 80019c2:	1b43      	subs	r3, r0, r5
 80019c4:	2b05      	cmp	r3, #5
 80019c6:	d83e      	bhi.n	8001a46 <HAL_DMA_Init+0xae>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019c8:	6823      	ldr	r3, [r4, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	07d1      	lsls	r1, r2, #31
 80019ce:	d4f6      	bmi.n	80019be <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019d0:	e9d4 2501 	ldrd	r2, r5, [r4, #4]
 80019d4:	68e1      	ldr	r1, [r4, #12]
 80019d6:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019d8:	69a0      	ldr	r0, [r4, #24]
  tmp = hdma->Instance->CR;
 80019da:	681d      	ldr	r5, [r3, #0]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019dc:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019de:	6921      	ldr	r1, [r4, #16]
 80019e0:	430a      	orrs	r2, r1
 80019e2:	6961      	ldr	r1, [r4, #20]
 80019e4:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019e6:	69e1      	ldr	r1, [r4, #28]
 80019e8:	4302      	orrs	r2, r0
 80019ea:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019ec:	4934      	ldr	r1, [pc, #208]	@ (8001ac0 <HAL_DMA_Init+0x128>)
 80019ee:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80019f0:	6a25      	ldr	r5, [r4, #32]
 80019f2:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019f4:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019f6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80019f8:	2904      	cmp	r1, #4
 80019fa:	d02b      	beq.n	8001a54 <HAL_DMA_Init+0xbc>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80019fc:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80019fe:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a00:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a04:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a06:	b2da      	uxtb	r2, r3
  hdma->Instance->FCR = tmp;
 8001a08:	6159      	str	r1, [r3, #20]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a0a:	482e      	ldr	r0, [pc, #184]	@ (8001ac4 <HAL_DMA_Init+0x12c>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a0c:	f1a2 0110 	sub.w	r1, r2, #16
 8001a10:	4a2d      	ldr	r2, [pc, #180]	@ (8001ac8 <HAL_DMA_Init+0x130>)
 8001a12:	fba2 5201 	umull	r5, r2, r2, r1
  
  if (stream_number > 3U)
 8001a16:	295f      	cmp	r1, #95	@ 0x5f
  hdma->State = HAL_DMA_STATE_READY;
 8001a18:	f04f 0501 	mov.w	r5, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a1c:	f04f 0100 	mov.w	r1, #0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a20:	ea4f 1212 	mov.w	r2, r2, lsr #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a24:	5c80      	ldrb	r0, [r0, r2]
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a26:	4a29      	ldr	r2, [pc, #164]	@ (8001acc <HAL_DMA_Init+0x134>)
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a28:	65e0      	str	r0, [r4, #92]	@ 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a2a:	ea02 0203 	and.w	r2, r2, r3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a2e:	f04f 033f 	mov.w	r3, #63	@ 0x3f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a32:	bf88      	it	hi
 8001a34:	3204      	addhi	r2, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a36:	4083      	lsls	r3, r0
  return HAL_OK;
 8001a38:	4608      	mov	r0, r1
 8001a3a:	65a2      	str	r2, [r4, #88]	@ 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a3c:	6093      	str	r3, [r2, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a3e:	6561      	str	r1, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001a40:	f884 5035 	strb.w	r5, [r4, #53]	@ 0x35
}
 8001a44:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a48:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 8001a4a:	4618      	mov	r0, r3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a4c:	6562      	str	r2, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a4e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
}
 8001a52:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a54:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	@ 0x2c
 8001a58:	4329      	orrs	r1, r5
 8001a5a:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 8001a5c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
  hdma->Instance->CR = tmp;  
 8001a5e:	6019      	str	r1, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001a60:	6959      	ldr	r1, [r3, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a62:	f021 0107 	bic.w	r1, r1, #7
 8001a66:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 8001a68:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a6c:	2d00      	cmp	r5, #0
 8001a6e:	d0ca      	beq.n	8001a06 <HAL_DMA_Init+0x6e>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a70:	b178      	cbz	r0, 8001a92 <HAL_DMA_Init+0xfa>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a72:	f5b0 5f00 	cmp.w	r0, #8192	@ 0x2000
 8001a76:	d016      	beq.n	8001aa6 <HAL_DMA_Init+0x10e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a78:	2a02      	cmp	r2, #2
 8001a7a:	d903      	bls.n	8001a84 <HAL_DMA_Init+0xec>
 8001a7c:	2a03      	cmp	r2, #3
 8001a7e:	d1c2      	bne.n	8001a06 <HAL_DMA_Init+0x6e>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a80:	01ea      	lsls	r2, r5, #7
 8001a82:	d5c0      	bpl.n	8001a06 <HAL_DMA_Init+0x6e>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a84:	2240      	movs	r2, #64	@ 0x40
        hdma->State = HAL_DMA_STATE_READY;
 8001a86:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a88:	6562      	str	r2, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001a8a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_ERROR;
 8001a8e:	2001      	movs	r0, #1
}
 8001a90:	bd38      	pop	{r3, r4, r5, pc}
    switch (tmp)
 8001a92:	2a01      	cmp	r2, #1
 8001a94:	d003      	beq.n	8001a9e <HAL_DMA_Init+0x106>
 8001a96:	f032 0202 	bics.w	r2, r2, #2
 8001a9a:	d1b4      	bne.n	8001a06 <HAL_DMA_Init+0x6e>
 8001a9c:	e7f0      	b.n	8001a80 <HAL_DMA_Init+0xe8>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a9e:	f1b5 7fc0 	cmp.w	r5, #25165824	@ 0x1800000
 8001aa2:	d1b0      	bne.n	8001a06 <HAL_DMA_Init+0x6e>
 8001aa4:	e7ee      	b.n	8001a84 <HAL_DMA_Init+0xec>
    switch (tmp)
 8001aa6:	2a03      	cmp	r2, #3
 8001aa8:	d8ad      	bhi.n	8001a06 <HAL_DMA_Init+0x6e>
 8001aaa:	a001      	add	r0, pc, #4	@ (adr r0, 8001ab0 <HAL_DMA_Init+0x118>)
 8001aac:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8001ab0:	08001a85 	.word	0x08001a85
 8001ab4:	08001a81 	.word	0x08001a81
 8001ab8:	08001a85 	.word	0x08001a85
 8001abc:	08001a9f 	.word	0x08001a9f
 8001ac0:	f010803f 	.word	0xf010803f
 8001ac4:	0800da10 	.word	0x0800da10
 8001ac8:	aaaaaaab 	.word	0xaaaaaaab
 8001acc:	fffffc00 	.word	0xfffffc00

08001ad0 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 8001ad0:	2800      	cmp	r0, #0
 8001ad2:	d039      	beq.n	8001b48 <HAL_DMA_DeInit+0x78>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001ad4:	f890 2035 	ldrb.w	r2, [r0, #53]	@ 0x35
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2a02      	cmp	r2, #2
 8001adc:	b2d0      	uxtb	r0, r2
 8001ade:	d035      	beq.n	8001b4c <HAL_DMA_DeInit+0x7c>
  __HAL_DMA_DISABLE(hdma);
 8001ae0:	681a      	ldr	r2, [r3, #0]
  hdma->Instance->CR   = 0U;
 8001ae2:	2000      	movs	r0, #0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ae4:	491a      	ldr	r1, [pc, #104]	@ (8001b50 <HAL_DMA_DeInit+0x80>)
{
 8001ae6:	b430      	push	{r4, r5}
  __HAL_DMA_DISABLE(hdma);
 8001ae8:	6814      	ldr	r4, [r2, #0]
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001aea:	4d1a      	ldr	r5, [pc, #104]	@ (8001b54 <HAL_DMA_DeInit+0x84>)
  __HAL_DMA_DISABLE(hdma);
 8001aec:	f024 0401 	bic.w	r4, r4, #1
 8001af0:	6014      	str	r4, [r2, #0]
  hdma->Instance->CR   = 0U;
 8001af2:	6010      	str	r0, [r2, #0]
  hdma->Instance->NDTR = 0U;
 8001af4:	6050      	str	r0, [r2, #4]
  hdma->Instance->PAR  = 0U;
 8001af6:	6090      	str	r0, [r2, #8]
  hdma->Instance->M0AR = 0U;
 8001af8:	60d0      	str	r0, [r2, #12]
  hdma->Instance->M1AR = 0U;
 8001afa:	6110      	str	r0, [r2, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8001afc:	2021      	movs	r0, #33	@ 0x21
 8001afe:	6150      	str	r0, [r2, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b00:	b2d0      	uxtb	r0, r2
 8001b02:	3810      	subs	r0, #16
 8001b04:	fba1 4100 	umull	r4, r1, r1, r0
  if (stream_number > 3U)
 8001b08:	285f      	cmp	r0, #95	@ 0x5f
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b0a:	f04f 003f 	mov.w	r0, #63	@ 0x3f
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b0e:	ea4f 1111 	mov.w	r1, r1, lsr #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b12:	5c6c      	ldrb	r4, [r5, r1]
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b14:	4910      	ldr	r1, [pc, #64]	@ (8001b58 <HAL_DMA_DeInit+0x88>)
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b16:	fa00 f004 	lsl.w	r0, r0, r4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b1a:	65dc      	str	r4, [r3, #92]	@ 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b1c:	ea01 0102 	and.w	r1, r1, r2
  hdma->XferCpltCallback = NULL;
 8001b20:	f04f 0200 	mov.w	r2, #0
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b24:	bf88      	it	hi
 8001b26:	3104      	addhi	r1, #4
 8001b28:	6599      	str	r1, [r3, #88]	@ 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b2a:	6088      	str	r0, [r1, #8]
  return HAL_OK;
 8001b2c:	4610      	mov	r0, r2
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b2e:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_RESET;
 8001b30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8001b34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hdma->XferHalfCpltCallback = NULL;
 8001b38:	e9c3 220f 	strd	r2, r2, [r3, #60]	@ 0x3c
}
 8001b3c:	bc30      	pop	{r4, r5}
  hdma->XferM1HalfCpltCallback = NULL;
 8001b3e:	e9c3 2211 	strd	r2, r2, [r3, #68]	@ 0x44
  hdma->XferErrorCallback = NULL;
 8001b42:	e9c3 2213 	strd	r2, r2, [r3, #76]	@ 0x4c
}
 8001b46:	4770      	bx	lr
    return HAL_ERROR;
 8001b48:	2001      	movs	r0, #1
 8001b4a:	4770      	bx	lr
}
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	aaaaaaab 	.word	0xaaaaaaab
 8001b54:	0800da10 	.word	0x0800da10
 8001b58:	fffffc00 	.word	0xfffffc00

08001b5c <HAL_DMA2D_MspInit>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop

08001b60 <HAL_DMA2D_Init>:
  if(hdma2d == NULL)
 8001b60:	b338      	cbz	r0, 8001bb2 <HAL_DMA2D_Init+0x52>
{ 
 8001b62:	b538      	push	{r3, r4, r5, lr}
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001b64:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 8001b68:	4604      	mov	r4, r0
 8001b6a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001b6e:	b1db      	cbz	r3, 8001ba8 <HAL_DMA2D_Init+0x48>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001b70:	6823      	ldr	r3, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8001b72:	2102      	movs	r1, #2
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 8001b74:	68e5      	ldr	r5, [r4, #12]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8001b76:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001b7a:	6819      	ldr	r1, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001b7c:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001b80:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 8001b84:	4311      	orrs	r1, r2
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 8001b86:	4a0c      	ldr	r2, [pc, #48]	@ (8001bb8 <HAL_DMA2D_Init+0x58>)
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001b88:	6019      	str	r1, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001b8a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001b8c:	f021 0107 	bic.w	r1, r1, #7
 8001b90:	4301      	orrs	r1, r0
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001b92:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001b94:	6359      	str	r1, [r3, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 8001b96:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8001b98:	400a      	ands	r2, r1
 8001b9a:	432a      	orrs	r2, r5
 8001b9c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001b9e:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001ba0:	63e0      	str	r0, [r4, #60]	@ 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001ba2:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
}
 8001ba6:	bd38      	pop	{r3, r4, r5, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 8001ba8:	f880 2038 	strb.w	r2, [r0, #56]	@ 0x38
    HAL_DMA2D_MspInit(hdma2d);
 8001bac:	f7ff ffd6 	bl	8001b5c <HAL_DMA2D_MspInit>
 8001bb0:	e7de      	b.n	8001b70 <HAL_DMA2D_Init+0x10>
     return HAL_ERROR;
 8001bb2:	2001      	movs	r0, #1
}
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	ffffc000 	.word	0xffffc000

08001bbc <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8001bbc:	b470      	push	{r4, r5, r6}
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));
  
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001bbe:	f890 4038 	ldrb.w	r4, [r0, #56]	@ 0x38
 8001bc2:	2c01      	cmp	r4, #1
 8001bc4:	d037      	beq.n	8001c36 <HAL_DMA2D_Start+0x7a>
 8001bc6:	2401      	movs	r4, #1
  uint32_t tmp2 = 0;
  uint32_t tmp3 = 0;
  uint32_t tmp4 = 0;
    
  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos))); 
 8001bc8:	9d03      	ldr	r5, [sp, #12]
  __HAL_LOCK(hdma2d);
 8001bca:	f880 4038 	strb.w	r4, [r0, #56]	@ 0x38
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001bce:	2402      	movs	r4, #2
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos))); 
 8001bd0:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001bd4:	f880 4039 	strb.w	r4, [r0, #57]	@ 0x39
  
  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 
  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001bd8:	e9d0 4600 	ldrd	r4, r6, [r0]
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos))); 
 8001bdc:	6c65      	ldr	r5, [r4, #68]	@ 0x44
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001bde:	f5b6 3f40 	cmp.w	r6, #196608	@ 0x30000
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos))); 
 8001be2:	f005 4c40 	and.w	ip, r5, #3221225472	@ 0xc0000000
 8001be6:	ea43 030c 	orr.w	r3, r3, ip
 8001bea:	6463      	str	r3, [r4, #68]	@ 0x44
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8001bec:	63e2      	str	r2, [r4, #60]	@ 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001bee:	d007      	beq.n	8001c00 <HAL_DMA2D_Start+0x44>
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);    
  } 
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8001bf0:	60e1      	str	r1, [r4, #12]
  __HAL_DMA2D_ENABLE(hdma2d);
 8001bf2:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 8001bf4:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 8001bf6:	f043 0301 	orr.w	r3, r3, #1
 8001bfa:	6023      	str	r3, [r4, #0]
}
 8001bfc:	bc70      	pop	{r4, r5, r6}
 8001bfe:	4770      	bx	lr
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8001c00:	6883      	ldr	r3, [r0, #8]
 8001c02:	b1b3      	cbz	r3, 8001c32 <HAL_DMA2D_Start+0x76>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d024      	beq.n	8001c52 <HAL_DMA2D_Start+0x96>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8001c08:	2b02      	cmp	r3, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8001c0a:	f401 027f 	and.w	r2, r1, #16711680	@ 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8001c0e:	f401 457f 	and.w	r5, r1, #65280	@ 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8001c12:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8001c14:	d020      	beq.n	8001c58 <HAL_DMA2D_Start+0x9c>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8001c16:	2b03      	cmp	r3, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8001c18:	f001 417f 	and.w	r1, r1, #4278190080	@ 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8001c1c:	d00e      	beq.n	8001c3c <HAL_DMA2D_Start+0x80>
      tmp2 = (tmp2 >> 20);
 8001c1e:	0d13      	lsrs	r3, r2, #20
      tmp3 = (tmp3 >> 12);
 8001c20:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4) | (tmp2 << 8) | (tmp1 << 12) | tmp4);
 8001c22:	021b      	lsls	r3, r3, #8
      tmp1 = (tmp1 >> 28);
 8001c24:	0f09      	lsrs	r1, r1, #28
      tmp  = ((tmp3 << 4) | (tmp2 << 8) | (tmp1 << 12) | tmp4);
 8001c26:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8001c2a:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8001c2e:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);    
 8001c32:	63a1      	str	r1, [r4, #56]	@ 0x38
 8001c34:	e7dd      	b.n	8001bf2 <HAL_DMA2D_Start+0x36>
  __HAL_LOCK(hdma2d);
 8001c36:	2002      	movs	r0, #2
}
 8001c38:	bc70      	pop	{r4, r5, r6}
 8001c3a:	4770      	bx	lr
      tmp2 = (tmp2 >> 19);
 8001c3c:	0cd3      	lsrs	r3, r2, #19
      tmp3 = (tmp3 >> 11);
 8001c3e:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5) | (tmp2 << 10) | (tmp1 << 15) | tmp4);    
 8001c40:	029b      	lsls	r3, r3, #10
      tmp1 = (tmp1 >> 31);
 8001c42:	0fc9      	lsrs	r1, r1, #31
      tmp  = ((tmp3 << 5) | (tmp2 << 10) | (tmp1 << 15) | tmp4);    
 8001c44:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 8001c48:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 8001c4c:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 8001c50:	e7ef      	b.n	8001c32 <HAL_DMA2D_Start+0x76>
      tmp = (tmp3 | tmp2 | tmp4);  
 8001c52:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8001c56:	e7ec      	b.n	8001c32 <HAL_DMA2D_Start+0x76>
      tmp2 = (tmp2 >> 19);
 8001c58:	0cd3      	lsrs	r3, r2, #19
      tmp3 = (tmp3 >> 10);
 8001c5a:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5) | (tmp2 << 11) | tmp4); 
 8001c5c:	02db      	lsls	r3, r3, #11
 8001c5e:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 8001c62:	ea43 01d0 	orr.w	r1, r3, r0, lsr #3
 8001c66:	e7e4      	b.n	8001c32 <HAL_DMA2D_Start+0x76>

08001c68 <HAL_DMA2D_PollForTransfer>:
{
 8001c68:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0;  
 8001c6a:	2300      	movs	r3, #0
{
 8001c6c:	b082      	sub	sp, #8
 8001c6e:	460d      	mov	r5, r1
 8001c70:	4604      	mov	r4, r0
  __IO uint32_t isrflags = 0x0;  
 8001c72:	9301      	str	r3, [sp, #4]
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 8001c74:	6803      	ldr	r3, [r0, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	07d1      	lsls	r1, r2, #31
 8001c7a:	d432      	bmi.n	8001ce2 <HAL_DMA2D_PollForTransfer+0x7a>
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8001c7c:	69da      	ldr	r2, [r3, #28]
 8001c7e:	0690      	lsls	r0, r2, #26
 8001c80:	d402      	bmi.n	8001c88 <HAL_DMA2D_PollForTransfer+0x20>
      ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) != RESET))
 8001c82:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8001c84:	0691      	lsls	r1, r2, #26
 8001c86:	d50f      	bpl.n	8001ca8 <HAL_DMA2D_PollForTransfer+0x40>
    tickstart = HAL_GetTick();
 8001c88:	f7ff fdfc 	bl	8001884 <HAL_GetTick>
 8001c8c:	1c6a      	adds	r2, r5, #1
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8001c8e:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001c90:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8001c92:	d006      	beq.n	8001ca2 <HAL_DMA2D_PollForTransfer+0x3a>
 8001c94:	e021      	b.n	8001cda <HAL_DMA2D_PollForTransfer+0x72>
      isrflags = READ_REG(hdma2d->Instance->ISR);   
 8001c96:	685a      	ldr	r2, [r3, #4]
 8001c98:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)        
 8001c9a:	9a01      	ldr	r2, [sp, #4]
 8001c9c:	f012 0f29 	tst.w	r2, #41	@ 0x29
 8001ca0:	d142      	bne.n	8001d28 <HAL_DMA2D_PollForTransfer+0xc0>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8001ca2:	685a      	ldr	r2, [r3, #4]
 8001ca4:	06d1      	lsls	r1, r2, #27
 8001ca6:	d5f6      	bpl.n	8001c96 <HAL_DMA2D_PollForTransfer+0x2e>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8001ca8:	2112      	movs	r1, #18
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001caa:	2201      	movs	r2, #1
  return HAL_OK;
 8001cac:	2000      	movs	r0, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8001cae:	6099      	str	r1, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001cb0:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
        __HAL_UNLOCK(hdma2d);
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
}
 8001cba:	b002      	add	sp, #8
 8001cbc:	bd70      	pop	{r4, r5, r6, pc}
      isrflags = READ_REG(hdma2d->Instance->ISR);   
 8001cbe:	685a      	ldr	r2, [r3, #4]
 8001cc0:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)        
 8001cc2:	9a01      	ldr	r2, [sp, #4]
 8001cc4:	f012 0f29 	tst.w	r2, #41	@ 0x29
 8001cc8:	d12e      	bne.n	8001d28 <HAL_DMA2D_PollForTransfer+0xc0>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001cca:	2d00      	cmp	r5, #0
 8001ccc:	d05e      	beq.n	8001d8c <HAL_DMA2D_PollForTransfer+0x124>
 8001cce:	f7ff fdd9 	bl	8001884 <HAL_GetTick>
 8001cd2:	1b80      	subs	r0, r0, r6
 8001cd4:	42a8      	cmp	r0, r5
 8001cd6:	d859      	bhi.n	8001d8c <HAL_DMA2D_PollForTransfer+0x124>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8001cd8:	6823      	ldr	r3, [r4, #0]
 8001cda:	685a      	ldr	r2, [r3, #4]
 8001cdc:	06d2      	lsls	r2, r2, #27
 8001cde:	d5ee      	bpl.n	8001cbe <HAL_DMA2D_PollForTransfer+0x56>
 8001ce0:	e7e2      	b.n	8001ca8 <HAL_DMA2D_PollForTransfer+0x40>
   tickstart = HAL_GetTick();
 8001ce2:	f7ff fdcf 	bl	8001884 <HAL_GetTick>
 8001ce6:	1c6a      	adds	r2, r5, #1
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 8001ce8:	6823      	ldr	r3, [r4, #0]
   tickstart = HAL_GetTick();
 8001cea:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 8001cec:	d13f      	bne.n	8001d6e <HAL_DMA2D_PollForTransfer+0x106>
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	0791      	lsls	r1, r2, #30
 8001cf2:	d4c3      	bmi.n	8001c7c <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR); 
 8001cf4:	685a      	ldr	r2, [r3, #4]
 8001cf6:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)
 8001cf8:	9a01      	ldr	r2, [sp, #4]
 8001cfa:	f012 0f21 	tst.w	r2, #33	@ 0x21
 8001cfe:	d0f6      	beq.n	8001cee <HAL_DMA2D_PollForTransfer+0x86>
        if ((isrflags & DMA2D_FLAG_CE) != RESET)
 8001d00:	9a01      	ldr	r2, [sp, #4]
 8001d02:	0695      	lsls	r5, r2, #26
 8001d04:	d503      	bpl.n	8001d0e <HAL_DMA2D_PollForTransfer+0xa6>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8001d06:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8001d08:	f042 0202 	orr.w	r2, r2, #2
 8001d0c:	63e2      	str	r2, [r4, #60]	@ 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8001d0e:	9a01      	ldr	r2, [sp, #4]
 8001d10:	07d0      	lsls	r0, r2, #31
 8001d12:	d503      	bpl.n	8001d1c <HAL_DMA2D_PollForTransfer+0xb4>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 8001d14:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8001d16:	f042 0201 	orr.w	r2, r2, #1
 8001d1a:	63e2      	str	r2, [r4, #60]	@ 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001d1c:	2121      	movs	r1, #33	@ 0x21
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001d1e:	2204      	movs	r2, #4
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001d20:	6099      	str	r1, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001d22:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
        return HAL_ERROR;
 8001d26:	e015      	b.n	8001d54 <HAL_DMA2D_PollForTransfer+0xec>
        if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 8001d28:	9a01      	ldr	r2, [sp, #4]
 8001d2a:	0716      	lsls	r6, r2, #28
 8001d2c:	d503      	bpl.n	8001d36 <HAL_DMA2D_PollForTransfer+0xce>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;        
 8001d2e:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8001d30:	f042 0204 	orr.w	r2, r2, #4
 8001d34:	63e2      	str	r2, [r4, #60]	@ 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != RESET)             
 8001d36:	9a01      	ldr	r2, [sp, #4]
 8001d38:	0695      	lsls	r5, r2, #26
 8001d3a:	d503      	bpl.n	8001d44 <HAL_DMA2D_PollForTransfer+0xdc>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8001d3c:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8001d3e:	f042 0202 	orr.w	r2, r2, #2
 8001d42:	63e2      	str	r2, [r4, #60]	@ 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8001d44:	9a01      	ldr	r2, [sp, #4]
 8001d46:	07d0      	lsls	r0, r2, #31
 8001d48:	d41b      	bmi.n	8001d82 <HAL_DMA2D_PollForTransfer+0x11a>
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001d4a:	2129      	movs	r1, #41	@ 0x29
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8001d4c:	2204      	movs	r2, #4
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001d4e:	6099      	str	r1, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8001d50:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
        return HAL_ERROR;
 8001d54:	2001      	movs	r0, #1
        __HAL_UNLOCK(hdma2d);
 8001d56:	2300      	movs	r3, #0
 8001d58:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
}
 8001d5c:	b002      	add	sp, #8
 8001d5e:	bd70      	pop	{r4, r5, r6, pc}
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001d60:	b1a5      	cbz	r5, 8001d8c <HAL_DMA2D_PollForTransfer+0x124>
 8001d62:	f7ff fd8f 	bl	8001884 <HAL_GetTick>
 8001d66:	1b80      	subs	r0, r0, r6
 8001d68:	42a8      	cmp	r0, r5
 8001d6a:	d80f      	bhi.n	8001d8c <HAL_DMA2D_PollForTransfer+0x124>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 8001d6c:	6823      	ldr	r3, [r4, #0]
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	0792      	lsls	r2, r2, #30
 8001d72:	d483      	bmi.n	8001c7c <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR); 
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)
 8001d78:	9a01      	ldr	r2, [sp, #4]
 8001d7a:	f012 0f21 	tst.w	r2, #33	@ 0x21
 8001d7e:	d0ef      	beq.n	8001d60 <HAL_DMA2D_PollForTransfer+0xf8>
 8001d80:	e7be      	b.n	8001d00 <HAL_DMA2D_PollForTransfer+0x98>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 8001d82:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8001d84:	f042 0201 	orr.w	r2, r2, #1
 8001d88:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8001d8a:	e7de      	b.n	8001d4a <HAL_DMA2D_PollForTransfer+0xe2>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001d8c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8001d8e:	2203      	movs	r2, #3
          return HAL_TIMEOUT;
 8001d90:	2003      	movs	r0, #3
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001d92:	f043 0320 	orr.w	r3, r3, #32
 8001d96:	63e3      	str	r3, [r4, #60]	@ 0x3c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8001d98:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
          return HAL_TIMEOUT;
 8001d9c:	e78a      	b.n	8001cb4 <HAL_DMA2D_PollForTransfer+0x4c>
 8001d9e:	bf00      	nop

08001da0 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 8001da0:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 8001da4:	2a01      	cmp	r2, #1
 8001da6:	d04d      	beq.n	8001e44 <HAL_DMA2D_ConfigLayer+0xa4>
 8001da8:	4603      	mov	r3, r0
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001daa:	eb00 1c01 	add.w	ip, r0, r1, lsl #4
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8001dae:	2202      	movs	r2, #2
  __HAL_LOCK(hdma2d);
 8001db0:	2001      	movs	r0, #1
{ 
 8001db2:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma2d);
 8001db4:	f883 0038 	strb.w	r0, [r3, #56]	@ 0x38
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8001db8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001dbc:	681c      	ldr	r4, [r3, #0]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001dbe:	e9dc 0207 	ldrd	r0, r2, [ip, #28]
 8001dc2:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001dc6:	3809      	subs	r0, #9
 8001dc8:	2801      	cmp	r0, #1
 8001dca:	d91d      	bls.n	8001e08 <HAL_DMA2D_ConfigLayer+0x68>
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001dcc:	f8dc 0024 	ldr.w	r0, [ip, #36]	@ 0x24
 8001dd0:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
  if(LayerIdx == 0)
 8001dd4:	b181      	cbz	r1, 8001df8 <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001dd6:	69e5      	ldr	r5, [r4, #28]
 8001dd8:	491b      	ldr	r1, [pc, #108]	@ (8001e48 <HAL_DMA2D_ConfigLayer+0xa8>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 8001dda:	f8dc 0018 	ldr.w	r0, [ip, #24]
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001dde:	4029      	ands	r1, r5
 8001de0:	4311      	orrs	r1, r2
 8001de2:	61e1      	str	r1, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 8001de4:	6120      	str	r0, [r4, #16]
  __HAL_UNLOCK(hdma2d);  
 8001de6:	2200      	movs	r2, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001de8:	2101      	movs	r1, #1
  return HAL_OK;
 8001dea:	4610      	mov	r0, r2
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001dec:	f883 1039 	strb.w	r1, [r3, #57]	@ 0x39
  __HAL_UNLOCK(hdma2d);  
 8001df0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
}
 8001df4:	bc70      	pop	{r4, r5, r6}
 8001df6:	4770      	bx	lr
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001df8:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8001dfa:	4913      	ldr	r1, [pc, #76]	@ (8001e48 <HAL_DMA2D_ConfigLayer+0xa8>)
 8001dfc:	4001      	ands	r1, r0
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001dfe:	6998      	ldr	r0, [r3, #24]
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001e00:	4311      	orrs	r1, r2
 8001e02:	6261      	str	r1, [r4, #36]	@ 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001e04:	61a0      	str	r0, [r4, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001e06:	e7ee      	b.n	8001de6 <HAL_DMA2D_ConfigLayer+0x46>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001e08:	f8dc 5024 	ldr.w	r5, [ip, #36]	@ 0x24
 8001e0c:	f005 407f 	and.w	r0, r5, #4278190080	@ 0xff000000
 8001e10:	4302      	orrs	r2, r0
  if(LayerIdx == 0)
 8001e12:	b959      	cbnz	r1, 8001e2c <HAL_DMA2D_ConfigLayer+0x8c>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001e14:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8001e16:	490c      	ldr	r1, [pc, #48]	@ (8001e48 <HAL_DMA2D_ConfigLayer+0xa8>)
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001e18:	699d      	ldr	r5, [r3, #24]
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001e1a:	4001      	ands	r1, r0
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8001e1c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001e1e:	4311      	orrs	r1, r2
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8001e20:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001e24:	6261      	str	r1, [r4, #36]	@ 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001e26:	61a5      	str	r5, [r4, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8001e28:	62a0      	str	r0, [r4, #40]	@ 0x28
 8001e2a:	e7dc      	b.n	8001de6 <HAL_DMA2D_ConfigLayer+0x46>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001e2c:	69e6      	ldr	r6, [r4, #28]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));      
 8001e2e:	f025 457f 	bic.w	r5, r5, #4278190080	@ 0xff000000
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001e32:	4905      	ldr	r1, [pc, #20]	@ (8001e48 <HAL_DMA2D_ConfigLayer+0xa8>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 8001e34:	f8dc 0018 	ldr.w	r0, [ip, #24]
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001e38:	4031      	ands	r1, r6
 8001e3a:	4311      	orrs	r1, r2
 8001e3c:	61e1      	str	r1, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 8001e3e:	6120      	str	r0, [r4, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));      
 8001e40:	6225      	str	r5, [r4, #32]
 8001e42:	e7d0      	b.n	8001de6 <HAL_DMA2D_ConfigLayer+0x46>
  __HAL_LOCK(hdma2d);
 8001e44:	2002      	movs	r0, #2
}
 8001e46:	4770      	bx	lr
 8001e48:	00fcfff0 	.word	0x00fcfff0

08001e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e50:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e52:	2300      	movs	r3, #0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001e54:	f04f 0801 	mov.w	r8, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e58:	680d      	ldr	r5, [r1, #0]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e5a:	4f93      	ldr	r7, [pc, #588]	@ (80020a8 <HAL_GPIO_Init+0x25c>)
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001e5c:	9101      	str	r1, [sp, #4]
 8001e5e:	e003      	b.n	8001e68 <HAL_GPIO_Init+0x1c>
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e60:	3301      	adds	r3, #1
 8001e62:	2b10      	cmp	r3, #16
 8001e64:	f000 80ca 	beq.w	8001ffc <HAL_GPIO_Init+0x1b0>
    ioposition = ((uint32_t)0x01) << position;
 8001e68:	fa08 f203 	lsl.w	r2, r8, r3
    if(iocurrent == ioposition)
 8001e6c:	ea32 0405 	bics.w	r4, r2, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e70:	ea02 0605 	and.w	r6, r2, r5
    if(iocurrent == ioposition)
 8001e74:	d1f4      	bne.n	8001e60 <HAL_GPIO_Init+0x14>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e76:	9901      	ldr	r1, [sp, #4]
 8001e78:	684c      	ldr	r4, [r1, #4]
 8001e7a:	f024 0c10 	bic.w	ip, r4, #16
 8001e7e:	f1bc 0f02 	cmp.w	ip, #2
 8001e82:	f040 80be 	bne.w	8002002 <HAL_GPIO_Init+0x1b6>
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001e86:	f003 0c07 	and.w	ip, r3, #7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001e8a:	6909      	ldr	r1, [r1, #16]
        temp = GPIOx->AFR[position >> 3];
 8001e8c:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001e90:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001e94:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001e98:	fa01 fa0c 	lsl.w	sl, r1, ip
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001e9c:	210f      	movs	r1, #15
        temp = GPIOx->AFR[position >> 3];
 8001e9e:	f8de 9020 	ldr.w	r9, [lr, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001ea2:	fa01 fc0c 	lsl.w	ip, r1, ip
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001ea6:	2103      	movs	r1, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001ea8:	ea29 090c 	bic.w	r9, r9, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001eac:	ea4a 0909 	orr.w	r9, sl, r9
        GPIOx->AFR[position >> 3] = temp;
 8001eb0:	f8ce 9020 	str.w	r9, [lr, #32]
      temp = GPIOx->MODER;
 8001eb4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001eb8:	f8d0 a000 	ldr.w	sl, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001ebc:	f004 0903 	and.w	r9, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001ec0:	fa01 fc0e 	lsl.w	ip, r1, lr
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001ec4:	fa09 f90e 	lsl.w	r9, r9, lr
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001ec8:	ea2a 0a0c 	bic.w	sl, sl, ip
 8001ecc:	ea6f 0c0c 	mvn.w	ip, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001ed0:	ea49 090a 	orr.w	r9, r9, sl
      GPIOx->MODER = temp;
 8001ed4:	f8c0 9000 	str.w	r9, [r0]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001ed8:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR; 
 8001eda:	f8d0 a008 	ldr.w	sl, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001ede:	68c9      	ldr	r1, [r1, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001ee0:	ea0a 0a0c 	and.w	sl, sl, ip
        temp |= (GPIO_Init->Speed << (position * 2));
 8001ee4:	fa01 f90e 	lsl.w	r9, r1, lr
 8001ee8:	ea49 090a 	orr.w	r9, r9, sl
        GPIOx->OSPEEDR = temp;
 8001eec:	f8c0 9008 	str.w	r9, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001ef0:	f3c4 1900 	ubfx	r9, r4, #4, #1
        temp = GPIOx->OTYPER;
 8001ef4:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001ef8:	fa09 f903 	lsl.w	r9, r9, r3
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001efc:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001f00:	ea49 0202 	orr.w	r2, r9, r2
        GPIOx->OTYPER = temp;
 8001f04:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8001f06:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001f08:	ea02 0c0c 	and.w	ip, r2, ip
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001f0c:	9a01      	ldr	r2, [sp, #4]
 8001f0e:	6892      	ldr	r2, [r2, #8]
 8001f10:	fa02 f20e 	lsl.w	r2, r2, lr
 8001f14:	ea42 020c 	orr.w	r2, r2, ip
      GPIOx->PUPDR = temp;
 8001f18:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f1a:	00e2      	lsls	r2, r4, #3
 8001f1c:	d5a0      	bpl.n	8001e60 <HAL_GPIO_Init+0x14>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f1e:	4a63      	ldr	r2, [pc, #396]	@ (80020ac <HAL_GPIO_Init+0x260>)
 8001f20:	f023 0c03 	bic.w	ip, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001f24:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f28:	4611      	mov	r1, r2
 8001f2a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001f2c:	f10c 4c80 	add.w	ip, ip, #1073741824	@ 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001f30:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f34:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001f38:	f50c 3c9c 	add.w	ip, ip, #79872	@ 0x13800
 8001f3c:	644a      	str	r2, [r1, #68]	@ 0x44
 8001f3e:	6c4a      	ldr	r2, [r1, #68]	@ 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001f40:	210f      	movs	r1, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f42:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001f46:	fa01 f90e 	lsl.w	r9, r1, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f4a:	4959      	ldr	r1, [pc, #356]	@ (80020b0 <HAL_GPIO_Init+0x264>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f4c:	9203      	str	r2, [sp, #12]
 8001f4e:	9a03      	ldr	r2, [sp, #12]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f50:	4288      	cmp	r0, r1
        temp = SYSCFG->EXTICR[position >> 2];
 8001f52:	f8dc 2008 	ldr.w	r2, [ip, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001f56:	ea22 0209 	bic.w	r2, r2, r9
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f5a:	d02a      	beq.n	8001fb2 <HAL_GPIO_Init+0x166>
 8001f5c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8001f60:	4288      	cmp	r0, r1
 8001f62:	d068      	beq.n	8002036 <HAL_GPIO_Init+0x1ea>
 8001f64:	4953      	ldr	r1, [pc, #332]	@ (80020b4 <HAL_GPIO_Init+0x268>)
 8001f66:	4288      	cmp	r0, r1
 8001f68:	d06c      	beq.n	8002044 <HAL_GPIO_Init+0x1f8>
 8001f6a:	f8df 914c 	ldr.w	r9, [pc, #332]	@ 80020b8 <HAL_GPIO_Init+0x26c>
 8001f6e:	4548      	cmp	r0, r9
 8001f70:	d06f      	beq.n	8002052 <HAL_GPIO_Init+0x206>
 8001f72:	f8df 9148 	ldr.w	r9, [pc, #328]	@ 80020bc <HAL_GPIO_Init+0x270>
 8001f76:	4548      	cmp	r0, r9
 8001f78:	d072      	beq.n	8002060 <HAL_GPIO_Init+0x214>
 8001f7a:	f8df 9144 	ldr.w	r9, [pc, #324]	@ 80020c0 <HAL_GPIO_Init+0x274>
 8001f7e:	4548      	cmp	r0, r9
 8001f80:	d07c      	beq.n	800207c <HAL_GPIO_Init+0x230>
 8001f82:	f8df 9140 	ldr.w	r9, [pc, #320]	@ 80020c4 <HAL_GPIO_Init+0x278>
 8001f86:	4548      	cmp	r0, r9
 8001f88:	d07f      	beq.n	800208a <HAL_GPIO_Init+0x23e>
 8001f8a:	f8df 913c 	ldr.w	r9, [pc, #316]	@ 80020c8 <HAL_GPIO_Init+0x27c>
 8001f8e:	4548      	cmp	r0, r9
 8001f90:	d06d      	beq.n	800206e <HAL_GPIO_Init+0x222>
 8001f92:	f8df 9138 	ldr.w	r9, [pc, #312]	@ 80020cc <HAL_GPIO_Init+0x280>
 8001f96:	4548      	cmp	r0, r9
 8001f98:	d07e      	beq.n	8002098 <HAL_GPIO_Init+0x24c>
 8001f9a:	f8df 9134 	ldr.w	r9, [pc, #308]	@ 80020d0 <HAL_GPIO_Init+0x284>
 8001f9e:	4548      	cmp	r0, r9
 8001fa0:	bf0c      	ite	eq
 8001fa2:	f04f 0909 	moveq.w	r9, #9
 8001fa6:	f04f 090a 	movne.w	r9, #10
 8001faa:	fa09 fe0e 	lsl.w	lr, r9, lr
 8001fae:	ea42 020e 	orr.w	r2, r2, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8001fb2:	f8cc 2008 	str.w	r2, [ip, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fb6:	03e1      	lsls	r1, r4, #15
        temp = EXTI->IMR;
 8001fb8:	683a      	ldr	r2, [r7, #0]
        temp &= ~((uint32_t)iocurrent);
 8001fba:	ea6f 0c06 	mvn.w	ip, r6
  for(position = 0; position < GPIO_NUMBER; position++)
 8001fbe:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 8001fc2:	bf54      	ite	pl
 8001fc4:	ea0c 0202 	andpl.w	r2, ip, r2
        {
          temp |= iocurrent;
 8001fc8:	4332      	orrmi	r2, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fca:	03a1      	lsls	r1, r4, #14
        EXTI->IMR = temp;
 8001fcc:	603a      	str	r2, [r7, #0]
        temp = EXTI->EMR;
 8001fce:	687a      	ldr	r2, [r7, #4]
        temp &= ~((uint32_t)iocurrent);
 8001fd0:	bf54      	ite	pl
 8001fd2:	ea0c 0202 	andpl.w	r2, ip, r2
        {
          temp |= iocurrent;
 8001fd6:	4332      	orrmi	r2, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fd8:	02e1      	lsls	r1, r4, #11
        EXTI->EMR = temp;
 8001fda:	607a      	str	r2, [r7, #4]
        temp = EXTI->RTSR;
 8001fdc:	68ba      	ldr	r2, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8001fde:	bf54      	ite	pl
 8001fe0:	ea0c 0202 	andpl.w	r2, ip, r2
        {
          temp |= iocurrent;
 8001fe4:	4332      	orrmi	r2, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fe6:	02a1      	lsls	r1, r4, #10
        EXTI->RTSR = temp;
 8001fe8:	60ba      	str	r2, [r7, #8]
        temp = EXTI->FTSR;
 8001fea:	68fa      	ldr	r2, [r7, #12]
        temp &= ~((uint32_t)iocurrent);
 8001fec:	bf54      	ite	pl
 8001fee:	ea0c 0202 	andpl.w	r2, ip, r2
        {
          temp |= iocurrent;
 8001ff2:	4332      	orrmi	r2, r6
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ff4:	2b10      	cmp	r3, #16
        }
        EXTI->FTSR = temp;
 8001ff6:	60fa      	str	r2, [r7, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ff8:	f47f af36 	bne.w	8001e68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ffc:	b005      	add	sp, #20
 8001ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      temp = GPIOx->MODER;
 8002002:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002006:	2103      	movs	r1, #3
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002008:	f10c 39ff 	add.w	r9, ip, #4294967295	@ 0xffffffff
      temp = GPIOx->MODER;
 800200c:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002010:	fa01 fc0e 	lsl.w	ip, r1, lr
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002014:	f004 0a03 	and.w	sl, r4, #3
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002018:	f1b9 0f01 	cmp.w	r9, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800201c:	ea2b 0b0c 	bic.w	fp, fp, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002020:	fa0a fa0e 	lsl.w	sl, sl, lr
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002024:	ea6f 0c0c 	mvn.w	ip, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002028:	ea4a 0a0b 	orr.w	sl, sl, fp
      GPIOx->MODER = temp;
 800202c:	f8c0 a000 	str.w	sl, [r0]
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002030:	f63f af69 	bhi.w	8001f06 <HAL_GPIO_Init+0xba>
 8002034:	e750      	b.n	8001ed8 <HAL_GPIO_Init+0x8c>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002036:	f04f 0901 	mov.w	r9, #1
 800203a:	fa09 fe0e 	lsl.w	lr, r9, lr
 800203e:	ea42 020e 	orr.w	r2, r2, lr
 8002042:	e7b6      	b.n	8001fb2 <HAL_GPIO_Init+0x166>
 8002044:	f04f 0902 	mov.w	r9, #2
 8002048:	fa09 fe0e 	lsl.w	lr, r9, lr
 800204c:	ea42 020e 	orr.w	r2, r2, lr
 8002050:	e7af      	b.n	8001fb2 <HAL_GPIO_Init+0x166>
 8002052:	f04f 0903 	mov.w	r9, #3
 8002056:	fa09 fe0e 	lsl.w	lr, r9, lr
 800205a:	ea42 020e 	orr.w	r2, r2, lr
 800205e:	e7a8      	b.n	8001fb2 <HAL_GPIO_Init+0x166>
 8002060:	f04f 0904 	mov.w	r9, #4
 8002064:	fa09 fe0e 	lsl.w	lr, r9, lr
 8002068:	ea42 020e 	orr.w	r2, r2, lr
 800206c:	e7a1      	b.n	8001fb2 <HAL_GPIO_Init+0x166>
 800206e:	f04f 0907 	mov.w	r9, #7
 8002072:	fa09 fe0e 	lsl.w	lr, r9, lr
 8002076:	ea42 020e 	orr.w	r2, r2, lr
 800207a:	e79a      	b.n	8001fb2 <HAL_GPIO_Init+0x166>
 800207c:	f04f 0905 	mov.w	r9, #5
 8002080:	fa09 fe0e 	lsl.w	lr, r9, lr
 8002084:	ea42 020e 	orr.w	r2, r2, lr
 8002088:	e793      	b.n	8001fb2 <HAL_GPIO_Init+0x166>
 800208a:	f04f 0906 	mov.w	r9, #6
 800208e:	fa09 fe0e 	lsl.w	lr, r9, lr
 8002092:	ea42 020e 	orr.w	r2, r2, lr
 8002096:	e78c      	b.n	8001fb2 <HAL_GPIO_Init+0x166>
 8002098:	f04f 0908 	mov.w	r9, #8
 800209c:	fa09 fe0e 	lsl.w	lr, r9, lr
 80020a0:	ea42 020e 	orr.w	r2, r2, lr
 80020a4:	e785      	b.n	8001fb2 <HAL_GPIO_Init+0x166>
 80020a6:	bf00      	nop
 80020a8:	40013c00 	.word	0x40013c00
 80020ac:	40023800 	.word	0x40023800
 80020b0:	40020000 	.word	0x40020000
 80020b4:	40020800 	.word	0x40020800
 80020b8:	40020c00 	.word	0x40020c00
 80020bc:	40021000 	.word	0x40021000
 80020c0:	40021400 	.word	0x40021400
 80020c4:	40021800 	.word	0x40021800
 80020c8:	40021c00 	.word	0x40021c00
 80020cc:	40022000 	.word	0x40022000
 80020d0:	40022400 	.word	0x40022400

080020d4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020d4:	b902      	cbnz	r2, 80020d8 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80020d6:	0409      	lsls	r1, r1, #16
 80020d8:	6181      	str	r1, [r0, #24]
  }
}
 80020da:	4770      	bx	lr

080020dc <HAL_LTDC_Init>:
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
  uint32_t tmp = 0, tmp1 = 0;

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 80020dc:	2800      	cmp	r0, #0
 80020de:	d06b      	beq.n	80021b8 <HAL_LTDC_Init+0xdc>
{
 80020e0:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 80020e2:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 80020e6:	4604      	mov	r4, r0
 80020e8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d05e      	beq.n	80021ae <HAL_LTDC_Init+0xd2>
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;

  /* Configures the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80020f0:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80020f2:	2102      	movs	r1, #2
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80020f4:	e9d4 3200 	ldrd	r3, r2, [r4]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80020f8:	f884 10a1 	strb.w	r1, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80020fc:	4302      	orrs	r2, r0
 80020fe:	68e1      	ldr	r1, [r4, #12]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002100:	6998      	ldr	r0, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002102:	430a      	orrs	r2, r1
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002104:	6921      	ldr	r1, [r4, #16]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002106:	f020 4070 	bic.w	r0, r0, #4026531840	@ 0xf0000000
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800210a:	430a      	orrs	r2, r1

  /* Sets Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800210c:	492b      	ldr	r1, [pc, #172]	@ (80021bc <HAL_LTDC_Init+0xe0>)
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800210e:	6198      	str	r0, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002110:	6998      	ldr	r0, [r3, #24]
 8002112:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16);
 8002114:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002116:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002118:	689a      	ldr	r2, [r3, #8]
 800211a:	400a      	ands	r2, r1
 800211c:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8002124:	69a0      	ldr	r0, [r4, #24]
 8002126:	4302      	orrs	r2, r0

  /* Sets Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
  tmp = (hltdc->Init.AccumulatedHBP << 16);
 8002128:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800212a:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800212c:	68da      	ldr	r2, [r3, #12]
 800212e:	400a      	ands	r2, r1
 8002130:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002132:	68da      	ldr	r2, [r3, #12]
 8002134:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8002138:	6a20      	ldr	r0, [r4, #32]
 800213a:	4302      	orrs	r2, r0

  /* Sets Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
 800213c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800213e:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002140:	691a      	ldr	r2, [r3, #16]
 8002142:	400a      	ands	r2, r1
 8002144:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002146:	691a      	ldr	r2, [r3, #16]
 8002148:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800214c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800214e:	4302      	orrs	r2, r0

  /* Sets Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
  tmp = (hltdc->Init.TotalWidth << 16);
 8002150:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002152:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002154:	695a      	ldr	r2, [r3, #20]
 8002156:	400a      	ands	r2, r1
 8002158:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800215a:	695a      	ldr	r2, [r3, #20]
 800215c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800215e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8002162:	430a      	orrs	r2, r1
 8002164:	615a      	str	r2, [r3, #20]

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002166:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 8002168:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800216c:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 8002170:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002174:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002176:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 8002178:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 800217c:	432a      	orrs	r2, r5
 800217e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8002182:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002184:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002188:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
 800218a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800218c:	f042 0204 	orr.w	r2, r2, #4
 8002190:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
 8002192:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002194:	f042 0202 	orr.w	r2, r2, #2
 8002198:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 800219a:	699a      	ldr	r2, [r3, #24]
 800219c:	f042 0201 	orr.w	r2, r2, #1
 80021a0:	619a      	str	r2, [r3, #24]

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80021a2:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 80021a4:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 80021a8:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1

  return HAL_OK;
}
 80021ac:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 80021ae:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 80021b2:	f001 fd47 	bl	8003c44 <HAL_LTDC_MspInit>
 80021b6:	e79b      	b.n	80020f0 <HAL_LTDC_Init+0x14>
    return HAL_ERROR;
 80021b8:	2001      	movs	r0, #1
}
 80021ba:	4770      	bx	lr
 80021bc:	f000f800 	.word	0xf000f800

080021c0 <HAL_LTDC_ConfigLayer>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
  /* Process locked */
  __HAL_LOCK(hltdc);
 80021c0:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	f000 80c6 	beq.w	8002356 <HAL_LTDC_ConfigLayer+0x196>
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80021ca:	2302      	movs	r3, #2
{   
 80021cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80021d0:	f04f 0e34 	mov.w	lr, #52	@ 0x34
  uint32_t tmp = 0;
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 80021d4:	f8d0 9000 	ldr.w	r9, [r0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80021d8:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
{   
 80021dc:	b083      	sub	sp, #12
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80021de:	fb0e 0e02 	mla	lr, lr, r2, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80021e2:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 80021e4:	f8d9 300c 	ldr.w	r3, [r9, #12]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80021e8:	460c      	mov	r4, r1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80021ea:	f102 0684 	add.w	r6, r2, #132	@ 0x84
 80021ee:	460d      	mov	r5, r1
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 80021f0:	f3c3 4b0b 	ubfx	fp, r3, #16, #12
 80021f4:	4680      	mov	r8, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80021f6:	eb09 0c06 	add.w	ip, r9, r6
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80021fa:	f10e 0e38 	add.w	lr, lr, #56	@ 0x38
  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80021fe:	f8df a164 	ldr.w	sl, [pc, #356]	@ 8002364 <HAL_LTDC_ConfigLayer+0x1a4>
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002202:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8002206:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800220a:	9301      	str	r3, [sp, #4]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 800220c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800220e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8002212:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8002214:	686f      	ldr	r7, [r5, #4]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8002216:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800221a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800221c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8002220:	6823      	ldr	r3, [r4, #0]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8002222:	44bb      	add	fp, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8002224:	f8ce 3000 	str.w	r3, [lr]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002228:	9b01      	ldr	r3, [sp, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 800222a:	682a      	ldr	r2, [r5, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800222c:	f8cc 3004 	str.w	r3, [ip, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8002230:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8002234:	1c51      	adds	r1, r2, #1
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 8002236:	68e8      	ldr	r0, [r5, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8002238:	f3c3 430b 	ubfx	r3, r3, #16, #12
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 800223c:	f8d5 e018 	ldr.w	lr, [r5, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8002240:	440b      	add	r3, r1
 8002242:	ea43 430b 	orr.w	r3, r3, fp, lsl #16
 8002246:	f8cc 3004 	str.w	r3, [ip, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 800224a:	f8d9 100c 	ldr.w	r1, [r9, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800224e:	f8dc 3008 	ldr.w	r3, [ip, #8]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 8002252:	f3c1 010a 	ubfx	r1, r1, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002256:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 800225a:	4401      	add	r1, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800225c:	f8cc 3008 	str.w	r3, [ip, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8002260:	68ab      	ldr	r3, [r5, #8]
 8002262:	f8d9 000c 	ldr.w	r0, [r9, #12]
 8002266:	3301      	adds	r3, #1
 8002268:	f3c0 000a 	ubfx	r0, r0, #0, #11
 800226c:	4403      	add	r3, r0
 800226e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002272:	6929      	ldr	r1, [r5, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8002274:	f8cc 3008 	str.w	r3, [ip, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002278:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800227c:	f023 0307 	bic.w	r3, r3, #7
 8002280:	f8cc 3010 	str.w	r3, [ip, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002284:	f8cc 1010 	str.w	r1, [ip, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8002288:	f8dc 3018 	ldr.w	r3, [ip, #24]
 800228c:	2300      	movs	r3, #0
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 800228e:	f895 0032 	ldrb.w	r0, [r5, #50]	@ 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 8002292:	f895 4031 	ldrb.w	r4, [r5, #49]	@ 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8002296:	f8cc 3018 	str.w	r3, [ip, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 800229a:	f895 3030 	ldrb.w	r3, [r5, #48]	@ 0x30
 800229e:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
 80022a2:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 80022a6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80022aa:	f8cc 3018 	str.w	r3, [ip, #24]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80022ae:	f8dc 3014 	ldr.w	r3, [ip, #20]
 80022b2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80022b6:	f8cc 3014 	str.w	r3, [ip, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80022ba:	696b      	ldr	r3, [r5, #20]
 80022bc:	f8cc 3014 	str.w	r3, [ip, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80022c0:	f8dc 001c 	ldr.w	r0, [ip, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80022c4:	69eb      	ldr	r3, [r5, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80022c6:	ea00 0a0a 	and.w	sl, r0, sl
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80022ca:	6a28      	ldr	r0, [r5, #32]
 80022cc:	4303      	orrs	r3, r0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80022ce:	f8cc a01c 	str.w	sl, [ip, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80022d2:	f8cc 301c 	str.w	r3, [ip, #28]

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80022d6:	f8dc 3028 	ldr.w	r3, [ip, #40]	@ 0x28
 80022da:	2300      	movs	r3, #0
 80022dc:	f8cc 3028 	str.w	r3, [ip, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80022e0:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80022e2:	f8cc 3028 	str.w	r3, [ip, #40]	@ 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80022e6:	b3a1      	cbz	r1, 8002352 <HAL_LTDC_ConfigLayer+0x192>
  {
    tmp = 4;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80022e8:	2901      	cmp	r1, #1
 80022ea:	d036      	beq.n	800235a <HAL_LTDC_ConfigLayer+0x19a>
  {
    tmp = 3;
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80022ec:	1e8b      	subs	r3, r1, #2
 80022ee:	2907      	cmp	r1, #7
 80022f0:	bf18      	it	ne
 80022f2:	2b02      	cmpne	r3, #2
 80022f4:	bf94      	ite	ls
 80022f6:	2301      	movls	r3, #1
 80022f8:	2300      	movhi	r3, #0
 80022fa:	3301      	adds	r3, #1
    tmp = 1;
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 80022fc:	1abf      	subs	r7, r7, r2
 80022fe:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8002300:	fb03 f707 	mul.w	r7, r3, r7
 8002304:	fb02 f303 	mul.w	r3, r2, r3

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002308:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 800230a:	3703      	adds	r7, #3
 800230c:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002310:	f8dc 302c 	ldr.w	r3, [ip, #44]	@ 0x2c
 8002314:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8002318:	f8cc 302c 	str.w	r3, [ip, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 800231c:	f8cc 702c 	str.w	r7, [ip, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002320:	4b0f      	ldr	r3, [pc, #60]	@ (8002360 <HAL_LTDC_ConfigLayer+0x1a0>)
 8002322:	f8dc 1030 	ldr.w	r1, [ip, #48]	@ 0x30
 8002326:	400b      	ands	r3, r1
 8002328:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800232c:	f8cc 2030 	str.w	r2, [ip, #48]	@ 0x30
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002330:	2201      	movs	r2, #1

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002332:	f859 3006 	ldr.w	r3, [r9, r6]
 8002336:	4313      	orrs	r3, r2
 8002338:	f849 3006 	str.w	r3, [r9, r6]
  __HAL_UNLOCK(hltdc);
 800233c:	2300      	movs	r3, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800233e:	f8c9 2024 	str.w	r2, [r9, #36]	@ 0x24
  return HAL_OK;
 8002342:	4618      	mov	r0, r3
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002344:	f888 20a1 	strb.w	r2, [r8, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 8002348:	f888 30a0 	strb.w	r3, [r8, #160]	@ 0xa0
}
 800234c:	b003      	add	sp, #12
 800234e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp = 4;
 8002352:	2304      	movs	r3, #4
 8002354:	e7d2      	b.n	80022fc <HAL_LTDC_ConfigLayer+0x13c>
  __HAL_LOCK(hltdc);
 8002356:	2002      	movs	r0, #2
}
 8002358:	4770      	bx	lr
    tmp = 3;
 800235a:	2303      	movs	r3, #3
 800235c:	e7ce      	b.n	80022fc <HAL_LTDC_ConfigLayer+0x13c>
 800235e:	bf00      	nop
 8002360:	fffff800 	.word	0xfffff800
 8002364:	fffff8f8 	.word	0xfffff8f8

08002368 <HAL_LTDC_SetAlpha>:
  __HAL_LOCK(hltdc);
 8002368:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
 800236c:	2b01      	cmp	r3, #1
 800236e:	f000 80a0 	beq.w	80024b2 <HAL_LTDC_SetAlpha+0x14a>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002372:	2302      	movs	r3, #2
  pLayerCfg->Alpha = Alpha;
 8002374:	f04f 0c34 	mov.w	ip, #52	@ 0x34
{
 8002378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800237c:	01d6      	lsls	r6, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 800237e:	6804      	ldr	r4, [r0, #0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002380:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
  pLayerCfg->Alpha = Alpha;
 8002384:	4686      	mov	lr, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002386:	3684      	adds	r6, #132	@ 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8002388:	68e5      	ldr	r5, [r4, #12]
  pLayerCfg->Alpha = Alpha;
 800238a:	fb0c 0c02 	mla	ip, ip, r2, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800238e:	19a3      	adds	r3, r4, r6
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8002390:	f3c5 480b 	ubfx	r8, r5, #16, #12
  pLayerCfg->Alpha = Alpha;
 8002394:	f8cc 104c 	str.w	r1, [ip, #76]	@ 0x4c
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002398:	685d      	ldr	r5, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 800239a:	f8dc 0050 	ldr.w	r0, [ip, #80]	@ 0x50
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800239e:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 80023a2:	e9dc 7a0e 	ldrd	r7, sl, [ip, #56]	@ 0x38
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80023a6:	605d      	str	r5, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 80023a8:	68e5      	ldr	r5, [r4, #12]
 80023aa:	f107 0901 	add.w	r9, r7, #1
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 80023ae:	44d0      	add	r8, sl
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 80023b0:	f3c5 450b 	ubfx	r5, r5, #16, #12
 80023b4:	444d      	add	r5, r9
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 80023b6:	f8dc 9044 	ldr.w	r9, [ip, #68]	@ 0x44
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 80023ba:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
 80023be:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 80023c0:	68e5      	ldr	r5, [r4, #12]
 80023c2:	f3c5 080a 	ubfx	r8, r5, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80023c6:	689d      	ldr	r5, [r3, #8]
 80023c8:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 80023cc:	44c8      	add	r8, r9
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80023ce:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 80023d0:	68e5      	ldr	r5, [r4, #12]
 80023d2:	f3c5 090a 	ubfx	r9, r5, #0, #11
 80023d6:	f8dc 5040 	ldr.w	r5, [ip, #64]	@ 0x40
 80023da:	3501      	adds	r5, #1
 80023dc:	444d      	add	r5, r9
 80023de:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 80023e2:	f89c 8069 	ldrb.w	r8, [ip, #105]	@ 0x69
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 80023e6:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 80023e8:	f89c 5068 	ldrb.w	r5, [ip, #104]	@ 0x68
 80023ec:	ea45 6500 	orr.w	r5, r5, r0, lsl #24
 80023f0:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80023f4:	f8d3 8010 	ldr.w	r8, [r3, #16]
 80023f8:	f028 0807 	bic.w	r8, r8, #7
 80023fc:	f8c3 8010 	str.w	r8, [r3, #16]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 8002400:	f89c 806a 	ldrb.w	r8, [ip, #106]	@ 0x6a
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8002404:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002408:	f8dc 8048 	ldr.w	r8, [ip, #72]	@ 0x48
 800240c:	f8c3 8010 	str.w	r8, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8002410:	f8d3 9018 	ldr.w	r9, [r3, #24]
 8002414:	f04f 0900 	mov.w	r9, #0
 8002418:	f8c3 9018 	str.w	r9, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 800241c:	619d      	str	r5, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800241e:	695d      	ldr	r5, [r3, #20]
 8002420:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 8002424:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002426:	6159      	str	r1, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002428:	4924      	ldr	r1, [pc, #144]	@ (80024bc <HAL_LTDC_SetAlpha+0x154>)
 800242a:	69dd      	ldr	r5, [r3, #28]
 800242c:	4029      	ands	r1, r5
 800242e:	61d9      	str	r1, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002430:	e9dc 1515 	ldrd	r1, r5, [ip, #84]	@ 0x54
 8002434:	4329      	orrs	r1, r5
 8002436:	61d9      	str	r1, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002438:	f8dc 105c 	ldr.w	r1, [ip, #92]	@ 0x5c
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800243c:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 800243e:	f8c3 9028 	str.w	r9, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002442:	6299      	str	r1, [r3, #40]	@ 0x28
  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002444:	f1b8 0f00 	cmp.w	r8, #0
 8002448:	d031      	beq.n	80024ae <HAL_LTDC_SetAlpha+0x146>
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800244a:	f1b8 0f01 	cmp.w	r8, #1
 800244e:	d032      	beq.n	80024b6 <HAL_LTDC_SetAlpha+0x14e>
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002450:	f1a8 0102 	sub.w	r1, r8, #2
 8002454:	f1b8 0f07 	cmp.w	r8, #7
 8002458:	bf18      	it	ne
 800245a:	2902      	cmpne	r1, #2
 800245c:	bf94      	ite	ls
 800245e:	2101      	movls	r1, #1
 8002460:	2100      	movhi	r1, #0
 8002462:	3101      	adds	r1, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8002464:	2534      	movs	r5, #52	@ 0x34
 8002466:	ebaa 0007 	sub.w	r0, sl, r7
 800246a:	fb05 e202 	mla	r2, r5, r2, lr
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800246e:	6add      	ldr	r5, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8002470:	fb01 f000 	mul.w	r0, r1, r0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002474:	f005 25e0 	and.w	r5, r5, #3758153728	@ 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8002478:	3003      	adds	r0, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800247a:	62dd      	str	r5, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 800247c:	6e15      	ldr	r5, [r2, #96]	@ 0x60
 800247e:	fb05 f101 	mul.w	r1, r5, r1
 8002482:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002486:	6e51      	ldr	r1, [r2, #100]	@ 0x64
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002488:	4a0d      	ldr	r2, [pc, #52]	@ (80024c0 <HAL_LTDC_SetAlpha+0x158>)
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 800248a:	62d8      	str	r0, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800248c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800248e:	4002      	ands	r2, r0
 8002490:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002492:	2201      	movs	r2, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002494:	6319      	str	r1, [r3, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002496:	59a3      	ldr	r3, [r4, r6]
 8002498:	4313      	orrs	r3, r2
 800249a:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(hltdc);
 800249c:	2300      	movs	r3, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800249e:	6262      	str	r2, [r4, #36]	@ 0x24
  return HAL_OK;
 80024a0:	4618      	mov	r0, r3
  hltdc->State = HAL_LTDC_STATE_READY;
 80024a2:	f88e 20a1 	strb.w	r2, [lr, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 80024a6:	f88e 30a0 	strb.w	r3, [lr, #160]	@ 0xa0
}
 80024aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    tmp = 4;
 80024ae:	2104      	movs	r1, #4
 80024b0:	e7d8      	b.n	8002464 <HAL_LTDC_SetAlpha+0xfc>
  __HAL_LOCK(hltdc);
 80024b2:	2002      	movs	r0, #2
}
 80024b4:	4770      	bx	lr
    tmp = 3;
 80024b6:	2103      	movs	r1, #3
 80024b8:	e7d4      	b.n	8002464 <HAL_LTDC_SetAlpha+0xfc>
 80024ba:	bf00      	nop
 80024bc:	fffff8f8 	.word	0xfffff8f8
 80024c0:	fffff800 	.word	0xfffff800

080024c4 <HAL_LTDC_GetState>:
  return hltdc->State;
 80024c4:	f890 00a1 	ldrb.w	r0, [r0, #161]	@ 0xa1
}
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop

080024cc <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80024cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002538 <HAL_PWREx_EnableOverDrive+0x6c>)
 80024ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024d0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
{
 80024d4:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80024d6:	641a      	str	r2, [r3, #64]	@ 0x40
{
 80024d8:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 80024da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80024dc:	4c17      	ldr	r4, [pc, #92]	@ (800253c <HAL_PWREx_EnableOverDrive+0x70>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80024de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024e2:	9301      	str	r3, [sp, #4]
 80024e4:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80024e6:	6823      	ldr	r3, [r4, #0]
 80024e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024ec:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024ee:	f7ff f9c9 	bl	8001884 <HAL_GetTick>
 80024f2:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80024f4:	e005      	b.n	8002502 <HAL_PWREx_EnableOverDrive+0x36>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80024f6:	f7ff f9c5 	bl	8001884 <HAL_GetTick>
 80024fa:	1b40      	subs	r0, r0, r5
 80024fc:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8002500:	d817      	bhi.n	8002532 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002502:	6863      	ldr	r3, [r4, #4]
 8002504:	03da      	lsls	r2, r3, #15
 8002506:	d5f6      	bpl.n	80024f6 <HAL_PWREx_EnableOverDrive+0x2a>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002508:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800250a:	4d0c      	ldr	r5, [pc, #48]	@ (800253c <HAL_PWREx_EnableOverDrive+0x70>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800250c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002510:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8002512:	f7ff f9b7 	bl	8001884 <HAL_GetTick>
 8002516:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002518:	e005      	b.n	8002526 <HAL_PWREx_EnableOverDrive+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800251a:	f7ff f9b3 	bl	8001884 <HAL_GetTick>
 800251e:	1b00      	subs	r0, r0, r4
 8002520:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8002524:	d805      	bhi.n	8002532 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002526:	686b      	ldr	r3, [r5, #4]
 8002528:	039b      	lsls	r3, r3, #14
 800252a:	d5f6      	bpl.n	800251a <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800252c:	2000      	movs	r0, #0
}
 800252e:	b003      	add	sp, #12
 8002530:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 8002532:	2003      	movs	r0, #3
}
 8002534:	b003      	add	sp, #12
 8002536:	bd30      	pop	{r4, r5, pc}
 8002538:	40023800 	.word	0x40023800
 800253c:	40007000 	.word	0x40007000

08002540 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002540:	2800      	cmp	r0, #0
 8002542:	f000 817e 	beq.w	8002842 <HAL_RCC_OscConfig+0x302>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002546:	6803      	ldr	r3, [r0, #0]
{
 8002548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800254c:	07dd      	lsls	r5, r3, #31
{
 800254e:	b082      	sub	sp, #8
 8002550:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002552:	d535      	bpl.n	80025c0 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002554:	499b      	ldr	r1, [pc, #620]	@ (80027c4 <HAL_RCC_OscConfig+0x284>)
 8002556:	688a      	ldr	r2, [r1, #8]
 8002558:	f002 020c 	and.w	r2, r2, #12
 800255c:	2a04      	cmp	r2, #4
 800255e:	f000 80e1 	beq.w	8002724 <HAL_RCC_OscConfig+0x1e4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002562:	688a      	ldr	r2, [r1, #8]
 8002564:	f002 020c 	and.w	r2, r2, #12
 8002568:	2a08      	cmp	r2, #8
 800256a:	f000 80d7 	beq.w	800271c <HAL_RCC_OscConfig+0x1dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800256e:	6863      	ldr	r3, [r4, #4]
 8002570:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002574:	d010      	beq.n	8002598 <HAL_RCC_OscConfig+0x58>
 8002576:	2b00      	cmp	r3, #0
 8002578:	f000 80fe 	beq.w	8002778 <HAL_RCC_OscConfig+0x238>
 800257c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002580:	4b90      	ldr	r3, [pc, #576]	@ (80027c4 <HAL_RCC_OscConfig+0x284>)
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	f000 815f 	beq.w	8002846 <HAL_RCC_OscConfig+0x306>
 8002588:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002594:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002596:	e004      	b.n	80025a2 <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002598:	4a8a      	ldr	r2, [pc, #552]	@ (80027c4 <HAL_RCC_OscConfig+0x284>)
 800259a:	6813      	ldr	r3, [r2, #0]
 800259c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025a0:	6013      	str	r3, [r2, #0]
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a2:	f7ff f96f 	bl	8001884 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a6:	4e87      	ldr	r6, [pc, #540]	@ (80027c4 <HAL_RCC_OscConfig+0x284>)
        tickstart = HAL_GetTick();
 80025a8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025aa:	e005      	b.n	80025b8 <HAL_RCC_OscConfig+0x78>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025ac:	f7ff f96a 	bl	8001884 <HAL_GetTick>
 80025b0:	1b40      	subs	r0, r0, r5
 80025b2:	2864      	cmp	r0, #100	@ 0x64
 80025b4:	f200 80dc 	bhi.w	8002770 <HAL_RCC_OscConfig+0x230>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b8:	6833      	ldr	r3, [r6, #0]
 80025ba:	039a      	lsls	r2, r3, #14
 80025bc:	d5f6      	bpl.n	80025ac <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025be:	6823      	ldr	r3, [r4, #0]
 80025c0:	079f      	lsls	r7, r3, #30
 80025c2:	d528      	bpl.n	8002616 <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025c4:	4a7f      	ldr	r2, [pc, #508]	@ (80027c4 <HAL_RCC_OscConfig+0x284>)
 80025c6:	6891      	ldr	r1, [r2, #8]
 80025c8:	f011 0f0c 	tst.w	r1, #12
 80025cc:	f000 8088 	beq.w	80026e0 <HAL_RCC_OscConfig+0x1a0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025d0:	6891      	ldr	r1, [r2, #8]
 80025d2:	f001 010c 	and.w	r1, r1, #12
 80025d6:	2908      	cmp	r1, #8
 80025d8:	d07e      	beq.n	80026d8 <HAL_RCC_OscConfig+0x198>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025da:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025dc:	4d79      	ldr	r5, [pc, #484]	@ (80027c4 <HAL_RCC_OscConfig+0x284>)
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f000 8105 	beq.w	80027ee <HAL_RCC_OscConfig+0x2ae>
        __HAL_RCC_HSI_ENABLE();
 80025e4:	682b      	ldr	r3, [r5, #0]
 80025e6:	f043 0301 	orr.w	r3, r3, #1
 80025ea:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ec:	f7ff f94a 	bl	8001884 <HAL_GetTick>
 80025f0:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f2:	e005      	b.n	8002600 <HAL_RCC_OscConfig+0xc0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025f4:	f7ff f946 	bl	8001884 <HAL_GetTick>
 80025f8:	1b80      	subs	r0, r0, r6
 80025fa:	2802      	cmp	r0, #2
 80025fc:	f200 80b8 	bhi.w	8002770 <HAL_RCC_OscConfig+0x230>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002600:	682b      	ldr	r3, [r5, #0]
 8002602:	0798      	lsls	r0, r3, #30
 8002604:	d5f6      	bpl.n	80025f4 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002606:	682b      	ldr	r3, [r5, #0]
 8002608:	6922      	ldr	r2, [r4, #16]
 800260a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800260e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002612:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002614:	6823      	ldr	r3, [r4, #0]
 8002616:	071a      	lsls	r2, r3, #28
 8002618:	d428      	bmi.n	800266c <HAL_RCC_OscConfig+0x12c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800261a:	075d      	lsls	r5, r3, #29
 800261c:	d53d      	bpl.n	800269a <HAL_RCC_OscConfig+0x15a>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800261e:	4b69      	ldr	r3, [pc, #420]	@ (80027c4 <HAL_RCC_OscConfig+0x284>)
 8002620:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002622:	00d0      	lsls	r0, r2, #3
 8002624:	d478      	bmi.n	8002718 <HAL_RCC_OscConfig+0x1d8>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002626:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
      pwrclkchanged = SET;
 8002628:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800262a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800262e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002632:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002636:	9301      	str	r3, [sp, #4]
 8002638:	9b01      	ldr	r3, [sp, #4]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800263a:	4e63      	ldr	r6, [pc, #396]	@ (80027c8 <HAL_RCC_OscConfig+0x288>)
 800263c:	6833      	ldr	r3, [r6, #0]
 800263e:	05d9      	lsls	r1, r3, #23
 8002640:	f140 8086 	bpl.w	8002750 <HAL_RCC_OscConfig+0x210>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002644:	68a3      	ldr	r3, [r4, #8]
 8002646:	2b01      	cmp	r3, #1
 8002648:	f000 80e3 	beq.w	8002812 <HAL_RCC_OscConfig+0x2d2>
 800264c:	2b00      	cmp	r3, #0
 800264e:	f000 80a9 	beq.w	80027a4 <HAL_RCC_OscConfig+0x264>
 8002652:	2b05      	cmp	r3, #5
 8002654:	4b5b      	ldr	r3, [pc, #364]	@ (80027c4 <HAL_RCC_OscConfig+0x284>)
 8002656:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002658:	f000 80fd 	beq.w	8002856 <HAL_RCC_OscConfig+0x316>
 800265c:	f022 0201 	bic.w	r2, r2, #1
 8002660:	671a      	str	r2, [r3, #112]	@ 0x70
 8002662:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002664:	f022 0204 	bic.w	r2, r2, #4
 8002668:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800266a:	e0d7      	b.n	800281c <HAL_RCC_OscConfig+0x2dc>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800266c:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 800266e:	4d55      	ldr	r5, [pc, #340]	@ (80027c4 <HAL_RCC_OscConfig+0x284>)
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002670:	2b00      	cmp	r3, #0
 8002672:	d040      	beq.n	80026f6 <HAL_RCC_OscConfig+0x1b6>
      __HAL_RCC_LSI_ENABLE();
 8002674:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8002676:	f043 0301 	orr.w	r3, r3, #1
 800267a:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800267c:	f7ff f902 	bl	8001884 <HAL_GetTick>
 8002680:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002682:	e004      	b.n	800268e <HAL_RCC_OscConfig+0x14e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002684:	f7ff f8fe 	bl	8001884 <HAL_GetTick>
 8002688:	1b80      	subs	r0, r0, r6
 800268a:	2802      	cmp	r0, #2
 800268c:	d870      	bhi.n	8002770 <HAL_RCC_OscConfig+0x230>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800268e:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8002690:	079b      	lsls	r3, r3, #30
 8002692:	d5f7      	bpl.n	8002684 <HAL_RCC_OscConfig+0x144>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002694:	6823      	ldr	r3, [r4, #0]
 8002696:	075d      	lsls	r5, r3, #29
 8002698:	d4c1      	bmi.n	800261e <HAL_RCC_OscConfig+0xde>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800269a:	69a3      	ldr	r3, [r4, #24]
 800269c:	b1c3      	cbz	r3, 80026d0 <HAL_RCC_OscConfig+0x190>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800269e:	4d49      	ldr	r5, [pc, #292]	@ (80027c4 <HAL_RCC_OscConfig+0x284>)
 80026a0:	68aa      	ldr	r2, [r5, #8]
 80026a2:	f002 020c 	and.w	r2, r2, #12
 80026a6:	2a08      	cmp	r2, #8
 80026a8:	d021      	beq.n	80026ee <HAL_RCC_OscConfig+0x1ae>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026aa:	2b02      	cmp	r3, #2
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ac:	682b      	ldr	r3, [r5, #0]
 80026ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026b2:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026b4:	f000 80d7 	beq.w	8002866 <HAL_RCC_OscConfig+0x326>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b8:	f7ff f8e4 	bl	8001884 <HAL_GetTick>
 80026bc:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026be:	e004      	b.n	80026ca <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026c0:	f7ff f8e0 	bl	8001884 <HAL_GetTick>
 80026c4:	1b00      	subs	r0, r0, r4
 80026c6:	2802      	cmp	r0, #2
 80026c8:	d852      	bhi.n	8002770 <HAL_RCC_OscConfig+0x230>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ca:	682b      	ldr	r3, [r5, #0]
 80026cc:	019b      	lsls	r3, r3, #6
 80026ce:	d4f7      	bmi.n	80026c0 <HAL_RCC_OscConfig+0x180>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80026d0:	2000      	movs	r0, #0
}
 80026d2:	b002      	add	sp, #8
 80026d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026d8:	6852      	ldr	r2, [r2, #4]
 80026da:	0256      	lsls	r6, r2, #9
 80026dc:	f53f af7d 	bmi.w	80025da <HAL_RCC_OscConfig+0x9a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026e0:	4a38      	ldr	r2, [pc, #224]	@ (80027c4 <HAL_RCC_OscConfig+0x284>)
 80026e2:	6812      	ldr	r2, [r2, #0]
 80026e4:	0795      	lsls	r5, r2, #30
 80026e6:	d527      	bpl.n	8002738 <HAL_RCC_OscConfig+0x1f8>
 80026e8:	68e2      	ldr	r2, [r4, #12]
 80026ea:	2a01      	cmp	r2, #1
 80026ec:	d024      	beq.n	8002738 <HAL_RCC_OscConfig+0x1f8>
    return HAL_ERROR;
 80026ee:	2001      	movs	r0, #1
}
 80026f0:	b002      	add	sp, #8
 80026f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80026f6:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80026f8:	f023 0301 	bic.w	r3, r3, #1
 80026fc:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 80026fe:	f7ff f8c1 	bl	8001884 <HAL_GetTick>
 8002702:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002704:	e004      	b.n	8002710 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002706:	f7ff f8bd 	bl	8001884 <HAL_GetTick>
 800270a:	1b80      	subs	r0, r0, r6
 800270c:	2802      	cmp	r0, #2
 800270e:	d82f      	bhi.n	8002770 <HAL_RCC_OscConfig+0x230>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002710:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8002712:	079f      	lsls	r7, r3, #30
 8002714:	d4f7      	bmi.n	8002706 <HAL_RCC_OscConfig+0x1c6>
 8002716:	e7bd      	b.n	8002694 <HAL_RCC_OscConfig+0x154>
  FlagStatus pwrclkchanged = RESET;
 8002718:	2500      	movs	r5, #0
 800271a:	e78e      	b.n	800263a <HAL_RCC_OscConfig+0xfa>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800271c:	684a      	ldr	r2, [r1, #4]
 800271e:	0250      	lsls	r0, r2, #9
 8002720:	f57f af25 	bpl.w	800256e <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002724:	4a27      	ldr	r2, [pc, #156]	@ (80027c4 <HAL_RCC_OscConfig+0x284>)
 8002726:	6812      	ldr	r2, [r2, #0]
 8002728:	0391      	lsls	r1, r2, #14
 800272a:	f57f af49 	bpl.w	80025c0 <HAL_RCC_OscConfig+0x80>
 800272e:	6862      	ldr	r2, [r4, #4]
 8002730:	2a00      	cmp	r2, #0
 8002732:	f47f af45 	bne.w	80025c0 <HAL_RCC_OscConfig+0x80>
 8002736:	e7da      	b.n	80026ee <HAL_RCC_OscConfig+0x1ae>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002738:	4922      	ldr	r1, [pc, #136]	@ (80027c4 <HAL_RCC_OscConfig+0x284>)
 800273a:	6920      	ldr	r0, [r4, #16]
 800273c:	680a      	ldr	r2, [r1, #0]
 800273e:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 8002742:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8002746:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002748:	071a      	lsls	r2, r3, #28
 800274a:	f57f af66 	bpl.w	800261a <HAL_RCC_OscConfig+0xda>
 800274e:	e78d      	b.n	800266c <HAL_RCC_OscConfig+0x12c>
      PWR->CR1 |= PWR_CR1_DBP;
 8002750:	6833      	ldr	r3, [r6, #0]
 8002752:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002756:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002758:	f7ff f894 	bl	8001884 <HAL_GetTick>
 800275c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800275e:	6833      	ldr	r3, [r6, #0]
 8002760:	05da      	lsls	r2, r3, #23
 8002762:	f53f af6f 	bmi.w	8002644 <HAL_RCC_OscConfig+0x104>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002766:	f7ff f88d 	bl	8001884 <HAL_GetTick>
 800276a:	1bc0      	subs	r0, r0, r7
 800276c:	2864      	cmp	r0, #100	@ 0x64
 800276e:	d9f6      	bls.n	800275e <HAL_RCC_OscConfig+0x21e>
            return HAL_TIMEOUT;
 8002770:	2003      	movs	r0, #3
}
 8002772:	b002      	add	sp, #8
 8002774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002778:	4d12      	ldr	r5, [pc, #72]	@ (80027c4 <HAL_RCC_OscConfig+0x284>)
 800277a:	682b      	ldr	r3, [r5, #0]
 800277c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002780:	602b      	str	r3, [r5, #0]
 8002782:	682b      	ldr	r3, [r5, #0]
 8002784:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002788:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800278a:	f7ff f87b 	bl	8001884 <HAL_GetTick>
 800278e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002790:	e004      	b.n	800279c <HAL_RCC_OscConfig+0x25c>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002792:	f7ff f877 	bl	8001884 <HAL_GetTick>
 8002796:	1b80      	subs	r0, r0, r6
 8002798:	2864      	cmp	r0, #100	@ 0x64
 800279a:	d8e9      	bhi.n	8002770 <HAL_RCC_OscConfig+0x230>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800279c:	682b      	ldr	r3, [r5, #0]
 800279e:	039b      	lsls	r3, r3, #14
 80027a0:	d4f7      	bmi.n	8002792 <HAL_RCC_OscConfig+0x252>
 80027a2:	e70c      	b.n	80025be <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027a4:	4e07      	ldr	r6, [pc, #28]	@ (80027c4 <HAL_RCC_OscConfig+0x284>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027a6:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027aa:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 80027ac:	f023 0301 	bic.w	r3, r3, #1
 80027b0:	6733      	str	r3, [r6, #112]	@ 0x70
 80027b2:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 80027b4:	f023 0304 	bic.w	r3, r3, #4
 80027b8:	6733      	str	r3, [r6, #112]	@ 0x70
      tickstart = HAL_GetTick();
 80027ba:	f7ff f863 	bl	8001884 <HAL_GetTick>
 80027be:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027c0:	e009      	b.n	80027d6 <HAL_RCC_OscConfig+0x296>
 80027c2:	bf00      	nop
 80027c4:	40023800 	.word	0x40023800
 80027c8:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027cc:	f7ff f85a 	bl	8001884 <HAL_GetTick>
 80027d0:	1bc0      	subs	r0, r0, r7
 80027d2:	4540      	cmp	r0, r8
 80027d4:	d8cc      	bhi.n	8002770 <HAL_RCC_OscConfig+0x230>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027d6:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 80027d8:	0798      	lsls	r0, r3, #30
 80027da:	d4f7      	bmi.n	80027cc <HAL_RCC_OscConfig+0x28c>
    if(pwrclkchanged == SET)
 80027dc:	2d00      	cmp	r5, #0
 80027de:	f43f af5c 	beq.w	800269a <HAL_RCC_OscConfig+0x15a>
      __HAL_RCC_PWR_CLK_DISABLE();
 80027e2:	4a39      	ldr	r2, [pc, #228]	@ (80028c8 <HAL_RCC_OscConfig+0x388>)
 80027e4:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80027e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80027ec:	e755      	b.n	800269a <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_DISABLE();
 80027ee:	682b      	ldr	r3, [r5, #0]
 80027f0:	f023 0301 	bic.w	r3, r3, #1
 80027f4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80027f6:	f7ff f845 	bl	8001884 <HAL_GetTick>
 80027fa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027fc:	e004      	b.n	8002808 <HAL_RCC_OscConfig+0x2c8>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027fe:	f7ff f841 	bl	8001884 <HAL_GetTick>
 8002802:	1b80      	subs	r0, r0, r6
 8002804:	2802      	cmp	r0, #2
 8002806:	d8b3      	bhi.n	8002770 <HAL_RCC_OscConfig+0x230>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002808:	682b      	ldr	r3, [r5, #0]
 800280a:	0799      	lsls	r1, r3, #30
 800280c:	d4f7      	bmi.n	80027fe <HAL_RCC_OscConfig+0x2be>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800280e:	6823      	ldr	r3, [r4, #0]
 8002810:	e701      	b.n	8002616 <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002812:	4a2d      	ldr	r2, [pc, #180]	@ (80028c8 <HAL_RCC_OscConfig+0x388>)
 8002814:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8002816:	f043 0301 	orr.w	r3, r3, #1
 800281a:	6713      	str	r3, [r2, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800281c:	f7ff f832 	bl	8001884 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002820:	4f29      	ldr	r7, [pc, #164]	@ (80028c8 <HAL_RCC_OscConfig+0x388>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002822:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8002826:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002828:	e004      	b.n	8002834 <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800282a:	f7ff f82b 	bl	8001884 <HAL_GetTick>
 800282e:	1b80      	subs	r0, r0, r6
 8002830:	4540      	cmp	r0, r8
 8002832:	d89d      	bhi.n	8002770 <HAL_RCC_OscConfig+0x230>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002834:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002836:	079b      	lsls	r3, r3, #30
 8002838:	d5f7      	bpl.n	800282a <HAL_RCC_OscConfig+0x2ea>
    if(pwrclkchanged == SET)
 800283a:	2d00      	cmp	r5, #0
 800283c:	f43f af2d 	beq.w	800269a <HAL_RCC_OscConfig+0x15a>
 8002840:	e7cf      	b.n	80027e2 <HAL_RCC_OscConfig+0x2a2>
    return HAL_ERROR;
 8002842:	2001      	movs	r0, #1
}
 8002844:	4770      	bx	lr
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002846:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002852:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002854:	e6a5      	b.n	80025a2 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002856:	f042 0204 	orr.w	r2, r2, #4
 800285a:	671a      	str	r2, [r3, #112]	@ 0x70
 800285c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800285e:	f042 0201 	orr.w	r2, r2, #1
 8002862:	671a      	str	r2, [r3, #112]	@ 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002864:	e7da      	b.n	800281c <HAL_RCC_OscConfig+0x2dc>
        tickstart = HAL_GetTick();
 8002866:	f7ff f80d 	bl	8001884 <HAL_GetTick>
 800286a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800286c:	e005      	b.n	800287a <HAL_RCC_OscConfig+0x33a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800286e:	f7ff f809 	bl	8001884 <HAL_GetTick>
 8002872:	1b80      	subs	r0, r0, r6
 8002874:	2802      	cmp	r0, #2
 8002876:	f63f af7b 	bhi.w	8002770 <HAL_RCC_OscConfig+0x230>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800287a:	682b      	ldr	r3, [r5, #0]
 800287c:	0199      	lsls	r1, r3, #6
 800287e:	d4f6      	bmi.n	800286e <HAL_RCC_OscConfig+0x32e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002880:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002882:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8002884:	0852      	lsrs	r2, r2, #1
 8002886:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 800288a:	3a01      	subs	r2, #1
 800288c:	430b      	orrs	r3, r1
 800288e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002890:	4c0d      	ldr	r4, [pc, #52]	@ (80028c8 <HAL_RCC_OscConfig+0x388>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002892:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002896:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800289a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800289e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80028a2:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80028a4:	682b      	ldr	r3, [r5, #0]
 80028a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028aa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80028ac:	f7fe ffea 	bl	8001884 <HAL_GetTick>
 80028b0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028b2:	e005      	b.n	80028c0 <HAL_RCC_OscConfig+0x380>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028b4:	f7fe ffe6 	bl	8001884 <HAL_GetTick>
 80028b8:	1b40      	subs	r0, r0, r5
 80028ba:	2802      	cmp	r0, #2
 80028bc:	f63f af58 	bhi.w	8002770 <HAL_RCC_OscConfig+0x230>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028c0:	6823      	ldr	r3, [r4, #0]
 80028c2:	019a      	lsls	r2, r3, #6
 80028c4:	d5f6      	bpl.n	80028b4 <HAL_RCC_OscConfig+0x374>
 80028c6:	e703      	b.n	80026d0 <HAL_RCC_OscConfig+0x190>
 80028c8:	40023800 	.word	0x40023800

080028cc <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028cc:	2800      	cmp	r0, #0
 80028ce:	f000 80b2 	beq.w	8002a36 <HAL_RCC_ClockConfig+0x16a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028d2:	4a60      	ldr	r2, [pc, #384]	@ (8002a54 <HAL_RCC_ClockConfig+0x188>)
 80028d4:	6813      	ldr	r3, [r2, #0]
 80028d6:	f003 030f 	and.w	r3, r3, #15
 80028da:	428b      	cmp	r3, r1
{
 80028dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028e0:	4604      	mov	r4, r0
 80028e2:	460d      	mov	r5, r1
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028e4:	d20c      	bcs.n	8002900 <HAL_RCC_ClockConfig+0x34>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028e6:	6813      	ldr	r3, [r2, #0]
 80028e8:	f023 030f 	bic.w	r3, r3, #15
 80028ec:	430b      	orrs	r3, r1
 80028ee:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f0:	6813      	ldr	r3, [r2, #0]
 80028f2:	f003 030f 	and.w	r3, r3, #15
 80028f6:	428b      	cmp	r3, r1
 80028f8:	d002      	beq.n	8002900 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80028fa:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);

  return HAL_OK;
}
 80028fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002900:	6823      	ldr	r3, [r4, #0]
 8002902:	0798      	lsls	r0, r3, #30
 8002904:	d514      	bpl.n	8002930 <HAL_RCC_ClockConfig+0x64>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002906:	0759      	lsls	r1, r3, #29
 8002908:	d504      	bpl.n	8002914 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800290a:	4953      	ldr	r1, [pc, #332]	@ (8002a58 <HAL_RCC_ClockConfig+0x18c>)
 800290c:	688a      	ldr	r2, [r1, #8]
 800290e:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 8002912:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002914:	071a      	lsls	r2, r3, #28
 8002916:	d504      	bpl.n	8002922 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002918:	494f      	ldr	r1, [pc, #316]	@ (8002a58 <HAL_RCC_ClockConfig+0x18c>)
 800291a:	688a      	ldr	r2, [r1, #8]
 800291c:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 8002920:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002922:	494d      	ldr	r1, [pc, #308]	@ (8002a58 <HAL_RCC_ClockConfig+0x18c>)
 8002924:	68a0      	ldr	r0, [r4, #8]
 8002926:	688a      	ldr	r2, [r1, #8]
 8002928:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800292c:	4302      	orrs	r2, r0
 800292e:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002930:	07df      	lsls	r7, r3, #31
 8002932:	d520      	bpl.n	8002976 <HAL_RCC_ClockConfig+0xaa>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002934:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002936:	4b48      	ldr	r3, [pc, #288]	@ (8002a58 <HAL_RCC_ClockConfig+0x18c>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002938:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800293a:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800293c:	d07d      	beq.n	8002a3a <HAL_RCC_ClockConfig+0x16e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800293e:	2a02      	cmp	r2, #2
 8002940:	d076      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x164>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002942:	0799      	lsls	r1, r3, #30
 8002944:	d5d9      	bpl.n	80028fa <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002946:	4e44      	ldr	r6, [pc, #272]	@ (8002a58 <HAL_RCC_ClockConfig+0x18c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002948:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800294c:	68b3      	ldr	r3, [r6, #8]
 800294e:	f023 0303 	bic.w	r3, r3, #3
 8002952:	4313      	orrs	r3, r2
 8002954:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002956:	f7fe ff95 	bl	8001884 <HAL_GetTick>
 800295a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800295c:	e004      	b.n	8002968 <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800295e:	f7fe ff91 	bl	8001884 <HAL_GetTick>
 8002962:	1bc0      	subs	r0, r0, r7
 8002964:	4540      	cmp	r0, r8
 8002966:	d86b      	bhi.n	8002a40 <HAL_RCC_ClockConfig+0x174>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002968:	68b3      	ldr	r3, [r6, #8]
 800296a:	6862      	ldr	r2, [r4, #4]
 800296c:	f003 030c 	and.w	r3, r3, #12
 8002970:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002974:	d1f3      	bne.n	800295e <HAL_RCC_ClockConfig+0x92>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002976:	4a37      	ldr	r2, [pc, #220]	@ (8002a54 <HAL_RCC_ClockConfig+0x188>)
 8002978:	6813      	ldr	r3, [r2, #0]
 800297a:	f003 030f 	and.w	r3, r3, #15
 800297e:	42ab      	cmp	r3, r5
 8002980:	d909      	bls.n	8002996 <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002982:	6813      	ldr	r3, [r2, #0]
 8002984:	f023 030f 	bic.w	r3, r3, #15
 8002988:	432b      	orrs	r3, r5
 800298a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800298c:	6813      	ldr	r3, [r2, #0]
 800298e:	f003 030f 	and.w	r3, r3, #15
 8002992:	42ab      	cmp	r3, r5
 8002994:	d1b1      	bne.n	80028fa <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002996:	6823      	ldr	r3, [r4, #0]
 8002998:	075a      	lsls	r2, r3, #29
 800299a:	d506      	bpl.n	80029aa <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800299c:	492e      	ldr	r1, [pc, #184]	@ (8002a58 <HAL_RCC_ClockConfig+0x18c>)
 800299e:	68e0      	ldr	r0, [r4, #12]
 80029a0:	688a      	ldr	r2, [r1, #8]
 80029a2:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 80029a6:	4302      	orrs	r2, r0
 80029a8:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029aa:	071b      	lsls	r3, r3, #28
 80029ac:	d430      	bmi.n	8002a10 <HAL_RCC_ClockConfig+0x144>
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029ae:	492a      	ldr	r1, [pc, #168]	@ (8002a58 <HAL_RCC_ClockConfig+0x18c>)
 80029b0:	688b      	ldr	r3, [r1, #8]
 80029b2:	f003 030c 	and.w	r3, r3, #12
 80029b6:	2b04      	cmp	r3, #4
 80029b8:	d038      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x160>
 80029ba:	2b08      	cmp	r3, #8
 80029bc:	d118      	bne.n	80029f0 <HAL_RCC_ClockConfig+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029be:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80029c0:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029c2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029c6:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80029c8:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
 80029cc:	d03a      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x178>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ce:	4823      	ldr	r0, [pc, #140]	@ (8002a5c <HAL_RCC_ClockConfig+0x190>)
 80029d0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80029d4:	2300      	movs	r3, #0
 80029d6:	fba1 0100 	umull	r0, r1, r1, r0
 80029da:	f7fe f905 	bl	8000be8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80029de:	4b1e      	ldr	r3, [pc, #120]	@ (8002a58 <HAL_RCC_ClockConfig+0x18c>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80029e6:	3301      	adds	r3, #1
 80029e8:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80029ea:	fbb0 f3f3 	udiv	r3, r0, r3
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 80029ee:	e000      	b.n	80029f2 <HAL_RCC_ClockConfig+0x126>
      sysclockfreq = HSI_VALUE;
 80029f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002a60 <HAL_RCC_ClockConfig+0x194>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029f2:	4a19      	ldr	r2, [pc, #100]	@ (8002a58 <HAL_RCC_ClockConfig+0x18c>)
 80029f4:	481b      	ldr	r0, [pc, #108]	@ (8002a64 <HAL_RCC_ClockConfig+0x198>)
 80029f6:	6892      	ldr	r2, [r2, #8]
 80029f8:	491b      	ldr	r1, [pc, #108]	@ (8002a68 <HAL_RCC_ClockConfig+0x19c>)
 80029fa:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80029fe:	5c82      	ldrb	r2, [r0, r2]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002a00:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a02:	40d3      	lsrs	r3, r2
 8002a04:	600b      	str	r3, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002a06:	f7fe fef7 	bl	80017f8 <HAL_InitTick>
  return HAL_OK;
 8002a0a:	2000      	movs	r0, #0
}
 8002a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a10:	4a11      	ldr	r2, [pc, #68]	@ (8002a58 <HAL_RCC_ClockConfig+0x18c>)
 8002a12:	6921      	ldr	r1, [r4, #16]
 8002a14:	6893      	ldr	r3, [r2, #8]
 8002a16:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8002a1a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a1e:	490e      	ldr	r1, [pc, #56]	@ (8002a58 <HAL_RCC_ClockConfig+0x18c>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a20:	6093      	str	r3, [r2, #8]
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a22:	688b      	ldr	r3, [r1, #8]
 8002a24:	f003 030c 	and.w	r3, r3, #12
 8002a28:	2b04      	cmp	r3, #4
 8002a2a:	d1c6      	bne.n	80029ba <HAL_RCC_ClockConfig+0xee>
 8002a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a5c <HAL_RCC_ClockConfig+0x190>)
 8002a2e:	e7e0      	b.n	80029f2 <HAL_RCC_ClockConfig+0x126>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a30:	0198      	lsls	r0, r3, #6
 8002a32:	d488      	bmi.n	8002946 <HAL_RCC_ClockConfig+0x7a>
 8002a34:	e761      	b.n	80028fa <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8002a36:	2001      	movs	r0, #1
}
 8002a38:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a3a:	039e      	lsls	r6, r3, #14
 8002a3c:	d483      	bmi.n	8002946 <HAL_RCC_ClockConfig+0x7a>
 8002a3e:	e75c      	b.n	80028fa <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8002a40:	2003      	movs	r0, #3
 8002a42:	e75b      	b.n	80028fc <HAL_RCC_ClockConfig+0x30>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a44:	4806      	ldr	r0, [pc, #24]	@ (8002a60 <HAL_RCC_ClockConfig+0x194>)
 8002a46:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002a4a:	fba1 0100 	umull	r0, r1, r1, r0
 8002a4e:	f7fe f8cb 	bl	8000be8 <__aeabi_uldivmod>
 8002a52:	e7c4      	b.n	80029de <HAL_RCC_ClockConfig+0x112>
 8002a54:	40023c00 	.word	0x40023c00
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	017d7840 	.word	0x017d7840
 8002a60:	00f42400 	.word	0x00f42400
 8002a64:	080125a4 	.word	0x080125a4
 8002a68:	20000018 	.word	0x20000018

08002a6c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002a6c:	6803      	ldr	r3, [r0, #0]
{
 8002a6e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002a72:	f013 0501 	ands.w	r5, r3, #1
{
 8002a76:	b083      	sub	sp, #12
 8002a78:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002a7a:	d00b      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a7c:	4a8c      	ldr	r2, [pc, #560]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002a7e:	6891      	ldr	r1, [r2, #8]
 8002a80:	f421 0100 	bic.w	r1, r1, #8388608	@ 0x800000
 8002a84:	6091      	str	r1, [r2, #8]
 8002a86:	6b45      	ldr	r5, [r0, #52]	@ 0x34
 8002a88:	6891      	ldr	r1, [r2, #8]
 8002a8a:	4329      	orrs	r1, r5

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002a8c:	fab5 f585 	clz	r5, r5
 8002a90:	096d      	lsrs	r5, r5, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a92:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002a94:	f413 2600 	ands.w	r6, r3, #524288	@ 0x80000
 8002a98:	d010      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x50>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a9a:	4985      	ldr	r1, [pc, #532]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002a9c:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 8002a9e:	f8d1 208c 	ldr.w	r2, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002aa2:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002aa6:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8002aaa:	ea42 0206 	orr.w	r2, r2, r6
 8002aae:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002ab2:	f000 81aa 	beq.w	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002ab6:	fab6 f686 	clz	r6, r6
 8002aba:	0976      	lsrs	r6, r6, #5
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002abc:	02d9      	lsls	r1, r3, #11
 8002abe:	d510      	bpl.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002ac0:	487b      	ldr	r0, [pc, #492]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002ac2:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8002ac4:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002ac8:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002acc:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8002ad0:	ea42 0201 	orr.w	r2, r2, r1
 8002ad4:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002ad8:	f000 819a 	beq.w	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8002adc:	2900      	cmp	r1, #0
 8002ade:	bf08      	it	eq
 8002ae0:	2601      	moveq	r6, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ae2:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8002ae6:	bf18      	it	ne
 8002ae8:	2501      	movne	r5, #1
  {
      plli2sused = 1;
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002aea:	069a      	lsls	r2, r3, #26
 8002aec:	f100 8146 	bmi.w	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x310>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002af0:	06da      	lsls	r2, r3, #27
 8002af2:	d50c      	bpl.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002af4:	4a6e      	ldr	r2, [pc, #440]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002af6:	f8d2 108c 	ldr.w	r1, [r2, #140]	@ 0x8c
 8002afa:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 8002afe:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
 8002b02:	f8d2 108c 	ldr.w	r1, [r2, #140]	@ 0x8c
 8002b06:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8002b08:	4301      	orrs	r1, r0
 8002b0a:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b0e:	045f      	lsls	r7, r3, #17
 8002b10:	d508      	bpl.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b12:	4967      	ldr	r1, [pc, #412]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002b14:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8002b16:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002b1a:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8002b1e:	4302      	orrs	r2, r0
 8002b20:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b24:	0418      	lsls	r0, r3, #16
 8002b26:	d508      	bpl.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b28:	4961      	ldr	r1, [pc, #388]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002b2a:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8002b2c:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002b30:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 8002b34:	4302      	orrs	r2, r0
 8002b36:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b3a:	03d9      	lsls	r1, r3, #15
 8002b3c:	d508      	bpl.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b3e:	495c      	ldr	r1, [pc, #368]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002b40:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8002b42:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002b46:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8002b4a:	4302      	orrs	r2, r0
 8002b4c:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b50:	039a      	lsls	r2, r3, #14
 8002b52:	d508      	bpl.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b54:	4956      	ldr	r1, [pc, #344]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002b56:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8002b58:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002b5c:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8002b60:	4302      	orrs	r2, r0
 8002b62:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b66:	065f      	lsls	r7, r3, #25
 8002b68:	d508      	bpl.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b6a:	4951      	ldr	r1, [pc, #324]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002b6c:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8002b6e:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002b72:	f022 0203 	bic.w	r2, r2, #3
 8002b76:	4302      	orrs	r2, r0
 8002b78:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b7c:	0618      	lsls	r0, r3, #24
 8002b7e:	d508      	bpl.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b80:	494b      	ldr	r1, [pc, #300]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002b82:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8002b84:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002b88:	f022 020c 	bic.w	r2, r2, #12
 8002b8c:	4302      	orrs	r2, r0
 8002b8e:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b92:	05d9      	lsls	r1, r3, #23
 8002b94:	d508      	bpl.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b96:	4946      	ldr	r1, [pc, #280]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002b98:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8002b9a:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002b9e:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8002ba2:	4302      	orrs	r2, r0
 8002ba4:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ba8:	059a      	lsls	r2, r3, #22
 8002baa:	d508      	bpl.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002bac:	4940      	ldr	r1, [pc, #256]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002bae:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8002bb0:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002bb4:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8002bb8:	4302      	orrs	r2, r0
 8002bba:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002bbe:	055f      	lsls	r7, r3, #21
 8002bc0:	d508      	bpl.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002bc2:	493b      	ldr	r1, [pc, #236]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002bc4:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8002bc6:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002bca:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002bce:	4302      	orrs	r2, r0
 8002bd0:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002bd4:	0518      	lsls	r0, r3, #20
 8002bd6:	d508      	bpl.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002bd8:	4935      	ldr	r1, [pc, #212]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002bda:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002bdc:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002be0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002be4:	4302      	orrs	r2, r0
 8002be6:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002bea:	04d9      	lsls	r1, r3, #19
 8002bec:	d508      	bpl.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002bee:	4930      	ldr	r1, [pc, #192]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002bf0:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8002bf2:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002bf6:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8002bfa:	4302      	orrs	r2, r0
 8002bfc:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002c00:	049a      	lsls	r2, r3, #18
 8002c02:	d508      	bpl.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002c04:	492a      	ldr	r1, [pc, #168]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002c06:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8002c08:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002c0c:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8002c10:	4302      	orrs	r2, r0
 8002c12:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002c16:	025f      	lsls	r7, r3, #9
 8002c18:	d508      	bpl.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002c1a:	4925      	ldr	r1, [pc, #148]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002c1c:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8002c1e:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002c22:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8002c26:	4302      	orrs	r2, r0
 8002c28:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002c2c:	0298      	lsls	r0, r3, #10
 8002c2e:	d50c      	bpl.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002c30:	491f      	ldr	r1, [pc, #124]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002c32:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8002c34:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8002c38:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002c3c:	f022 6200 	bic.w	r2, r2, #134217728	@ 0x8000000
      pllsaiused = 1;
 8002c40:	bf08      	it	eq
 8002c42:	2601      	moveq	r6, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002c44:	4302      	orrs	r2, r0
 8002c46:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8002c4a:	f013 0f08 	tst.w	r3, #8
 8002c4e:	bf18      	it	ne
 8002c50:	2601      	movne	r6, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c52:	0359      	lsls	r1, r3, #13
 8002c54:	d508      	bpl.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c56:	4916      	ldr	r1, [pc, #88]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002c58:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8002c5a:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002c5e:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002c62:	4302      	orrs	r2, r0
 8002c64:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002c68:	021a      	lsls	r2, r3, #8
 8002c6a:	d40a      	bmi.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x216>
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002c6c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002c70:	d015      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x232>
 8002c72:	b9a5      	cbnz	r5, 8002c9e <HAL_RCCEx_PeriphCLKConfig+0x232>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002c74:	2e01      	cmp	r6, #1
 8002c76:	f000 80cd 	beq.w	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002c7a:	2000      	movs	r0, #0
}
 8002c7c:	b003      	add	sp, #12
 8002c7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c82:	490b      	ldr	r1, [pc, #44]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002c84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c88:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8002c8c:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002c90:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8002c94:	ea42 0200 	orr.w	r2, r2, r0
 8002c98:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002c9c:	d1e9      	bne.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x206>
    __HAL_RCC_PLLI2S_DISABLE();
 8002c9e:	4d04      	ldr	r5, [pc, #16]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002ca0:	682b      	ldr	r3, [r5, #0]
 8002ca2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002ca6:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8002ca8:	f7fe fdec 	bl	8001884 <HAL_GetTick>
 8002cac:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002cae:	e006      	b.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x252>
 8002cb0:	40023800 	.word	0x40023800
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002cb4:	f7fe fde6 	bl	8001884 <HAL_GetTick>
 8002cb8:	1bc0      	subs	r0, r0, r7
 8002cba:	2864      	cmp	r0, #100	@ 0x64
 8002cbc:	d85a      	bhi.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x308>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002cbe:	682b      	ldr	r3, [r5, #0]
 8002cc0:	011b      	lsls	r3, r3, #4
 8002cc2:	d4f7      	bmi.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x248>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002cc4:	6823      	ldr	r3, [r4, #0]
 8002cc6:	07df      	lsls	r7, r3, #31
 8002cc8:	d512      	bpl.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8002cca:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8002ccc:	b982      	cbnz	r2, 8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x284>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002cce:	f8d5 2084 	ldr.w	r2, [r5, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002cd2:	f8d5 1084 	ldr.w	r1, [r5, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002cd6:	f402 3240 	and.w	r2, r2, #196608	@ 0x30000
 8002cda:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	6861      	ldr	r1, [r4, #4]
 8002ce2:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8002ce6:	68a1      	ldr	r1, [r4, #8]
 8002ce8:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8002cec:	f8c5 2084 	str.w	r2, [r5, #132]	@ 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002cf0:	031d      	lsls	r5, r3, #12
 8002cf2:	f100 810b 	bmi.w	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002cf6:	02d8      	lsls	r0, r3, #11
 8002cf8:	d504      	bpl.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x298>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002cfa:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002cfc:	f5b2 0f80 	cmp.w	r2, #4194304	@ 0x400000
 8002d00:	f000 8109 	beq.w	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d04:	01d9      	lsls	r1, r3, #7
 8002d06:	d511      	bpl.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d08:	49a2      	ldr	r1, [pc, #648]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8002d0a:	f8d1 2084 	ldr.w	r2, [r1, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002d0e:	f8d1 0084 	ldr.w	r0, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002d12:	f002 6270 	and.w	r2, r2, #251658240	@ 0xf000000
 8002d16:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 8002d1a:	4302      	orrs	r2, r0
 8002d1c:	6860      	ldr	r0, [r4, #4]
 8002d1e:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8002d22:	6920      	ldr	r0, [r4, #16]
 8002d24:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8002d28:	f8c1 2084 	str.w	r2, [r1, #132]	@ 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002d2c:	019a      	lsls	r2, r3, #6
 8002d2e:	d50d      	bpl.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x2e0>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d30:	6923      	ldr	r3, [r4, #16]
 8002d32:	6861      	ldr	r1, [r4, #4]
 8002d34:	041b      	lsls	r3, r3, #16
 8002d36:	68e2      	ldr	r2, [r4, #12]
 8002d38:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8002d3c:	68a1      	ldr	r1, [r4, #8]
 8002d3e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002d42:	4a94      	ldr	r2, [pc, #592]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8002d44:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002d48:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002d4c:	4d91      	ldr	r5, [pc, #580]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8002d4e:	682b      	ldr	r3, [r5, #0]
 8002d50:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002d54:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8002d56:	f7fe fd95 	bl	8001884 <HAL_GetTick>
 8002d5a:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d5c:	e004      	b.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d5e:	f7fe fd91 	bl	8001884 <HAL_GetTick>
 8002d62:	1bc0      	subs	r0, r0, r7
 8002d64:	2864      	cmp	r0, #100	@ 0x64
 8002d66:	d805      	bhi.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x308>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d68:	682b      	ldr	r3, [r5, #0]
 8002d6a:	011b      	lsls	r3, r3, #4
 8002d6c:	d5f7      	bpl.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  if(pllsaiused == 1)
 8002d6e:	2e01      	cmp	r6, #1
 8002d70:	d183      	bne.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x20e>
 8002d72:	e04f      	b.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
        return HAL_TIMEOUT;
 8002d74:	2003      	movs	r0, #3
}
 8002d76:	b003      	add	sp, #12
 8002d78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d7c:	4b85      	ldr	r3, [pc, #532]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x528>)
    PWR->CR1 |= PWR_CR1_DBP;
 8002d7e:	4f86      	ldr	r7, [pc, #536]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d82:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002d86:	641a      	str	r2, [r3, #64]	@ 0x40
 8002d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d8e:	9301      	str	r3, [sp, #4]
 8002d90:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d98:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8002d9a:	f7fe fd73 	bl	8001884 <HAL_GetTick>
 8002d9e:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002da0:	e005      	b.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x342>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002da2:	f7fe fd6f 	bl	8001884 <HAL_GetTick>
 8002da6:	eba0 0008 	sub.w	r0, r0, r8
 8002daa:	2864      	cmp	r0, #100	@ 0x64
 8002dac:	d8e2      	bhi.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x308>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	05db      	lsls	r3, r3, #23
 8002db2:	d5f6      	bpl.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x336>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002db4:	4f77      	ldr	r7, [pc, #476]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x528>)
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002db6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002db8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002dba:	f403 7140 	and.w	r1, r3, #768	@ 0x300
 8002dbe:	f412 7240 	ands.w	r2, r2, #768	@ 0x300
 8002dc2:	d011      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
 8002dc4:	428a      	cmp	r2, r1
 8002dc6:	d00f      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002dc8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8002dca:	6f38      	ldr	r0, [r7, #112]	@ 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002dcc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8002dd0:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 8002dd4:	6738      	str	r0, [r7, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002dd6:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002dd8:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
 8002ddc:	6738      	str	r0, [r7, #112]	@ 0x70
      RCC->BDCR = tmpreg0;
 8002dde:	673a      	str	r2, [r7, #112]	@ 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002de0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002de2:	07d0      	lsls	r0, r2, #31
 8002de4:	f100 80c1 	bmi.w	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002de8:	f5b1 7f40 	cmp.w	r1, #768	@ 0x300
 8002dec:	f000 80af 	beq.w	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8002df0:	4968      	ldr	r1, [pc, #416]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8002df2:	688a      	ldr	r2, [r1, #8]
 8002df4:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 8002df8:	608a      	str	r2, [r1, #8]
 8002dfa:	4a66      	ldr	r2, [pc, #408]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8002dfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e00:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8002e02:	430b      	orrs	r3, r1
 8002e04:	6713      	str	r3, [r2, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002e06:	6823      	ldr	r3, [r4, #0]
 8002e08:	e672      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x84>
 8002e0a:	2501      	movs	r5, #1
  uint32_t pllsaiused = 0;
 8002e0c:	2600      	movs	r6, #0
 8002e0e:	e655      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002e10:	2501      	movs	r5, #1
 8002e12:	e666      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    __HAL_RCC_PLLSAI_DISABLE();
 8002e14:	4d5f      	ldr	r5, [pc, #380]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8002e16:	682b      	ldr	r3, [r5, #0]
 8002e18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e1c:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8002e1e:	f7fe fd31 	bl	8001884 <HAL_GetTick>
 8002e22:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002e24:	e004      	b.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e26:	f7fe fd2d 	bl	8001884 <HAL_GetTick>
 8002e2a:	1b80      	subs	r0, r0, r6
 8002e2c:	2864      	cmp	r0, #100	@ 0x64
 8002e2e:	d8a1      	bhi.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x308>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002e30:	682b      	ldr	r3, [r5, #0]
 8002e32:	009f      	lsls	r7, r3, #2
 8002e34:	d4f7      	bmi.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002e36:	6823      	ldr	r3, [r4, #0]
 8002e38:	031d      	lsls	r5, r3, #12
 8002e3a:	f100 8091 	bmi.w	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8002e3e:	02d8      	lsls	r0, r3, #11
 8002e40:	d51d      	bpl.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x412>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002e42:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002e44:	b9da      	cbnz	r2, 8002e7e <HAL_RCCEx_PeriphCLKConfig+0x412>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002e46:	4953      	ldr	r1, [pc, #332]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8002e48:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002e4c:	f8d1 0088 	ldr.w	r0, [r1, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002e50:	f402 3240 	and.w	r2, r2, #196608	@ 0x30000
 8002e54:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 8002e58:	4302      	orrs	r2, r0
 8002e5a:	6960      	ldr	r0, [r4, #20]
 8002e5c:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8002e60:	69a0      	ldr	r0, [r4, #24]
 8002e62:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002e66:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002e6a:	f8d1 208c 	ldr.w	r2, [r1, #140]	@ 0x8c
 8002e6e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8002e70:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 8002e74:	3801      	subs	r0, #1
 8002e76:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002e7a:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002e7e:	0299      	lsls	r1, r3, #10
 8002e80:	d515      	bpl.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x442>
 8002e82:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8002e84:	f1b2 6f00 	cmp.w	r2, #134217728	@ 0x8000000
 8002e88:	d111      	bne.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x442>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e8a:	4942      	ldr	r1, [pc, #264]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8002e8c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002e90:	f8d1 0088 	ldr.w	r0, [r1, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002e94:	f002 6270 	and.w	r2, r2, #251658240	@ 0xf000000
 8002e98:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 8002e9c:	4302      	orrs	r2, r0
 8002e9e:	6960      	ldr	r0, [r4, #20]
 8002ea0:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8002ea4:	6a20      	ldr	r0, [r4, #32]
 8002ea6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8002eaa:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002eae:	071a      	lsls	r2, r3, #28
 8002eb0:	d519      	bpl.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x47a>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002eb2:	4a38      	ldr	r2, [pc, #224]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x528>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002eb4:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002eb6:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002eba:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002ebe:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 8002ec2:	69e0      	ldr	r0, [r4, #28]
 8002ec4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ec8:	430b      	orrs	r3, r1
 8002eca:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8002ece:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 8002ed2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002ed6:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8002eda:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8002edc:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002ee0:	430b      	orrs	r3, r1
 8002ee2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8002ee6:	4c2b      	ldr	r4, [pc, #172]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8002ee8:	6823      	ldr	r3, [r4, #0]
 8002eea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002eee:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002ef0:	f7fe fcc8 	bl	8001884 <HAL_GetTick>
 8002ef4:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ef6:	e005      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x498>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ef8:	f7fe fcc4 	bl	8001884 <HAL_GetTick>
 8002efc:	1b40      	subs	r0, r0, r5
 8002efe:	2864      	cmp	r0, #100	@ 0x64
 8002f00:	f63f af38 	bhi.w	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x308>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002f04:	6823      	ldr	r3, [r4, #0]
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	d5f6      	bpl.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002f0a:	e6b6      	b.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f0c:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8002f0e:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 8002f12:	f47f aef0 	bne.w	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x28a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f16:	491f      	ldr	r1, [pc, #124]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8002f18:	f8d1 2084 	ldr.w	r2, [r1, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f1c:	f8d1 0084 	ldr.w	r0, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002f20:	f402 3240 	and.w	r2, r2, #196608	@ 0x30000
 8002f24:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 8002f28:	4302      	orrs	r2, r0
 8002f2a:	6860      	ldr	r0, [r4, #4]
 8002f2c:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8002f30:	68e0      	ldr	r0, [r4, #12]
 8002f32:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002f36:	f8c1 2084 	str.w	r2, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002f3a:	f8d1 008c 	ldr.w	r0, [r1, #140]	@ 0x8c
 8002f3e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002f40:	f020 001f 	bic.w	r0, r0, #31
 8002f44:	3a01      	subs	r2, #1
 8002f46:	4302      	orrs	r2, r0
 8002f48:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
 8002f4c:	e6da      	b.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x298>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f4e:	4811      	ldr	r0, [pc, #68]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8002f50:	4912      	ldr	r1, [pc, #72]	@ (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8002f52:	6882      	ldr	r2, [r0, #8]
 8002f54:	4019      	ands	r1, r3
 8002f56:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	6082      	str	r2, [r0, #8]
 8002f5e:	e74c      	b.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x38e>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f60:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8002f62:	2a00      	cmp	r2, #0
 8002f64:	f43f af6f 	beq.w	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x3da>
 8002f68:	e769      	b.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
        tickstart = HAL_GetTick();
 8002f6a:	f7fe fc8b 	bl	8001884 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f6e:	f241 3988 	movw	r9, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8002f72:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f74:	e006      	b.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x518>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f76:	f7fe fc85 	bl	8001884 <HAL_GetTick>
 8002f7a:	eba0 0008 	sub.w	r0, r0, r8
 8002f7e:	4548      	cmp	r0, r9
 8002f80:	f63f aef8 	bhi.w	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f84:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f86:	0799      	lsls	r1, r3, #30
 8002f88:	d5f5      	bpl.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f8a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002f8c:	f403 7140 	and.w	r1, r3, #768	@ 0x300
 8002f90:	e72a      	b.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
 8002f92:	bf00      	nop
 8002f94:	40023800 	.word	0x40023800
 8002f98:	40007000 	.word	0x40007000
 8002f9c:	0ffffcff 	.word	0x0ffffcff

08002fa0 <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop

08002fa4 <HAL_SDRAM_Init>:
  if(hsdram == NULL)
 8002fa4:	b1f0      	cbz	r0, 8002fe4 <HAL_SDRAM_Init+0x40>
{   
 8002fa6:	b538      	push	{r3, r4, r5, lr}
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8002fa8:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8002fac:	4604      	mov	r4, r0
 8002fae:	460d      	mov	r5, r1
 8002fb0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002fb4:	b18b      	cbz	r3, 8002fda <HAL_SDRAM_Init+0x36>
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8002fb6:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002fb8:	2302      	movs	r3, #2
 8002fba:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8002fbe:	f851 0b04 	ldr.w	r0, [r1], #4
 8002fc2:	f000 f841 	bl	8003048 <FMC_SDRAM_Init>
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8002fc6:	6862      	ldr	r2, [r4, #4]
 8002fc8:	4629      	mov	r1, r5
 8002fca:	6820      	ldr	r0, [r4, #0]
 8002fcc:	f000 f876 	bl	80030bc <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
 8002fd0:	2301      	movs	r3, #1
  return HAL_OK;
 8002fd2:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8002fd4:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
}
 8002fd8:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8002fda:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8002fde:	f7ff ffdf 	bl	8002fa0 <HAL_SDRAM_MspInit>
 8002fe2:	e7e8      	b.n	8002fb6 <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 8002fe4:	2001      	movs	r0, #1
}
 8002fe6:	4770      	bx	lr

08002fe8 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8002fe8:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8002fea:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d013      	beq.n	800301a <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	460d      	mov	r5, r1
 8002ff6:	4604      	mov	r4, r0
 8002ff8:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8002ffc:	6800      	ldr	r0, [r0, #0]
 8002ffe:	f000 f8a7 	bl	8003150 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8003002:	682b      	ldr	r3, [r5, #0]
 8003004:	2b02      	cmp	r3, #2
 8003006:	d004      	beq.n	8003012 <HAL_SDRAM_SendCommand+0x2a>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8003008:	2301      	movs	r3, #1
 800300a:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  }
  
  return HAL_OK;  
 800300e:	2000      	movs	r0, #0
}
 8003010:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8003012:	2305      	movs	r3, #5
 8003014:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8003018:	e7f9      	b.n	800300e <HAL_SDRAM_SendCommand+0x26>
 800301a:	b2d8      	uxtb	r0, r3
}
 800301c:	bd38      	pop	{r3, r4, r5, pc}
 800301e:	bf00      	nop

08003020 <HAL_SDRAM_ProgramRefreshRate>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8003020:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8003024:	2b02      	cmp	r3, #2
 8003026:	d00c      	beq.n	8003042 <HAL_SDRAM_ProgramRefreshRate+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003028:	2302      	movs	r3, #2
{
 800302a:	b510      	push	{r4, lr}
 800302c:	4604      	mov	r4, r0
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800302e:	6800      	ldr	r0, [r0, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003030:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8003034:	f000 f8a4 	bl	8003180 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003038:	2301      	movs	r3, #1
  
  return HAL_OK;   
 800303a:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 800303c:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
}
 8003040:	bd10      	pop	{r4, pc}
 8003042:	b2d8      	uxtb	r0, r3
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop

08003048 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8003048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800304c:	e9d1 8200 	ldrd	r8, r2, [r1]
                        Init->MemoryDataWidth    |\
                        Init->InternalBankNumber |\
                        Init->CASLatency         |\
                        Init->WriteProtection    |\
                        Init->SDClockPeriod      |\
                        Init->ReadBurst          |\
 8003050:	e9d1 3c07 	ldrd	r3, ip, [r1, #28]
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8003054:	f1b8 0f01 	cmp.w	r8, #1
                        Init->ReadPipeDelay
 8003058:	6a4f      	ldr	r7, [r1, #36]	@ 0x24
                        Init->MemoryDataWidth    |\
 800305a:	e9d1 e602 	ldrd	lr, r6, [r1, #8]
                        Init->CASLatency         |\
 800305e:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
                        Init->WriteProtection    |\
 8003062:	6989      	ldr	r1, [r1, #24]
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8003064:	d011      	beq.n	800308a <FMC_SDRAM_Init+0x42>
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003066:	ea43 030c 	orr.w	r3, r3, ip
 800306a:	433b      	orrs	r3, r7
 800306c:	4313      	orrs	r3, r2
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800306e:	4a12      	ldr	r2, [pc, #72]	@ (80030b8 <FMC_SDRAM_Init+0x70>)
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003070:	ea43 030e 	orr.w	r3, r3, lr
 8003074:	4333      	orrs	r3, r6
 8003076:	432b      	orrs	r3, r5
 8003078:	4323      	orrs	r3, r4
 800307a:	430b      	orrs	r3, r1
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800307c:	6801      	ldr	r1, [r0, #0]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800307e:	400a      	ands	r2, r1
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003080:	4313      	orrs	r3, r2
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8003082:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8003084:	2000      	movs	r0, #0
 8003086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800308a:	ea42 020e 	orr.w	r2, r2, lr
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800308e:	ea43 030c 	orr.w	r3, r3, ip
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003092:	4332      	orrs	r2, r6
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8003094:	433b      	orrs	r3, r7
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003096:	432a      	orrs	r2, r5
 8003098:	4322      	orrs	r2, r4
 800309a:	430a      	orrs	r2, r1
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800309c:	6801      	ldr	r1, [r0, #0]
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800309e:	6844      	ldr	r4, [r0, #4]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80030a0:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80030a4:	430b      	orrs	r3, r1
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80030a6:	4904      	ldr	r1, [pc, #16]	@ (80030b8 <FMC_SDRAM_Init+0x70>)
 80030a8:	4021      	ands	r1, r4
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80030aa:	6003      	str	r3, [r0, #0]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80030ac:	430a      	orrs	r2, r1
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80030ae:	6042      	str	r2, [r0, #4]
}
 80030b0:	2000      	movs	r0, #0
 80030b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030b6:	bf00      	nop
 80030b8:	ffff8000 	.word	0xffff8000

080030bc <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80030bc:	b5f0      	push	{r4, r5, r6, r7, lr}
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80030be:	68cc      	ldr	r4, [r1, #12]
  if (Bank != FMC_SDRAM_BANK2) 
 80030c0:	2a01      	cmp	r2, #1
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
                       (((Timing->RPDelay)-1) << 20)             |\
 80030c2:	694b      	ldr	r3, [r1, #20]
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80030c4:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80030c8:	688d      	ldr	r5, [r1, #8]
                       (((Timing->RCDDelay)-1) << 24));
 80030ca:	698f      	ldr	r7, [r1, #24]
                       (((Timing->RPDelay)-1) << 20)             |\
 80030cc:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80030d0:	ea4f 3e04 	mov.w	lr, r4, lsl #12
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80030d4:	684c      	ldr	r4, [r1, #4]
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80030d6:	680e      	ldr	r6, [r1, #0]
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80030d8:	f105 35ff 	add.w	r5, r5, #4294967295	@ 0xffffffff
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80030dc:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
                       (((Timing->RPDelay)-1) << 20)             |\
 80030e0:	ea4f 5303 	mov.w	r3, r3, lsl #20
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80030e4:	ea4f 2505 	mov.w	r5, r5, lsl #8
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80030e8:	f106 36ff 	add.w	r6, r6, #4294967295	@ 0xffffffff
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80030ec:	ea4f 1c04 	mov.w	ip, r4, lsl #4
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80030f0:	690c      	ldr	r4, [r1, #16]
                       (((Timing->RCDDelay)-1) << 24));
 80030f2:	f107 31ff 	add.w	r1, r7, #4294967295	@ 0xffffffff
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80030f6:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
                       (((Timing->RCDDelay)-1) << 24));
 80030fa:	ea4f 6101 	mov.w	r1, r1, lsl #24
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80030fe:	ea4f 4404 	mov.w	r4, r4, lsl #16
  if (Bank != FMC_SDRAM_BANK2) 
 8003102:	d00e      	beq.n	8003122 <FMC_SDRAM_Timing_Init+0x66>
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003104:	ea4e 0303 	orr.w	r3, lr, r3
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8003108:	6882      	ldr	r2, [r0, #8]
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800310a:	4333      	orrs	r3, r6
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800310c:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003110:	ea43 030c 	orr.w	r3, r3, ip
 8003114:	432b      	orrs	r3, r5
 8003116:	4323      	orrs	r3, r4
 8003118:	430b      	orrs	r3, r1
 800311a:	4313      	orrs	r3, r2
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800311c:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 800311e:	2000      	movs	r0, #0
 8003120:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003122:	ea4c 0c05 	orr.w	ip, ip, r5
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8003126:	ea4e 0e03 	orr.w	lr, lr, r3
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800312a:	4a08      	ldr	r2, [pc, #32]	@ (800314c <FMC_SDRAM_Timing_Init+0x90>)
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800312c:	ea4c 0306 	orr.w	r3, ip, r6
 8003130:	4323      	orrs	r3, r4
 8003132:	430b      	orrs	r3, r1
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8003134:	6881      	ldr	r1, [r0, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8003136:	400a      	ands	r2, r1
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8003138:	68c1      	ldr	r1, [r0, #12]
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800313a:	f001 4170 	and.w	r1, r1, #4026531840	@ 0xf0000000
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800313e:	ea4e 0202 	orr.w	r2, lr, r2
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8003142:	430b      	orrs	r3, r1
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8003144:	6082      	str	r2, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8003146:	60c3      	str	r3, [r0, #12]
}
 8003148:	2000      	movs	r0, #0
 800314a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800314c:	ff0f0fff 	.word	0xff0f0fff

08003150 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8003150:	b410      	push	{r4}
  __IO uint32_t tmpr = 0;
 8003152:	2300      	movs	r3, #0
{
 8003154:	b083      	sub	sp, #12
 8003156:	4602      	mov	r2, r0
  __IO uint32_t tmpr = 0;
 8003158:	9301      	str	r3, [sp, #4]
                    );
    
  Device->SDCMR = tmpr;
  
  return HAL_OK;  
}
 800315a:	4618      	mov	r0, r3
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800315c:	e9d1 3400 	ldrd	r3, r4, [r1]
 8003160:	4323      	orrs	r3, r4
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8003162:	e9d1 1402 	ldrd	r1, r4, [r1, #8]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8003166:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800316a:	3901      	subs	r1, #1
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800316c:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 8003170:	9301      	str	r3, [sp, #4]
  Device->SDCMR = tmpr;
 8003172:	9b01      	ldr	r3, [sp, #4]
 8003174:	6113      	str	r3, [r2, #16]
}
 8003176:	b003      	add	sp, #12
 8003178:	f85d 4b04 	ldr.w	r4, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop

08003180 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8003180:	4603      	mov	r3, r0
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
  
  return HAL_OK;   
}
 8003182:	2000      	movs	r0, #0
  Device->SDRTR |= (RefreshRate<<1);
 8003184:	695a      	ldr	r2, [r3, #20]
 8003186:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800318a:	615a      	str	r2, [r3, #20]
}
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop

08003190 <_GLOBAL__sub_I_JpegDec>:
#include "picojpeg.h"
#include <string.h>

JPEGDecoder JpegDec;

JPEGDecoder::JPEGDecoder() {
 8003190:	4b05      	ldr	r3, [pc, #20]	@ (80031a8 <_GLOBAL__sub_I_JpegDec+0x18>)
 8003192:	2200      	movs	r2, #0
  mcu_x = 0;
  mcu_y = 0;
  is_available = 0;
 8003194:	2000      	movs	r0, #0
 8003196:	2100      	movs	r1, #0
JPEGDecoder::JPEGDecoder() {
 8003198:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
  mcu_y = 0;
 800319c:	639a      	str	r2, [r3, #56]	@ 0x38
  thisPtr = this;
 800319e:	665b      	str	r3, [r3, #100]	@ 0x64
  is_available = 0;
 80031a0:	e9c3 010c 	strd	r0, r1, [r3, #48]	@ 0x30
#if defined(LOAD_SD_LIBRARY) || defined(LOAD_SDFAT_LIBRARY)
  if (jpg_source == JPEG_SD_FILE)
    if (g_pInFileSd)
      g_pInFileSd.close();
#endif
}
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	20000948 	.word	0x20000948

080031ac <_GLOBAL__sub_D_JpegDec>:
  if (pImage)
 80031ac:	4b02      	ldr	r3, [pc, #8]	@ (80031b8 <_GLOBAL__sub_D_JpegDec+0xc>)
 80031ae:	6e18      	ldr	r0, [r3, #96]	@ 0x60
 80031b0:	b108      	cbz	r0, 80031b6 <_GLOBAL__sub_D_JpegDec+0xa>
    delete[] pImage;
 80031b2:	f005 be4b 	b.w	8008e4c <_ZdaPv>
}
 80031b6:	4770      	bx	lr
 80031b8:	20000948 	.word	0x20000948

080031bc <_Z13loadRGB565LCDmmmmPth>:
#include "stm32f7xx_hal.h"

#define TRANS 128

void loadRGB565LCD(uint32_t x, uint32_t y, uint32_t width, uint32_t height,
                   uint16_t *src, uint8_t resize) {
 80031bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031c0:	b089      	sub	sp, #36	@ 0x24
 80031c2:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80031c4:	f89d 604c 	ldrb.w	r6, [sp, #76]	@ 0x4c
  for (int i = 0; i < height; i++) {
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d048      	beq.n	800325e <_Z13loadRGB565LCDmmmmPth+0xa2>
 80031cc:	2a00      	cmp	r2, #0
 80031ce:	d046      	beq.n	800325e <_Z13loadRGB565LCDmmmmPth+0xa2>
 80031d0:	2e00      	cmp	r6, #0
 80031d2:	d044      	beq.n	800325e <_Z13loadRGB565LCDmmmmPth+0xa2>
 80031d4:	fa1f fa81 	uxth.w	sl, r1
 80031d8:	1ea1      	subs	r1, r4, #2
    for (int j = 0; j < width; j++) {

      uint16_t color = src[i * width + j];

      for (int ti = 0; ti < resize; ti++) {
 80031da:	2400      	movs	r4, #0
 80031dc:	b280      	uxth	r0, r0
 80031de:	4625      	mov	r5, r4
 80031e0:	46a3      	mov	fp, r4
    for (int j = 0; j < width; j++) {
 80031e2:	f04f 0800 	mov.w	r8, #0
 80031e6:	eb01 0745 	add.w	r7, r1, r5, lsl #1
 80031ea:	9504      	str	r5, [sp, #16]
 80031ec:	4644      	mov	r4, r8
 80031ee:	46b9      	mov	r9, r7
 80031f0:	4680      	mov	r8, r0
 80031f2:	9203      	str	r2, [sp, #12]
 80031f4:	9107      	str	r1, [sp, #28]
 80031f6:	e9cd 3005 	strd	r3, r0, [sp, #20]
      uint16_t color = src[i * width + j];
 80031fa:	f839 5f02 	ldrh.w	r5, [r9, #2]!
      for (int ti = 0; ti < resize; ti++) {
 80031fe:	2700      	movs	r7, #0
 8003200:	9401      	str	r4, [sp, #4]
 8003202:	463c      	mov	r4, r7
 8003204:	462f      	mov	r7, r5
 8003206:	f8cd 9008 	str.w	r9, [sp, #8]
        for (int tj = 0; tj < resize; tj++) {
          BSP_LCD_DrawPixel(x + j * resize + tj, y + i * resize + ti, color);
 800320a:	eb0a 0504 	add.w	r5, sl, r4
        for (int tj = 0; tj < resize; tj++) {
 800320e:	f04f 0900 	mov.w	r9, #0
          BSP_LCD_DrawPixel(x + j * resize + tj, y + i * resize + ti, color);
 8003212:	b2ad      	uxth	r5, r5
 8003214:	eb08 0009 	add.w	r0, r8, r9
        for (int tj = 0; tj < resize; tj++) {
 8003218:	f109 0901 	add.w	r9, r9, #1
          BSP_LCD_DrawPixel(x + j * resize + tj, y + i * resize + ti, color);
 800321c:	463a      	mov	r2, r7
 800321e:	4629      	mov	r1, r5
 8003220:	b280      	uxth	r0, r0
 8003222:	f7fe f851 	bl	80012c8 <BSP_LCD_DrawPixel>
        for (int tj = 0; tj < resize; tj++) {
 8003226:	45b1      	cmp	r9, r6
 8003228:	d1f4      	bne.n	8003214 <_Z13loadRGB565LCDmmmmPth+0x58>
      for (int ti = 0; ti < resize; ti++) {
 800322a:	3401      	adds	r4, #1
 800322c:	42b4      	cmp	r4, r6
 800322e:	d1ec      	bne.n	800320a <_Z13loadRGB565LCDmmmmPth+0x4e>
    for (int j = 0; j < width; j++) {
 8003230:	eb06 0308 	add.w	r3, r6, r8
 8003234:	e9dd 4901 	ldrd	r4, r9, [sp, #4]
 8003238:	fa1f f883 	uxth.w	r8, r3
 800323c:	9b03      	ldr	r3, [sp, #12]
 800323e:	3401      	adds	r4, #1
 8003240:	429c      	cmp	r4, r3
 8003242:	d1da      	bne.n	80031fa <_Z13loadRGB565LCDmmmmPth+0x3e>
  for (int i = 0; i < height; i++) {
 8003244:	461a      	mov	r2, r3
 8003246:	f10b 0b01 	add.w	fp, fp, #1
 800324a:	9d04      	ldr	r5, [sp, #16]
 800324c:	44b2      	add	sl, r6
 800324e:	9907      	ldr	r1, [sp, #28]
 8003250:	4415      	add	r5, r2
 8003252:	fa1f fa8a 	uxth.w	sl, sl
 8003256:	e9dd 3005 	ldrd	r3, r0, [sp, #20]
 800325a:	455b      	cmp	r3, fp
 800325c:	d1c1      	bne.n	80031e2 <_Z13loadRGB565LCDmmmmPth+0x26>
        }
      }
    }
  }
}
 800325e:	b009      	add	sp, #36	@ 0x24
 8003260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003264 <_Z13displaystringPcii>:
    for (int j = y1 - 1; j < y2; j++) {
      BSP_LCD_DrawPixel(i, j, black);
    }
}

void displaystring(char *buf, int x, int y) {
 8003264:	4694      	mov	ip, r2
  BSP_LCD_DisplayStringAt(x, y, buf, LEFT_MODE);
 8003266:	2303      	movs	r3, #3
 8003268:	4602      	mov	r2, r0
 800326a:	b288      	uxth	r0, r1
 800326c:	fa1f f18c 	uxth.w	r1, ip
 8003270:	f7fd bfc4 	b.w	80011fc <BSP_LCD_DisplayStringAt>

08003274 <_Z14detectResponseifiii>:
#define USENEW
int unper_cnt = 0;

#ifdef USENEW
void detectResponse(int person, float ms, int training_mode, int pred,
                    int label) {
 8003274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003278:	4616      	mov	r6, r2
 800327a:	461d      	mov	r5, r3
 800327c:	ed2d 8b02 	vpush	{d8}
 8003280:	eeb0 8a40 	vmov.f32	s16, s0
 8003284:	b088      	sub	sp, #32
  char buf[20];
  if (person) {
 8003286:	2800      	cmp	r0, #0
 8003288:	f000 80a6 	beq.w	80033d8 <_Z14detectResponseifiii+0x164>
    unper_cnt = 0;
 800328c:	4bbb      	ldr	r3, [pc, #748]	@ (800357c <_Z14detectResponseifiii+0x308>)
 800328e:	2200      	movs	r2, #0
 8003290:	601a      	str	r2, [r3, #0]
    if (training_mode) {
 8003292:	2900      	cmp	r1, #0
 8003294:	f000 8133 	beq.w	80034fe <_Z14detectResponseifiii+0x28a>
  for (int i = x1 - 1; i < x2; i++)
 8003298:	f240 180d 	movw	r8, #269	@ 0x10d
    for (int j = y1 - 1; j < y2; j++) {
 800329c:	fa1f f788 	uxth.w	r7, r8
 80032a0:	2427      	movs	r4, #39	@ 0x27
      BSP_LCD_DrawPixel(i, j, green);
 80032a2:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 80032a4:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, green);
 80032a6:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80032aa:	4638      	mov	r0, r7
 80032ac:	f7fe f80c 	bl	80012c8 <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 80032b0:	2c64      	cmp	r4, #100	@ 0x64
 80032b2:	d1f6      	bne.n	80032a2 <_Z14detectResponseifiii+0x2e>
  for (int i = x1 - 1; i < x2; i++)
 80032b4:	f108 0801 	add.w	r8, r8, #1
 80032b8:	f5b8 7ff0 	cmp.w	r8, #480	@ 0x1e0
 80032bc:	d1ee      	bne.n	800329c <_Z14detectResponseifiii+0x28>
 80032be:	f240 180d 	movw	r8, #269	@ 0x10d
    for (int j = y1 - 1; j < y2; j++) {
 80032c2:	fa1f f788 	uxth.w	r7, r8
 80032c6:	247c      	movs	r4, #124	@ 0x7c
      BSP_LCD_DrawPixel(i, j, green);
 80032c8:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 80032ca:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, green);
 80032cc:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80032d0:	4638      	mov	r0, r7
 80032d2:	f7fd fff9 	bl	80012c8 <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 80032d6:	2cb4      	cmp	r4, #180	@ 0xb4
 80032d8:	d1f6      	bne.n	80032c8 <_Z14detectResponseifiii+0x54>
  for (int i = x1 - 1; i < x2; i++)
 80032da:	f108 0801 	add.w	r8, r8, #1
 80032de:	f5b8 7ff0 	cmp.w	r8, #480	@ 0x1e0
 80032e2:	d1ee      	bne.n	80032c2 <_Z14detectResponseifiii+0x4e>
 80032e4:	f240 180d 	movw	r8, #269	@ 0x10d
    for (int j = y1 - 1; j < y2; j++) {
 80032e8:	fa1f f788 	uxth.w	r7, r8
 80032ec:	24cc      	movs	r4, #204	@ 0xcc
      BSP_LCD_DrawPixel(i, j, green);
 80032ee:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 80032f0:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, green);
 80032f2:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80032f6:	4638      	mov	r0, r7
 80032f8:	f7fd ffe6 	bl	80012c8 <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 80032fc:	2cfa      	cmp	r4, #250	@ 0xfa
 80032fe:	d1f6      	bne.n	80032ee <_Z14detectResponseifiii+0x7a>
  for (int i = x1 - 1; i < x2; i++)
 8003300:	f108 0801 	add.w	r8, r8, #1
 8003304:	f5b8 7ff0 	cmp.w	r8, #480	@ 0x1e0
 8003308:	d1ee      	bne.n	80032e8 <_Z14detectResponseifiii+0x74>
      drawGreenBackground(270, 480, 40, 100);
      drawGreenBackground(270, 480, 125, 180);
      drawGreenBackground(270, 480, 205, 250);
      BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800330a:	489d      	ldr	r0, [pc, #628]	@ (8003580 <_Z14detectResponseifiii+0x30c>)
      sprintf(buf, " Prediction:");
 800330c:	ac03      	add	r4, sp, #12
      BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800330e:	f7fd fea1 	bl	8001054 <BSP_LCD_SetTextColor>
      sprintf(buf, " Prediction:");
 8003312:	4b9c      	ldr	r3, [pc, #624]	@ (8003584 <_Z14detectResponseifiii+0x310>)
 8003314:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003316:	c407      	stmia	r4!, {r0, r1, r2}
      BSP_LCD_DisplayStringAt(273, 80, buf, LEFT_MODE);
 8003318:	aa03      	add	r2, sp, #12
 800331a:	2150      	movs	r1, #80	@ 0x50
 800331c:	f240 1011 	movw	r0, #273	@ 0x111
      sprintf(buf, " Prediction:");
 8003320:	7023      	strb	r3, [r4, #0]
      BSP_LCD_DisplayStringAt(273, 80, buf, LEFT_MODE);
 8003322:	2303      	movs	r3, #3
 8003324:	f7fd ff6a 	bl	80011fc <BSP_LCD_DisplayStringAt>
      sprintf(buf, "  class %d  ", pred);
 8003328:	4632      	mov	r2, r6
 800332a:	4997      	ldr	r1, [pc, #604]	@ (8003588 <_Z14detectResponseifiii+0x314>)
 800332c:	a803      	add	r0, sp, #12
 800332e:	f006 fa05 	bl	800973c <sprintf>
      BSP_LCD_DisplayStringAt(273, 100, buf, LEFT_MODE);
 8003332:	2303      	movs	r3, #3
 8003334:	aa03      	add	r2, sp, #12
 8003336:	2164      	movs	r1, #100	@ 0x64
 8003338:	f240 1011 	movw	r0, #273	@ 0x111
 800333c:	f7fd ff5e 	bl	80011fc <BSP_LCD_DisplayStringAt>
      sprintf(buf, "Ground True:");
 8003340:	4b92      	ldr	r3, [pc, #584]	@ (800358c <_Z14detectResponseifiii+0x318>)
      BSP_LCD_SetTextColor(LCD_COLOR_RED);
      sprintf(buf, " Prediction:");
      BSP_LCD_DisplayStringAt(273, 80, buf, LEFT_MODE);
      sprintf(buf, "  class %d   ", pred);
      BSP_LCD_DisplayStringAt(273, 100, buf, LEFT_MODE);
      sprintf(buf, "Ground-Truth");
 8003342:	ae03      	add	r6, sp, #12
 8003344:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003346:	c607      	stmia	r6!, {r0, r1, r2}
      BSP_LCD_DisplayStringAt(273, 120, buf, LEFT_MODE);
 8003348:	aa03      	add	r2, sp, #12
 800334a:	2178      	movs	r1, #120	@ 0x78
 800334c:	f240 1011 	movw	r0, #273	@ 0x111
      sprintf(buf, "Ground-Truth");
 8003350:	7023      	strb	r3, [r4, #0]
      BSP_LCD_DisplayStringAt(273, 120, buf, LEFT_MODE);
 8003352:	2303      	movs	r3, #3
 8003354:	f7fd ff52 	bl	80011fc <BSP_LCD_DisplayStringAt>
      sprintf(buf, "  class %d   ", label);
 8003358:	462a      	mov	r2, r5
 800335a:	498d      	ldr	r1, [pc, #564]	@ (8003590 <_Z14detectResponseifiii+0x31c>)
 800335c:	a803      	add	r0, sp, #12
 800335e:	f006 f9ed 	bl	800973c <sprintf>
      BSP_LCD_DisplayStringAt(273, 140, buf, LEFT_MODE);
 8003362:	2303      	movs	r3, #3
 8003364:	aa03      	add	r2, sp, #12
 8003366:	218c      	movs	r1, #140	@ 0x8c
 8003368:	f240 1011 	movw	r0, #273	@ 0x111
 800336c:	f7fd ff46 	bl	80011fc <BSP_LCD_DisplayStringAt>
      BSP_LCD_SetTextColor(LCD_COLOR_RED);
      BSP_LCD_DisplayStringAt(273, 100, "  No Person ", LEFT_MODE);
    }
  }

  if (ms == 0)
 8003370:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8003374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003378:	d029      	beq.n	80033ce <_Z14detectResponseifiii+0x15a>
    return;
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800337a:	4886      	ldr	r0, [pc, #536]	@ (8003594 <_Z14detectResponseifiii+0x320>)
 800337c:	f7fd fe6a 	bl	8001054 <BSP_LCD_SetTextColor>
  volatile float rate = 1000 / ms;
 8003380:	eddf 6a85 	vldr	s13, [pc, #532]	@ 8003598 <_Z14detectResponseifiii+0x324>
  volatile int decimal = (int)rate;
  volatile int floating = (int)((rate - (float)decimal) * 1000);
  sprintf(buf, "  fps:%d.%03d ", decimal, floating);
 8003384:	4985      	ldr	r1, [pc, #532]	@ (800359c <_Z14detectResponseifiii+0x328>)
 8003386:	a803      	add	r0, sp, #12
  volatile float rate = 1000 / ms;
 8003388:	eec6 7a88 	vdiv.f32	s15, s13, s16
 800338c:	edcd 7a00 	vstr	s15, [sp]
  volatile int decimal = (int)rate;
 8003390:	eddd 7a00 	vldr	s15, [sp]
 8003394:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003398:	edcd 7a01 	vstr	s15, [sp, #4]
  volatile int floating = (int)((rate - (float)decimal) * 1000);
 800339c:	eddd 7a00 	vldr	s15, [sp]
 80033a0:	ed9d 7a01 	vldr	s14, [sp, #4]
 80033a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80033a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80033ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80033b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033b4:	edcd 7a02 	vstr	s15, [sp, #8]
  sprintf(buf, "  fps:%d.%03d ", decimal, floating);
 80033b8:	9a01      	ldr	r2, [sp, #4]
 80033ba:	9b02      	ldr	r3, [sp, #8]
 80033bc:	f006 f9be 	bl	800973c <sprintf>
  BSP_LCD_DisplayStringAt(273, 180, buf, LEFT_MODE);
 80033c0:	2303      	movs	r3, #3
 80033c2:	aa03      	add	r2, sp, #12
 80033c4:	21b4      	movs	r1, #180	@ 0xb4
 80033c6:	f240 1011 	movw	r0, #273	@ 0x111
 80033ca:	f7fd ff17 	bl	80011fc <BSP_LCD_DisplayStringAt>
}
 80033ce:	b008      	add	sp, #32
 80033d0:	ecbd 8b02 	vpop	{d8}
 80033d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (training_mode) {
 80033d8:	2900      	cmp	r1, #0
 80033da:	d055      	beq.n	8003488 <_Z14detectResponseifiii+0x214>
  for (int i = x1 - 1; i < x2; i++)
 80033dc:	f240 180d 	movw	r8, #269	@ 0x10d
    for (int j = y1 - 1; j < y2; j++) {
 80033e0:	fa1f f788 	uxth.w	r7, r8
 80033e4:	2427      	movs	r4, #39	@ 0x27
      BSP_LCD_DrawPixel(i, j, red);
 80033e6:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 80033e8:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, red);
 80033ea:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80033ee:	4638      	mov	r0, r7
 80033f0:	f7fd ff6a 	bl	80012c8 <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 80033f4:	2c64      	cmp	r4, #100	@ 0x64
 80033f6:	d1f6      	bne.n	80033e6 <_Z14detectResponseifiii+0x172>
  for (int i = x1 - 1; i < x2; i++)
 80033f8:	f108 0801 	add.w	r8, r8, #1
 80033fc:	f5b8 7ff0 	cmp.w	r8, #480	@ 0x1e0
 8003400:	d1ee      	bne.n	80033e0 <_Z14detectResponseifiii+0x16c>
 8003402:	f240 180d 	movw	r8, #269	@ 0x10d
    for (int j = y1 - 1; j < y2; j++) {
 8003406:	fa1f f788 	uxth.w	r7, r8
 800340a:	247c      	movs	r4, #124	@ 0x7c
      BSP_LCD_DrawPixel(i, j, red);
 800340c:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 800340e:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, red);
 8003410:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8003414:	4638      	mov	r0, r7
 8003416:	f7fd ff57 	bl	80012c8 <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 800341a:	2cb4      	cmp	r4, #180	@ 0xb4
 800341c:	d1f6      	bne.n	800340c <_Z14detectResponseifiii+0x198>
  for (int i = x1 - 1; i < x2; i++)
 800341e:	f108 0801 	add.w	r8, r8, #1
 8003422:	f5b8 7ff0 	cmp.w	r8, #480	@ 0x1e0
 8003426:	d1ee      	bne.n	8003406 <_Z14detectResponseifiii+0x192>
 8003428:	f240 180d 	movw	r8, #269	@ 0x10d
    for (int j = y1 - 1; j < y2; j++) {
 800342c:	fa1f f788 	uxth.w	r7, r8
 8003430:	24cc      	movs	r4, #204	@ 0xcc
      BSP_LCD_DrawPixel(i, j, red);
 8003432:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 8003434:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, red);
 8003436:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800343a:	4638      	mov	r0, r7
 800343c:	f7fd ff44 	bl	80012c8 <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 8003440:	2cfa      	cmp	r4, #250	@ 0xfa
 8003442:	d1f6      	bne.n	8003432 <_Z14detectResponseifiii+0x1be>
  for (int i = x1 - 1; i < x2; i++)
 8003444:	f108 0801 	add.w	r8, r8, #1
 8003448:	f5b8 7ff0 	cmp.w	r8, #480	@ 0x1e0
 800344c:	d1ee      	bne.n	800342c <_Z14detectResponseifiii+0x1b8>
      BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800344e:	484c      	ldr	r0, [pc, #304]	@ (8003580 <_Z14detectResponseifiii+0x30c>)
      sprintf(buf, " Prediction:");
 8003450:	ac03      	add	r4, sp, #12
      BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8003452:	f7fd fdff 	bl	8001054 <BSP_LCD_SetTextColor>
      sprintf(buf, " Prediction:");
 8003456:	4b4b      	ldr	r3, [pc, #300]	@ (8003584 <_Z14detectResponseifiii+0x310>)
 8003458:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800345a:	c407      	stmia	r4!, {r0, r1, r2}
      BSP_LCD_DisplayStringAt(273, 80, buf, LEFT_MODE);
 800345c:	aa03      	add	r2, sp, #12
 800345e:	2150      	movs	r1, #80	@ 0x50
 8003460:	f240 1011 	movw	r0, #273	@ 0x111
      sprintf(buf, " Prediction:");
 8003464:	7023      	strb	r3, [r4, #0]
      BSP_LCD_DisplayStringAt(273, 80, buf, LEFT_MODE);
 8003466:	2303      	movs	r3, #3
 8003468:	f7fd fec8 	bl	80011fc <BSP_LCD_DisplayStringAt>
      sprintf(buf, "  class %d   ", pred);
 800346c:	4632      	mov	r2, r6
 800346e:	4948      	ldr	r1, [pc, #288]	@ (8003590 <_Z14detectResponseifiii+0x31c>)
 8003470:	a803      	add	r0, sp, #12
 8003472:	f006 f963 	bl	800973c <sprintf>
      BSP_LCD_DisplayStringAt(273, 100, buf, LEFT_MODE);
 8003476:	2303      	movs	r3, #3
 8003478:	aa03      	add	r2, sp, #12
 800347a:	2164      	movs	r1, #100	@ 0x64
 800347c:	f240 1011 	movw	r0, #273	@ 0x111
 8003480:	f7fd febc 	bl	80011fc <BSP_LCD_DisplayStringAt>
      sprintf(buf, "Ground-Truth");
 8003484:	4b46      	ldr	r3, [pc, #280]	@ (80035a0 <_Z14detectResponseifiii+0x32c>)
 8003486:	e75c      	b.n	8003342 <_Z14detectResponseifiii+0xce>
  for (int i = x1 - 1; i < x2; i++)
 8003488:	f240 160d 	movw	r6, #269	@ 0x10d
    for (int j = y1 - 1; j < y2; j++) {
 800348c:	b2b5      	uxth	r5, r6
 800348e:	2427      	movs	r4, #39	@ 0x27
      BSP_LCD_DrawPixel(i, j, black);
 8003490:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 8003492:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, black);
 8003494:	2200      	movs	r2, #0
 8003496:	4628      	mov	r0, r5
 8003498:	f7fd ff16 	bl	80012c8 <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 800349c:	2c64      	cmp	r4, #100	@ 0x64
 800349e:	d1f7      	bne.n	8003490 <_Z14detectResponseifiii+0x21c>
  for (int i = x1 - 1; i < x2; i++)
 80034a0:	3601      	adds	r6, #1
 80034a2:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
 80034a6:	d1f1      	bne.n	800348c <_Z14detectResponseifiii+0x218>
 80034a8:	f240 160d 	movw	r6, #269	@ 0x10d
    for (int j = y1 - 1; j < y2; j++) {
 80034ac:	b2b5      	uxth	r5, r6
 80034ae:	247c      	movs	r4, #124	@ 0x7c
      BSP_LCD_DrawPixel(i, j, black);
 80034b0:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 80034b2:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, black);
 80034b4:	2200      	movs	r2, #0
 80034b6:	4628      	mov	r0, r5
 80034b8:	f7fd ff06 	bl	80012c8 <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 80034bc:	2cb4      	cmp	r4, #180	@ 0xb4
 80034be:	d1f7      	bne.n	80034b0 <_Z14detectResponseifiii+0x23c>
  for (int i = x1 - 1; i < x2; i++)
 80034c0:	3601      	adds	r6, #1
 80034c2:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
 80034c6:	d1f1      	bne.n	80034ac <_Z14detectResponseifiii+0x238>
 80034c8:	f240 160d 	movw	r6, #269	@ 0x10d
    for (int j = y1 - 1; j < y2; j++) {
 80034cc:	b2b5      	uxth	r5, r6
 80034ce:	24cc      	movs	r4, #204	@ 0xcc
      BSP_LCD_DrawPixel(i, j, black);
 80034d0:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 80034d2:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, black);
 80034d4:	2200      	movs	r2, #0
 80034d6:	4628      	mov	r0, r5
 80034d8:	f7fd fef6 	bl	80012c8 <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 80034dc:	2cfa      	cmp	r4, #250	@ 0xfa
 80034de:	d1f7      	bne.n	80034d0 <_Z14detectResponseifiii+0x25c>
  for (int i = x1 - 1; i < x2; i++)
 80034e0:	3601      	adds	r6, #1
 80034e2:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
 80034e6:	d1f1      	bne.n	80034cc <_Z14detectResponseifiii+0x258>
      BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80034e8:	4825      	ldr	r0, [pc, #148]	@ (8003580 <_Z14detectResponseifiii+0x30c>)
 80034ea:	f7fd fdb3 	bl	8001054 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAt(273, 100, "  No Person ", LEFT_MODE);
 80034ee:	2303      	movs	r3, #3
 80034f0:	4a2c      	ldr	r2, [pc, #176]	@ (80035a4 <_Z14detectResponseifiii+0x330>)
 80034f2:	2164      	movs	r1, #100	@ 0x64
 80034f4:	f240 1011 	movw	r0, #273	@ 0x111
 80034f8:	f7fd fe80 	bl	80011fc <BSP_LCD_DisplayStringAt>
 80034fc:	e738      	b.n	8003370 <_Z14detectResponseifiii+0xfc>
  for (int i = x1 - 1; i < x2; i++)
 80034fe:	f240 160d 	movw	r6, #269	@ 0x10d
    for (int j = y1 - 1; j < y2; j++) {
 8003502:	b2b5      	uxth	r5, r6
 8003504:	2427      	movs	r4, #39	@ 0x27
      BSP_LCD_DrawPixel(i, j, blue);
 8003506:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 8003508:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, blue);
 800350a:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 800350e:	4628      	mov	r0, r5
 8003510:	f7fd feda 	bl	80012c8 <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 8003514:	2c64      	cmp	r4, #100	@ 0x64
 8003516:	d1f6      	bne.n	8003506 <_Z14detectResponseifiii+0x292>
  for (int i = x1 - 1; i < x2; i++)
 8003518:	3601      	adds	r6, #1
 800351a:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
 800351e:	d1f0      	bne.n	8003502 <_Z14detectResponseifiii+0x28e>
 8003520:	f240 160d 	movw	r6, #269	@ 0x10d
    for (int j = y1 - 1; j < y2; j++) {
 8003524:	b2b5      	uxth	r5, r6
 8003526:	247c      	movs	r4, #124	@ 0x7c
      BSP_LCD_DrawPixel(i, j, blue);
 8003528:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 800352a:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, blue);
 800352c:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8003530:	4628      	mov	r0, r5
 8003532:	f7fd fec9 	bl	80012c8 <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 8003536:	2cb4      	cmp	r4, #180	@ 0xb4
 8003538:	d1f6      	bne.n	8003528 <_Z14detectResponseifiii+0x2b4>
  for (int i = x1 - 1; i < x2; i++)
 800353a:	3601      	adds	r6, #1
 800353c:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
 8003540:	d1f0      	bne.n	8003524 <_Z14detectResponseifiii+0x2b0>
 8003542:	f240 160d 	movw	r6, #269	@ 0x10d
    for (int j = y1 - 1; j < y2; j++) {
 8003546:	b2b5      	uxth	r5, r6
 8003548:	24cc      	movs	r4, #204	@ 0xcc
      BSP_LCD_DrawPixel(i, j, blue);
 800354a:	b2a1      	uxth	r1, r4
    for (int j = y1 - 1; j < y2; j++) {
 800354c:	3401      	adds	r4, #1
      BSP_LCD_DrawPixel(i, j, blue);
 800354e:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8003552:	4628      	mov	r0, r5
 8003554:	f7fd feb8 	bl	80012c8 <BSP_LCD_DrawPixel>
    for (int j = y1 - 1; j < y2; j++) {
 8003558:	2cfa      	cmp	r4, #250	@ 0xfa
 800355a:	d1f6      	bne.n	800354a <_Z14detectResponseifiii+0x2d6>
  for (int i = x1 - 1; i < x2; i++)
 800355c:	3601      	adds	r6, #1
 800355e:	f5b6 7ff0 	cmp.w	r6, #480	@ 0x1e0
 8003562:	d1f0      	bne.n	8003546 <_Z14detectResponseifiii+0x2d2>
      BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8003564:	4806      	ldr	r0, [pc, #24]	@ (8003580 <_Z14detectResponseifiii+0x30c>)
 8003566:	f7fd fd75 	bl	8001054 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAt(273, 100, "   Person   ", LEFT_MODE);
 800356a:	2303      	movs	r3, #3
 800356c:	4a0e      	ldr	r2, [pc, #56]	@ (80035a8 <_Z14detectResponseifiii+0x334>)
 800356e:	2164      	movs	r1, #100	@ 0x64
 8003570:	f240 1011 	movw	r0, #273	@ 0x111
 8003574:	f7fd fe42 	bl	80011fc <BSP_LCD_DisplayStringAt>
 8003578:	e6fa      	b.n	8003370 <_Z14detectResponseifiii+0xfc>
 800357a:	bf00      	nop
 800357c:	200009d8 	.word	0x200009d8
 8003580:	ffff0000 	.word	0xffff0000
 8003584:	0800da18 	.word	0x0800da18
 8003588:	0800da28 	.word	0x0800da28
 800358c:	0800da38 	.word	0x0800da38
 8003590:	0800da48 	.word	0x0800da48
 8003594:	ff0000ff 	.word	0xff0000ff
 8003598:	447a0000 	.word	0x447a0000
 800359c:	0800da88 	.word	0x0800da88
 80035a0:	0800da68 	.word	0x0800da68
 80035a4:	0800da78 	.word	0x0800da78
 80035a8:	0800da58 	.word	0x0800da58

080035ac <_Z8lcdsetupv>:
  sprintf(buf, "  fps:%d.%03d ", decimal, floating);
  BSP_LCD_DisplayStringAt(273, 180, buf, LEFT_MODE);
}
#endif

void lcdsetup() {
 80035ac:	b510      	push	{r4, lr}
 80035ae:	b0a2      	sub	sp, #136	@ 0x88
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80035b0:	2205      	movs	r2, #5
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80035b2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80035b6:	21c0      	movs	r1, #192	@ 0xc0
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80035b8:	2408      	movs	r4, #8
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80035ba:	a801      	add	r0, sp, #4
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80035bc:	9208      	str	r2, [sp, #32]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80035be:	930c      	str	r3, [sp, #48]	@ 0x30
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80035c0:	9106      	str	r1, [sp, #24]
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80035c2:	9401      	str	r4, [sp, #4]
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80035c4:	f7ff fa52 	bl	8002a6c <HAL_RCCEx_PeriphCLKConfig>

  BSP_LCD_Init();
 80035c8:	f7fd ff70 	bl	80014ac <BSP_LCD_Init>

  BSP_LCD_LayerRgb565Init(0, LCD_FB_START_ADDRESS);
 80035cc:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 80035d0:	2000      	movs	r0, #0
 80035d2:	f7fd fcf5 	bl	8000fc0 <BSP_LCD_LayerRgb565Init>
  BSP_LCD_LayerRgb565Init(1, LCD_FB_START_ADDRESS +
                                 (BSP_LCD_GetXSize() * BSP_LCD_GetYSize() * 4));
 80035d6:	f7fd fcdb 	bl	8000f90 <BSP_LCD_GetXSize>
 80035da:	4604      	mov	r4, r0
 80035dc:	f7fd fce4 	bl	8000fa8 <BSP_LCD_GetYSize>
 80035e0:	4601      	mov	r1, r0
  BSP_LCD_LayerRgb565Init(1, LCD_FB_START_ADDRESS +
 80035e2:	2001      	movs	r0, #1
                                 (BSP_LCD_GetXSize() * BSP_LCD_GetYSize() * 4));
 80035e4:	fb04 f101 	mul.w	r1, r4, r1
  BSP_LCD_LayerRgb565Init(1, LCD_FB_START_ADDRESS +
 80035e8:	f101 5140 	add.w	r1, r1, #805306368	@ 0x30000000
 80035ec:	0089      	lsls	r1, r1, #2
 80035ee:	f7fd fce7 	bl	8000fc0 <BSP_LCD_LayerRgb565Init>

  BSP_LCD_DisplayOn();
 80035f2:	f7fd fe85 	bl	8001300 <BSP_LCD_DisplayOn>

  BSP_LCD_SelectLayer(0);
 80035f6:	2000      	movs	r0, #0
 80035f8:	f7fd fd20 	bl	800103c <BSP_LCD_SelectLayer>

  BSP_LCD_Clear(LCD_COLOR_BLACK);
 80035fc:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8003600:	f7fd fd34 	bl	800106c <BSP_LCD_Clear>

  BSP_LCD_SelectLayer(1);
 8003604:	2001      	movs	r0, #1
 8003606:	f7fd fd19 	bl	800103c <BSP_LCD_SelectLayer>

  BSP_LCD_Clear(LCD_COLOR_BLACK);
 800360a:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800360e:	f7fd fd2d 	bl	800106c <BSP_LCD_Clear>

  BSP_LCD_SetTransparency(0, 0);
 8003612:	2100      	movs	r1, #0
 8003614:	4608      	mov	r0, r1
 8003616:	f7fd fd17 	bl	8001048 <BSP_LCD_SetTransparency>
  BSP_LCD_SetTransparency(1, 100);
 800361a:	2164      	movs	r1, #100	@ 0x64
 800361c:	2001      	movs	r0, #1
 800361e:	f7fd fd13 	bl	8001048 <BSP_LCD_SetTransparency>

  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8003622:	4802      	ldr	r0, [pc, #8]	@ (800362c <_Z8lcdsetupv+0x80>)
 8003624:	f7fd fd16 	bl	8001054 <BSP_LCD_SetTextColor>
}
 8003628:	b022      	add	sp, #136	@ 0x88
 800362a:	bd10      	pop	{r4, pc}
 800362c:	ff0000ff 	.word	0xff0000ff

08003630 <_Z27invoke_new_weights_givenimgPa>:

signed char out_int[OUTPUT_CH];

float labels[] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};

void invoke_new_weights_givenimg(signed char *out_int8) {
 8003630:	b510      	push	{r4, lr}
 8003632:	4604      	mov	r4, r0
  invoke(labels);
 8003634:	4805      	ldr	r0, [pc, #20]	@ (800364c <_Z27invoke_new_weights_givenimgPa+0x1c>)
 8003636:	f004 fcd3 	bl	8007fe0 <invoke>
  signed char *output = (signed char *)getOutput();
 800363a:	f004 fccd 	bl	8007fd8 <getOutput>
  for (int i = 0; i < OUTPUT_CH; i++)
    out_int8[i] = output[i];
 800363e:	f990 3000 	ldrsb.w	r3, [r0]
 8003642:	7023      	strb	r3, [r4, #0]
 8003644:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8003648:	7063      	strb	r3, [r4, #1]
}
 800364a:	bd10      	pop	{r4, pc}
 800364c:	200009e0 	.word	0x200009e0

08003650 <main>:
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8003650:	4a31      	ldr	r2, [pc, #196]	@ (8003718 <main+0xc8>)
 8003652:	6953      	ldr	r3, [r2, #20]
 8003654:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
#define BUTTON2_Pin GPIO_PIN_10
#define BUTTON2_GPIO_Port GPIOF

uint16_t *RGBbuf;

int main(void) {
 8003658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800365c:	b0b9      	sub	sp, #228	@ 0xe4
 800365e:	d111      	bne.n	8003684 <main+0x34>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003660:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003664:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8003668:	f8c2 3250 	str.w	r3, [r2, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800366c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003670:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8003674:	6953      	ldr	r3, [r2, #20]
 8003676:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800367a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800367c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003680:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8003684:	4824      	ldr	r0, [pc, #144]	@ (8003718 <main+0xc8>)
 8003686:	6943      	ldr	r3, [r0, #20]
 8003688:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 800368c:	d124      	bne.n	80036d8 <main+0x88>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800368e:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003692:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8003696:	f8d0 5080 	ldr.w	r5, [r0, #128]	@ 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800369a:	f643 76e0 	movw	r6, #16352	@ 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800369e:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80036a2:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 80036a6:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80036a8:	ea04 0106 	and.w	r1, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80036ac:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80036ae:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80036b2:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80036b4:	f8c0 2260 	str.w	r2, [r0, #608]	@ 0x260
      } while (ways-- != 0U);
 80036b8:	1c5a      	adds	r2, r3, #1
 80036ba:	d1f8      	bne.n	80036ae <main+0x5e>
    } while(sets-- != 0U);
 80036bc:	3c20      	subs	r4, #32
 80036be:	f114 0f20 	cmn.w	r4, #32
 80036c2:	d1f1      	bne.n	80036a8 <main+0x58>
 80036c4:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80036c8:	6943      	ldr	r3, [r0, #20]
 80036ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036ce:	6143      	str	r3, [r0, #20]
 80036d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80036d4:	f3bf 8f6f 	isb	sy
  char buf[150];
  char showbuf[150];

  CPU_CACHE_Enable();
  HAL_Init();
 80036d8:	f7fe f8b2 	bl	8001840 <HAL_Init>
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80036dc:	2602      	movs	r6, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80036de:	2001      	movs	r0, #1
 80036e0:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80036e4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
  RCC_OscInitStruct.PLL.PLLM = 25;
 80036e8:	2319      	movs	r3, #25
  RCC_OscInitStruct.PLL.PLLN = 432;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 9;

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80036ea:	ac12      	add	r4, sp, #72	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 25;
 80036ec:	931a      	str	r3, [sp, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80036ee:	2309      	movs	r3, #9
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80036f0:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80036f4:	e9cd 6218 	strd	r6, r2, [sp, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLN = 432;
 80036f8:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80036fc:	2202      	movs	r2, #2
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80036fe:	4620      	mov	r0, r4
  RCC_OscInitStruct.PLL.PLLN = 432;
 8003700:	911b      	str	r1, [sp, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003702:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8003706:	f7fe ff1b 	bl	8002540 <HAL_RCC_OscConfig>
  if (ret != HAL_OK) {
 800370a:	b100      	cbz	r0, 800370e <main+0xbe>
    while (1) {
 800370c:	e7fe      	b.n	800370c <main+0xbc>
      ;
    }
  }

  ret = HAL_PWREx_EnableOverDrive();
 800370e:	f7fe fedd 	bl	80024cc <HAL_PWREx_EnableOverDrive>
  if (ret != HAL_OK) {
 8003712:	b118      	cbz	r0, 800371c <main+0xcc>
    while (1) {
 8003714:	e7fe      	b.n	8003714 <main+0xc4>
 8003716:	bf00      	nop
 8003718:	e000ed00 	.word	0xe000ed00
      ;
    }
  }

  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
 800371c:	210f      	movs	r1, #15
                                 RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800371e:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003722:	f44f 5780 	mov.w	r7, #4096	@ 0x1000
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
 8003726:	910d      	str	r1, [sp, #52]	@ 0x34

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 8003728:	2107      	movs	r1, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800372a:	e9cd 600e 	strd	r6, r0, [sp, #56]	@ 0x38
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 800372e:	a80d      	add	r0, sp, #52	@ 0x34
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003730:	e9cd 2710 	strd	r2, r7, [sp, #64]	@ 0x40
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 8003734:	f7ff f8ca 	bl	80028cc <HAL_RCC_ClockConfig>
  if (ret != HAL_OK) {
 8003738:	4605      	mov	r5, r0
 800373a:	2800      	cmp	r0, #0
 800373c:	f040 8249 	bne.w	8003bd2 <main+0x582>
}

static void MX_GPIO_Init(void) {
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003740:	4bc5      	ldr	r3, [pc, #788]	@ (8003a58 <main+0x408>)
  __HAL_RCC_GPIOI_CLK_ENABLE();
  __HAL_RCC_GPIOK_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();

  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 8003742:	2120      	movs	r1, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003744:	9012      	str	r0, [sp, #72]	@ 0x48

  GPIO_InitStruct.Pin = RMII_TXD1_Pin | RMII_TXD0_Pin | RMII_TX_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003746:	f04f 090b 	mov.w	r9, #11
  GPIO_InitStruct.Pin = ULPI_D7_Pin | ULPI_D6_Pin | ULPI_D5_Pin | ULPI_D3_Pin |
                        ULPI_D2_Pin | ULPI_D1_Pin | ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800374a:	f04f 0a0a 	mov.w	sl, #10
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800374e:	f04f 0801 	mov.w	r8, #1

  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003752:	f04f 0b05 	mov.w	fp, #5
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003756:	e9c4 0001 	strd	r0, r0, [r4, #4]
 800375a:	e9c4 0003 	strd	r0, r0, [r4, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800375e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 8003760:	48be      	ldr	r0, [pc, #760]	@ (8003a5c <main+0x40c>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003762:	f042 0210 	orr.w	r2, r2, #16
 8003766:	631a      	str	r2, [r3, #48]	@ 0x30
 8003768:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800376a:	f002 0210 	and.w	r2, r2, #16
 800376e:	9203      	str	r2, [sp, #12]
 8003770:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003772:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003774:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003778:	631a      	str	r2, [r3, #48]	@ 0x30
 800377a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800377c:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8003780:	9204      	str	r2, [sp, #16]
 8003782:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003784:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003786:	f042 0202 	orr.w	r2, r2, #2
 800378a:	631a      	str	r2, [r3, #48]	@ 0x30
 800378c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800378e:	f002 0202 	and.w	r2, r2, #2
 8003792:	9205      	str	r2, [sp, #20]
 8003794:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003796:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003798:	f042 0208 	orr.w	r2, r2, #8
 800379c:	631a      	str	r2, [r3, #48]	@ 0x30
 800379e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037a0:	f002 0208 	and.w	r2, r2, #8
 80037a4:	9206      	str	r2, [sp, #24]
 80037a6:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80037a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037aa:	f042 0204 	orr.w	r2, r2, #4
 80037ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80037b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037b2:	f002 0204 	and.w	r2, r2, #4
 80037b6:	9207      	str	r2, [sp, #28]
 80037b8:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80037ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037bc:	f042 0201 	orr.w	r2, r2, #1
 80037c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80037c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037c4:	f002 0201 	and.w	r2, r2, #1
 80037c8:	9208      	str	r2, [sp, #32]
 80037ca:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80037cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80037d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037d6:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 80037da:	9209      	str	r2, [sp, #36]	@ 0x24
 80037dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80037de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80037e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037e8:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 80037ec:	920a      	str	r2, [sp, #40]	@ 0x28
 80037ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80037f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037f2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80037f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80037f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037fa:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
 80037fe:	920b      	str	r2, [sp, #44]	@ 0x2c
 8003800:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003802:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003804:	f042 0220 	orr.w	r2, r2, #32
 8003808:	631a      	str	r2, [r3, #48]	@ 0x30
 800380a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800380c:	f002 0220 	and.w	r2, r2, #32
 8003810:	920c      	str	r2, [sp, #48]	@ 0x30
 8003812:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003814:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003816:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800381a:	631a      	str	r2, [r3, #48]	@ 0x30
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 800381c:	2201      	movs	r2, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800381e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003820:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003824:	930d      	str	r3, [sp, #52]	@ 0x34
 8003826:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 8003828:	f7fe fc54 	bl	80020d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin | ARDUINO_D8_Pin, GPIO_PIN_RESET);
 800382c:	462a      	mov	r2, r5
 800382e:	210c      	movs	r1, #12
 8003830:	488b      	ldr	r0, [pc, #556]	@ (8003a60 <main+0x410>)
 8003832:	f7fe fc4f 	bl	80020d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8003836:	2201      	movs	r2, #1
 8003838:	2108      	movs	r1, #8
 800383a:	488a      	ldr	r0, [pc, #552]	@ (8003a64 <main+0x414>)
 800383c:	f7fe fc4a 	bl	80020d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8003840:	4639      	mov	r1, r7
 8003842:	2201      	movs	r2, #1
 8003844:	4886      	ldr	r0, [pc, #536]	@ (8003a60 <main+0x410>)
 8003846:	f7fe fc45 	bl	80020d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800384a:	462a      	mov	r2, r5
 800384c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003850:	4885      	ldr	r0, [pc, #532]	@ (8003a68 <main+0x418>)
 8003852:	f7fe fc3f 	bl	80020d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin,
 8003856:	462a      	mov	r2, r5
 8003858:	21c8      	movs	r1, #200	@ 0xc8
 800385a:	4884      	ldr	r0, [pc, #528]	@ (8003a6c <main+0x41c>)
 800385c:	f7fe fc3a 	bl	80020d4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8003860:	2300      	movs	r3, #0
 8003862:	2208      	movs	r2, #8
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003864:	4621      	mov	r1, r4
 8003866:	4882      	ldr	r0, [pc, #520]	@ (8003a70 <main+0x420>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003868:	2703      	movs	r7, #3
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800386a:	9514      	str	r5, [sp, #80]	@ 0x50
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800386c:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003870:	f7fe faec 	bl	8001e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TXD1_Pin | RMII_TXD0_Pin | RMII_TX_EN_Pin;
 8003874:	f44f 42d0 	mov.w	r2, #26624	@ 0x6800
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003878:	4621      	mov	r1, r4
 800387a:	487c      	ldr	r0, [pc, #496]	@ (8003a6c <main+0x41c>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800387c:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003880:	e9cd 2612 	strd	r2, r6, [sp, #72]	@ 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003884:	e9cd 5714 	strd	r5, r7, [sp, #80]	@ 0x50
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003888:	f7fe fae0 	bl	8001e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_D7_Pin | ULPI_D6_Pin | ULPI_D5_Pin | ULPI_D3_Pin |
 800388c:	f643 4223 	movw	r2, #15395	@ 0x3c23
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003890:	4621      	mov	r1, r4
 8003892:	4878      	ldr	r0, [pc, #480]	@ (8003a74 <main+0x424>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003894:	9715      	str	r7, [sp, #84]	@ 0x54
  GPIO_InitStruct.Pin = ULPI_D7_Pin | ULPI_D6_Pin | ULPI_D5_Pin | ULPI_D3_Pin |
 8003896:	9212      	str	r2, [sp, #72]	@ 0x48
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003898:	f8cd a058 	str.w	sl, [sp, #88]	@ 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800389c:	e9cd 6513 	strd	r6, r5, [sp, #76]	@ 0x4c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038a0:	f7fe fad4 	bl	8001e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80038a4:	2180      	movs	r1, #128	@ 0x80
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80038a6:	2208      	movs	r2, #8
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80038a8:	486c      	ldr	r0, [pc, #432]	@ (8003a5c <main+0x40c>)
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80038aa:	9112      	str	r1, [sp, #72]	@ 0x48
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80038ac:	4621      	mov	r1, r4
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80038ae:	9216      	str	r2, [sp, #88]	@ 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038b0:	9515      	str	r5, [sp, #84]	@ 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b2:	e9cd 6513 	strd	r6, r5, [sp, #76]	@ 0x4c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80038b6:	f7fe fac9 	bl	8001e4c <HAL_GPIO_Init>
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80038ba:	4621      	mov	r1, r4
 80038bc:	486e      	ldr	r0, [pc, #440]	@ (8003a78 <main+0x428>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038be:	9514      	str	r5, [sp, #80]	@ 0x50
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80038c0:	ed9f 7b55 	vldr	d7, [pc, #340]	@ 8003a18 <main+0x3c8>
 80038c4:	ed8d 7b12 	vstr	d7, [sp, #72]	@ 0x48
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80038c8:	f7fe fac0 	bl	8001e4c <HAL_GPIO_Init>
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80038cc:	4621      	mov	r1, r4
 80038ce:	4863      	ldr	r0, [pc, #396]	@ (8003a5c <main+0x40c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d0:	9514      	str	r5, [sp, #80]	@ 0x50
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80038d2:	ed9f 7b53 	vldr	d7, [pc, #332]	@ 8003a20 <main+0x3d0>
 80038d6:	ed8d 7b12 	vstr	d7, [sp, #72]	@ 0x48
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80038da:	f7fe fab7 	bl	8001e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_P_Pin | OTG_FS_N_Pin | OTG_FS_ID_Pin;
 80038de:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038e2:	4866      	ldr	r0, [pc, #408]	@ (8003a7c <main+0x42c>)
  GPIO_InitStruct.Pin = OTG_FS_P_Pin | OTG_FS_N_Pin | OTG_FS_ID_Pin;
 80038e4:	9112      	str	r1, [sp, #72]	@ 0x48
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038e6:	4621      	mov	r1, r4
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e8:	e9cd 6513 	strd	r6, r5, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80038ec:	e9cd 7a15 	strd	r7, sl, [sp, #84]	@ 0x54
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038f0:	f7fe faac 	bl	8001e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80038f4:	2120      	movs	r1, #32
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80038f6:	4859      	ldr	r0, [pc, #356]	@ (8003a5c <main+0x40c>)
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80038f8:	9112      	str	r1, [sp, #72]	@ 0x48
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80038fa:	4621      	mov	r1, r4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038fc:	9515      	str	r5, [sp, #84]	@ 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038fe:	e9cd 8513 	strd	r8, r5, [sp, #76]	@ 0x4c
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003902:	f7fe faa3 	bl	8001e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin | ARDUINO_D8_Pin | LCD_DISP_Pin;
 8003906:	f241 010c 	movw	r1, #4108	@ 0x100c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800390a:	4855      	ldr	r0, [pc, #340]	@ (8003a60 <main+0x410>)
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin | ARDUINO_D8_Pin | LCD_DISP_Pin;
 800390c:	9112      	str	r1, [sp, #72]	@ 0x48
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800390e:	4621      	mov	r1, r4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003910:	9515      	str	r5, [sp, #84]	@ 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003912:	e9cd 8513 	strd	r8, r5, [sp, #76]	@ 0x4c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003916:	f7fe fa99 	bl	8001e4c <HAL_GPIO_Init>
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800391a:	4621      	mov	r1, r4
 800391c:	4858      	ldr	r0, [pc, #352]	@ (8003a80 <main+0x430>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800391e:	9514      	str	r5, [sp, #80]	@ 0x50
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8003920:	ed9f 7b41 	vldr	d7, [pc, #260]	@ 8003a28 <main+0x3d8>
 8003924:	ed8d 7b12 	vstr	d7, [sp, #72]	@ 0x48
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8003928:	f7fe fa90 	bl	8001e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800392c:	2208      	movs	r2, #8
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800392e:	4621      	mov	r1, r4
 8003930:	484c      	ldr	r0, [pc, #304]	@ (8003a64 <main+0x414>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003932:	e9cd 2812 	strd	r2, r8, [sp, #72]	@ 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003936:	e9cd 5514 	strd	r5, r5, [sp, #80]	@ 0x50
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800393a:	f7fe fa87 	bl	8001e4c <HAL_GPIO_Init>
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800393e:	4621      	mov	r1, r4
 8003940:	4846      	ldr	r0, [pc, #280]	@ (8003a5c <main+0x40c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003942:	9514      	str	r5, [sp, #80]	@ 0x50
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8003944:	ed9f 7b3a 	vldr	d7, [pc, #232]	@ 8003a30 <main+0x3e0>
 8003948:	ed8d 7b12 	vstr	d7, [sp, #72]	@ 0x48
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800394c:	f7fe fa7e 	bl	8001e4c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003950:	4621      	mov	r1, r4
 8003952:	4845      	ldr	r0, [pc, #276]	@ (8003a68 <main+0x418>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003954:	9514      	str	r5, [sp, #80]	@ 0x50
  GPIO_InitStruct.Pin = TP3_Pin | NC2_Pin;
 8003956:	ed9f 7b38 	vldr	d7, [pc, #224]	@ 8003a38 <main+0x3e8>
 800395a:	ed8d 7b12 	vstr	d7, [sp, #72]	@ 0x48
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800395e:	f7fe fa75 	bl	8001e4c <HAL_GPIO_Init>
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8003962:	4621      	mov	r1, r4
 8003964:	483e      	ldr	r0, [pc, #248]	@ (8003a60 <main+0x410>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003966:	f8cd b058 	str.w	fp, [sp, #88]	@ 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800396a:	e9cd 6612 	strd	r6, r6, [sp, #72]	@ 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800396e:	e9cd 5514 	strd	r5, r5, [sp, #80]	@ 0x50
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8003972:	f7fe fa6b 	bl	8001e4c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8003976:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800397a:	4621      	mov	r1, r4
 800397c:	483a      	ldr	r0, [pc, #232]	@ (8003a68 <main+0x418>)
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800397e:	9212      	str	r2, [sp, #72]	@ 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003980:	9515      	str	r5, [sp, #84]	@ 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003982:	e9cd 8513 	strd	r8, r5, [sp, #76]	@ 0x4c
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8003986:	f7fe fa61 	bl	8001e4c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800398a:	4621      	mov	r1, r4
 800398c:	4834      	ldr	r0, [pc, #208]	@ (8003a60 <main+0x410>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800398e:	9514      	str	r5, [sp, #80]	@ 0x50
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003990:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8003a40 <main+0x3f0>
 8003994:	ed8d 7b12 	vstr	d7, [sp, #72]	@ 0x48
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003998:	f7fe fa58 	bl	8001e4c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800399c:	4621      	mov	r1, r4
 800399e:	4830      	ldr	r0, [pc, #192]	@ (8003a60 <main+0x410>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a0:	9514      	str	r5, [sp, #80]	@ 0x50
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80039a2:	ed9f 7b29 	vldr	d7, [pc, #164]	@ 8003a48 <main+0x3f8>
 80039a6:	ed8d 7b12 	vstr	d7, [sp, #72]	@ 0x48
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80039aa:	f7fe fa4f 	bl	8001e4c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80039ae:	2210      	movs	r2, #16
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80039b0:	4621      	mov	r1, r4
 80039b2:	482d      	ldr	r0, [pc, #180]	@ (8003a68 <main+0x418>)
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80039b4:	9212      	str	r2, [sp, #72]	@ 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b6:	e9cd 6513 	strd	r6, r5, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80039ba:	e9cd 7a15 	strd	r7, sl, [sp, #84]	@ 0x54
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80039be:	f7fe fa45 	bl	8001e4c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin;
 80039c2:	22c8      	movs	r2, #200	@ 0xc8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80039c4:	4621      	mov	r1, r4
 80039c6:	4829      	ldr	r0, [pc, #164]	@ (8003a6c <main+0x41c>)
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin;
 80039c8:	9212      	str	r2, [sp, #72]	@ 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039ca:	9515      	str	r5, [sp, #84]	@ 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039cc:	e9cd 8513 	strd	r8, r5, [sp, #76]	@ 0x4c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80039d0:	f7fe fa3c 	bl	8001e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_STP_Pin | ULPI_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039d4:	4621      	mov	r1, r4
 80039d6:	482a      	ldr	r0, [pc, #168]	@ (8003a80 <main+0x430>)
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80039d8:	f8cd a058 	str.w	sl, [sp, #88]	@ 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039dc:	e9cd 5714 	strd	r5, r7, [sp, #80]	@ 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039e0:	e9cd b612 	strd	fp, r6, [sp, #72]	@ 0x48
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039e4:	f7fe fa32 	bl	8001e4c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 80039e8:	2232      	movs	r2, #50	@ 0x32
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039ea:	4621      	mov	r1, r4
 80039ec:	4824      	ldr	r0, [pc, #144]	@ (8003a80 <main+0x430>)
  GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 80039ee:	9212      	str	r2, [sp, #72]	@ 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f0:	e9cd 6513 	strd	r6, r5, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80039f4:	e9cd 7915 	strd	r7, r9, [sp, #84]	@ 0x54
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039f8:	f7fe fa28 	bl	8001e4c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = RMII_RXER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80039fc:	4621      	mov	r1, r4
 80039fe:	481b      	ldr	r0, [pc, #108]	@ (8003a6c <main+0x41c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a00:	9514      	str	r5, [sp, #80]	@ 0x50
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8003a02:	ed9f 7b13 	vldr	d7, [pc, #76]	@ 8003a50 <main+0x400>
 8003a06:	ed8d 7b12 	vstr	d7, [sp, #72]	@ 0x48
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8003a0a:	f7fe fa1f 	bl	8001e4c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin | RMII_CRS_DV_Pin;
 8003a0e:	2386      	movs	r3, #134	@ 0x86
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a10:	4621      	mov	r1, r4
 8003a12:	e037      	b.n	8003a84 <main+0x434>
 8003a14:	f3af 8000 	nop.w
 8003a18:	00001000 	.word	0x00001000
 8003a1c:	00000000 	.word	0x00000000
 8003a20:	00000040 	.word	0x00000040
 8003a24:	10120000 	.word	0x10120000
 8003a28:	00002000 	.word	0x00002000
 8003a2c:	00000000 	.word	0x00000000
 8003a30:	00000010 	.word	0x00000010
 8003a34:	00000000 	.word	0x00000000
 8003a38:	00008004 	.word	0x00008004
 8003a3c:	00000000 	.word	0x00000000
 8003a40:	00000800 	.word	0x00000800
 8003a44:	00000003 	.word	0x00000003
 8003a48:	00002000 	.word	0x00002000
 8003a4c:	10120000 	.word	0x10120000
 8003a50:	00000004 	.word	0x00000004
 8003a54:	00000000 	.word	0x00000000
 8003a58:	40023800 	.word	0x40023800
 8003a5c:	40020c00 	.word	0x40020c00
 8003a60:	40022000 	.word	0x40022000
 8003a64:	40022800 	.word	0x40022800
 8003a68:	40021c00 	.word	0x40021c00
 8003a6c:	40021800 	.word	0x40021800
 8003a70:	40021000 	.word	0x40021000
 8003a74:	40020400 	.word	0x40020400
 8003a78:	40022400 	.word	0x40022400
 8003a7c:	40020000 	.word	0x40020000
 8003a80:	40020800 	.word	0x40020800
 8003a84:	4853      	ldr	r0, [pc, #332]	@ (8003bd4 <main+0x584>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a86:	9715      	str	r7, [sp, #84]	@ 0x54
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin | RMII_CRS_DV_Pin;
 8003a88:	9312      	str	r3, [sp, #72]	@ 0x48
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003a8a:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a8e:	e9cd 6513 	strd	r6, r5, [sp, #76]	@ 0x4c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a92:	f7fe f9db 	bl	8001e4c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ULPI_CLK_Pin | ULPI_D0_Pin;
 8003a96:	2328      	movs	r3, #40	@ 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a98:	4621      	mov	r1, r4
 8003a9a:	484e      	ldr	r0, [pc, #312]	@ (8003bd4 <main+0x584>)
  GPIO_InitStruct.Pin = ULPI_CLK_Pin | ULPI_D0_Pin;
 8003a9c:	9312      	str	r3, [sp, #72]	@ 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a9e:	e9cd 6513 	strd	r6, r5, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003aa2:	e9cd 7a15 	strd	r7, sl, [sp, #84]	@ 0x54
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aa6:	f7fe f9d1 	bl	8001e4c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin | ARDUINO_MOSI_PWM_D11_Pin;
 8003aaa:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003aae:	4621      	mov	r1, r4
 8003ab0:	4849      	ldr	r0, [pc, #292]	@ (8003bd8 <main+0x588>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ab2:	9515      	str	r5, [sp, #84]	@ 0x54
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin | ARDUINO_MOSI_PWM_D11_Pin;
 8003ab4:	9312      	str	r3, [sp, #72]	@ 0x48
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003ab6:	f8cd b058 	str.w	fp, [sp, #88]	@ 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aba:	e9cd 6513 	strd	r6, r5, [sp, #76]	@ 0x4c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003abe:	f7fe f9c5 	bl	8001e4c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = BUTTON1_Pin;
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);
 8003ac6:	4621      	mov	r1, r4
 8003ac8:	4842      	ldr	r0, [pc, #264]	@ (8003bd4 <main+0x584>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003aca:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
  GPIO_InitStruct.Pin = BUTTON1_Pin;
 8003ace:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
  HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);
 8003ad2:	f7fe f9bb 	bl	8001e4c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = BUTTON2_Pin;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(BUTTON2_GPIO_Port, &GPIO_InitStruct);
 8003adc:	4621      	mov	r1, r4
 8003ade:	483f      	ldr	r0, [pc, #252]	@ (8003bdc <main+0x58c>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ae0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
  GPIO_InitStruct.Pin = BUTTON2_Pin;
 8003ae4:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
  HAL_GPIO_Init(BUTTON2_GPIO_Port, &GPIO_InitStruct);
 8003ae8:	f7fe f9b0 	bl	8001e4c <HAL_GPIO_Init>
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_GPIO);
 8003aec:	4629      	mov	r1, r5
 8003aee:	4630      	mov	r0, r6
  RGBbuf = (uint16_t *)&input[80 * 80 * 4];
 8003af0:	4d3b      	ldr	r5, [pc, #236]	@ (8003be0 <main+0x590>)
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_GPIO);
 8003af2:	f7fd f9f1 	bl	8000ed8 <BSP_PB_Init>
  lcdsetup();
 8003af6:	f644 36f0 	movw	r6, #19440	@ 0x4bf0
 8003afa:	f7ff fd57 	bl	80035ac <_Z8lcdsetupv>
  signed char *input = getInput();
 8003afe:	f004 fa67 	bl	8007fd0 <getInput>
 8003b02:	4607      	mov	r7, r0
    input[i] = person[i];  // Image of person
 8003b04:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8003b08:	4936      	ldr	r1, [pc, #216]	@ (8003be4 <main+0x594>)
 8003b0a:	f006 f94d 	bl	8009da8 <memcpy>
  RGBbuf = (uint16_t *)&input[80 * 80 * 4];
 8003b0e:	f507 43c8 	add.w	r3, r7, #25600	@ 0x6400
 8003b12:	443e      	add	r6, r7
 8003b14:	602b      	str	r3, [r5, #0]
  start = HAL_GetTick();
 8003b16:	f7fd feb5 	bl	8001884 <HAL_GetTick>
      RGBbuf[j + RES_W * i] = (uint16_t)(r | g | b);
 8003b1a:	f8d5 c000 	ldr.w	ip, [r5]
  start = HAL_GetTick();
 8003b1e:	4605      	mov	r5, r0
  for (int i = 0; i < RES_W; i++) {
 8003b20:	f107 00f0 	add.w	r0, r7, #240	@ 0xf0
 8003b24:	f1ac 0e02 	sub.w	lr, ip, #2
    for (int j = 0; j < RES_W; j++) {
 8003b28:	f1a0 02f0 	sub.w	r2, r0, #240	@ 0xf0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003b2c:	4671      	mov	r1, lr
      uint8_t red = (int32_t)input[(80 * i + j) * 3] + 128;
 8003b2e:	7813      	ldrb	r3, [r2, #0]
    for (int j = 0; j < RES_W; j++) {
 8003b30:	3203      	adds	r2, #3
      uint8_t green = (int32_t)input[(80 * i + j) * 3 + 1] + 128;
 8003b32:	f812 7c02 	ldrb.w	r7, [r2, #-2]
      uint16_t r = ((red >> 3) & 0x1f) << 11;
 8003b36:	f083 0380 	eor.w	r3, r3, #128	@ 0x80
      uint8_t blue = (int32_t)input[(80 * i + j) * 3 + 2] + 128;
 8003b3a:	f812 8c01 	ldrb.w	r8, [r2, #-1]
      uint16_t g = ((green >> 2) & 0x3f) << 5;
 8003b3e:	f087 0780 	eor.w	r7, r7, #128	@ 0x80
    for (int j = 0; j < RES_W; j++) {
 8003b42:	4282      	cmp	r2, r0
      uint16_t r = ((red >> 3) & 0x1f) << 11;
 8003b44:	ea4f 03d3 	mov.w	r3, r3, lsr #3
      uint16_t b = (blue >> 3) & 0x1f;
 8003b48:	f088 0880 	eor.w	r8, r8, #128	@ 0x80
      uint16_t g = ((green >> 2) & 0x3f) << 5;
 8003b4c:	ea4f 0797 	mov.w	r7, r7, lsr #2
      uint16_t r = ((red >> 3) & 0x1f) << 11;
 8003b50:	ea4f 23c3 	mov.w	r3, r3, lsl #11
      RGBbuf[j + RES_W * i] = (uint16_t)(r | g | b);
 8003b54:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
 8003b58:	ea43 03d8 	orr.w	r3, r3, r8, lsr #3
 8003b5c:	f821 3f02 	strh.w	r3, [r1, #2]!
    for (int j = 0; j < RES_W; j++) {
 8003b60:	d1e5      	bne.n	8003b2e <main+0x4de>
  for (int i = 0; i < RES_W; i++) {
 8003b62:	f102 00f0 	add.w	r0, r2, #240	@ 0xf0
 8003b66:	f10e 0ea0 	add.w	lr, lr, #160	@ 0xa0
 8003b6a:	4286      	cmp	r6, r0
 8003b6c:	d1dc      	bne.n	8003b28 <main+0x4d8>
  loadRGB565LCD(10, 10, RES_W, RES_W, RGBbuf, 3);
 8003b6e:	210a      	movs	r1, #10
 8003b70:	2350      	movs	r3, #80	@ 0x50
 8003b72:	2203      	movs	r2, #3
	invoke_new_weights_givenimg(out_int);
 8003b74:	4e1c      	ldr	r6, [pc, #112]	@ (8003be8 <main+0x598>)
  loadRGB565LCD(10, 10, RES_W, RES_W, RGBbuf, 3);
 8003b76:	4608      	mov	r0, r1
 8003b78:	e9cd c200 	strd	ip, r2, [sp]
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	f7ff fb1d 	bl	80031bc <_Z13loadRGB565LCDmmmmPth>
	invoke_new_weights_givenimg(out_int);
 8003b82:	4630      	mov	r0, r6
 8003b84:	f7ff fd54 	bl	8003630 <_Z27invoke_new_weights_givenimgPa>
	if (out_int[0] > out_int[1]) {
 8003b88:	f996 7000 	ldrsb.w	r7, [r6]
 8003b8c:	f996 3001 	ldrsb.w	r3, [r6, #1]
 8003b90:	429f      	cmp	r7, r3
 8003b92:	bfcc      	ite	gt
 8003b94:	2700      	movgt	r7, #0
 8003b96:	2701      	movle	r7, #1
	end = HAL_GetTick();
 8003b98:	f7fd fe74 	bl	8001884 <HAL_GetTick>
	sprintf(showbuf, " Inference ");
 8003b9c:	4b13      	ldr	r3, [pc, #76]	@ (8003bec <main+0x59c>)
	end = HAL_GetTick();
 8003b9e:	4606      	mov	r6, r0
	sprintf(showbuf, " Inference ");
 8003ba0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003ba4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	displaystring(showbuf, 273, 10);
 8003ba8:	4620      	mov	r0, r4
 8003baa:	220a      	movs	r2, #10
 8003bac:	f240 1111 	movw	r1, #273	@ 0x111
 8003bb0:	f7ff fb58 	bl	8003264 <_Z13displaystringPcii>
	detectResponse(person, end - start, t_mode, 0, 0);
 8003bb4:	1b72      	subs	r2, r6, r5
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	4638      	mov	r0, r7
 8003bba:	ee00 2a10 	vmov	s0, r2
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8003bc6:	f7ff fb55 	bl	8003274 <_Z14detectResponseifiii>
}
 8003bca:	2000      	movs	r0, #0
 8003bcc:	b039      	add	sp, #228	@ 0xe4
 8003bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while (1) {
 8003bd2:	e7fe      	b.n	8003bd2 <main+0x582>
 8003bd4:	40020000 	.word	0x40020000
 8003bd8:	40020400 	.word	0x40020400
 8003bdc:	40021400 	.word	0x40021400
 8003be0:	200009dc 	.word	0x200009dc
 8003be4:	0800daa4 	.word	0x0800daa4
 8003be8:	20000a08 	.word	0x20000a08
 8003bec:	0800da98 	.word	0x0800da98

08003bf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003bf0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003c28 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003bf4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003bf6:	e003      	b.n	8003c00 <LoopCopyDataInit>

08003bf8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8003c2c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003bfa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003bfc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003bfe:	3104      	adds	r1, #4

08003c00 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003c00:	480b      	ldr	r0, [pc, #44]	@ (8003c30 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003c02:	4b0c      	ldr	r3, [pc, #48]	@ (8003c34 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003c04:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003c06:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003c08:	d3f6      	bcc.n	8003bf8 <CopyDataInit>
  ldr  r2, =_sbss
 8003c0a:	4a0b      	ldr	r2, [pc, #44]	@ (8003c38 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003c0c:	e002      	b.n	8003c14 <LoopFillZerobss>

08003c0e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003c0e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003c10:	f842 3b04 	str.w	r3, [r2], #4

08003c14 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003c14:	4b09      	ldr	r3, [pc, #36]	@ (8003c3c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003c16:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003c18:	d3f9      	bcc.n	8003c0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003c1a:	f000 f8bf 	bl	8003d9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c1e:	f006 f89b 	bl	8009d58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c22:	f7ff fd15 	bl	8003650 <main>
  bx  lr    
 8003c26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003c28:	2004ffff 	.word	0x2004ffff
  ldr  r3, =_sidata
 8003c2c:	0808e9ec 	.word	0x0808e9ec
  ldr  r0, =_sdata
 8003c30:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003c34:	200006d8 	.word	0x200006d8
  ldr  r2, =_sbss
 8003c38:	200006d8 	.word	0x200006d8
  ldr  r3, = _ebss
 8003c3c:	200100cc 	.word	0x200100cc

08003c40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c40:	e7fe      	b.n	8003c40 <ADC_IRQHandler>
	...

08003c44 <HAL_LTDC_MspInit>:
  }
}
void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc) {
  GPIO_InitTypeDef GPIO_Init_Structure;

  __HAL_RCC_LTDC_CLK_ENABLE();
 8003c44:	4b46      	ldr	r3, [pc, #280]	@ (8003d60 <HAL_LTDC_MspInit+0x11c>)
  GPIO_Init_Structure.Pin = GPIO_PIN_4;
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
  GPIO_Init_Structure.Pull = GPIO_NOPULL;
  GPIO_Init_Structure.Speed = GPIO_SPEED_FAST;
  GPIO_Init_Structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOE, &GPIO_Init_Structure);
 8003c46:	4847      	ldr	r0, [pc, #284]	@ (8003d64 <HAL_LTDC_MspInit+0x120>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003c48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c4a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc) {
 8003c4e:	b530      	push	{r4, r5, lr}
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003c50:	645a      	str	r2, [r3, #68]	@ 0x44
void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc) {
 8003c52:	b08d      	sub	sp, #52	@ 0x34
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003c54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
  GPIO_Init_Structure.Alternate = GPIO_AF14_LTDC;
 8003c56:	240e      	movs	r4, #14
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
 8003c58:	2502      	movs	r5, #2
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003c5a:	f002 6280 	and.w	r2, r2, #67108864	@ 0x4000000
 8003c5e:	9200      	str	r2, [sp, #0]
 8003c60:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c64:	f042 0210 	orr.w	r2, r2, #16
 8003c68:	631a      	str	r2, [r3, #48]	@ 0x30
 8003c6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c6c:	f002 0210 	and.w	r2, r2, #16
 8003c70:	9201      	str	r2, [sp, #4]
 8003c72:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003c74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c76:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c7a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003c7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c7e:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8003c82:	9202      	str	r2, [sp, #8]
 8003c84:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003c86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c8c:	631a      	str	r2, [r3, #48]	@ 0x30
 8003c8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c90:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8003c94:	9203      	str	r2, [sp, #12]
 8003c96:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003c98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c9e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ca0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ca2:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8003ca6:	9204      	str	r2, [sp, #16]
 8003ca8:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8003caa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003cac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003cb0:	631a      	str	r2, [r3, #48]	@ 0x30
  GPIO_Init_Structure.Pin = GPIO_PIN_4;
 8003cb2:	2210      	movs	r2, #16
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8003cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
 8003cb6:	9507      	str	r5, [sp, #28]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8003cb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cbc:	9305      	str	r3, [sp, #20]
  GPIO_Init_Structure.Pull = GPIO_NOPULL;
 8003cbe:	2300      	movs	r3, #0
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8003cc0:	9905      	ldr	r1, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_Init_Structure);
 8003cc2:	a906      	add	r1, sp, #24
  GPIO_Init_Structure.Pin = GPIO_PIN_4;
 8003cc4:	9206      	str	r2, [sp, #24]
  GPIO_Init_Structure.Pull = GPIO_NOPULL;
 8003cc6:	9308      	str	r3, [sp, #32]
  GPIO_Init_Structure.Alternate = GPIO_AF14_LTDC;
 8003cc8:	e9cd 5409 	strd	r5, r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_Init_Structure);
 8003ccc:	f7fe f8be 	bl	8001e4c <HAL_GPIO_Init>

  GPIO_Init_Structure.Pin = GPIO_PIN_12;
 8003cd0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003cd4:	2102      	movs	r1, #2
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
  GPIO_Init_Structure.Alternate = GPIO_AF9_LTDC;
 8003cd6:	2309      	movs	r3, #9

  GPIO_Init_Structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 |
                            GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
  GPIO_Init_Structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOI, &GPIO_Init_Structure);
 8003cd8:	4d23      	ldr	r5, [pc, #140]	@ (8003d68 <HAL_LTDC_MspInit+0x124>)
  GPIO_Init_Structure.Alternate = GPIO_AF9_LTDC;
 8003cda:	930a      	str	r3, [sp, #40]	@ 0x28
  GPIO_Init_Structure.Pin = GPIO_PIN_12;
 8003cdc:	e9cd 0106 	strd	r0, r1, [sp, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_Init_Structure);
 8003ce0:	a906      	add	r1, sp, #24
 8003ce2:	4822      	ldr	r0, [pc, #136]	@ (8003d6c <HAL_LTDC_MspInit+0x128>)
 8003ce4:	f7fe f8b2 	bl	8001e4c <HAL_GPIO_Init>
  GPIO_Init_Structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 |
 8003ce8:	f44f 4267 	mov.w	r2, #59136	@ 0xe700
 8003cec:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOI, &GPIO_Init_Structure);
 8003cee:	a906      	add	r1, sp, #24
 8003cf0:	4628      	mov	r0, r5
  GPIO_Init_Structure.Alternate = GPIO_AF14_LTDC;
 8003cf2:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_Init_Structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 |
 8003cf4:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIOI, &GPIO_Init_Structure);
 8003cf8:	f7fe f8a8 	bl	8001e4c <HAL_GPIO_Init>

  GPIO_Init_Structure.Pin =
 8003cfc:	f64e 72ff 	movw	r2, #61439	@ 0xefff
 8003d00:	2302      	movs	r3, #2
      GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |
      GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |
      GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
  GPIO_Init_Structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOJ, &GPIO_Init_Structure);
 8003d02:	a906      	add	r1, sp, #24
 8003d04:	481a      	ldr	r0, [pc, #104]	@ (8003d70 <HAL_LTDC_MspInit+0x12c>)
  GPIO_Init_Structure.Alternate = GPIO_AF14_LTDC;
 8003d06:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_Init_Structure.Pin =
 8003d08:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIOJ, &GPIO_Init_Structure);
 8003d0c:	f7fe f89e 	bl	8001e4c <HAL_GPIO_Init>

  GPIO_Init_Structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 |
                            GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
  GPIO_Init_Structure.Alternate = GPIO_AF14_LTDC;
 8003d10:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOK, &GPIO_Init_Structure);
 8003d12:	4c18      	ldr	r4, [pc, #96]	@ (8003d74 <HAL_LTDC_MspInit+0x130>)
  GPIO_Init_Structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 |
 8003d14:	22f7      	movs	r2, #247	@ 0xf7
 8003d16:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOK, &GPIO_Init_Structure);
 8003d18:	a906      	add	r1, sp, #24
 8003d1a:	4620      	mov	r0, r4
  GPIO_Init_Structure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 |
 8003d1c:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIOK, &GPIO_Init_Structure);
 8003d20:	f7fe f894 	bl	8001e4c <HAL_GPIO_Init>

  GPIO_Init_Structure.Pin = GPIO_PIN_12;
 8003d24:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003d28:	2301      	movs	r3, #1
  GPIO_Init_Structure.Mode = GPIO_MODE_OUTPUT_PP;
  HAL_GPIO_Init(GPIOI, &GPIO_Init_Structure);
 8003d2a:	a906      	add	r1, sp, #24
 8003d2c:	4628      	mov	r0, r5
  GPIO_Init_Structure.Pin = GPIO_PIN_12;
 8003d2e:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIOI, &GPIO_Init_Structure);
 8003d32:	f7fe f88b 	bl	8001e4c <HAL_GPIO_Init>

  GPIO_Init_Structure.Pin = GPIO_PIN_3;
 8003d36:	2301      	movs	r3, #1
 8003d38:	2208      	movs	r2, #8
  GPIO_Init_Structure.Mode = GPIO_MODE_OUTPUT_PP;
  HAL_GPIO_Init(GPIOK, &GPIO_Init_Structure);
 8003d3a:	a906      	add	r1, sp, #24
 8003d3c:	4620      	mov	r0, r4
  GPIO_Init_Structure.Pin = GPIO_PIN_3;
 8003d3e:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIOK, &GPIO_Init_Structure);
 8003d42:	f7fe f883 	bl	8001e4c <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8003d46:	4628      	mov	r0, r5
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003d4e:	f7fe f9c1 	bl	80020d4 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8003d52:	2201      	movs	r2, #1
 8003d54:	2108      	movs	r1, #8
 8003d56:	4620      	mov	r0, r4
 8003d58:	f7fe f9bc 	bl	80020d4 <HAL_GPIO_WritePin>
}
 8003d5c:	b00d      	add	sp, #52	@ 0x34
 8003d5e:	bd30      	pop	{r4, r5, pc}
 8003d60:	40023800 	.word	0x40023800
 8003d64:	40021000 	.word	0x40021000
 8003d68:	40022000 	.word	0x40022000
 8003d6c:	40021800 	.word	0x40021800
 8003d70:	40022400 	.word	0x40022400
 8003d74:	40022800 	.word	0x40022800

08003d78 <NMI_Handler>:
 * Target ISA:  ARMv7E-M
 * -------------------------------------------------------------------- */
  
#include "stm32f7xx_it.h"
#include "main.h"
void NMI_Handler(void) {}
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop

08003d7c <HardFault_Handler>:

void HardFault_Handler(void) {

  while (1) {
 8003d7c:	e7fe      	b.n	8003d7c <HardFault_Handler>
 8003d7e:	bf00      	nop

08003d80 <MemManage_Handler>:
  }
}

void MemManage_Handler(void) {

  while (1) {
 8003d80:	e7fe      	b.n	8003d80 <MemManage_Handler>
 8003d82:	bf00      	nop

08003d84 <BusFault_Handler>:
  }
}

void BusFault_Handler(void) {

  while (1) {
 8003d84:	e7fe      	b.n	8003d84 <BusFault_Handler>
 8003d86:	bf00      	nop

08003d88 <UsageFault_Handler>:
  }
}

void UsageFault_Handler(void) {

  while (1) {
 8003d88:	e7fe      	b.n	8003d88 <UsageFault_Handler>
 8003d8a:	bf00      	nop

08003d8c <SVC_Handler>:
  }
}

void SVC_Handler(void) {}
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop

08003d90 <DebugMon_Handler>:

void DebugMon_Handler(void) {}
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop

08003d94 <PendSV_Handler>:

void PendSV_Handler(void) {}
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop

08003d98 <SysTick_Handler>:

void SysTick_Handler(void) { HAL_IncTick(); }
 8003d98:	f7fd bd68 	b.w	800186c <HAL_IncTick>

08003d9c <SystemInit>:
                                   1, 2, 3, 4, 6, 7, 8, 9};
const uint8_t APBPrescTable[8] = {0, 0, 0, 0, 1, 2, 3, 4};
void SystemInit(void) {

#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2));
 8003d9c:	4a0f      	ldr	r2, [pc, #60]	@ (8003ddc <SystemInit+0x40>)
#endif

  RCC->CR |= (uint32_t)0x00000001;
 8003d9e:	4b10      	ldr	r3, [pc, #64]	@ (8003de0 <SystemInit+0x44>)
  SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2));
 8003da0:	f8d2 0088 	ldr.w	r0, [r2, #136]	@ 0x88

  RCC->CFGR = 0x00000000;

  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003da4:	490f      	ldr	r1, [pc, #60]	@ (8003de4 <SystemInit+0x48>)
  SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2));
 8003da6:	f440 0070 	orr.w	r0, r0, #15728640	@ 0xf00000
void SystemInit(void) {
 8003daa:	b410      	push	{r4}
  SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2));
 8003dac:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
  RCC->CFGR = 0x00000000;
 8003db0:	2400      	movs	r4, #0
  RCC->CR |= (uint32_t)0x00000001;
 8003db2:	6818      	ldr	r0, [r3, #0]
 8003db4:	f040 0001 	orr.w	r0, r0, #1
 8003db8:	6018      	str	r0, [r3, #0]
  RCC->CFGR = 0x00000000;
 8003dba:	609c      	str	r4, [r3, #8]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003dbc:	6818      	ldr	r0, [r3, #0]
 8003dbe:	4001      	ands	r1, r0

  RCC->PLLCFGR = 0x24003010;
 8003dc0:	4809      	ldr	r0, [pc, #36]	@ (8003de8 <SystemInit+0x4c>)
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003dc2:	6019      	str	r1, [r3, #0]
  RCC->PLLCFGR = 0x24003010;
 8003dc4:	6058      	str	r0, [r3, #4]
  RCC->CIR = 0x00000000;

#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET;
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET;
 8003dc6:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003dca:	6819      	ldr	r1, [r3, #0]
 8003dcc:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 8003dd0:	6019      	str	r1, [r3, #0]
  RCC->CIR = 0x00000000;
 8003dd2:	60dc      	str	r4, [r3, #12]
#endif
}
 8003dd4:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET;
 8003dd8:	6090      	str	r0, [r2, #8]
}
 8003dda:	4770      	bx	lr
 8003ddc:	e000ed00 	.word	0xe000ed00
 8003de0:	40023800 	.word	0x40023800
 8003de4:	fef6ffff 	.word	0xfef6ffff
 8003de8:	24003010 	.word	0x24003010

08003dec <add_fpreq>:
#include "tinyengine_function.h"

tinyengine_status add_fpreq(int size, const int8_t* input1_data, const float input1_scale, const float input1_zero,
			const int8_t* input2_data, const float input2_scale, const float input2_zero, const float output_scale,
			const float zero_y, int8_t* output_data) {
  for (int i = 0; i < size; ++i) {
 8003dec:	2800      	cmp	r0, #0
 8003dee:	dd49      	ble.n	8003e84 <add_fpreq+0x98>
 8003df0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
			const float zero_y, int8_t* output_data) {
 8003df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003df8:	ed2d 8b06 	vpush	{d8-d10}
 8003dfc:	eec7 aa82 	vdiv.f32	s21, s15, s4
 8003e00:	460c      	mov	r4, r1
 8003e02:	4690      	mov	r8, r2
 8003e04:	1e5f      	subs	r7, r3, #1
 8003e06:	180d      	adds	r5, r1, r0
	  float input1_fp = ((float)*input1_data++ - input1_zero) * input1_scale;
	  float input2_fp = ((float)*input2_data++ - input2_zero) * input2_scale;
      int clamped_output = (int)round((input1_fp + input2_fp) / output_scale + zero_y); // to align with tvm implementation
      clamped_output = TN_MAX(clamped_output, -128);
 8003e08:	f06f 067f 	mvn.w	r6, #127	@ 0x7f
 8003e0c:	eeb0 8a40 	vmov.f32	s16, s0
 8003e10:	eef0 8a60 	vmov.f32	s17, s1
 8003e14:	eeb0 9a41 	vmov.f32	s18, s2
 8003e18:	eef0 9a61 	vmov.f32	s19, s3
 8003e1c:	eeb0 aa62 	vmov.f32	s20, s5
	  float input2_fp = ((float)*input2_data++ - input2_zero) * input2_scale;
 8003e20:	f918 3b01 	ldrsb.w	r3, [r8], #1
 8003e24:	ee07 3a90 	vmov	s15, r3
	  float input1_fp = ((float)*input1_data++ - input1_zero) * input1_scale;
 8003e28:	f914 3b01 	ldrsb.w	r3, [r4], #1
	  float input2_fp = ((float)*input2_data++ - input2_zero) * input2_scale;
 8003e2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	  float input1_fp = ((float)*input1_data++ - input1_zero) * input1_scale;
 8003e30:	ee07 3a10 	vmov	s14, r3
 8003e34:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	  float input2_fp = ((float)*input2_data++ - input2_zero) * input2_scale;
 8003e38:	ee77 7ae9 	vsub.f32	s15, s15, s19
	  float input1_fp = ((float)*input1_data++ - input1_zero) * input1_scale;
 8003e3c:	ee37 7a68 	vsub.f32	s14, s14, s17
	  float input2_fp = ((float)*input2_data++ - input2_zero) * input2_scale;
 8003e40:	ee67 7a89 	vmul.f32	s15, s15, s18
      int clamped_output = (int)round((input1_fp + input2_fp) / output_scale + zero_y); // to align with tvm implementation
 8003e44:	eee7 7a08 	vfma.f32	s15, s14, s16
 8003e48:	eeb0 7a4a 	vmov.f32	s14, s20
 8003e4c:	eea7 7aaa 	vfma.f32	s14, s15, s21
 8003e50:	ee17 0a10 	vmov	r0, s14
 8003e54:	f7fc fb98 	bl	8000588 <__aeabi_f2d>
 8003e58:	ec41 0b10 	vmov	d0, r0, r1
 8003e5c:	f005 f822 	bl	8008ea4 <round>
 8003e60:	ec51 0b10 	vmov	r0, r1, d0
 8003e64:	f7fc fe98 	bl	8000b98 <__aeabi_d2iz>
      clamped_output = TN_MAX(clamped_output, -128);
 8003e68:	42b0      	cmp	r0, r6
 8003e6a:	bfb8      	it	lt
 8003e6c:	4630      	movlt	r0, r6
      clamped_output = TN_MIN(clamped_output, 127);
 8003e6e:	287f      	cmp	r0, #127	@ 0x7f
 8003e70:	bfa8      	it	ge
 8003e72:	207f      	movge	r0, #127	@ 0x7f
  for (int i = 0; i < size; ++i) {
 8003e74:	42ac      	cmp	r4, r5
      output_data[i] = (int8_t)(clamped_output);
 8003e76:	f807 0f01 	strb.w	r0, [r7, #1]!
  for (int i = 0; i < size; ++i) {
 8003e7a:	d1d1      	bne.n	8003e20 <add_fpreq+0x34>
  }
}
 8003e7c:	ecbd 8b06 	vpop	{d8-d10}
 8003e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop

08003e88 <arm_nn_mat_mult_kernel_s8_s16_reordered>:
                                              const int16_t activation_min,
                                              const int16_t activation_max,
                                              const uint16_t num_col_a,
                                              const int32_t *const output_bias,
                                              q7_t *out_0)
{
 8003e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e8c:	b095      	sub	sp, #84	@ 0x54
 8003e8e:	468e      	mov	lr, r1
    const int32_t *bias = output_bias;

    uint16_t row_count = output_ch / 2;
    const q7_t *ip_a0 = input_a;
    /* this loop over rows in A */
    while (row_count)
 8003e90:	0856      	lsrs	r6, r2, #1
{
 8003e92:	9f24      	ldr	r7, [sp, #144]	@ 0x90
 8003e94:	910e      	str	r1, [sp, #56]	@ 0x38
 8003e96:	f8bd 1088 	ldrh.w	r1, [sp, #136]	@ 0x88
 8003e9a:	9004      	str	r0, [sp, #16]
    q7_t *out_1 = out_0 + output_ch;
 8003e9c:	eb07 0002 	add.w	r0, r7, r2
{
 8003ea0:	f9bd 9080 	ldrsh.w	r9, [sp, #128]	@ 0x80
 8003ea4:	f9bd c084 	ldrsh.w	ip, [sp, #132]	@ 0x84
 8003ea8:	9d23      	ldr	r5, [sp, #140]	@ 0x8c
 8003eaa:	910b      	str	r1, [sp, #44]	@ 0x2c
    while (row_count)
 8003eac:	f000 8168 	beq.w	8004180 <arm_nn_mat_mult_kernel_s8_s16_reordered+0x2f8>
 8003eb0:	f100 0a02 	add.w	sl, r0, #2
        q31_t ch_0_out_0 = *bias;
        q31_t ch_0_out_1 = *bias++;
        q31_t ch_1_out_0 = *bias;
        q31_t ch_1_out_1 = *bias++;

        uint16_t col_count = num_col_a / 8;
 8003eb4:	08c8      	lsrs	r0, r1, #3
 8003eb6:	1e71      	subs	r1, r6, #1
 8003eb8:	4614      	mov	r4, r2
 8003eba:	900c      	str	r0, [sp, #48]	@ 0x30
 8003ebc:	f103 0208 	add.w	r2, r3, #8
 8003ec0:	b289      	uxth	r1, r1
 8003ec2:	1e43      	subs	r3, r0, #1
 8003ec4:	f105 0010 	add.w	r0, r5, #16
 *
 */
__STATIC_FORCEINLINE q31_t arm_nn_divide_by_power_of_two(const q31_t dividend, const q31_t exponent)
{
    q31_t result = 0;
    const q31_t remainder_mask = (1 << exponent) - 1;
 8003ec8:	9413      	str	r4, [sp, #76]	@ 0x4c
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 8003ed0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	900d      	str	r0, [sp, #52]	@ 0x34
 8003ed6:	f105 0008 	add.w	r0, r5, #8
 8003eda:	eb0e 0541 	add.w	r5, lr, r1, lsl #1
 8003ede:	4680      	mov	r8, r0
 8003ee0:	950f      	str	r5, [sp, #60]	@ 0x3c
 8003ee2:	1cbd      	adds	r5, r7, #2
 8003ee4:	9502      	str	r5, [sp, #8]
 8003ee6:	9d1e      	ldr	r5, [sp, #120]	@ 0x78
 8003ee8:	f105 0b08 	add.w	fp, r5, #8
 8003eec:	00dd      	lsls	r5, r3, #3
        *out_1++ = (q7_t)ch_1_out_1;
        out_mult++;
        out_shift++;

        /* skip row */
        ip_a0 += num_col_a;
 8003eee:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8003ef2:	465c      	mov	r4, fp
 8003ef4:	46d3      	mov	fp, sl
 8003ef6:	46ca      	mov	sl, r9
 8003ef8:	46e1      	mov	r9, ip
 8003efa:	4694      	mov	ip, r2
 8003efc:	9510      	str	r5, [sp, #64]	@ 0x40
 8003efe:	e9cd 3611 	strd	r3, r6, [sp, #68]	@ 0x44
        const q7_t *ip_a1 = ip_a0 + num_col_a;
 8003f02:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003f04:	9904      	ldr	r1, [sp, #16]
 8003f06:	18cf      	adds	r7, r1, r3
        while (col_count)
 8003f08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
        q31_t ch_1_out_0 = *bias;
 8003f0a:	e958 0202 	ldrd	r0, r2, [r8, #-8]
        while (col_count)
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	f000 8139 	beq.w	8004186 <arm_nn_mat_mult_kernel_s8_s16_reordered+0x2fe>
 8003f14:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003f16:	468e      	mov	lr, r1
 8003f18:	f8cd b01c 	str.w	fp, [sp, #28]
 8003f1c:	4611      	mov	r1, r2
 8003f1e:	18fb      	adds	r3, r7, r3
 8003f20:	46f3      	mov	fp, lr
        q31_t ch_1_out_1 = *bias++;
 8003f22:	9203      	str	r2, [sp, #12]
 8003f24:	9301      	str	r3, [sp, #4]
        q31_t ch_0_out_1 = *bias++;
 8003f26:	4603      	mov	r3, r0
        while (col_count)
 8003f28:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
        const q15_t *ip_b0 = input_b;
 8003f2c:	e9dd 560e 	ldrd	r5, r6, [sp, #56]	@ 0x38
        while (col_count)
 8003f30:	e9cd c405 	strd	ip, r4, [sp, #20]
 8003f34:	e9cd 8a08 	strd	r8, sl, [sp, #32]
    memcpy(&val, *in_q7, 4);
 8003f38:	f8db 4000 	ldr.w	r4, [fp]
    memcpy(&val, *in_q15, 4);
 8003f3c:	f8d5 8000 	ldr.w	r8, [r5]
  op2 %= 32U;
  if (op2 == 0U)
  {
    return op1;
  }
  return (op1 >> op2) | (op1 << (32U - op2));
 8003f40:	ea4f 2e34 	mov.w	lr, r4, ror #8
 8003f44:	f8d6 a000 	ldr.w	sl, [r6]

__STATIC_FORCEINLINE uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003f48:	fa2f f484 	sxtb16	r4, r4
 8003f4c:	fa2f fe8e 	sxtb16	lr, lr

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8003f50:	fb24 0008 	smlad	r0, r4, r8, r0
    memcpy(&val, *in_q7, 4);
 8003f54:	f8d7 c000 	ldr.w	ip, [r7]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003f58:	fa2f f98c 	sxtb16	r9, ip
  return (op1 >> op2) | (op1 << (32U - op2));
 8003f5c:	ea4f 2c3c 	mov.w	ip, ip, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003f60:	fa2f fc8c 	sxtb16	ip, ip
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8003f64:	fb24 340a 	smlad	r4, r4, sl, r3
 8003f68:	fb29 2808 	smlad	r8, r9, r8, r2
    memcpy(&val, *in_q15, 4);
 8003f6c:	686a      	ldr	r2, [r5, #4]
 8003f6e:	fb29 110a 	smlad	r1, r9, sl, r1
 8003f72:	6873      	ldr	r3, [r6, #4]
 8003f74:	fb2e 0002 	smlad	r0, lr, r2, r0
 8003f78:	fb2e 4e03 	smlad	lr, lr, r3, r4
 8003f7c:	fb2c 8202 	smlad	r2, ip, r2, r8
 8003f80:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8003f84:	fb2c 1a03 	smlad	sl, ip, r3, r1
    memcpy(&val, *in_q7, 4);
 8003f88:	f8db 4004 	ldr.w	r4, [fp, #4]
    *in_q7 += 4;
 8003f8c:	f10b 0b08 	add.w	fp, fp, #8
    memcpy(&val, *in_q15, 4);
 8003f90:	f8d6 9008 	ldr.w	r9, [r6, #8]
  return (op1 >> op2) | (op1 << (32U - op2));
 8003f94:	ea4f 2334 	mov.w	r3, r4, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003f98:	fa2f f484 	sxtb16	r4, r4
 8003f9c:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8003fa0:	fb24 0008 	smlad	r0, r4, r8, r0
    memcpy(&val, *in_q7, 4);
 8003fa4:	6879      	ldr	r1, [r7, #4]
    *in_q7 += 4;
 8003fa6:	3708      	adds	r7, #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003fa8:	fa2f fc81 	sxtb16	ip, r1
  return (op1 >> op2) | (op1 << (32U - op2));
 8003fac:	ea4f 2131 	mov.w	r1, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003fb0:	fa2f f181 	sxtb16	r1, r1
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8003fb4:	fb24 e409 	smlad	r4, r4, r9, lr
 8003fb8:	fb2c 2808 	smlad	r8, ip, r8, r2
    memcpy(&val, *in_q15, 4);
 8003fbc:	68ea      	ldr	r2, [r5, #12]
    *in_q15 += 2;
 8003fbe:	3510      	adds	r5, #16
 8003fc0:	fb2c ac09 	smlad	ip, ip, r9, sl
    memcpy(&val, *in_q15, 4);
 8003fc4:	f8d6 e00c 	ldr.w	lr, [r6, #12]
    *in_q15 += 2;
 8003fc8:	3610      	adds	r6, #16
 8003fca:	fb23 0002 	smlad	r0, r3, r2, r0
 8003fce:	fb23 430e 	smlad	r3, r3, lr, r4
 8003fd2:	fb21 8202 	smlad	r2, r1, r2, r8
 8003fd6:	fb21 c10e 	smlad	r1, r1, lr, ip
 8003fda:	9c01      	ldr	r4, [sp, #4]
 8003fdc:	42a7      	cmp	r7, r4
 8003fde:	d1ab      	bne.n	8003f38 <arm_nn_mat_mult_kernel_s8_s16_reordered+0xb0>
        ip_a0 += num_col_a;
 8003fe0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8003fe2:	9103      	str	r1, [sp, #12]
 8003fe4:	9904      	ldr	r1, [sp, #16]
 8003fe6:	e9dd c405 	ldrd	ip, r4, [sp, #20]
 8003fea:	4429      	add	r1, r5
 8003fec:	e9dd b807 	ldrd	fp, r8, [sp, #28]
 8003ff0:	e9dd a909 	ldrd	sl, r9, [sp, #36]	@ 0x24
 8003ff4:	9104      	str	r1, [sp, #16]
        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
 8003ff6:	f85c 5c08 	ldr.w	r5, [ip, #-8]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8003ffa:	2700      	movs	r7, #0
 8003ffc:	f854 1c08 	ldr.w	r1, [r4, #-8]
    int32_t result = new_val >> (total_shift - 1);
    result = (result + 1) >> 1;

    return result;
#else
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8004000:	ea25 76e5 	bic.w	r6, r5, r5, asr #31
 8004004:	2d00      	cmp	r5, #0
 8004006:	fa00 f606 	lsl.w	r6, r0, r6
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800400a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800400e:	fbc6 0701 	smlal	r0, r7, r6, r1
    result = (int32_t)(mult.long_long >> 31);
 8004012:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8004016:	ea40 0047 	orr.w	r0, r0, r7, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800401a:	dc0d      	bgt.n	8004038 <arm_nn_mat_mult_kernel_s8_s16_reordered+0x1b0>
 800401c:	426d      	negs	r5, r5
    const q31_t remainder_mask = (1 << exponent) - 1;
 800401e:	2101      	movs	r1, #1
 8004020:	40a9      	lsls	r1, r5
 8004022:	3901      	subs	r1, #1
    int32_t remainder = remainder_mask & dividend;
 8004024:	ea00 0601 	and.w	r6, r0, r1
    if (result < 0)
 8004028:	4128      	asrs	r0, r5
    q31_t threshold = remainder_mask >> 1;
 800402a:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
 800402e:	bf48      	it	mi
 8004030:	3101      	addmi	r1, #1
    if (remainder > threshold)
 8004032:	428e      	cmp	r6, r1
        result++;
 8004034:	bfc8      	it	gt
 8004036:	3001      	addgt	r0, #1
        ch_0_out_0 += out_offset;
 8004038:	991f      	ldr	r1, [sp, #124]	@ 0x7c
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800403a:	2600      	movs	r6, #0
 800403c:	4408      	add	r0, r1
        *out_0++ = (q7_t)ch_0_out_0;
 800403e:	9902      	ldr	r1, [sp, #8]
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 8004040:	4550      	cmp	r0, sl
 8004042:	bfb8      	it	lt
 8004044:	4650      	movlt	r0, sl
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 8004046:	4548      	cmp	r0, r9
 8004048:	bfa8      	it	ge
 800404a:	4648      	movge	r0, r9
        *out_0++ = (q7_t)ch_0_out_0;
 800404c:	f801 0c02 	strb.w	r0, [r1, #-2]
        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
 8004050:	f85c 0c08 	ldr.w	r0, [ip, #-8]
 8004054:	f854 1c08 	ldr.w	r1, [r4, #-8]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8004058:	ea20 75e0 	bic.w	r5, r0, r0, asr #31
 800405c:	2800      	cmp	r0, #0
 800405e:	fa03 f505 	lsl.w	r5, r3, r5
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8004062:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004066:	fbc5 3601 	smlal	r3, r6, r5, r1
    result = (int32_t)(mult.long_long >> 31);
 800406a:	ea4f 73d3 	mov.w	r3, r3, lsr #31
 800406e:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8004072:	dc0d      	bgt.n	8004090 <arm_nn_mat_mult_kernel_s8_s16_reordered+0x208>
 8004074:	4240      	negs	r0, r0
    const q31_t remainder_mask = (1 << exponent) - 1;
 8004076:	2101      	movs	r1, #1
 8004078:	4081      	lsls	r1, r0
 800407a:	3901      	subs	r1, #1
    int32_t remainder = remainder_mask & dividend;
 800407c:	ea03 0501 	and.w	r5, r3, r1
    if (result < 0)
 8004080:	4103      	asrs	r3, r0
    q31_t threshold = remainder_mask >> 1;
 8004082:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
 8004086:	bf48      	it	mi
 8004088:	3101      	addmi	r1, #1
    if (remainder > threshold)
 800408a:	428d      	cmp	r5, r1
        result++;
 800408c:	bfc8      	it	gt
 800408e:	3301      	addgt	r3, #1
        ch_0_out_1 += out_offset;
 8004090:	991f      	ldr	r1, [sp, #124]	@ 0x7c
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8004092:	2500      	movs	r5, #0
 8004094:	440b      	add	r3, r1
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 8004096:	4553      	cmp	r3, sl
 8004098:	bfb8      	it	lt
 800409a:	4653      	movlt	r3, sl
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 800409c:	454b      	cmp	r3, r9
 800409e:	bfa8      	it	ge
 80040a0:	464b      	movge	r3, r9
        *out_1++ = (q7_t)ch_0_out_1;
 80040a2:	f80b 3c02 	strb.w	r3, [fp, #-2]
        ch_1_out_0 = arm_nn_requantize(ch_1_out_0, *out_mult, *out_shift);
 80040a6:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 80040aa:	f854 3c04 	ldr.w	r3, [r4, #-4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80040ae:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
 80040b2:	2900      	cmp	r1, #0
 80040b4:	fa02 f000 	lsl.w	r0, r2, r0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80040b8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80040bc:	fbc0 2503 	smlal	r2, r5, r0, r3
    result = (int32_t)(mult.long_long >> 31);
 80040c0:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 80040c4:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80040c8:	dc0d      	bgt.n	80040e6 <arm_nn_mat_mult_kernel_s8_s16_reordered+0x25e>
 80040ca:	4249      	negs	r1, r1
    const q31_t remainder_mask = (1 << exponent) - 1;
 80040cc:	2301      	movs	r3, #1
 80040ce:	408b      	lsls	r3, r1
 80040d0:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 80040d2:	ea02 0003 	and.w	r0, r2, r3
    if (result < 0)
 80040d6:	410a      	asrs	r2, r1
    q31_t threshold = remainder_mask >> 1;
 80040d8:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 80040dc:	bf48      	it	mi
 80040de:	3301      	addmi	r3, #1
    if (remainder > threshold)
 80040e0:	4298      	cmp	r0, r3
        result++;
 80040e2:	bfc8      	it	gt
 80040e4:	3201      	addgt	r2, #1
        ch_1_out_0 += out_offset;
 80040e6:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80040e8:	2500      	movs	r5, #0
 80040ea:	441a      	add	r2, r3
        *out_0++ = (q7_t)ch_1_out_0;
 80040ec:	9b02      	ldr	r3, [sp, #8]
        ch_1_out_0 = MAX(ch_1_out_0, activation_min);
 80040ee:	4552      	cmp	r2, sl
 80040f0:	bfb8      	it	lt
 80040f2:	4652      	movlt	r2, sl
        ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 80040f4:	454a      	cmp	r2, r9
 80040f6:	bfa8      	it	ge
 80040f8:	464a      	movge	r2, r9
        *out_0++ = (q7_t)ch_1_out_0;
 80040fa:	f803 2c01 	strb.w	r2, [r3, #-1]
        ch_1_out_1 = arm_nn_requantize(ch_1_out_1, *out_mult, *out_shift);
 80040fe:	f85c 1c04 	ldr.w	r1, [ip, #-4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8004102:	9a03      	ldr	r2, [sp, #12]
 8004104:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8004108:	f854 3c04 	ldr.w	r3, [r4, #-4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800410c:	2900      	cmp	r1, #0
 800410e:	fa02 f200 	lsl.w	r2, r2, r0
 8004112:	4610      	mov	r0, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8004114:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004118:	fbc0 2503 	smlal	r2, r5, r0, r3
    result = (int32_t)(mult.long_long >> 31);
 800411c:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8004120:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8004124:	dc0d      	bgt.n	8004142 <arm_nn_mat_mult_kernel_s8_s16_reordered+0x2ba>
 8004126:	4249      	negs	r1, r1
    const q31_t remainder_mask = (1 << exponent) - 1;
 8004128:	2301      	movs	r3, #1
 800412a:	408b      	lsls	r3, r1
 800412c:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 800412e:	ea02 0003 	and.w	r0, r2, r3
    if (result < 0)
 8004132:	410a      	asrs	r2, r1
    q31_t threshold = remainder_mask >> 1;
 8004134:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 8004138:	bf48      	it	mi
 800413a:	3301      	addmi	r3, #1
    if (remainder > threshold)
 800413c:	4298      	cmp	r0, r3
        result++;
 800413e:	bfc8      	it	gt
 8004140:	3201      	addgt	r2, #1
        ch_1_out_1 += out_offset;
 8004142:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
    while (row_count)
 8004144:	f108 0808 	add.w	r8, r8, #8
 8004148:	3408      	adds	r4, #8
 800414a:	f10c 0c08 	add.w	ip, ip, #8
        ch_1_out_1 += out_offset;
 800414e:	441a      	add	r2, r3
    while (row_count)
 8004150:	9b02      	ldr	r3, [sp, #8]
 8004152:	f10b 0b02 	add.w	fp, fp, #2
        ch_1_out_1 = MAX(ch_1_out_1, activation_min);
 8004156:	4552      	cmp	r2, sl
    while (row_count)
 8004158:	f103 0302 	add.w	r3, r3, #2
        ch_1_out_1 = MAX(ch_1_out_1, activation_min);
 800415c:	bfb8      	it	lt
 800415e:	4652      	movlt	r2, sl
    while (row_count)
 8004160:	9302      	str	r3, [sp, #8]
 8004162:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
        ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 8004164:	454a      	cmp	r2, r9
 8004166:	bfa8      	it	ge
 8004168:	464a      	movge	r2, r9
    while (row_count)
 800416a:	4543      	cmp	r3, r8
        *out_1++ = (q7_t)ch_1_out_1;
 800416c:	f80b 2c03 	strb.w	r2, [fp, #-3]
    while (row_count)
 8004170:	f47f aec7 	bne.w	8003f02 <arm_nn_mat_mult_kernel_s8_s16_reordered+0x7a>
        row_count--;
    }

    out_0 += output_ch;
 8004174:	9f24      	ldr	r7, [sp, #144]	@ 0x90
 8004176:	e9dd 6412 	ldrd	r6, r4, [sp, #72]	@ 0x48
 800417a:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 800417e:	1938      	adds	r0, r7, r4

    /* return the new output pointer with offset */
    return out_0;
}
 8004180:	b015      	add	sp, #84	@ 0x54
 8004182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        q31_t ch_0_out_1 = *bias++;
 8004186:	4603      	mov	r3, r0
        q31_t ch_1_out_1 = *bias++;
 8004188:	e9cd 2703 	strd	r2, r7, [sp, #12]
 800418c:	e733      	b.n	8003ff6 <arm_nn_mat_mult_kernel_s8_s16_reordered+0x16e>
 800418e:	bf00      	nop

08004190 <mat_mult_kernel_s8_s16_reordered_ch16>:
                                              const int16_t activation_min,
                                              const int16_t activation_max,
                                              const uint16_t num_col_a,
                                              const int32_t *const output_bias,
                                              q7_t *out_0)
{
 8004190:	b410      	push	{r4}
 8004192:	f9bd 400c 	ldrsh.w	r4, [sp, #12]
	return arm_nn_mat_mult_kernel_s8_s16_reordered(input_a, input_b, output_ch, out_shift, out_mult, out_offset, activation_min, activation_max, num_col_a, output_bias, out_0);
 8004196:	9403      	str	r4, [sp, #12]
{
 8004198:	f9bd 4010 	ldrsh.w	r4, [sp, #16]
	return arm_nn_mat_mult_kernel_s8_s16_reordered(input_a, input_b, output_ch, out_shift, out_mult, out_offset, activation_min, activation_max, num_col_a, output_bias, out_0);
 800419c:	9404      	str	r4, [sp, #16]
{
 800419e:	f8bd 4014 	ldrh.w	r4, [sp, #20]
	return arm_nn_mat_mult_kernel_s8_s16_reordered(input_a, input_b, output_ch, out_shift, out_mult, out_offset, activation_min, activation_max, num_col_a, output_bias, out_0);
 80041a2:	9405      	str	r4, [sp, #20]
}
 80041a4:	f85d 4b04 	ldr.w	r4, [sp], #4
	return arm_nn_mat_mult_kernel_s8_s16_reordered(input_a, input_b, output_ch, out_shift, out_mult, out_offset, activation_min, activation_max, num_col_a, output_bias, out_0);
 80041a8:	f7ff be6e 	b.w	8003e88 <arm_nn_mat_mult_kernel_s8_s16_reordered>

080041ac <mat_mult_kernel_s8_s16_reordered_ch24>:

q7_t *mat_mult_kernel_s8_s16_reordered_ch24(const q7_t *input_a,
 80041ac:	b410      	push	{r4}
 80041ae:	f9bd 400c 	ldrsh.w	r4, [sp, #12]
 80041b2:	9403      	str	r4, [sp, #12]
 80041b4:	f9bd 4010 	ldrsh.w	r4, [sp, #16]
 80041b8:	9404      	str	r4, [sp, #16]
 80041ba:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 80041be:	9405      	str	r4, [sp, #20]
 80041c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80041c4:	f7ff be60 	b.w	8003e88 <arm_nn_mat_mult_kernel_s8_s16_reordered>

080041c8 <mat_mult_kernel_s8_s16_reordered_ch48>:
                                              q7_t *out_0)
{
	return arm_nn_mat_mult_kernel_s8_s16_reordered(input_a, input_b, output_ch, out_shift, out_mult, out_offset, activation_min, activation_max, num_col_a, output_bias, out_0);
}

q7_t *mat_mult_kernel_s8_s16_reordered_ch48(const q7_t *input_a,
 80041c8:	b410      	push	{r4}
 80041ca:	f9bd 400c 	ldrsh.w	r4, [sp, #12]
 80041ce:	9403      	str	r4, [sp, #12]
 80041d0:	f9bd 4010 	ldrsh.w	r4, [sp, #16]
 80041d4:	9404      	str	r4, [sp, #16]
 80041d6:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 80041da:	9405      	str	r4, [sp, #20]
 80041dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80041e0:	f7ff be52 	b.w	8003e88 <arm_nn_mat_mult_kernel_s8_s16_reordered>

080041e4 <avg_pooling>:

tinyengine_status avg_pooling(const q7_t* input, const uint16_t input_h, const uint16_t input_w,
		const uint16_t input_c,	const uint16_t sample_h, const uint16_t sample_w,
		const uint16_t output_h, const uint16_t output_w, const int32_t out_activation_min,
        const int32_t out_activation_max, q7_t* output)
{
 80041e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041e8:	469c      	mov	ip, r3
 80041ea:	b089      	sub	sp, #36	@ 0x24
 80041ec:	f8bd 5048 	ldrh.w	r5, [sp, #72]	@ 0x48
 80041f0:	f8bd 404c 	ldrh.w	r4, [sp, #76]	@ 0x4c
 80041f4:	f8bd 1050 	ldrh.w	r1, [sp, #80]	@ 0x50
 80041f8:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 80041fc:	9e18      	ldr	r6, [sp, #96]	@ 0x60
	int h, w, c;
	int sh, sw;
	const int divider_half = ((sample_h * sample_w) / 2);
	for(c = 0; c < input_c; c++){
 80041fe:	f1bc 0f00 	cmp.w	ip, #0
 8004202:	d05f      	beq.n	80042c4 <avg_pooling+0xe0>
 8004204:	2900      	cmp	r1, #0
 8004206:	d05d      	beq.n	80042c4 <avg_pooling+0xe0>
 8004208:	2b00      	cmp	r3, #0
 800420a:	d05b      	beq.n	80042c4 <avg_pooling+0xe0>
 800420c:	4692      	mov	sl, r2
	const int divider_half = ((sample_h * sample_w) / 2);
 800420e:	fb04 f205 	mul.w	r2, r4, r5
 8004212:	4683      	mov	fp, r0
	for(c = 0; c < input_c; c++){
 8004214:	f04f 0900 	mov.w	r9, #0
	const int divider_half = ((sample_h * sample_w) / 2);
 8004218:	9202      	str	r2, [sp, #8]
 800421a:	1052      	asrs	r2, r2, #1
 800421c:	fb0c f003 	mul.w	r0, ip, r3
 8004220:	9203      	str	r2, [sp, #12]
 8004222:	460a      	mov	r2, r1
 8004224:	9005      	str	r0, [sp, #20]
		for(h = 0; h < output_h; h++){
 8004226:	eb06 0109 	add.w	r1, r6, r9
			for(w = 0; w < output_w; w++){
 800422a:	f04f 0e00 	mov.w	lr, #0
 800422e:	9618      	str	r6, [sp, #96]	@ 0x60
 8004230:	4616      	mov	r6, r2
 8004232:	460a      	mov	r2, r1
		for(h = 0; h < output_h; h++){
 8004234:	f8cd e010 	str.w	lr, [sp, #16]
				int avg = 0;
 8004238:	2700      	movs	r7, #0
 800423a:	4610      	mov	r0, r2
 800423c:	e9cd 2606 	strd	r2, r6, [sp, #24]
 8004240:	463e      	mov	r6, r7

				for(sh = 0; sh < sample_h; sh++){
 8004242:	2d00      	cmp	r5, #0
 8004244:	d041      	beq.n	80042ca <avg_pooling+0xe6>
				int avg = 0;
 8004246:	2100      	movs	r1, #0
				for(sh = 0; sh < sample_h; sh++){
 8004248:	4688      	mov	r8, r1
 800424a:	e9cd 6000 	strd	r6, r0, [sp]
					int height = sh + h * sample_h;
 800424e:	eb0e 0208 	add.w	r2, lr, r8
					for(sw = 0; sw < sample_w; sw++){
 8004252:	b164      	cbz	r4, 800426e <avg_pooling+0x8a>
 8004254:	fb02 720a 	mla	r2, r2, sl, r7
 8004258:	2000      	movs	r0, #0
 800425a:	fb0c 9202 	mla	r2, ip, r2, r9
 800425e:	445a      	add	r2, fp
 8004260:	3001      	adds	r0, #1
						int width = sw + w * sample_w;
						avg += input[(width + height * input_w) * input_c + c];
 8004262:	f992 6000 	ldrsb.w	r6, [r2]
					for(sw = 0; sw < sample_w; sw++){
 8004266:	4462      	add	r2, ip
 8004268:	4284      	cmp	r4, r0
						avg += input[(width + height * input_w) * input_c + c];
 800426a:	4431      	add	r1, r6
					for(sw = 0; sw < sample_w; sw++){
 800426c:	d1f8      	bne.n	8004260 <avg_pooling+0x7c>
				for(sh = 0; sh < sample_h; sh++){
 800426e:	f108 0801 	add.w	r8, r8, #1
 8004272:	4545      	cmp	r5, r8
 8004274:	dceb      	bgt.n	800424e <avg_pooling+0x6a>
					}
				}

				// for rounded div
				if (avg > 0)
 8004276:	2900      	cmp	r1, #0
 8004278:	e9dd 6000 	ldrd	r6, r0, [sp]
 800427c:	dd26      	ble.n	80042cc <avg_pooling+0xe8>
					avg += divider_half;
 800427e:	9a03      	ldr	r2, [sp, #12]
 8004280:	440a      	add	r2, r1
				else
					avg -= divider_half;

				int out = avg / (sample_h * sample_w);
 8004282:	9902      	ldr	r1, [sp, #8]
			for(w = 0; w < output_w; w++){
 8004284:	3601      	adds	r6, #1
 8004286:	4427      	add	r7, r4
				int out = avg / (sample_h * sample_w);
 8004288:	fb92 f2f1 	sdiv	r2, r2, r1
				out = TN_MAX(out, out_activation_min);
 800428c:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800428e:	428a      	cmp	r2, r1
 8004290:	bfb8      	it	lt
 8004292:	460a      	movlt	r2, r1
				out = TN_MIN(out, out_activation_max);
 8004294:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8004296:	428a      	cmp	r2, r1
 8004298:	bfa8      	it	ge
 800429a:	460a      	movge	r2, r1
			for(w = 0; w < output_w; w++){
 800429c:	429e      	cmp	r6, r3
				output[(w + h * output_w) * input_c + c] = out;
 800429e:	7002      	strb	r2, [r0, #0]
			for(w = 0; w < output_w; w++){
 80042a0:	4460      	add	r0, ip
 80042a2:	d1ce      	bne.n	8004242 <avg_pooling+0x5e>
		for(h = 0; h < output_h; h++){
 80042a4:	9904      	ldr	r1, [sp, #16]
 80042a6:	44ae      	add	lr, r5
 80042a8:	9805      	ldr	r0, [sp, #20]
 80042aa:	3101      	adds	r1, #1
 80042ac:	e9dd 2606 	ldrd	r2, r6, [sp, #24]
 80042b0:	9104      	str	r1, [sp, #16]
 80042b2:	42b1      	cmp	r1, r6
 80042b4:	4402      	add	r2, r0
 80042b6:	d1bf      	bne.n	8004238 <avg_pooling+0x54>
	for(c = 0; c < input_c; c++){
 80042b8:	f109 0901 	add.w	r9, r9, #1
 80042bc:	4632      	mov	r2, r6
 80042be:	9e18      	ldr	r6, [sp, #96]	@ 0x60
 80042c0:	45e1      	cmp	r9, ip
 80042c2:	d1b0      	bne.n	8004226 <avg_pooling+0x42>
			}
		}
	}
}
 80042c4:	b009      	add	sp, #36	@ 0x24
 80042c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				int avg = 0;
 80042ca:	4629      	mov	r1, r5
					avg -= divider_half;
 80042cc:	9a03      	ldr	r2, [sp, #12]
 80042ce:	1a8a      	subs	r2, r1, r2
 80042d0:	e7d7      	b.n	8004282 <avg_pooling+0x9e>
 80042d2:	bf00      	nop

080042d4 <convolve_1x1_s8>:
		const uint16_t input_y, const uint16_t input_ch, const q7_t *kernel,
		const int32_t *bias, const int32_t *output_shift,
		const int32_t *output_mult, const int32_t out_offset,
		const int32_t input_offset, const int32_t out_activation_min,
		const int32_t out_activation_max, q7_t *output, const uint16_t output_x,
		const uint16_t output_y, const uint16_t output_ch, q15_t *runtime_buf) {
 80042d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042d8:	469b      	mov	fp, r3
 80042da:	b093      	sub	sp, #76	@ 0x4c
 80042dc:	4686      	mov	lr, r0
 80042de:	f8bd 109c 	ldrh.w	r1, [sp, #156]	@ 0x9c
	if (input_ch % 4 != 0 || input_ch % 2 != 0) {
 80042e2:	f01b 0503 	ands.w	r5, fp, #3
		const uint16_t output_y, const uint16_t output_ch, q15_t *runtime_buf) {
 80042e6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80042ea:	9824      	ldr	r0, [sp, #144]	@ 0x90
 80042ec:	f8bd 3094 	ldrh.w	r3, [sp, #148]	@ 0x94
 80042f0:	f8bd 2098 	ldrh.w	r2, [sp, #152]	@ 0x98
 80042f4:	f8dd 90a0 	ldr.w	r9, [sp, #160]	@ 0xa0
 80042f8:	9109      	str	r1, [sp, #36]	@ 0x24
	if (input_ch % 4 != 0 || input_ch % 2 != 0) {
 80042fa:	f040 80dd 	bne.w	80044b8 <convolve_1x1_s8+0x1e4>
	(void) input_y;

	/* Partial(two columns) im2col buffer */
	q15_t *two_column_buffer = runtime_buf;
	q7_t *out = output;
	const int32_t num_elements = output_x * output_y;
 80042fe:	fb03 f202 	mul.w	r2, r3, r2
	const int channel_div4 = (input_ch >> 2);
 8004302:	ea4f 079b 	mov.w	r7, fp, lsr #2

	const int16_t inoff16 = input_offset;
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 8004306:	f9bd 4084 	ldrsh.w	r4, [sp, #132]	@ 0x84

	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 800430a:	ea5f 0862 	movs.w	r8, r2, asr #1
	const int channel_div4 = (input_ch >> 2);
 800430e:	4639      	mov	r1, r7
 8004310:	970e      	str	r7, [sp, #56]	@ 0x38
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 8004312:	eac4 4404 	pkhbt	r4, r4, r4, lsl #16
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8004316:	d052      	beq.n	80043be <convolve_1x1_s8+0xea>
//				two_column_buffer, output_ch, output_shift, output_mult,
//				(q7_t) out_offset, out_activation_min,
//				out_activation_max, input_ch * DIM_KER_Y * DIM_KER_X,
//				bias, out);

		out = arm_nn_mat_mult_kernel_s8_s16_reordered(kernel,
 8004318:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800431a:	4676      	mov	r6, lr
 800431c:	f8cd e044 	str.w	lr, [sp, #68]	@ 0x44
 8004320:	b25b      	sxtb	r3, r3
 8004322:	930a      	str	r3, [sp, #40]	@ 0x28
 8004324:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8004326:	b21b      	sxth	r3, r3
 8004328:	930b      	str	r3, [sp, #44]	@ 0x2c
 800432a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800432c:	b21b      	sxth	r3, r3
 800432e:	930c      	str	r3, [sp, #48]	@ 0x30
 8004330:	ea4f 034b 	mov.w	r3, fp, lsl #1
 8004334:	e9cd 270f 	strd	r2, r7, [sp, #60]	@ 0x3c
 8004338:	930d      	str	r3, [sp, #52]	@ 0x34
		q7_t *src = &input[i_element * input_ch * 2];
 800433a:	4631      	mov	r1, r6
		while (cnt > 0) {
 800433c:	b327      	cbz	r7, 8004388 <convolve_1x1_s8+0xb4>
		q15_t *dst = two_column_buffer;
 800433e:	464a      	mov	r2, r9
		int cnt = channel_div4;	//two columns
 8004340:	46be      	mov	lr, r7
    memcpy(&val, *in_q7, 4);
 8004342:	680b      	ldr	r3, [r1, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8004344:	fa2f fc83 	sxtb16	ip, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8004348:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800434c:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8004350:	fa93 f304 	sadd16	r3, r3, r4
 8004354:	fa9c fc04 	sadd16	ip, ip, r4
  q15_t ** pQ15,
  q31_t    value)
{
  q31_t val = value;
#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (*pQ15, &val, 4);
 8004358:	f8c2 c000 	str.w	ip, [r2]
    *in_q7 += 4;
 800435c:	3108      	adds	r1, #8
 800435e:	6053      	str	r3, [r2, #4]
    memcpy(&val, *in_q7, 4);
 8004360:	f851 3c04 	ldr.w	r3, [r1, #-4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8004364:	fa2f fc83 	sxtb16	ip, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8004368:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800436c:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8004370:	fa93 f304 	sadd16	r3, r3, r4
 8004374:	fa9c fc04 	sadd16	ip, ip, r4
		while (cnt > 0) {
 8004378:	f1be 0e01 	subs.w	lr, lr, #1
 800437c:	f8c2 c008 	str.w	ip, [r2, #8]
 8004380:	60d3      	str	r3, [r2, #12]
#else
  (*pQ15)[0] = (val & 0x0FFFF);
  (*pQ15)[1] = (val >> 16) & 0x0FFFF;
#endif

 *pQ15 += 2;
 8004382:	f102 0210 	add.w	r2, r2, #16
 8004386:	d1dc      	bne.n	8004342 <convolve_1x1_s8+0x6e>
		out = arm_nn_mat_mult_kernel_s8_s16_reordered(kernel,
 8004388:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 800438a:	3501      	adds	r5, #1
		out = arm_nn_mat_mult_kernel_s8_s16_reordered(kernel,
 800438c:	9006      	str	r0, [sp, #24]
 800438e:	4649      	mov	r1, r9
 8004390:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004392:	4650      	mov	r0, sl
 8004394:	e9cd b304 	strd	fp, r3, [sp, #16]
 8004398:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800439a:	9303      	str	r3, [sp, #12]
 800439c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800439e:	9302      	str	r3, [sp, #8]
 80043a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80043a2:	9301      	str	r3, [sp, #4]
 80043a4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80043a6:	9300      	str	r3, [sp, #0]
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 80043a8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80043aa:	441e      	add	r6, r3
		out = arm_nn_mat_mult_kernel_s8_s16_reordered(kernel,
 80043ac:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80043ae:	f7ff fd6b 	bl	8003e88 <arm_nn_mat_mult_kernel_s8_s16_reordered>
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 80043b2:	4545      	cmp	r5, r8
 80043b4:	d1c1      	bne.n	800433a <convolve_1x1_s8+0x66>
 80043b6:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 80043ba:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
						out_activation_max, input_ch * DIM_KER_Y * DIM_KER_X,
						bias, out);
	}

	/* check if there is an odd column left-over for computation */
	if (num_elements & 0x1) {
 80043be:	07d3      	lsls	r3, r2, #31
 80043c0:	d576      	bpl.n	80044b0 <convolve_1x1_s8+0x1dc>
		int32_t i_ch_out;
		const q7_t *ker_a = kernel;
		q7_t *src = &input[(num_elements - 1) * input_ch];
 80043c2:	1e55      	subs	r5, r2, #1
 80043c4:	fb0b e505 	mla	r5, fp, r5, lr
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two * numof2col columns
		while (cnt > 0) {
 80043c8:	b197      	cbz	r7, 80043f0 <convolve_1x1_s8+0x11c>
		q15_t *dst = two_column_buffer;
 80043ca:	464a      	mov	r2, r9
 80043cc:	f855 3b04 	ldr.w	r3, [r5], #4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80043d0:	fa2f f683 	sxtb16	r6, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 80043d4:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80043d8:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80043dc:	fa93 f304 	sadd16	r3, r3, r4
 80043e0:	fa96 f604 	sadd16	r6, r6, r4
		while (cnt > 0) {
 80043e4:	3901      	subs	r1, #1
  memcpy (*pQ15, &val, 4);
 80043e6:	6016      	str	r6, [r2, #0]
 80043e8:	6053      	str	r3, [r2, #4]
 *pQ15 += 2;
 80043ea:	f102 0208 	add.w	r2, r2, #8
 80043ee:	d1ed      	bne.n	80043cc <convolve_1x1_s8+0xf8>
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
		}

		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 80043f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d05c      	beq.n	80044b0 <convolve_1x1_s8+0x1dc>
 80043f6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80043f8:	f04f 4780 	mov.w	r7, #1073741824	@ 0x40000000
 80043fc:	f1a3 0e04 	sub.w	lr, r3, #4
 8004400:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8004402:	f1a3 0c04 	sub.w	ip, r3, #4
 8004406:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8004408:	1f1d      	subs	r5, r3, #4
 800440a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800440c:	4403      	add	r3, r0
 800440e:	4698      	mov	r8, r3
 8004410:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004412:	3b01      	subs	r3, #1
 8004414:	b29b      	uxth	r3, r3
 8004416:	3301      	adds	r3, #1
 8004418:	ea4f 0b83 	mov.w	fp, r3, lsl #2
    const q31_t remainder_mask = (1 << exponent) - 1;
 800441c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24

			/* Point to the beginning of the im2col buffer where the input is available as a rearranged column */
			const q15_t *ip_as_col = runtime_buf;
			uint16_t col_count = (input_ch * DIM_KER_X * DIM_KER_Y) >> 2;

			while (col_count) {
 8004420:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
			q31_t sum = bias[i_ch_out];
 8004422:	f85e 2f04 	ldr.w	r2, [lr, #4]!
			while (col_count) {
 8004426:	b1a3      	cbz	r3, 8004452 <convolve_1x1_s8+0x17e>
 8004428:	9b09      	ldr	r3, [sp, #36]	@ 0x24
			const q15_t *ip_as_col = runtime_buf;
 800442a:	464c      	mov	r4, r9
 800442c:	eb0a 0b03 	add.w	fp, sl, r3
    memcpy(&val, *in_q7, 4);
 8004430:	f85a 3b04 	ldr.w	r3, [sl], #4
    memcpy(&val, *in_q15, 4);
 8004434:	6826      	ldr	r6, [r4, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8004436:	fa2f f183 	sxtb16	r1, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 800443a:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800443e:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8004442:	fb21 2106 	smlad	r1, r1, r6, r2
 8004446:	6862      	ldr	r2, [r4, #4]
    *in_q15 += 2;
 8004448:	3408      	adds	r4, #8
 800444a:	fb23 1202 	smlad	r2, r3, r2, r1
			while (col_count) {
 800444e:	45da      	cmp	sl, fp
 8004450:	d1ee      	bne.n	8004430 <convolve_1x1_s8+0x15c>
				sum = __SMLAD(ker_a2, in_b2, sum);

				col_count--;
			}

			sum = arm_nn_requantize(sum, output_mult[i_ch_out],
 8004452:	f855 1f04 	ldr.w	r1, [r5, #4]!
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8004456:	f04f 0b00 	mov.w	fp, #0
 800445a:	f85c 4f04 	ldr.w	r4, [ip, #4]!
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800445e:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
 8004462:	2900      	cmp	r1, #0
 8004464:	fa02 f203 	lsl.w	r2, r2, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8004468:	463b      	mov	r3, r7
 800446a:	fbc2 3b04 	smlal	r3, fp, r2, r4
    result = (int32_t)(mult.long_long >> 31);
 800446e:	ea4f 73d3 	mov.w	r3, r3, lsr #31
 8004472:	ea43 034b 	orr.w	r3, r3, fp, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8004476:	dc0d      	bgt.n	8004494 <convolve_1x1_s8+0x1c0>
 8004478:	4249      	negs	r1, r1
    const q31_t remainder_mask = (1 << exponent) - 1;
 800447a:	2201      	movs	r2, #1
 800447c:	408a      	lsls	r2, r1
 800447e:	3a01      	subs	r2, #1
    int32_t remainder = remainder_mask & dividend;
 8004480:	ea03 0402 	and.w	r4, r3, r2
    if (result < 0)
 8004484:	410b      	asrs	r3, r1
    q31_t threshold = remainder_mask >> 1;
 8004486:	ea4f 0262 	mov.w	r2, r2, asr #1
        threshold++;
 800448a:	bf48      	it	mi
 800448c:	3201      	addmi	r2, #1
    if (remainder > threshold)
 800448e:	4294      	cmp	r4, r2
        result++;
 8004490:	bfc8      	it	gt
 8004492:	3301      	addgt	r3, #1
					output_shift[i_ch_out]);
			sum += out_offset;
 8004494:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004496:	4413      	add	r3, r2
			sum = MAX(sum, out_activation_min);
 8004498:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800449a:	4293      	cmp	r3, r2
 800449c:	bfb8      	it	lt
 800449e:	4613      	movlt	r3, r2
			sum = MIN(sum, out_activation_max);
 80044a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80044a2:	4293      	cmp	r3, r2
 80044a4:	bfa8      	it	ge
 80044a6:	4613      	movge	r3, r2
			*out++ = (q7_t) sum;
 80044a8:	f800 3b01 	strb.w	r3, [r0], #1
		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 80044ac:	4540      	cmp	r0, r8
 80044ae:	d1b7      	bne.n	8004420 <convolve_1x1_s8+0x14c>
		}
	}

	/* Return to application */
	return STATE_SUCCESS;
 80044b0:	2000      	movs	r0, #0
}
 80044b2:	b013      	add	sp, #76	@ 0x4c
 80044b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return PARAM_NO_SUPPORT;
 80044b8:	2001      	movs	r0, #1
}
 80044ba:	b013      	add	sp, #76	@ 0x4c
 80044bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080044c0 <convolve_1x1_s8_ch16>:
		const uint16_t input_y, const uint16_t input_ch, const q7_t *kernel,
		const int32_t *bias, const int32_t *output_shift,
		const int32_t *output_mult, const int32_t out_offset,
		const int32_t input_offset, const int32_t out_activation_min,
		const int32_t out_activation_max, q7_t *output, const uint16_t output_x,
		const uint16_t output_y, const uint16_t output_ch, q15_t *runtime_buf) {
 80044c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044c4:	b091      	sub	sp, #68	@ 0x44
 80044c6:	469b      	mov	fp, r3
 80044c8:	4686      	mov	lr, r0
 80044ca:	f8bd 308c 	ldrh.w	r3, [sp, #140]	@ 0x8c

	/* Partial(two columns) im2col buffer */
	q15_t *two_column_buffer = runtime_buf;
	q7_t *out = output;
	const int32_t num_elements = output_x * output_y;
	const int channel_div4 = (input_ch >> 2);
 80044ce:	ea4f 079b 	mov.w	r7, fp, lsr #2
		const uint16_t output_y, const uint16_t output_ch, q15_t *runtime_buf) {
 80044d2:	f8bd 2090 	ldrh.w	r2, [sp, #144]	@ 0x90

	const int16_t inoff16 = input_offset;
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 80044d6:	f9bd 407c 	ldrsh.w	r4, [sp, #124]	@ 0x7c
	const int channel_div4 = (input_ch >> 2);
 80044da:	4639      	mov	r1, r7
	const int32_t num_elements = output_x * output_y;
 80044dc:	fb03 f202 	mul.w	r2, r3, r2
		const uint16_t output_y, const uint16_t output_ch, q15_t *runtime_buf) {
 80044e0:	f8bd 3094 	ldrh.w	r3, [sp, #148]	@ 0x94
 80044e4:	f8dd a068 	ldr.w	sl, [sp, #104]	@ 0x68

	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 80044e8:	ea5f 0862 	movs.w	r8, r2, asr #1
		const uint16_t output_y, const uint16_t output_ch, q15_t *runtime_buf) {
 80044ec:	9822      	ldr	r0, [sp, #136]	@ 0x88
 80044ee:	f8dd 9098 	ldr.w	r9, [sp, #152]	@ 0x98
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 80044f2:	eac4 4404 	pkhbt	r4, r4, r4, lsl #16
		const uint16_t output_y, const uint16_t output_ch, q15_t *runtime_buf) {
 80044f6:	9309      	str	r3, [sp, #36]	@ 0x24
	const int channel_div4 = (input_ch >> 2);
 80044f8:	970c      	str	r7, [sp, #48]	@ 0x30
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 80044fa:	d04d      	beq.n	8004598 <convolve_1x1_s8_ch16+0xd8>
			q7_q15_offset_reordered_ele(src, dst)
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
		}

		out = mat_mult_kernel_s8_s16_reordered_ch16(kernel,
 80044fc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80044fe:	4676      	mov	r6, lr
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8004500:	2500      	movs	r5, #0
 8004502:	f8cd e03c 	str.w	lr, [sp, #60]	@ 0x3c
		out = mat_mult_kernel_s8_s16_reordered_ch16(kernel,
 8004506:	b25b      	sxtb	r3, r3
 8004508:	930a      	str	r3, [sp, #40]	@ 0x28
 800450a:	ea4f 034b 	mov.w	r3, fp, lsl #1
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 800450e:	e9cd 270d 	strd	r2, r7, [sp, #52]	@ 0x34
 8004512:	930b      	str	r3, [sp, #44]	@ 0x2c
		q7_t *src = &input[i_element * input_ch * 2];
 8004514:	4631      	mov	r1, r6
		while (cnt > 0) {
 8004516:	b327      	cbz	r7, 8004562 <convolve_1x1_s8_ch16+0xa2>
		q15_t *dst = two_column_buffer;
 8004518:	464a      	mov	r2, r9
		int cnt = channel_div4;	//two columns
 800451a:	46be      	mov	lr, r7
    memcpy(&val, *in_q7, 4);
 800451c:	680b      	ldr	r3, [r1, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800451e:	fa2f fc83 	sxtb16	ip, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8004522:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8004526:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800452a:	fa93 f304 	sadd16	r3, r3, r4
 800452e:	fa9c fc04 	sadd16	ip, ip, r4
  memcpy (*pQ15, &val, 4);
 8004532:	f8c2 c000 	str.w	ip, [r2]
    *in_q7 += 4;
 8004536:	3108      	adds	r1, #8
 8004538:	6053      	str	r3, [r2, #4]
    memcpy(&val, *in_q7, 4);
 800453a:	f851 3c04 	ldr.w	r3, [r1, #-4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800453e:	fa2f fc83 	sxtb16	ip, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8004542:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8004546:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800454a:	fa93 f304 	sadd16	r3, r3, r4
 800454e:	fa9c fc04 	sadd16	ip, ip, r4
		while (cnt > 0) {
 8004552:	f1be 0e01 	subs.w	lr, lr, #1
 8004556:	f8c2 c008 	str.w	ip, [r2, #8]
 800455a:	60d3      	str	r3, [r2, #12]
 *pQ15 += 2;
 800455c:	f102 0210 	add.w	r2, r2, #16
 8004560:	d1dc      	bne.n	800451c <convolve_1x1_s8_ch16+0x5c>
		out = mat_mult_kernel_s8_s16_reordered_ch16(kernel,
 8004562:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8004564:	3501      	adds	r5, #1
		out = mat_mult_kernel_s8_s16_reordered_ch16(kernel,
 8004566:	9006      	str	r0, [sp, #24]
 8004568:	4649      	mov	r1, r9
 800456a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800456c:	4650      	mov	r0, sl
 800456e:	e9cd b304 	strd	fp, r3, [sp, #16]
 8004572:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004574:	9303      	str	r3, [sp, #12]
 8004576:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004578:	9302      	str	r3, [sp, #8]
 800457a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800457c:	9301      	str	r3, [sp, #4]
 800457e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8004580:	9300      	str	r3, [sp, #0]
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8004582:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004584:	441e      	add	r6, r3
		out = mat_mult_kernel_s8_s16_reordered_ch16(kernel,
 8004586:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8004588:	f7ff fe02 	bl	8004190 <mat_mult_kernel_s8_s16_reordered_ch16>
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 800458c:	4545      	cmp	r5, r8
 800458e:	d1c1      	bne.n	8004514 <convolve_1x1_s8_ch16+0x54>
 8004590:	f8dd e03c 	ldr.w	lr, [sp, #60]	@ 0x3c
 8004594:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
				out_activation_max, input_ch * DIM_KER_Y * DIM_KER_X,
				bias, out);
	}

	/* check if there is an odd column left-over for computation */
	if (num_elements & 0x1) {
 8004598:	07d3      	lsls	r3, r2, #31
 800459a:	d575      	bpl.n	8004688 <convolve_1x1_s8_ch16+0x1c8>
		int32_t i_ch_out;
		const q7_t *ker_a = kernel;
		q7_t *src = &input[(num_elements - 1) * input_ch];
 800459c:	1e55      	subs	r5, r2, #1
 800459e:	fb0b e505 	mla	r5, fp, r5, lr
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two * numof2col columns
		while (cnt > 0) {
 80045a2:	b197      	cbz	r7, 80045ca <convolve_1x1_s8_ch16+0x10a>
		q15_t *dst = two_column_buffer;
 80045a4:	464a      	mov	r2, r9
 80045a6:	f855 3b04 	ldr.w	r3, [r5], #4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80045aa:	fa2f f683 	sxtb16	r6, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 80045ae:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80045b2:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80045b6:	fa93 f304 	sadd16	r3, r3, r4
 80045ba:	fa96 f604 	sadd16	r6, r6, r4
		while (cnt > 0) {
 80045be:	3901      	subs	r1, #1
  memcpy (*pQ15, &val, 4);
 80045c0:	6016      	str	r6, [r2, #0]
 80045c2:	6053      	str	r3, [r2, #4]
 *pQ15 += 2;
 80045c4:	f102 0208 	add.w	r2, r2, #8
 80045c8:	d1ed      	bne.n	80045a6 <convolve_1x1_s8_ch16+0xe6>
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
		}

		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 80045ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d05b      	beq.n	8004688 <convolve_1x1_s8_ch16+0x1c8>
 80045d0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80045d2:	f04f 4880 	mov.w	r8, #1073741824	@ 0x40000000
 80045d6:	1f1d      	subs	r5, r3, #4
 80045d8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80045da:	1f1e      	subs	r6, r3, #4
 80045dc:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80045de:	1f1f      	subs	r7, r3, #4
 80045e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80045e2:	4403      	add	r3, r0
 80045e4:	469e      	mov	lr, r3
 80045e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80045e8:	3b01      	subs	r3, #1
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	3301      	adds	r3, #1
 80045ee:	ea4f 0b83 	mov.w	fp, r3, lsl #2
    const q31_t remainder_mask = (1 << exponent) - 1;
 80045f2:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24

			/* Point to the beginning of the im2col buffer where the input is available as a rearranged column */
			const q15_t *ip_as_col = runtime_buf;
			uint16_t col_count = (input_ch * DIM_KER_X * DIM_KER_Y) >> 2;

			while (col_count) {
 80045f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
			q31_t sum = bias[i_ch_out];
 80045f8:	f855 2f04 	ldr.w	r2, [r5, #4]!
			while (col_count) {
 80045fc:	b1ab      	cbz	r3, 800462a <convolve_1x1_s8_ch16+0x16a>
 80045fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
			const q15_t *ip_as_col = runtime_buf;
 8004600:	464c      	mov	r4, r9
 8004602:	eb0a 0b03 	add.w	fp, sl, r3
    memcpy(&val, *in_q7, 4);
 8004606:	f85a 3b04 	ldr.w	r3, [sl], #4
    memcpy(&val, *in_q15, 4);
 800460a:	f8d4 c000 	ldr.w	ip, [r4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800460e:	fa2f f183 	sxtb16	r1, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8004612:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8004616:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800461a:	fb21 210c 	smlad	r1, r1, ip, r2
 800461e:	6862      	ldr	r2, [r4, #4]
    *in_q15 += 2;
 8004620:	3408      	adds	r4, #8
 8004622:	fb23 1202 	smlad	r2, r3, r2, r1
			while (col_count) {
 8004626:	45da      	cmp	sl, fp
 8004628:	d1ed      	bne.n	8004606 <convolve_1x1_s8_ch16+0x146>
				sum = __SMLAD(ker_a2, in_b2, sum);

				col_count--;
			}

			sum = arm_nn_requantize(sum, output_mult[i_ch_out],
 800462a:	f857 1f04 	ldr.w	r1, [r7, #4]!
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800462e:	f04f 0b00 	mov.w	fp, #0
 8004632:	f856 4f04 	ldr.w	r4, [r6, #4]!
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8004636:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
 800463a:	2900      	cmp	r1, #0
 800463c:	fa02 f203 	lsl.w	r2, r2, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8004640:	4643      	mov	r3, r8
 8004642:	fbc2 3b04 	smlal	r3, fp, r2, r4
    result = (int32_t)(mult.long_long >> 31);
 8004646:	ea4f 73d3 	mov.w	r3, r3, lsr #31
 800464a:	ea43 034b 	orr.w	r3, r3, fp, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800464e:	dc0d      	bgt.n	800466c <convolve_1x1_s8_ch16+0x1ac>
 8004650:	4249      	negs	r1, r1
    const q31_t remainder_mask = (1 << exponent) - 1;
 8004652:	2201      	movs	r2, #1
 8004654:	408a      	lsls	r2, r1
 8004656:	3a01      	subs	r2, #1
    int32_t remainder = remainder_mask & dividend;
 8004658:	ea03 0402 	and.w	r4, r3, r2
    if (result < 0)
 800465c:	410b      	asrs	r3, r1
    q31_t threshold = remainder_mask >> 1;
 800465e:	ea4f 0262 	mov.w	r2, r2, asr #1
        threshold++;
 8004662:	bf48      	it	mi
 8004664:	3201      	addmi	r2, #1
    if (remainder > threshold)
 8004666:	4294      	cmp	r4, r2
        result++;
 8004668:	bfc8      	it	gt
 800466a:	3301      	addgt	r3, #1
					output_shift[i_ch_out]);
			sum += out_offset;
 800466c:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800466e:	4413      	add	r3, r2
			sum = MAX(sum, out_activation_min);
 8004670:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004672:	4293      	cmp	r3, r2
 8004674:	bfb8      	it	lt
 8004676:	4613      	movlt	r3, r2
			sum = MIN(sum, out_activation_max);
 8004678:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800467a:	4293      	cmp	r3, r2
 800467c:	bfa8      	it	ge
 800467e:	4613      	movge	r3, r2
			*out++ = (q7_t) sum;
 8004680:	f800 3b01 	strb.w	r3, [r0], #1
		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 8004684:	4570      	cmp	r0, lr
 8004686:	d1b6      	bne.n	80045f6 <convolve_1x1_s8_ch16+0x136>
		}
	}

	/* Return to application */
	return STATE_SUCCESS;
}
 8004688:	2000      	movs	r0, #0
 800468a:	b011      	add	sp, #68	@ 0x44
 800468c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004690 <convolve_1x1_s8_ch24>:
		const uint16_t input_y, const uint16_t input_ch, const q7_t *kernel,
		const int32_t *bias, const int32_t *output_shift,
		const int32_t *output_mult, const int32_t out_offset,
		const int32_t input_offset, const int32_t out_activation_min,
		const int32_t out_activation_max, q7_t *output, const uint16_t output_x,
		const uint16_t output_y, const uint16_t output_ch, q15_t *runtime_buf) {
 8004690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004694:	b091      	sub	sp, #68	@ 0x44
 8004696:	469b      	mov	fp, r3
 8004698:	4686      	mov	lr, r0
 800469a:	f8bd 308c 	ldrh.w	r3, [sp, #140]	@ 0x8c

	/* Partial(two columns) im2col buffer */
	q15_t *two_column_buffer = runtime_buf;
	q7_t *out = output;
	const int32_t num_elements = output_x * output_y;
	const int channel_div4 = (input_ch >> 2);
 800469e:	ea4f 079b 	mov.w	r7, fp, lsr #2
		const uint16_t output_y, const uint16_t output_ch, q15_t *runtime_buf) {
 80046a2:	f8bd 2090 	ldrh.w	r2, [sp, #144]	@ 0x90

	const int16_t inoff16 = input_offset;
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 80046a6:	f9bd 407c 	ldrsh.w	r4, [sp, #124]	@ 0x7c
	const int channel_div4 = (input_ch >> 2);
 80046aa:	4639      	mov	r1, r7
	const int32_t num_elements = output_x * output_y;
 80046ac:	fb03 f202 	mul.w	r2, r3, r2
		const uint16_t output_y, const uint16_t output_ch, q15_t *runtime_buf) {
 80046b0:	f8bd 3094 	ldrh.w	r3, [sp, #148]	@ 0x94
 80046b4:	f8dd a068 	ldr.w	sl, [sp, #104]	@ 0x68

	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 80046b8:	ea5f 0862 	movs.w	r8, r2, asr #1
		const uint16_t output_y, const uint16_t output_ch, q15_t *runtime_buf) {
 80046bc:	9822      	ldr	r0, [sp, #136]	@ 0x88
 80046be:	f8dd 9098 	ldr.w	r9, [sp, #152]	@ 0x98
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 80046c2:	eac4 4404 	pkhbt	r4, r4, r4, lsl #16
		const uint16_t output_y, const uint16_t output_ch, q15_t *runtime_buf) {
 80046c6:	9309      	str	r3, [sp, #36]	@ 0x24
	const int channel_div4 = (input_ch >> 2);
 80046c8:	970c      	str	r7, [sp, #48]	@ 0x30
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 80046ca:	d04d      	beq.n	8004768 <convolve_1x1_s8_ch24+0xd8>
			q7_q15_offset_reordered_ele(src, dst)
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
		}

		out = mat_mult_kernel_s8_s16_reordered_ch24(kernel,
 80046cc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80046ce:	4676      	mov	r6, lr
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 80046d0:	2500      	movs	r5, #0
 80046d2:	f8cd e03c 	str.w	lr, [sp, #60]	@ 0x3c
		out = mat_mult_kernel_s8_s16_reordered_ch24(kernel,
 80046d6:	b25b      	sxtb	r3, r3
 80046d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80046da:	ea4f 034b 	mov.w	r3, fp, lsl #1
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 80046de:	e9cd 270d 	strd	r2, r7, [sp, #52]	@ 0x34
 80046e2:	930b      	str	r3, [sp, #44]	@ 0x2c
		q7_t *src = &input[i_element * input_ch * 2];
 80046e4:	4631      	mov	r1, r6
		while (cnt > 0) {
 80046e6:	b327      	cbz	r7, 8004732 <convolve_1x1_s8_ch24+0xa2>
		q15_t *dst = two_column_buffer;
 80046e8:	464a      	mov	r2, r9
		int cnt = channel_div4;	//two columns
 80046ea:	46be      	mov	lr, r7
    memcpy(&val, *in_q7, 4);
 80046ec:	680b      	ldr	r3, [r1, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80046ee:	fa2f fc83 	sxtb16	ip, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 80046f2:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80046f6:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80046fa:	fa93 f304 	sadd16	r3, r3, r4
 80046fe:	fa9c fc04 	sadd16	ip, ip, r4
  memcpy (*pQ15, &val, 4);
 8004702:	f8c2 c000 	str.w	ip, [r2]
    *in_q7 += 4;
 8004706:	3108      	adds	r1, #8
 8004708:	6053      	str	r3, [r2, #4]
    memcpy(&val, *in_q7, 4);
 800470a:	f851 3c04 	ldr.w	r3, [r1, #-4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800470e:	fa2f fc83 	sxtb16	ip, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 8004712:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8004716:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800471a:	fa93 f304 	sadd16	r3, r3, r4
 800471e:	fa9c fc04 	sadd16	ip, ip, r4
		while (cnt > 0) {
 8004722:	f1be 0e01 	subs.w	lr, lr, #1
 8004726:	f8c2 c008 	str.w	ip, [r2, #8]
 800472a:	60d3      	str	r3, [r2, #12]
 *pQ15 += 2;
 800472c:	f102 0210 	add.w	r2, r2, #16
 8004730:	d1dc      	bne.n	80046ec <convolve_1x1_s8_ch24+0x5c>
		out = mat_mult_kernel_s8_s16_reordered_ch24(kernel,
 8004732:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8004734:	3501      	adds	r5, #1
		out = mat_mult_kernel_s8_s16_reordered_ch24(kernel,
 8004736:	9006      	str	r0, [sp, #24]
 8004738:	4649      	mov	r1, r9
 800473a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800473c:	4650      	mov	r0, sl
 800473e:	e9cd b304 	strd	fp, r3, [sp, #16]
 8004742:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004744:	9303      	str	r3, [sp, #12]
 8004746:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004748:	9302      	str	r3, [sp, #8]
 800474a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800474c:	9301      	str	r3, [sp, #4]
 800474e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8004750:	9300      	str	r3, [sp, #0]
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8004752:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004754:	441e      	add	r6, r3
		out = mat_mult_kernel_s8_s16_reordered_ch24(kernel,
 8004756:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8004758:	f7ff fd28 	bl	80041ac <mat_mult_kernel_s8_s16_reordered_ch24>
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 800475c:	4545      	cmp	r5, r8
 800475e:	d1c1      	bne.n	80046e4 <convolve_1x1_s8_ch24+0x54>
 8004760:	f8dd e03c 	ldr.w	lr, [sp, #60]	@ 0x3c
 8004764:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
				out_activation_max, input_ch * DIM_KER_Y * DIM_KER_X,
				bias, out);
	}

	/* check if there is an odd column left-over for computation */
	if (num_elements & 0x1) {
 8004768:	07d3      	lsls	r3, r2, #31
 800476a:	d575      	bpl.n	8004858 <convolve_1x1_s8_ch24+0x1c8>
		int32_t i_ch_out;
		const q7_t *ker_a = kernel;
		q7_t *src = &input[(num_elements - 1) * input_ch];
 800476c:	1e55      	subs	r5, r2, #1
 800476e:	fb0b e505 	mla	r5, fp, r5, lr
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two * numof2col columns
		while (cnt > 0) {
 8004772:	b197      	cbz	r7, 800479a <convolve_1x1_s8_ch24+0x10a>
		q15_t *dst = two_column_buffer;
 8004774:	464a      	mov	r2, r9
 8004776:	f855 3b04 	ldr.w	r3, [r5], #4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800477a:	fa2f f683 	sxtb16	r6, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 800477e:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8004782:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8004786:	fa93 f304 	sadd16	r3, r3, r4
 800478a:	fa96 f604 	sadd16	r6, r6, r4
		while (cnt > 0) {
 800478e:	3901      	subs	r1, #1
  memcpy (*pQ15, &val, 4);
 8004790:	6016      	str	r6, [r2, #0]
 8004792:	6053      	str	r3, [r2, #4]
 *pQ15 += 2;
 8004794:	f102 0208 	add.w	r2, r2, #8
 8004798:	d1ed      	bne.n	8004776 <convolve_1x1_s8_ch24+0xe6>
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
		}

		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 800479a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800479c:	2b00      	cmp	r3, #0
 800479e:	d05b      	beq.n	8004858 <convolve_1x1_s8_ch24+0x1c8>
 80047a0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80047a2:	f04f 4880 	mov.w	r8, #1073741824	@ 0x40000000
 80047a6:	1f1d      	subs	r5, r3, #4
 80047a8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80047aa:	1f1e      	subs	r6, r3, #4
 80047ac:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80047ae:	1f1f      	subs	r7, r3, #4
 80047b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047b2:	4403      	add	r3, r0
 80047b4:	469e      	mov	lr, r3
 80047b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80047b8:	3b01      	subs	r3, #1
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	3301      	adds	r3, #1
 80047be:	ea4f 0b83 	mov.w	fp, r3, lsl #2
    const q31_t remainder_mask = (1 << exponent) - 1;
 80047c2:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24

			/* Point to the beginning of the im2col buffer where the input is available as a rearranged column */
			const q15_t *ip_as_col = runtime_buf;
			uint16_t col_count = (input_ch * DIM_KER_X * DIM_KER_Y) >> 2;

			while (col_count) {
 80047c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
			q31_t sum = bias[i_ch_out];
 80047c8:	f855 2f04 	ldr.w	r2, [r5, #4]!
			while (col_count) {
 80047cc:	b1ab      	cbz	r3, 80047fa <convolve_1x1_s8_ch24+0x16a>
 80047ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
			const q15_t *ip_as_col = runtime_buf;
 80047d0:	464c      	mov	r4, r9
 80047d2:	eb0a 0b03 	add.w	fp, sl, r3
    memcpy(&val, *in_q7, 4);
 80047d6:	f85a 3b04 	ldr.w	r3, [sl], #4
    memcpy(&val, *in_q15, 4);
 80047da:	f8d4 c000 	ldr.w	ip, [r4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80047de:	fa2f f183 	sxtb16	r1, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 80047e2:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80047e6:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80047ea:	fb21 210c 	smlad	r1, r1, ip, r2
 80047ee:	6862      	ldr	r2, [r4, #4]
    *in_q15 += 2;
 80047f0:	3408      	adds	r4, #8
 80047f2:	fb23 1202 	smlad	r2, r3, r2, r1
			while (col_count) {
 80047f6:	45da      	cmp	sl, fp
 80047f8:	d1ed      	bne.n	80047d6 <convolve_1x1_s8_ch24+0x146>
				sum = __SMLAD(ker_a2, in_b2, sum);

				col_count--;
			}

			sum = arm_nn_requantize(sum, output_mult[i_ch_out],
 80047fa:	f857 1f04 	ldr.w	r1, [r7, #4]!
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80047fe:	f04f 0b00 	mov.w	fp, #0
 8004802:	f856 4f04 	ldr.w	r4, [r6, #4]!
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8004806:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
 800480a:	2900      	cmp	r1, #0
 800480c:	fa02 f203 	lsl.w	r2, r2, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8004810:	4643      	mov	r3, r8
 8004812:	fbc2 3b04 	smlal	r3, fp, r2, r4
    result = (int32_t)(mult.long_long >> 31);
 8004816:	ea4f 73d3 	mov.w	r3, r3, lsr #31
 800481a:	ea43 034b 	orr.w	r3, r3, fp, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800481e:	dc0d      	bgt.n	800483c <convolve_1x1_s8_ch24+0x1ac>
 8004820:	4249      	negs	r1, r1
    const q31_t remainder_mask = (1 << exponent) - 1;
 8004822:	2201      	movs	r2, #1
 8004824:	408a      	lsls	r2, r1
 8004826:	3a01      	subs	r2, #1
    int32_t remainder = remainder_mask & dividend;
 8004828:	ea03 0402 	and.w	r4, r3, r2
    if (result < 0)
 800482c:	410b      	asrs	r3, r1
    q31_t threshold = remainder_mask >> 1;
 800482e:	ea4f 0262 	mov.w	r2, r2, asr #1
        threshold++;
 8004832:	bf48      	it	mi
 8004834:	3201      	addmi	r2, #1
    if (remainder > threshold)
 8004836:	4294      	cmp	r4, r2
        result++;
 8004838:	bfc8      	it	gt
 800483a:	3301      	addgt	r3, #1
					output_shift[i_ch_out]);
			sum += out_offset;
 800483c:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800483e:	4413      	add	r3, r2
			sum = MAX(sum, out_activation_min);
 8004840:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004842:	4293      	cmp	r3, r2
 8004844:	bfb8      	it	lt
 8004846:	4613      	movlt	r3, r2
			sum = MIN(sum, out_activation_max);
 8004848:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800484a:	4293      	cmp	r3, r2
 800484c:	bfa8      	it	ge
 800484e:	4613      	movge	r3, r2
			*out++ = (q7_t) sum;
 8004850:	f800 3b01 	strb.w	r3, [r0], #1
		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 8004854:	4570      	cmp	r0, lr
 8004856:	d1b6      	bne.n	80047c6 <convolve_1x1_s8_ch24+0x136>
		}
	}

	/* Return to application */
	return STATE_SUCCESS;
}
 8004858:	2000      	movs	r0, #0
 800485a:	b011      	add	sp, #68	@ 0x44
 800485c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004860 <convolve_1x1_s8_ch48>:
		const uint16_t input_y, const uint16_t input_ch, const q7_t *kernel,
		const int32_t *bias, const int32_t *output_shift,
		const int32_t *output_mult, const int32_t out_offset,
		const int32_t input_offset, const int32_t out_activation_min,
		const int32_t out_activation_max, q7_t *output, const uint16_t output_x,
		const uint16_t output_y, const uint16_t output_ch, q15_t *runtime_buf) {
 8004860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004864:	b091      	sub	sp, #68	@ 0x44
 8004866:	469b      	mov	fp, r3
 8004868:	4686      	mov	lr, r0
 800486a:	f8bd 308c 	ldrh.w	r3, [sp, #140]	@ 0x8c

	/* Partial(two columns) im2col buffer */
	q15_t *two_column_buffer = runtime_buf;
	q7_t *out = output;
	const int32_t num_elements = output_x * output_y;
	const int channel_div4 = (input_ch >> 2);
 800486e:	ea4f 079b 	mov.w	r7, fp, lsr #2
		const uint16_t output_y, const uint16_t output_ch, q15_t *runtime_buf) {
 8004872:	f8bd 2090 	ldrh.w	r2, [sp, #144]	@ 0x90

	const int16_t inoff16 = input_offset;
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 8004876:	f9bd 407c 	ldrsh.w	r4, [sp, #124]	@ 0x7c
	const int channel_div4 = (input_ch >> 2);
 800487a:	4639      	mov	r1, r7
	const int32_t num_elements = output_x * output_y;
 800487c:	fb03 f202 	mul.w	r2, r3, r2
		const uint16_t output_y, const uint16_t output_ch, q15_t *runtime_buf) {
 8004880:	f8bd 3094 	ldrh.w	r3, [sp, #148]	@ 0x94
 8004884:	f8dd a068 	ldr.w	sl, [sp, #104]	@ 0x68

	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8004888:	ea5f 0862 	movs.w	r8, r2, asr #1
		const uint16_t output_y, const uint16_t output_ch, q15_t *runtime_buf) {
 800488c:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800488e:	f8dd 9098 	ldr.w	r9, [sp, #152]	@ 0x98
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 8004892:	eac4 4404 	pkhbt	r4, r4, r4, lsl #16
		const uint16_t output_y, const uint16_t output_ch, q15_t *runtime_buf) {
 8004896:	9309      	str	r3, [sp, #36]	@ 0x24
	const int channel_div4 = (input_ch >> 2);
 8004898:	970c      	str	r7, [sp, #48]	@ 0x30
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 800489a:	d04d      	beq.n	8004938 <convolve_1x1_s8_ch48+0xd8>
			q7_q15_offset_reordered_ele(src, dst)
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
		}

		out = mat_mult_kernel_s8_s16_reordered_ch48(kernel,
 800489c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800489e:	4676      	mov	r6, lr
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 80048a0:	2500      	movs	r5, #0
 80048a2:	f8cd e03c 	str.w	lr, [sp, #60]	@ 0x3c
		out = mat_mult_kernel_s8_s16_reordered_ch48(kernel,
 80048a6:	b25b      	sxtb	r3, r3
 80048a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80048aa:	ea4f 034b 	mov.w	r3, fp, lsl #1
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 80048ae:	e9cd 270d 	strd	r2, r7, [sp, #52]	@ 0x34
 80048b2:	930b      	str	r3, [sp, #44]	@ 0x2c
		q7_t *src = &input[i_element * input_ch * 2];
 80048b4:	4631      	mov	r1, r6
		while (cnt > 0) {
 80048b6:	b327      	cbz	r7, 8004902 <convolve_1x1_s8_ch48+0xa2>
		q15_t *dst = two_column_buffer;
 80048b8:	464a      	mov	r2, r9
		int cnt = channel_div4;	//two columns
 80048ba:	46be      	mov	lr, r7
    memcpy(&val, *in_q7, 4);
 80048bc:	680b      	ldr	r3, [r1, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80048be:	fa2f fc83 	sxtb16	ip, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 80048c2:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80048c6:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80048ca:	fa93 f304 	sadd16	r3, r3, r4
 80048ce:	fa9c fc04 	sadd16	ip, ip, r4
  memcpy (*pQ15, &val, 4);
 80048d2:	f8c2 c000 	str.w	ip, [r2]
    *in_q7 += 4;
 80048d6:	3108      	adds	r1, #8
 80048d8:	6053      	str	r3, [r2, #4]
    memcpy(&val, *in_q7, 4);
 80048da:	f851 3c04 	ldr.w	r3, [r1, #-4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80048de:	fa2f fc83 	sxtb16	ip, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 80048e2:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80048e6:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80048ea:	fa93 f304 	sadd16	r3, r3, r4
 80048ee:	fa9c fc04 	sadd16	ip, ip, r4
		while (cnt > 0) {
 80048f2:	f1be 0e01 	subs.w	lr, lr, #1
 80048f6:	f8c2 c008 	str.w	ip, [r2, #8]
 80048fa:	60d3      	str	r3, [r2, #12]
 *pQ15 += 2;
 80048fc:	f102 0210 	add.w	r2, r2, #16
 8004900:	d1dc      	bne.n	80048bc <convolve_1x1_s8_ch48+0x5c>
		out = mat_mult_kernel_s8_s16_reordered_ch48(kernel,
 8004902:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8004904:	3501      	adds	r5, #1
		out = mat_mult_kernel_s8_s16_reordered_ch48(kernel,
 8004906:	9006      	str	r0, [sp, #24]
 8004908:	4649      	mov	r1, r9
 800490a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800490c:	4650      	mov	r0, sl
 800490e:	e9cd b304 	strd	fp, r3, [sp, #16]
 8004912:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004914:	9303      	str	r3, [sp, #12]
 8004916:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004918:	9302      	str	r3, [sp, #8]
 800491a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800491c:	9301      	str	r3, [sp, #4]
 800491e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8004920:	9300      	str	r3, [sp, #0]
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8004922:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004924:	441e      	add	r6, r3
		out = mat_mult_kernel_s8_s16_reordered_ch48(kernel,
 8004926:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8004928:	f7ff fc4e 	bl	80041c8 <mat_mult_kernel_s8_s16_reordered_ch48>
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 800492c:	4545      	cmp	r5, r8
 800492e:	d1c1      	bne.n	80048b4 <convolve_1x1_s8_ch48+0x54>
 8004930:	f8dd e03c 	ldr.w	lr, [sp, #60]	@ 0x3c
 8004934:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
				out_activation_max, input_ch * DIM_KER_Y * DIM_KER_X,
				bias, out);
	}

	/* check if there is an odd column left-over for computation */
	if (num_elements & 0x1) {
 8004938:	07d3      	lsls	r3, r2, #31
 800493a:	d575      	bpl.n	8004a28 <convolve_1x1_s8_ch48+0x1c8>
		int32_t i_ch_out;
		const q7_t *ker_a = kernel;
		q7_t *src = &input[(num_elements - 1) * input_ch];
 800493c:	1e55      	subs	r5, r2, #1
 800493e:	fb0b e505 	mla	r5, fp, r5, lr
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two * numof2col columns
		while (cnt > 0) {
 8004942:	b197      	cbz	r7, 800496a <convolve_1x1_s8_ch48+0x10a>
		q15_t *dst = two_column_buffer;
 8004944:	464a      	mov	r2, r9
 8004946:	f855 3b04 	ldr.w	r3, [r5], #4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800494a:	fa2f f683 	sxtb16	r6, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 800494e:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8004952:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8004956:	fa93 f304 	sadd16	r3, r3, r4
 800495a:	fa96 f604 	sadd16	r6, r6, r4
		while (cnt > 0) {
 800495e:	3901      	subs	r1, #1
  memcpy (*pQ15, &val, 4);
 8004960:	6016      	str	r6, [r2, #0]
 8004962:	6053      	str	r3, [r2, #4]
 *pQ15 += 2;
 8004964:	f102 0208 	add.w	r2, r2, #8
 8004968:	d1ed      	bne.n	8004946 <convolve_1x1_s8_ch48+0xe6>
			q7_q15_offset_reordered_ele(src, dst)
			cnt--;
		}

		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 800496a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800496c:	2b00      	cmp	r3, #0
 800496e:	d05b      	beq.n	8004a28 <convolve_1x1_s8_ch48+0x1c8>
 8004970:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8004972:	f04f 4880 	mov.w	r8, #1073741824	@ 0x40000000
 8004976:	1f1d      	subs	r5, r3, #4
 8004978:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800497a:	1f1e      	subs	r6, r3, #4
 800497c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800497e:	1f1f      	subs	r7, r3, #4
 8004980:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004982:	4403      	add	r3, r0
 8004984:	469e      	mov	lr, r3
 8004986:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004988:	3b01      	subs	r3, #1
 800498a:	b29b      	uxth	r3, r3
 800498c:	3301      	adds	r3, #1
 800498e:	ea4f 0b83 	mov.w	fp, r3, lsl #2
    const q31_t remainder_mask = (1 << exponent) - 1;
 8004992:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24

			/* Point to the beginning of the im2col buffer where the input is available as a rearranged column */
			const q15_t *ip_as_col = runtime_buf;
			uint16_t col_count = (input_ch * DIM_KER_X * DIM_KER_Y) >> 2;

			while (col_count) {
 8004996:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
			q31_t sum = bias[i_ch_out];
 8004998:	f855 2f04 	ldr.w	r2, [r5, #4]!
			while (col_count) {
 800499c:	b1ab      	cbz	r3, 80049ca <convolve_1x1_s8_ch48+0x16a>
 800499e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
			const q15_t *ip_as_col = runtime_buf;
 80049a0:	464c      	mov	r4, r9
 80049a2:	eb0a 0b03 	add.w	fp, sl, r3
    memcpy(&val, *in_q7, 4);
 80049a6:	f85a 3b04 	ldr.w	r3, [sl], #4
    memcpy(&val, *in_q15, 4);
 80049aa:	f8d4 c000 	ldr.w	ip, [r4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80049ae:	fa2f f183 	sxtb16	r1, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 80049b2:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80049b6:	fa2f f383 	sxtb16	r3, r3
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80049ba:	fb21 210c 	smlad	r1, r1, ip, r2
 80049be:	6862      	ldr	r2, [r4, #4]
    *in_q15 += 2;
 80049c0:	3408      	adds	r4, #8
 80049c2:	fb23 1202 	smlad	r2, r3, r2, r1
			while (col_count) {
 80049c6:	45da      	cmp	sl, fp
 80049c8:	d1ed      	bne.n	80049a6 <convolve_1x1_s8_ch48+0x146>
				sum = __SMLAD(ker_a2, in_b2, sum);

				col_count--;
			}

			sum = arm_nn_requantize(sum, output_mult[i_ch_out],
 80049ca:	f857 1f04 	ldr.w	r1, [r7, #4]!
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80049ce:	f04f 0b00 	mov.w	fp, #0
 80049d2:	f856 4f04 	ldr.w	r4, [r6, #4]!
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80049d6:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
 80049da:	2900      	cmp	r1, #0
 80049dc:	fa02 f203 	lsl.w	r2, r2, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80049e0:	4643      	mov	r3, r8
 80049e2:	fbc2 3b04 	smlal	r3, fp, r2, r4
    result = (int32_t)(mult.long_long >> 31);
 80049e6:	ea4f 73d3 	mov.w	r3, r3, lsr #31
 80049ea:	ea43 034b 	orr.w	r3, r3, fp, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80049ee:	dc0d      	bgt.n	8004a0c <convolve_1x1_s8_ch48+0x1ac>
 80049f0:	4249      	negs	r1, r1
    const q31_t remainder_mask = (1 << exponent) - 1;
 80049f2:	2201      	movs	r2, #1
 80049f4:	408a      	lsls	r2, r1
 80049f6:	3a01      	subs	r2, #1
    int32_t remainder = remainder_mask & dividend;
 80049f8:	ea03 0402 	and.w	r4, r3, r2
    if (result < 0)
 80049fc:	410b      	asrs	r3, r1
    q31_t threshold = remainder_mask >> 1;
 80049fe:	ea4f 0262 	mov.w	r2, r2, asr #1
        threshold++;
 8004a02:	bf48      	it	mi
 8004a04:	3201      	addmi	r2, #1
    if (remainder > threshold)
 8004a06:	4294      	cmp	r4, r2
        result++;
 8004a08:	bfc8      	it	gt
 8004a0a:	3301      	addgt	r3, #1
					output_shift[i_ch_out]);
			sum += out_offset;
 8004a0c:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8004a0e:	4413      	add	r3, r2
			sum = MAX(sum, out_activation_min);
 8004a10:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004a12:	4293      	cmp	r3, r2
 8004a14:	bfb8      	it	lt
 8004a16:	4613      	movlt	r3, r2
			sum = MIN(sum, out_activation_max);
 8004a18:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	bfa8      	it	ge
 8004a1e:	4613      	movge	r3, r2
			*out++ = (q7_t) sum;
 8004a20:	f800 3b01 	strb.w	r3, [r0], #1
		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 8004a24:	4570      	cmp	r0, lr
 8004a26:	d1b6      	bne.n	8004996 <convolve_1x1_s8_ch48+0x136>
		}
	}

	/* Return to application */
	return STATE_SUCCESS;
}
 8004a28:	2000      	movs	r0, #0
 8004a2a:	b011      	add	sp, #68	@ 0x44
 8004a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004a30 <depthwise_kernel3x3_stride1_inplace_kernel_CHW>:
        const uint16_t output_y, const uint16_t output_x,
        const int32_t *bias, const int32_t *biasR, const q7_t *ksrc, const int32_t *multiplier,
        const int32_t *shift, q7_t *output, const int32_t output_offset,
        const int32_t activation_min, const int32_t activation_max,
        q7_t *cols_8b_iterptr, const uint16_t column_x, int channel_offset)
{
 8004a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a34:	b097      	sub	sp, #92	@ 0x5c
 8004a36:	9204      	str	r2, [sp, #16]
 8004a38:	f8bd 20a0 	ldrh.w	r2, [sp, #160]	@ 0xa0
 8004a3c:	f8dd b080 	ldr.w	fp, [sp, #128]	@ 0x80
 8004a40:	f8dd 8084 	ldr.w	r8, [sp, #132]	@ 0x84
 8004a44:	f8dd a09c 	ldr.w	sl, [sp, #156]	@ 0x9c
 8004a48:	9108      	str	r1, [sp, #32]
 8004a4a:	920c      	str	r2, [sp, #48]	@ 0x30
    #define STRIDE 1
    int i, j;
    /* MACs for each output */
    for (i = 0; i < output_y; i++) {
 8004a4c:	900a      	str	r0, [sp, #40]	@ 0x28
 8004a4e:	2800      	cmp	r0, #0
 8004a50:	f000 8173 	beq.w	8004d3a <depthwise_kernel3x3_stride1_inplace_kernel_CHW+0x30a>
 8004a54:	4699      	mov	r9, r3
 8004a56:	f001 0301 	and.w	r3, r1, #1
        for (j = 0; j < output_x / 2; j++) {
 8004a5a:	084a      	lsrs	r2, r1, #1
 8004a5c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004a5e:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8004a60:	9209      	str	r2, [sp, #36]	@ 0x24
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	f040 816f 	bne.w	8004d46 <depthwise_kernel3x3_stride1_inplace_kernel_CHW+0x316>

            sum = arm_nn_requantize(sum + biasR[0], *multiplier, *shift);
            sum += output_offset;
            sum = TN_MAX(sum, activation_min);
            sum = TN_MIN(sum, activation_max);
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 8004a68:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004a6a:	1e4b      	subs	r3, r1, #1
        for (j = 0; j < output_x / 2; j++) {
 8004a6c:	2500      	movs	r5, #0
            cols_8b += column_x + 2;
 8004a6e:	f8cd 8084 	str.w	r8, [sp, #132]	@ 0x84
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 8004a72:	18d3      	adds	r3, r2, r3
    for (i = 0; i < output_y; i++) {
 8004a74:	9505      	str	r5, [sp, #20]
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 8004a76:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004a78:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004a7a:	005a      	lsls	r2, r3, #1
            cols_8b += column_x + 2;
 8004a7c:	1c9f      	adds	r7, r3, #2
 8004a7e:	920d      	str	r2, [sp, #52]	@ 0x34
 8004a80:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004a82:	0056      	lsls	r6, r2, #1
 8004a84:	960e      	str	r6, [sp, #56]	@ 0x38
        for (j = 0; j < output_x / 2; j++) {
 8004a86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f000 8159 	beq.w	8004d40 <depthwise_kernel3x3_stride1_inplace_kernel_CHW+0x310>
 8004a8e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004a90:	eb0a 0803 	add.w	r8, sl, r3
 8004a94:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004a96:	eb0a 0003 	add.w	r0, sl, r3
 8004a9a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004a9c:	442b      	add	r3, r5
 8004a9e:	9301      	str	r3, [sp, #4]
 8004aa0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004aa2:	4453      	add	r3, sl
 8004aa4:	e9cd 5706 	strd	r5, r7, [sp, #24]
 8004aa8:	9303      	str	r3, [sp, #12]
 8004aaa:	e039      	b.n	8004b20 <depthwise_kernel3x3_stride1_inplace_kernel_CHW+0xf0>
            sum0 += output_offset;
 8004aac:	9a24      	ldr	r2, [sp, #144]	@ 0x90
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8004aae:	2500      	movs	r5, #0
 8004ab0:	4413      	add	r3, r2
            sum0 = TN_MAX(sum0, activation_min);
 8004ab2:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	bfb8      	it	lt
 8004ab8:	4613      	movlt	r3, r2
            sum0 = TN_MIN(sum0, activation_max);
 8004aba:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8004abc:	4293      	cmp	r3, r2
 8004abe:	bfa8      	it	ge
 8004ac0:	4613      	movge	r3, r2
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8004ac2:	9a01      	ldr	r2, [sp, #4]
 8004ac4:	7013      	strb	r3, [r2, #0]
 8004ac6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
            sum1 = arm_nn_requantize(sum1 + biasR[0], *multiplier, *shift);
 8004aca:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8004acc:	681c      	ldr	r4, [r3, #0]
 8004ace:	f8d9 3000 	ldr.w	r3, [r9]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8004ad2:	2c00      	cmp	r4, #0
 8004ad4:	4419      	add	r1, r3
 8004ad6:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 8004ada:	fa01 f103 	lsl.w	r1, r1, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8004ade:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	fbc1 2503 	smlal	r2, r5, r1, r3
    result = (int32_t)(mult.long_long >> 31);
 8004ae6:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8004aea:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8004aee:	f340 8095 	ble.w	8004c1c <depthwise_kernel3x3_stride1_inplace_kernel_CHW+0x1ec>
            sum1 += output_offset;
 8004af2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
            cols_8b_iterptr += STRIDE * 2;
 8004af4:	f10a 0a02 	add.w	sl, sl, #2
        for (j = 0; j < output_x / 2; j++) {
 8004af8:	f108 0802 	add.w	r8, r8, #2
 8004afc:	3002      	adds	r0, #2
            sum1 += output_offset;
 8004afe:	441a      	add	r2, r3
            sum1 = TN_MAX(sum1, activation_min);
 8004b00:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8004b02:	429a      	cmp	r2, r3
 8004b04:	bfb8      	it	lt
 8004b06:	461a      	movlt	r2, r3
            sum1 = TN_MIN(sum1, activation_max);
 8004b08:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	bfa8      	it	ge
 8004b0e:	461a      	movge	r2, r3
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;
 8004b10:	9b01      	ldr	r3, [sp, #4]
 8004b12:	705a      	strb	r2, [r3, #1]
        for (j = 0; j < output_x / 2; j++) {
 8004b14:	3302      	adds	r3, #2
 8004b16:	9301      	str	r3, [sp, #4]
 8004b18:	9b03      	ldr	r3, [sp, #12]
 8004b1a:	4553      	cmp	r3, sl
 8004b1c:	f000 808e 	beq.w	8004c3c <depthwise_kernel3x3_stride1_inplace_kernel_CHW+0x20c>
            q31_t sum0 = bias[0] + biasR[0];
 8004b20:	9b04      	ldr	r3, [sp, #16]
 8004b22:	f8d9 2000 	ldr.w	r2, [r9]
 8004b26:	681b      	ldr	r3, [r3, #0]
            sum0 += cols_8b[0]*ksrc[0];
 8004b28:	f99b 4000 	ldrsb.w	r4, [fp]
            q31_t sum0 = bias[0] + biasR[0];
 8004b2c:	4413      	add	r3, r2
            sum1 += cols_8b[1]*ksrc[0];
 8004b2e:	f99a 1001 	ldrsb.w	r1, [sl, #1]
            sum0 += cols_8b[0]*ksrc[0];
 8004b32:	f99a 2000 	ldrsb.w	r2, [sl]
            sum0 += cols_8b[0]*ksrc[3];
 8004b36:	f99b c003 	ldrsb.w	ip, [fp, #3]
            sum0 += cols_8b[0]*ksrc[0];
 8004b3a:	fb14 3202 	smlabb	r2, r4, r2, r3
            sum1 += cols_8b[1]*ksrc[0];
 8004b3e:	fb01 3304 	mla	r3, r1, r4, r3
            sum0 += cols_8b[1]*ksrc[1];
 8004b42:	f99b 4001 	ldrsb.w	r4, [fp, #1]
            sum1 += cols_8b[1]*ksrc[3];
 8004b46:	f998 e003 	ldrsb.w	lr, [r8, #3]
            sum0 += cols_8b[1]*ksrc[1];
 8004b4a:	fb04 2201 	mla	r2, r4, r1, r2
            sum1 += cols_8b[2]*ksrc[1];
 8004b4e:	f99a 1002 	ldrsb.w	r1, [sl, #2]
            sum0 += cols_8b[1]*ksrc[4];
 8004b52:	f99b 6004 	ldrsb.w	r6, [fp, #4]
            sum1 += cols_8b[2]*ksrc[1];
 8004b56:	fb01 3304 	mla	r3, r1, r4, r3
            sum1 += cols_8b[2]*ksrc[4];
 8004b5a:	f998 7004 	ldrsb.w	r7, [r8, #4]
            sum0 += cols_8b[2]*ksrc[5];
 8004b5e:	f99b 5005 	ldrsb.w	r5, [fp, #5]
            sum1 += cols_8b[2]*ksrc[1];
 8004b62:	461c      	mov	r4, r3
            sum0 += cols_8b[2]*ksrc[2];
 8004b64:	f99b 3002 	ldrsb.w	r3, [fp, #2]
 8004b68:	fb03 2201 	mla	r2, r3, r1, r2
            sum0 += cols_8b[0]*ksrc[3];
 8004b6c:	f998 1002 	ldrsb.w	r1, [r8, #2]
 8004b70:	fb1c 2101 	smlabb	r1, ip, r1, r2
            sum0 += cols_8b[0]*ksrc[6];
 8004b74:	f99b 2006 	ldrsb.w	r2, [fp, #6]
 8004b78:	9202      	str	r2, [sp, #8]
            sum1 += cols_8b[3]*ksrc[2];
 8004b7a:	f99a 2003 	ldrsb.w	r2, [sl, #3]
            sum0 += cols_8b[1]*ksrc[4];
 8004b7e:	fb06 110e 	mla	r1, r6, lr, r1
            sum1 += cols_8b[3]*ksrc[2];
 8004b82:	fb12 4203 	smlabb	r2, r2, r3, r4
            sum0 += cols_8b[2]*ksrc[5];
 8004b86:	fb05 1107 	mla	r1, r5, r7, r1
            sum0 += cols_8b[0]*ksrc[6];
 8004b8a:	9c02      	ldr	r4, [sp, #8]
            sum1 += cols_8b[1]*ksrc[3];
 8004b8c:	fb0e 220c 	mla	r2, lr, ip, r2
            sum0 += cols_8b[0]*ksrc[6];
 8004b90:	f990 3004 	ldrsb.w	r3, [r0, #4]
            sum1 += cols_8b[1]*ksrc[6];
 8004b94:	f990 e005 	ldrsb.w	lr, [r0, #5]
            sum1 += cols_8b[2]*ksrc[4];
 8004b98:	fb07 2206 	mla	r2, r7, r6, r2
            sum0 += cols_8b[0]*ksrc[6];
 8004b9c:	fb14 1303 	smlabb	r3, r4, r3, r1
            sum0 += cols_8b[1]*ksrc[7];
 8004ba0:	f99b 7007 	ldrsb.w	r7, [fp, #7]
            sum0 += cols_8b[2]*ksrc[8];
 8004ba4:	f99b 6008 	ldrsb.w	r6, [fp, #8]
            sum1 += cols_8b[2]*ksrc[7];
 8004ba8:	f990 c006 	ldrsb.w	ip, [r0, #6]
            sum0 += cols_8b[1]*ksrc[7];
 8004bac:	fb0e 3307 	mla	r3, lr, r7, r3
            sum0 = arm_nn_requantize(sum0 + biasR[0], *multiplier, *shift);
 8004bb0:	f8d9 1000 	ldr.w	r1, [r9]
            sum0 += cols_8b[2]*ksrc[8];
 8004bb4:	fb0c 3306 	mla	r3, ip, r6, r3
            sum0 = arm_nn_requantize(sum0 + biasR[0], *multiplier, *shift);
 8004bb8:	440b      	add	r3, r1
            sum1 += cols_8b[3]*ksrc[5];
 8004bba:	f998 1005 	ldrsb.w	r1, [r8, #5]
 8004bbe:	fb11 2105 	smlabb	r1, r1, r5, r2
            sum0 = arm_nn_requantize(sum0 + biasR[0], *multiplier, *shift);
 8004bc2:	9a22      	ldr	r2, [sp, #136]	@ 0x88
            sum1 += cols_8b[1]*ksrc[6];
 8004bc4:	fb0e 1104 	mla	r1, lr, r4, r1
            sum0 = arm_nn_requantize(sum0 + biasR[0], *multiplier, *shift);
 8004bc8:	6814      	ldr	r4, [r2, #0]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8004bca:	9a21      	ldr	r2, [sp, #132]	@ 0x84
            sum1 += cols_8b[2]*ksrc[7];
 8004bcc:	fb0c 1507 	mla	r5, ip, r7, r1
            sum1 += cols_8b[3]*ksrc[8];
 8004bd0:	f990 1007 	ldrsb.w	r1, [r0, #7]
 8004bd4:	6812      	ldr	r2, [r2, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8004bd6:	2c00      	cmp	r4, #0
 8004bd8:	fb16 5101 	smlabb	r1, r6, r1, r5
 8004bdc:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8004be0:	f04f 0600 	mov.w	r6, #0
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8004be4:	fa03 f505 	lsl.w	r5, r3, r5
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8004be8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004bec:	fbc5 3602 	smlal	r3, r6, r5, r2
    result = (int32_t)(mult.long_long >> 31);
 8004bf0:	ea4f 73d3 	mov.w	r3, r3, lsr #31
 8004bf4:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8004bf8:	f73f af58 	bgt.w	8004aac <depthwise_kernel3x3_stride1_inplace_kernel_CHW+0x7c>
 8004bfc:	4264      	negs	r4, r4
    const q31_t remainder_mask = (1 << exponent) - 1;
 8004bfe:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8004c00:	40a2      	lsls	r2, r4
 8004c02:	3a01      	subs	r2, #1
    int32_t remainder = remainder_mask & dividend;
 8004c04:	ea03 0502 	and.w	r5, r3, r2
    if (result < 0)
 8004c08:	4123      	asrs	r3, r4
    q31_t threshold = remainder_mask >> 1;
 8004c0a:	ea4f 0262 	mov.w	r2, r2, asr #1
    if (result < 0)
 8004c0e:	d500      	bpl.n	8004c12 <depthwise_kernel3x3_stride1_inplace_kernel_CHW+0x1e2>
        threshold++;
 8004c10:	3201      	adds	r2, #1
    if (remainder > threshold)
 8004c12:	4295      	cmp	r5, r2
 8004c14:	f77f af4a 	ble.w	8004aac <depthwise_kernel3x3_stride1_inplace_kernel_CHW+0x7c>
        result++;
 8004c18:	3301      	adds	r3, #1
 8004c1a:	e747      	b.n	8004aac <depthwise_kernel3x3_stride1_inplace_kernel_CHW+0x7c>
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8004c1c:	4264      	negs	r4, r4
    const q31_t remainder_mask = (1 << exponent) - 1;
 8004c1e:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8004c20:	40a3      	lsls	r3, r4
 8004c22:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 8004c24:	ea02 0103 	and.w	r1, r2, r3
    if (result < 0)
 8004c28:	4122      	asrs	r2, r4
    q31_t threshold = remainder_mask >> 1;
 8004c2a:	ea4f 0363 	mov.w	r3, r3, asr #1
    if (result < 0)
 8004c2e:	d500      	bpl.n	8004c32 <depthwise_kernel3x3_stride1_inplace_kernel_CHW+0x202>
        threshold++;
 8004c30:	3301      	adds	r3, #1
    if (remainder > threshold)
 8004c32:	4299      	cmp	r1, r3
 8004c34:	f77f af5d 	ble.w	8004af2 <depthwise_kernel3x3_stride1_inplace_kernel_CHW+0xc2>
        result++;
 8004c38:	3201      	adds	r2, #1
 8004c3a:	e75a      	b.n	8004af2 <depthwise_kernel3x3_stride1_inplace_kernel_CHW+0xc2>
 8004c3c:	e9dd 5706 	ldrd	r5, r7, [sp, #24]
        if (output_x & 1) {
 8004c40:	9b05      	ldr	r3, [sp, #20]
 8004c42:	3301      	adds	r3, #1
 8004c44:	9305      	str	r3, [sp, #20]
 8004c46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d06c      	beq.n	8004d26 <depthwise_kernel3x3_stride1_inplace_kernel_CHW+0x2f6>
            q31_t sum = bias[0] + biasR[0];
 8004c4c:	9b04      	ldr	r3, [sp, #16]
            sum += cols_8b[0]*ksrc[0];
 8004c4e:	9803      	ldr	r0, [sp, #12]
            q31_t sum = bias[0] + biasR[0];
 8004c50:	f8d9 4000 	ldr.w	r4, [r9]
 8004c54:	681b      	ldr	r3, [r3, #0]
            sum += cols_8b[0]*ksrc[0];
 8004c56:	f990 2000 	ldrsb.w	r2, [r0]
            q31_t sum = bias[0] + biasR[0];
 8004c5a:	4423      	add	r3, r4
            sum += cols_8b[0]*ksrc[0];
 8004c5c:	f99b 1000 	ldrsb.w	r1, [fp]
 8004c60:	fb11 3302 	smlabb	r3, r1, r2, r3
            sum += cols_8b[1]*ksrc[1];
 8004c64:	f990 2001 	ldrsb.w	r2, [r0, #1]
 8004c68:	f99b 1001 	ldrsb.w	r1, [fp, #1]
 8004c6c:	fb11 3302 	smlabb	r3, r1, r2, r3
            sum += cols_8b[2]*ksrc[2];
 8004c70:	f990 1002 	ldrsb.w	r1, [r0, #2]
 8004c74:	f99b 2002 	ldrsb.w	r2, [fp, #2]
 8004c78:	fb12 3201 	smlabb	r2, r2, r1, r3
            cols_8b += column_x + 2;
 8004c7c:	19c3      	adds	r3, r0, r7
            sum += cols_8b[0]*ksrc[3];
 8004c7e:	f99b 1003 	ldrsb.w	r1, [fp, #3]
 8004c82:	57c0      	ldrsb	r0, [r0, r7]
 8004c84:	fb11 2100 	smlabb	r1, r1, r0, r2
            sum += cols_8b[1]*ksrc[4];
 8004c88:	f99b 0004 	ldrsb.w	r0, [fp, #4]
 8004c8c:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8004c90:	fb10 1202 	smlabb	r2, r0, r2, r1
            sum += cols_8b[2]*ksrc[5];
 8004c94:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8004c98:	f99b 1005 	ldrsb.w	r1, [fp, #5]
 8004c9c:	fb11 2100 	smlabb	r1, r1, r0, r2
            cols_8b += column_x + 2;
 8004ca0:	19da      	adds	r2, r3, r7
            sum += cols_8b[0]*ksrc[6];
 8004ca2:	f99b 0006 	ldrsb.w	r0, [fp, #6]
 8004ca6:	57db      	ldrsb	r3, [r3, r7]
 8004ca8:	fb10 1303 	smlabb	r3, r0, r3, r1
            sum += cols_8b[1]*ksrc[7];
 8004cac:	f992 1001 	ldrsb.w	r1, [r2, #1]
 8004cb0:	f99b 0007 	ldrsb.w	r0, [fp, #7]
            sum += cols_8b[2]*ksrc[8];
 8004cb4:	f992 2002 	ldrsb.w	r2, [r2, #2]
            sum += cols_8b[1]*ksrc[7];
 8004cb8:	fb10 3301 	smlabb	r3, r0, r1, r3
            sum += cols_8b[2]*ksrc[8];
 8004cbc:	f99b 1008 	ldrsb.w	r1, [fp, #8]
 8004cc0:	fb11 3102 	smlabb	r1, r1, r2, r3
            sum = arm_nn_requantize(sum + biasR[0], *multiplier, *shift);
 8004cc4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8004cc6:	6818      	ldr	r0, [r3, #0]
 8004cc8:	4421      	add	r1, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8004cca:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004ccc:	2400      	movs	r4, #0
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8004cce:	ea20 72e0 	bic.w	r2, r0, r0, asr #31
 8004cd2:	2800      	cmp	r0, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8004cd4:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8004cd6:	fa01 f102 	lsl.w	r1, r1, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8004cda:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004cde:	fbc3 2401 	smlal	r2, r4, r3, r1
    result = (int32_t)(mult.long_long >> 31);
 8004ce2:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8004ce6:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8004cea:	dc0d      	bgt.n	8004d08 <depthwise_kernel3x3_stride1_inplace_kernel_CHW+0x2d8>
 8004cec:	4240      	negs	r0, r0
    const q31_t remainder_mask = (1 << exponent) - 1;
 8004cee:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8004cf0:	4083      	lsls	r3, r0
 8004cf2:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 8004cf4:	ea03 0102 	and.w	r1, r3, r2
    if (result < 0)
 8004cf8:	4102      	asrs	r2, r0
    q31_t threshold = remainder_mask >> 1;
 8004cfa:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 8004cfe:	bf48      	it	mi
 8004d00:	3301      	addmi	r3, #1
    if (remainder > threshold)
 8004d02:	4299      	cmp	r1, r3
        result++;
 8004d04:	bfc8      	it	gt
 8004d06:	3201      	addgt	r2, #1
            sum += output_offset;
 8004d08:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004d0a:	441a      	add	r2, r3

            cols_8b_iterptr += STRIDE;
 8004d0c:	9b03      	ldr	r3, [sp, #12]
 8004d0e:	3301      	adds	r3, #1
 8004d10:	9303      	str	r3, [sp, #12]
            sum = TN_MAX(sum, activation_min);
 8004d12:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8004d14:	429a      	cmp	r2, r3
 8004d16:	bfb8      	it	lt
 8004d18:	461a      	movlt	r2, r3
            sum = TN_MIN(sum, activation_max);
 8004d1a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	bfa8      	it	ge
 8004d20:	461a      	movge	r2, r3
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 8004d22:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004d24:	555a      	strb	r2, [r3, r5]
        }
        cols_8b_iterptr += 1 * 2;
 8004d26:	9b03      	ldr	r3, [sp, #12]
    for (i = 0; i < output_y; i++) {
 8004d28:	9a05      	ldr	r2, [sp, #20]
        cols_8b_iterptr += 1 * 2;
 8004d2a:	f103 0a02 	add.w	sl, r3, #2
    for (i = 0; i < output_y; i++) {
 8004d2e:	9b08      	ldr	r3, [sp, #32]
 8004d30:	441d      	add	r5, r3
 8004d32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d34:	4293      	cmp	r3, r2
 8004d36:	f47f aea6 	bne.w	8004a86 <depthwise_kernel3x3_stride1_inplace_kernel_CHW+0x56>
    }
}
 8004d3a:	b017      	add	sp, #92	@ 0x5c
 8004d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (j = 0; j < output_x / 2; j++) {
 8004d40:	f8cd a00c 	str.w	sl, [sp, #12]
 8004d44:	e77c      	b.n	8004c40 <depthwise_kernel3x3_stride1_inplace_kernel_CHW+0x210>
 8004d46:	4619      	mov	r1, r3
 8004d48:	461a      	mov	r2, r3
 8004d4a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004d4c:	2701      	movs	r7, #1
            cols_8b += column_x + 2;
 8004d4e:	f8cd 8084 	str.w	r8, [sp, #132]	@ 0x84
    for (i = 0; i < output_y; i++) {
 8004d52:	f04f 0e00 	mov.w	lr, #0
        for (j = 0; j < output_x / 2; j++) {
 8004d56:	eb03 0c02 	add.w	ip, r3, r2
 8004d5a:	9a08      	ldr	r2, [sp, #32]
            cols_8b += column_x + 2;
 8004d5c:	f8cd b080 	str.w	fp, [sp, #128]	@ 0x80
 8004d60:	460e      	mov	r6, r1
 8004d62:	1e53      	subs	r3, r2, #1
 8004d64:	46cb      	mov	fp, r9
 8004d66:	970d      	str	r7, [sp, #52]	@ 0x34
 8004d68:	fb01 f303 	mul.w	r3, r1, r3
 8004d6c:	f8dd 9080 	ldr.w	r9, [sp, #128]	@ 0x80
 8004d70:	9315      	str	r3, [sp, #84]	@ 0x54
 8004d72:	460b      	mov	r3, r1
 8004d74:	fb02 f303 	mul.w	r3, r2, r3
 8004d78:	9312      	str	r3, [sp, #72]	@ 0x48
 8004d7a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004d7c:	fa03 f207 	lsl.w	r2, r3, r7
 8004d80:	3302      	adds	r3, #2
 8004d82:	9214      	str	r2, [sp, #80]	@ 0x50
 8004d84:	460a      	mov	r2, r1
 8004d86:	4698      	mov	r8, r3
        for (j = 0; j < output_x / 2; j++) {
 8004d88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d8a:	40ba      	lsls	r2, r7
 8004d8c:	9207      	str	r2, [sp, #28]
 8004d8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d90:	40ba      	lsls	r2, r7
 8004d92:	9213      	str	r2, [sp, #76]	@ 0x4c
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f000 8168 	beq.w	800506a <depthwise_kernel3x3_stride1_inplace_kernel_CHW+0x63a>
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8004d9a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8004d9c:	f8cd c004 	str.w	ip, [sp, #4]
 8004da0:	1e53      	subs	r3, r2, #1
 8004da2:	fb06 f303 	mul.w	r3, r6, r3
 8004da6:	9305      	str	r3, [sp, #20]
 8004da8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004daa:	eb0a 0503 	add.w	r5, sl, r3
 8004dae:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004db0:	eb0a 0403 	add.w	r4, sl, r3
 8004db4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004db6:	4453      	add	r3, sl
 8004db8:	9303      	str	r3, [sp, #12]
 8004dba:	fb06 f302 	mul.w	r3, r6, r2
 8004dbe:	e9cd ec0e 	strd	lr, ip, [sp, #56]	@ 0x38
 8004dc2:	9306      	str	r3, [sp, #24]
 8004dc4:	e9cd 6810 	strd	r6, r8, [sp, #64]	@ 0x40
            q31_t sum0 = bias[0] + biasR[0];
 8004dc8:	9b04      	ldr	r3, [sp, #16]
            sum0 += cols_8b[0]*ksrc[0];
 8004dca:	f999 2000 	ldrsb.w	r2, [r9]
            q31_t sum0 = bias[0] + biasR[0];
 8004dce:	6819      	ldr	r1, [r3, #0]
 8004dd0:	f8db 3000 	ldr.w	r3, [fp]
            sum1 += cols_8b[1]*ksrc[0];
 8004dd4:	f99a 0001 	ldrsb.w	r0, [sl, #1]
            q31_t sum0 = bias[0] + biasR[0];
 8004dd8:	4419      	add	r1, r3
            sum0 += cols_8b[0]*ksrc[0];
 8004dda:	f99a 3000 	ldrsb.w	r3, [sl]
            sum0 += cols_8b[0]*ksrc[3];
 8004dde:	f999 8003 	ldrsb.w	r8, [r9, #3]
            sum0 += cols_8b[0]*ksrc[0];
 8004de2:	fb13 1302 	smlabb	r3, r3, r2, r1
            sum1 += cols_8b[1]*ksrc[0];
 8004de6:	fb02 1100 	mla	r1, r2, r0, r1
            sum0 += cols_8b[1]*ksrc[1];
 8004dea:	f999 2001 	ldrsb.w	r2, [r9, #1]
            sum1 += cols_8b[1]*ksrc[3];
 8004dee:	f995 e003 	ldrsb.w	lr, [r5, #3]
            sum0 += cols_8b[1]*ksrc[1];
 8004df2:	fb00 3302 	mla	r3, r0, r2, r3
            sum1 += cols_8b[2]*ksrc[1];
 8004df6:	f99a 0002 	ldrsb.w	r0, [sl, #2]
            sum0 += cols_8b[1]*ksrc[4];
 8004dfa:	f999 c004 	ldrsb.w	ip, [r9, #4]
            sum1 += cols_8b[2]*ksrc[1];
 8004dfe:	fb02 1100 	mla	r1, r2, r0, r1
            sum0 += cols_8b[2]*ksrc[2];
 8004e02:	f999 2002 	ldrsb.w	r2, [r9, #2]
            sum1 += cols_8b[2]*ksrc[4];
 8004e06:	f995 7004 	ldrsb.w	r7, [r5, #4]
            sum0 += cols_8b[2]*ksrc[2];
 8004e0a:	fb00 3302 	mla	r3, r0, r2, r3
            sum0 += cols_8b[0]*ksrc[3];
 8004e0e:	f995 0002 	ldrsb.w	r0, [r5, #2]
            sum0 += cols_8b[0]*ksrc[6];
 8004e12:	f999 6006 	ldrsb.w	r6, [r9, #6]
            sum0 += cols_8b[0]*ksrc[3];
 8004e16:	fb10 3008 	smlabb	r0, r0, r8, r3
            sum0 += cols_8b[2]*ksrc[5];
 8004e1a:	f999 3005 	ldrsb.w	r3, [r9, #5]
            sum0 += cols_8b[1]*ksrc[4];
 8004e1e:	fb0e 000c 	mla	r0, lr, ip, r0
            sum0 += cols_8b[2]*ksrc[5];
 8004e22:	9302      	str	r3, [sp, #8]
 8004e24:	fb07 0003 	mla	r0, r7, r3, r0
            sum1 += cols_8b[3]*ksrc[2];
 8004e28:	f99a 3003 	ldrsb.w	r3, [sl, #3]
 8004e2c:	fb12 1203 	smlabb	r2, r2, r3, r1
            sum0 += cols_8b[0]*ksrc[6];
 8004e30:	f994 1004 	ldrsb.w	r1, [r4, #4]
            sum0 = arm_nn_requantize(sum0 + biasR[0], *multiplier, *shift);
 8004e34:	f8db 3000 	ldr.w	r3, [fp]
            sum1 += cols_8b[1]*ksrc[3];
 8004e38:	fb08 220e 	mla	r2, r8, lr, r2
            sum0 += cols_8b[0]*ksrc[6];
 8004e3c:	fb11 0106 	smlabb	r1, r1, r6, r0
            sum1 += cols_8b[1]*ksrc[6];
 8004e40:	f994 e005 	ldrsb.w	lr, [r4, #5]
            sum1 += cols_8b[2]*ksrc[4];
 8004e44:	fb0c 2207 	mla	r2, ip, r7, r2
            sum0 += cols_8b[1]*ksrc[7];
 8004e48:	f999 c007 	ldrsb.w	ip, [r9, #7]
            sum1 += cols_8b[2]*ksrc[7];
 8004e4c:	f994 7006 	ldrsb.w	r7, [r4, #6]
            sum0 += cols_8b[2]*ksrc[8];
 8004e50:	f999 0008 	ldrsb.w	r0, [r9, #8]
            sum0 += cols_8b[1]*ksrc[7];
 8004e54:	fb0e 110c 	mla	r1, lr, ip, r1
            sum1 += cols_8b[3]*ksrc[5];
 8004e58:	f995 8005 	ldrsb.w	r8, [r5, #5]
            sum0 += cols_8b[2]*ksrc[8];
 8004e5c:	fb07 1100 	mla	r1, r7, r0, r1
            sum0 = arm_nn_requantize(sum0 + biasR[0], *multiplier, *shift);
 8004e60:	4419      	add	r1, r3
            sum1 += cols_8b[3]*ksrc[5];
 8004e62:	9b02      	ldr	r3, [sp, #8]
 8004e64:	fb13 2308 	smlabb	r3, r3, r8, r2
            sum0 = arm_nn_requantize(sum0 + biasR[0], *multiplier, *shift);
 8004e68:	9a22      	ldr	r2, [sp, #136]	@ 0x88
            sum1 += cols_8b[1]*ksrc[6];
 8004e6a:	fb06 330e 	mla	r3, r6, lr, r3
            sum0 = arm_nn_requantize(sum0 + biasR[0], *multiplier, *shift);
 8004e6e:	6816      	ldr	r6, [r2, #0]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8004e70:	9a21      	ldr	r2, [sp, #132]	@ 0x84
            sum1 += cols_8b[2]*ksrc[7];
 8004e72:	fb0c 3307 	mla	r3, ip, r7, r3
            sum1 += cols_8b[3]*ksrc[8];
 8004e76:	f994 7007 	ldrsb.w	r7, [r4, #7]
 8004e7a:	6812      	ldr	r2, [r2, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8004e7c:	2e00      	cmp	r6, #0
 8004e7e:	fb10 3007 	smlabb	r0, r0, r7, r3
 8004e82:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8004e86:	f04f 0700 	mov.w	r7, #0
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8004e8a:	fa01 f103 	lsl.w	r1, r1, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8004e8e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004e92:	fbc1 3702 	smlal	r3, r7, r1, r2
    result = (int32_t)(mult.long_long >> 31);
 8004e96:	ea4f 73d3 	mov.w	r3, r3, lsr #31
 8004e9a:	ea43 0347 	orr.w	r3, r3, r7, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8004e9e:	dc0d      	bgt.n	8004ebc <depthwise_kernel3x3_stride1_inplace_kernel_CHW+0x48c>
 8004ea0:	4276      	negs	r6, r6
    const q31_t remainder_mask = (1 << exponent) - 1;
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	40b2      	lsls	r2, r6
 8004ea6:	3a01      	subs	r2, #1
    int32_t remainder = remainder_mask & dividend;
 8004ea8:	ea03 0102 	and.w	r1, r3, r2
    if (result < 0)
 8004eac:	4133      	asrs	r3, r6
    q31_t threshold = remainder_mask >> 1;
 8004eae:	ea4f 0262 	mov.w	r2, r2, asr #1
        threshold++;
 8004eb2:	bf48      	it	mi
 8004eb4:	3201      	addmi	r2, #1
    if (remainder > threshold)
 8004eb6:	428a      	cmp	r2, r1
        result++;
 8004eb8:	bfb8      	it	lt
 8004eba:	3301      	addlt	r3, #1
            sum0 += output_offset;
 8004ebc:	9a24      	ldr	r2, [sp, #144]	@ 0x90
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8004ebe:	2600      	movs	r6, #0
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8004ec0:	9906      	ldr	r1, [sp, #24]
            sum0 += output_offset;
 8004ec2:	4413      	add	r3, r2
            sum0 = TN_MAX(sum0, activation_min);
 8004ec4:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	bfb8      	it	lt
 8004eca:	4613      	movlt	r3, r2
            sum0 = TN_MIN(sum0, activation_max);
 8004ecc:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	bfa8      	it	ge
 8004ed2:	4613      	movge	r3, r2
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8004ed4:	9a01      	ldr	r2, [sp, #4]
 8004ed6:	1a52      	subs	r2, r2, r1
 8004ed8:	9905      	ldr	r1, [sp, #20]
 8004eda:	5453      	strb	r3, [r2, r1]
 8004edc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
            sum1 = arm_nn_requantize(sum1 + biasR[0], *multiplier, *shift);
 8004ee0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8004ee2:	6819      	ldr	r1, [r3, #0]
 8004ee4:	f8db 3000 	ldr.w	r3, [fp]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8004ee8:	2900      	cmp	r1, #0
 8004eea:	4418      	add	r0, r3
 8004eec:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
 8004ef0:	fa00 f003 	lsl.w	r0, r0, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8004ef4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	fbc0 2603 	smlal	r2, r6, r0, r3
    result = (int32_t)(mult.long_long >> 31);
 8004efc:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8004f00:	ea42 0246 	orr.w	r2, r2, r6, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8004f04:	dc0d      	bgt.n	8004f22 <depthwise_kernel3x3_stride1_inplace_kernel_CHW+0x4f2>
 8004f06:	4249      	negs	r1, r1
    const q31_t remainder_mask = (1 << exponent) - 1;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	408b      	lsls	r3, r1
 8004f0c:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 8004f0e:	ea02 0003 	and.w	r0, r2, r3
    if (result < 0)
 8004f12:	410a      	asrs	r2, r1
    q31_t threshold = remainder_mask >> 1;
 8004f14:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 8004f18:	bf48      	it	mi
 8004f1a:	3301      	addmi	r3, #1
    if (remainder > threshold)
 8004f1c:	4283      	cmp	r3, r0
        result++;
 8004f1e:	bfb8      	it	lt
 8004f20:	3201      	addlt	r2, #1
            sum1 += output_offset;
 8004f22:	9b24      	ldr	r3, [sp, #144]	@ 0x90
            cols_8b_iterptr += STRIDE * 2;
 8004f24:	f10a 0a02 	add.w	sl, sl, #2
        for (j = 0; j < output_x / 2; j++) {
 8004f28:	3502      	adds	r5, #2
 8004f2a:	3402      	adds	r4, #2
            sum1 += output_offset;
 8004f2c:	441a      	add	r2, r3
            sum1 = TN_MAX(sum1, activation_min);
 8004f2e:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8004f30:	429a      	cmp	r2, r3
 8004f32:	bfb8      	it	lt
 8004f34:	461a      	movlt	r2, r3
            sum1 = TN_MIN(sum1, activation_max);
 8004f36:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	bfa8      	it	ge
 8004f3c:	461a      	movge	r2, r3
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;
 8004f3e:	9b01      	ldr	r3, [sp, #4]
 8004f40:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < output_x / 2; j++) {
 8004f42:	9a07      	ldr	r2, [sp, #28]
 8004f44:	4413      	add	r3, r2
 8004f46:	9301      	str	r3, [sp, #4]
 8004f48:	9b03      	ldr	r3, [sp, #12]
 8004f4a:	4553      	cmp	r3, sl
 8004f4c:	f47f af3c 	bne.w	8004dc8 <depthwise_kernel3x3_stride1_inplace_kernel_CHW+0x398>
 8004f50:	e9dd ec0e 	ldrd	lr, ip, [sp, #56]	@ 0x38
 8004f54:	e9dd 6810 	ldrd	r6, r8, [sp, #64]	@ 0x40
        if (output_x & 1) {
 8004f58:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f5a:	f10e 0e01 	add.w	lr, lr, #1
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d072      	beq.n	8005048 <depthwise_kernel3x3_stride1_inplace_kernel_CHW+0x618>
            q31_t sum = bias[0] + biasR[0];
 8004f62:	9b04      	ldr	r3, [sp, #16]
            sum += cols_8b[0]*ksrc[0];
 8004f64:	9803      	ldr	r0, [sp, #12]
            q31_t sum = bias[0] + biasR[0];
 8004f66:	f8db 4000 	ldr.w	r4, [fp]
 8004f6a:	681b      	ldr	r3, [r3, #0]
            sum += cols_8b[0]*ksrc[0];
 8004f6c:	f990 1000 	ldrsb.w	r1, [r0]
            q31_t sum = bias[0] + biasR[0];
 8004f70:	4423      	add	r3, r4
            sum += cols_8b[0]*ksrc[0];
 8004f72:	f999 2000 	ldrsb.w	r2, [r9]
 8004f76:	fb11 3302 	smlabb	r3, r1, r2, r3
            sum += cols_8b[1]*ksrc[1];
 8004f7a:	f990 1001 	ldrsb.w	r1, [r0, #1]
 8004f7e:	f999 2001 	ldrsb.w	r2, [r9, #1]
 8004f82:	fb11 3302 	smlabb	r3, r1, r2, r3
            sum += cols_8b[2]*ksrc[2];
 8004f86:	f990 1002 	ldrsb.w	r1, [r0, #2]
 8004f8a:	f999 2002 	ldrsb.w	r2, [r9, #2]
 8004f8e:	fb11 3102 	smlabb	r1, r1, r2, r3
            cols_8b += column_x + 2;
 8004f92:	eb00 0308 	add.w	r3, r0, r8
            sum += cols_8b[0]*ksrc[3];
 8004f96:	f910 2008 	ldrsb.w	r2, [r0, r8]
 8004f9a:	f999 0003 	ldrsb.w	r0, [r9, #3]
 8004f9e:	fb12 1200 	smlabb	r2, r2, r0, r1
            sum += cols_8b[1]*ksrc[4];
 8004fa2:	f993 0001 	ldrsb.w	r0, [r3, #1]
 8004fa6:	f999 1004 	ldrsb.w	r1, [r9, #4]
 8004faa:	fb10 2101 	smlabb	r1, r0, r1, r2
            sum += cols_8b[2]*ksrc[5];
 8004fae:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8004fb2:	f999 0005 	ldrsb.w	r0, [r9, #5]
 8004fb6:	fb12 1200 	smlabb	r2, r2, r0, r1
            cols_8b += column_x + 2;
 8004fba:	eb03 0008 	add.w	r0, r3, r8
            sum += cols_8b[0]*ksrc[6];
 8004fbe:	f913 1008 	ldrsb.w	r1, [r3, r8]
 8004fc2:	f999 3006 	ldrsb.w	r3, [r9, #6]
 8004fc6:	fb11 2103 	smlabb	r1, r1, r3, r2
            sum += cols_8b[2]*ksrc[8];
 8004fca:	f990 3002 	ldrsb.w	r3, [r0, #2]
            sum += cols_8b[1]*ksrc[7];
 8004fce:	f990 2001 	ldrsb.w	r2, [r0, #1]
 8004fd2:	f999 0007 	ldrsb.w	r0, [r9, #7]
 8004fd6:	fb12 1200 	smlabb	r2, r2, r0, r1
            sum += cols_8b[2]*ksrc[8];
 8004fda:	f999 1008 	ldrsb.w	r1, [r9, #8]
 8004fde:	fb13 2101 	smlabb	r1, r3, r1, r2
            sum = arm_nn_requantize(sum + biasR[0], *multiplier, *shift);
 8004fe2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8004fe4:	6818      	ldr	r0, [r3, #0]
 8004fe6:	4421      	add	r1, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8004fe8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004fea:	2400      	movs	r4, #0
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8004fec:	ea20 72e0 	bic.w	r2, r0, r0, asr #31
 8004ff0:	2800      	cmp	r0, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8004ff2:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8004ff4:	fa01 f102 	lsl.w	r1, r1, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8004ff8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004ffc:	fbc1 2403 	smlal	r2, r4, r1, r3
    result = (int32_t)(mult.long_long >> 31);
 8005000:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8005004:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8005008:	dc0d      	bgt.n	8005026 <depthwise_kernel3x3_stride1_inplace_kernel_CHW+0x5f6>
 800500a:	4240      	negs	r0, r0
    const q31_t remainder_mask = (1 << exponent) - 1;
 800500c:	2201      	movs	r2, #1
 800500e:	4082      	lsls	r2, r0
 8005010:	3a01      	subs	r2, #1
    int32_t remainder = remainder_mask & dividend;
 8005012:	ea03 0102 	and.w	r1, r3, r2
    if (result < 0)
 8005016:	4103      	asrs	r3, r0
    q31_t threshold = remainder_mask >> 1;
 8005018:	ea4f 0262 	mov.w	r2, r2, asr #1
        threshold++;
 800501c:	bf48      	it	mi
 800501e:	3201      	addmi	r2, #1
    if (remainder > threshold)
 8005020:	4291      	cmp	r1, r2
        result++;
 8005022:	bfc8      	it	gt
 8005024:	3301      	addgt	r3, #1
            sum += output_offset;
 8005026:	9a24      	ldr	r2, [sp, #144]	@ 0x90
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 8005028:	9915      	ldr	r1, [sp, #84]	@ 0x54
            sum += output_offset;
 800502a:	4413      	add	r3, r2
            cols_8b_iterptr += STRIDE;
 800502c:	9a03      	ldr	r2, [sp, #12]
 800502e:	3201      	adds	r2, #1
 8005030:	9203      	str	r2, [sp, #12]
            sum = TN_MAX(sum, activation_min);
 8005032:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8005034:	4293      	cmp	r3, r2
 8005036:	bfb8      	it	lt
 8005038:	4613      	movlt	r3, r2
            sum = TN_MIN(sum, activation_max);
 800503a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800503c:	4293      	cmp	r3, r2
 800503e:	bfa8      	it	ge
 8005040:	4613      	movge	r3, r2
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 8005042:	ebac 0206 	sub.w	r2, ip, r6
 8005046:	5453      	strb	r3, [r2, r1]
        cols_8b_iterptr += 1 * 2;
 8005048:	9b03      	ldr	r3, [sp, #12]
    for (i = 0; i < output_y; i++) {
 800504a:	9a08      	ldr	r2, [sp, #32]
        cols_8b_iterptr += 1 * 2;
 800504c:	f103 0a02 	add.w	sl, r3, #2
    for (i = 0; i < output_y; i++) {
 8005050:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005052:	4413      	add	r3, r2
 8005054:	930d      	str	r3, [sp, #52]	@ 0x34
 8005056:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005058:	449c      	add	ip, r3
 800505a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800505c:	4573      	cmp	r3, lr
 800505e:	f43f ae6c 	beq.w	8004d3a <depthwise_kernel3x3_stride1_inplace_kernel_CHW+0x30a>
        for (j = 0; j < output_x / 2; j++) {
 8005062:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005064:	2b00      	cmp	r3, #0
 8005066:	f47f ae98 	bne.w	8004d9a <depthwise_kernel3x3_stride1_inplace_kernel_CHW+0x36a>
 800506a:	f8cd a00c 	str.w	sl, [sp, #12]
 800506e:	e773      	b.n	8004f58 <depthwise_kernel3x3_stride1_inplace_kernel_CHW+0x528>

08005070 <depthwise_kernel3x3_stride1_inplace_CHW>:
{
 8005070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005074:	b0b3      	sub	sp, #204	@ 0xcc
 8005076:	4691      	mov	r9, r2
 8005078:	468a      	mov	sl, r1
    for(i = 0; i < input_x + 2; i++){
 800507a:	1c4c      	adds	r4, r1, #1
{
 800507c:	f8bd 2118 	ldrh.w	r2, [sp, #280]	@ 0x118
    for(i = 0; i < input_x + 2; i++){
 8005080:	2500      	movs	r5, #0
{
 8005082:	900b      	str	r0, [sp, #44]	@ 0x2c
 8005084:	921d      	str	r2, [sp, #116]	@ 0x74
 8005086:	f8bd 211c 	ldrh.w	r2, [sp, #284]	@ 0x11c
 800508a:	9310      	str	r3, [sp, #64]	@ 0x40
 800508c:	921e      	str	r2, [sp, #120]	@ 0x78
    q7_t* cols_8b = (q7_t* )cols_8b_start;
 800508e:	9949      	ldr	r1, [sp, #292]	@ 0x124
{
 8005090:	f99d 2128 	ldrsb.w	r2, [sp, #296]	@ 0x128
 8005094:	e9dd 303f 	ldrd	r3, r0, [sp, #252]	@ 0xfc
    for(i = 0; i < input_x + 2; i++){
 8005098:	3501      	adds	r5, #1
        *cols_8b++ = PAD8;
 800509a:	f801 2b01 	strb.w	r2, [r1], #1
    for(i = 0; i < input_x + 2; i++){
 800509e:	b2ad      	uxth	r5, r5
 80050a0:	42a5      	cmp	r5, r4
 80050a2:	ddf9      	ble.n	8005098 <depthwise_kernel3x3_stride1_inplace_CHW+0x28>
    for(i = 0; i < input_y; i++){
 80050a4:	f1b9 0f00 	cmp.w	r9, #0
 80050a8:	d00c      	beq.n	80050c4 <depthwise_kernel3x3_stride1_inplace_CHW+0x54>
        *cols_8b++ = PAD8;
 80050aa:	460d      	mov	r5, r1
        cols_8b = (q7_t*)(cols_8b_start + 1 * (input_x) + 2); //skip 1 rows
 80050ac:	2600      	movs	r6, #0
 80050ae:	f10a 0702 	add.w	r7, sl, #2
    for(i = 0; i < input_y; i++){
 80050b2:	3601      	adds	r6, #1
        *cols_8b++ = PAD8;//left
 80050b4:	702a      	strb	r2, [r5, #0]
        *cols_8b++ = PAD8;//right
 80050b6:	443d      	add	r5, r7
    for(i = 0; i < input_y; i++){
 80050b8:	454e      	cmp	r6, r9
        *cols_8b++ = PAD8;//right
 80050ba:	f805 2c01 	strb.w	r2, [r5, #-1]
    for(i = 0; i < input_y; i++){
 80050be:	d1f8      	bne.n	80050b2 <depthwise_kernel3x3_stride1_inplace_CHW+0x42>
        *cols_8b++ = PAD8;//right
 80050c0:	fb07 1109 	mla	r1, r7, r9, r1
 80050c4:	f1aa 060a 	sub.w	r6, sl, #10
 80050c8:	f64f 75f3 	movw	r5, #65523	@ 0xfff3
 80050cc:	42ae      	cmp	r6, r5
 80050ce:	f200 81bd 	bhi.w	800544c <depthwise_kernel3x3_stride1_inplace_CHW+0x3dc>
 80050d2:	2700      	movs	r7, #0
 80050d4:	f10a 0502 	add.w	r5, sl, #2
 80050d8:	460e      	mov	r6, r1
 80050da:	f362 0707 	bfi	r7, r2, #0, #8
 80050de:	ea4f 0c95 	mov.w	ip, r5, lsr #2
 80050e2:	f362 270f 	bfi	r7, r2, #8, #8
 80050e6:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
 80050ea:	f362 4717 	bfi	r7, r2, #16, #8
 80050ee:	f362 671f 	bfi	r7, r2, #24, #8
        *cols_8b++ = PAD8;
 80050f2:	f846 7b04 	str.w	r7, [r6], #4
    for(i = 0; i < input_x + 2; i++){
 80050f6:	4566      	cmp	r6, ip
 80050f8:	d1fb      	bne.n	80050f2 <depthwise_kernel3x3_stride1_inplace_CHW+0x82>
 80050fa:	07ae      	lsls	r6, r5, #30
 80050fc:	d00e      	beq.n	800511c <depthwise_kernel3x3_stride1_inplace_CHW+0xac>
 80050fe:	f025 0503 	bic.w	r5, r5, #3
        *cols_8b++ = PAD8;
 8005102:	554a      	strb	r2, [r1, r5]
 8005104:	4429      	add	r1, r5
    for(i = 0; i < input_x + 2; i++){
 8005106:	b2ad      	uxth	r5, r5
 8005108:	1c6e      	adds	r6, r5, #1
 800510a:	b2b6      	uxth	r6, r6
 800510c:	42b4      	cmp	r4, r6
 800510e:	db05      	blt.n	800511c <depthwise_kernel3x3_stride1_inplace_CHW+0xac>
 8005110:	3502      	adds	r5, #2
        *cols_8b++ = PAD8;
 8005112:	704a      	strb	r2, [r1, #1]
    for(i = 0; i < input_x + 2; i++){
 8005114:	b2ad      	uxth	r5, r5
 8005116:	42ac      	cmp	r4, r5
 8005118:	db00      	blt.n	800511c <depthwise_kernel3x3_stride1_inplace_CHW+0xac>
        *cols_8b++ = PAD8;
 800511a:	708a      	strb	r2, [r1, #2]
    for (c = 0; c < input_ch; c++){
 800511c:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800511e:	2f00      	cmp	r7, #0
 8005120:	f000 8190 	beq.w	8005444 <depthwise_kernel3x3_stride1_inplace_CHW+0x3d4>
        cols_8b = (q7_t*)(cols_8b_start + 1 * (input_x) + 2); //skip 1 rows
 8005124:	9e49      	ldr	r6, [sp, #292]	@ 0x124
 8005126:	f10a 0102 	add.w	r1, sl, #2
 800512a:	f02a 0407 	bic.w	r4, sl, #7
 800512e:	f10a 32ff 	add.w	r2, sl, #4294967295	@ 0xffffffff
 8005132:	1871      	adds	r1, r6, r1
 8005134:	f02a 0503 	bic.w	r5, sl, #3
 8005138:	fa1f f882 	uxth.w	r8, r2
 800513c:	fb07 f202 	mul.w	r2, r7, r2
 8005140:	911f      	str	r1, [sp, #124]	@ 0x7c
            for(j = 0; j < input_x; j++){
 8005142:	1c61      	adds	r1, r4, #1
 8005144:	9231      	str	r2, [sp, #196]	@ 0xc4
 8005146:	ea4f 02da 	mov.w	r2, sl, lsr #3
 800514a:	b289      	uxth	r1, r1
 800514c:	46c3      	mov	fp, r8
 800514e:	00d2      	lsls	r2, r2, #3
 8005150:	9126      	str	r1, [sp, #152]	@ 0x98
 8005152:	1ca1      	adds	r1, r4, #2
 8005154:	922e      	str	r2, [sp, #184]	@ 0xb8
 8005156:	4622      	mov	r2, r4
 8005158:	b289      	uxth	r1, r1
 800515a:	b2ae      	uxth	r6, r5
 800515c:	9127      	str	r1, [sp, #156]	@ 0x9c
 800515e:	1ce1      	adds	r1, r4, #3
 8005160:	b289      	uxth	r1, r1
 8005162:	9128      	str	r1, [sp, #160]	@ 0xa0
 8005164:	1d21      	adds	r1, r4, #4
 8005166:	b289      	uxth	r1, r1
 8005168:	9129      	str	r1, [sp, #164]	@ 0xa4
 800516a:	1d61      	adds	r1, r4, #5
 800516c:	b289      	uxth	r1, r1
 800516e:	912a      	str	r1, [sp, #168]	@ 0xa8
 8005170:	1da1      	adds	r1, r4, #6
 8005172:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005174:	b289      	uxth	r1, r1
 8005176:	443c      	add	r4, r7
 8005178:	912b      	str	r1, [sp, #172]	@ 0xac
 800517a:	ea4f 019a 	mov.w	r1, sl, lsr #2
 800517e:	941c      	str	r4, [sp, #112]	@ 0x70
 8005180:	f108 0401 	add.w	r4, r8, #1
 8005184:	0089      	lsls	r1, r1, #2
 8005186:	940a      	str	r4, [sp, #40]	@ 0x28
 8005188:	fb08 7407 	mla	r4, r8, r7, r7
 800518c:	910d      	str	r1, [sp, #52]	@ 0x34
 800518e:	1c69      	adds	r1, r5, #1
 8005190:	9430      	str	r4, [sp, #192]	@ 0xc0
 8005192:	00fc      	lsls	r4, r7, #3
 8005194:	b289      	uxth	r1, r1
 8005196:	942d      	str	r4, [sp, #180]	@ 0xb4
 8005198:	00bc      	lsls	r4, r7, #2
 800519a:	910f      	str	r1, [sp, #60]	@ 0x3c
 800519c:	1ca9      	adds	r1, r5, #2
 800519e:	9424      	str	r4, [sp, #144]	@ 0x90
 80051a0:	eba7 0487 	sub.w	r4, r7, r7, lsl #2
 80051a4:	b289      	uxth	r1, r1
 80051a6:	9422      	str	r4, [sp, #136]	@ 0x88
 80051a8:	ebc7 0487 	rsb	r4, r7, r7, lsl #2
 80051ac:	9111      	str	r1, [sp, #68]	@ 0x44
 80051ae:	942f      	str	r4, [sp, #188]	@ 0xbc
 80051b0:	eb07 0487 	add.w	r4, r7, r7, lsl #2
 80051b4:	9425      	str	r4, [sp, #148]	@ 0x94
 80051b6:	b294      	uxth	r4, r2
 80051b8:	fb07 f202 	mul.w	r2, r7, r2
 80051bc:	9414      	str	r4, [sp, #80]	@ 0x50
 80051be:	9223      	str	r2, [sp, #140]	@ 0x8c
 80051c0:	f00a 0203 	and.w	r2, sl, #3
 80051c4:	920e      	str	r2, [sp, #56]	@ 0x38
        for(i = 0; i < input_y; i++){
 80051c6:	f1b9 0f00 	cmp.w	r9, #0
 80051ca:	d02a      	beq.n	8005222 <depthwise_kernel3x3_stride1_inplace_CHW+0x1b2>
 80051cc:	f1ba 0f00 	cmp.w	sl, #0
 80051d0:	d027      	beq.n	8005222 <depthwise_kernel3x3_stride1_inplace_CHW+0x1b2>
 80051d2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80051d4:	2a01      	cmp	r2, #1
 80051d6:	d16f      	bne.n	80052b8 <depthwise_kernel3x3_stride1_inplace_CHW+0x248>
 80051d8:	9f1f      	ldr	r7, [sp, #124]	@ 0x7c
 80051da:	f10b 0803 	add.w	r8, fp, #3
 80051de:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80051e0:	f04f 0e00 	mov.w	lr, #0
 80051e4:	f107 0c01 	add.w	ip, r7, #1
 80051e8:	eb07 020a 	add.w	r2, r7, sl
 80051ec:	e9cd 303f 	strd	r3, r0, [sp, #252]	@ 0xfc
            for(j = 0; j < input_x; j++){
 80051f0:	f1bb 0f05 	cmp.w	fp, #5
 80051f4:	d902      	bls.n	80051fc <depthwise_kernel3x3_stride1_inplace_CHW+0x18c>
 80051f6:	1b7b      	subs	r3, r7, r5
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d83d      	bhi.n	8005278 <depthwise_kernel3x3_stride1_inplace_CHW+0x208>
 80051fc:	1e69      	subs	r1, r5, #1
 80051fe:	463b      	mov	r3, r7
                *cols_8b++ = *src;// + input_offset;
 8005200:	f911 0f01 	ldrsb.w	r0, [r1, #1]!
 8005204:	f803 0f01 	strb.w	r0, [r3, #1]!
            for(j = 0; j < input_x; j++){
 8005208:	429a      	cmp	r2, r3
 800520a:	d1f9      	bne.n	8005200 <depthwise_kernel3x3_stride1_inplace_CHW+0x190>
        for(i = 0; i < input_y; i++){
 800520c:	f10e 0e01 	add.w	lr, lr, #1
                src += input_ch;
 8005210:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005212:	4447      	add	r7, r8
        for(i = 0; i < input_y; i++){
 8005214:	44c4      	add	ip, r8
 8005216:	45f1      	cmp	r9, lr
                src += input_ch;
 8005218:	441d      	add	r5, r3
        for(i = 0; i < input_y; i++){
 800521a:	4442      	add	r2, r8
 800521c:	d1e8      	bne.n	80051f0 <depthwise_kernel3x3_stride1_inplace_CHW+0x180>
 800521e:	e9dd 303f 	ldrd	r3, r0, [sp, #252]	@ 0xfc
        depthwise_kernel3x3_stride1_inplace_kernel_CHW(output_y, output_x, bias++, biasR++, ksrc, output_mult++, output_shift++, inplace_out,output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8005222:	993c      	ldr	r1, [sp, #240]	@ 0xf0
 8005224:	f103 0804 	add.w	r8, r3, #4
 8005228:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800522a:	1d04      	adds	r4, r0, #4
 800522c:	9100      	str	r1, [sp, #0]
 800522e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8005230:	9203      	str	r2, [sp, #12]
        input++;
 8005232:	3201      	adds	r2, #1
        depthwise_kernel3x3_stride1_inplace_kernel_CHW(output_y, output_x, bias++, biasR++, ksrc, output_mult++, output_shift++, inplace_out,output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8005234:	e9cd a108 	strd	sl, r1, [sp, #32]
 8005238:	9949      	ldr	r1, [sp, #292]	@ 0x124
        input++;
 800523a:	920b      	str	r2, [sp, #44]	@ 0x2c
        depthwise_kernel3x3_stride1_inplace_kernel_CHW(output_y, output_x, bias++, biasR++, ksrc, output_mult++, output_shift++, inplace_out,output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 800523c:	9107      	str	r1, [sp, #28]
 800523e:	9944      	ldr	r1, [sp, #272]	@ 0x110
 8005240:	9a3d      	ldr	r2, [sp, #244]	@ 0xf4
 8005242:	9106      	str	r1, [sp, #24]
 8005244:	9943      	ldr	r1, [sp, #268]	@ 0x10c
 8005246:	1d15      	adds	r5, r2, #4
 8005248:	e9cd 0301 	strd	r0, r3, [sp, #4]
        ksrc += 9;
 800524c:	9b3c      	ldr	r3, [sp, #240]	@ 0xf0
        depthwise_kernel3x3_stride1_inplace_kernel_CHW(output_y, output_x, bias++, biasR++, ksrc, output_mult++, output_shift++, inplace_out,output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 800524e:	9105      	str	r1, [sp, #20]
        ksrc += 9;
 8005250:	3309      	adds	r3, #9
        depthwise_kernel3x3_stride1_inplace_kernel_CHW(output_y, output_x, bias++, biasR++, ksrc, output_mult++, output_shift++, inplace_out,output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8005252:	9941      	ldr	r1, [sp, #260]	@ 0x104
        ksrc += 9;
 8005254:	933c      	str	r3, [sp, #240]	@ 0xf0
        depthwise_kernel3x3_stride1_inplace_kernel_CHW(output_y, output_x, bias++, biasR++, ksrc, output_mult++, output_shift++, inplace_out,output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8005256:	9b3e      	ldr	r3, [sp, #248]	@ 0xf8
 8005258:	9104      	str	r1, [sp, #16]
 800525a:	1d1f      	adds	r7, r3, #4
 800525c:	e9dd 101d 	ldrd	r1, r0, [sp, #116]	@ 0x74
 8005260:	f7ff fbe6 	bl	8004a30 <depthwise_kernel3x3_stride1_inplace_kernel_CHW>
    for (c = 0; c < input_ch; c++){
 8005264:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005266:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8005268:	429a      	cmp	r2, r3
 800526a:	f000 80eb 	beq.w	8005444 <depthwise_kernel3x3_stride1_inplace_CHW+0x3d4>
        depthwise_kernel3x3_stride1_inplace_kernel_CHW(output_y, output_x, bias++, biasR++, ksrc, output_mult++, output_shift++, inplace_out,output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 800526e:	4620      	mov	r0, r4
 8005270:	4643      	mov	r3, r8
 8005272:	e9cd 573d 	strd	r5, r7, [sp, #244]	@ 0xf4
 8005276:	e7a6      	b.n	80051c6 <depthwise_kernel3x3_stride1_inplace_CHW+0x156>
 8005278:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800527a:	462b      	mov	r3, r5
 800527c:	194c      	adds	r4, r1, r5
        for(i = 0; i < input_y; i++){
 800527e:	4661      	mov	r1, ip
                *cols_8b++ = *src;// + input_offset;
 8005280:	f853 0b04 	ldr.w	r0, [r3], #4
 8005284:	429c      	cmp	r4, r3
 8005286:	f841 0b04 	str.w	r0, [r1], #4
            for(j = 0; j < input_x; j++){
 800528a:	d1f9      	bne.n	8005280 <depthwise_kernel3x3_stride1_inplace_CHW+0x210>
 800528c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800528e:	eb0c 0306 	add.w	r3, ip, r6
 8005292:	19a9      	adds	r1, r5, r6
 8005294:	2800      	cmp	r0, #0
 8005296:	d0b9      	beq.n	800520c <depthwise_kernel3x3_stride1_inplace_CHW+0x19c>
                *cols_8b++ = *src;// + input_offset;
 8005298:	57a8      	ldrsb	r0, [r5, r6]
 800529a:	f80c 0006 	strb.w	r0, [ip, r6]
            for(j = 0; j < input_x; j++){
 800529e:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80052a0:	4550      	cmp	r0, sl
 80052a2:	d2b3      	bcs.n	800520c <depthwise_kernel3x3_stride1_inplace_CHW+0x19c>
                *cols_8b++ = *src;// + input_offset;
 80052a4:	f991 0001 	ldrsb.w	r0, [r1, #1]
 80052a8:	7058      	strb	r0, [r3, #1]
            for(j = 0; j < input_x; j++){
 80052aa:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80052ac:	4582      	cmp	sl, r0
 80052ae:	d9ad      	bls.n	800520c <depthwise_kernel3x3_stride1_inplace_CHW+0x19c>
                *cols_8b++ = *src;// + input_offset;
 80052b0:	f991 1002 	ldrsb.w	r1, [r1, #2]
 80052b4:	7099      	strb	r1, [r3, #2]
            for(j = 0; j < input_x; j++){
 80052b6:	e7a9      	b.n	800520c <depthwise_kernel3x3_stride1_inplace_CHW+0x19c>
 80052b8:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80052ba:	f10b 0403 	add.w	r4, fp, #3
 80052be:	9931      	ldr	r1, [sp, #196]	@ 0xc4
        for(i = 0; i < input_y; i++){
 80052c0:	f04f 0e00 	mov.w	lr, #0
 80052c4:	46ac      	mov	ip, r5
 80052c6:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 80052c8:	1869      	adds	r1, r5, r1
 80052ca:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
 80052cc:	1c57      	adds	r7, r2, #1
 80052ce:	f8cd b048 	str.w	fp, [sp, #72]	@ 0x48
 80052d2:	3501      	adds	r5, #1
 80052d4:	f8cd 904c 	str.w	r9, [sp, #76]	@ 0x4c
 80052d8:	4452      	add	r2, sl
 80052da:	46a1      	mov	r9, r4
 80052dc:	9520      	str	r5, [sp, #128]	@ 0x80
 80052de:	f00a 0507 	and.w	r5, sl, #7
 80052e2:	f8dd b0b4 	ldr.w	fp, [sp, #180]	@ 0xb4
 80052e6:	f8dd 80c0 	ldr.w	r8, [sp, #192]	@ 0xc0
 80052ea:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80052ec:	9521      	str	r5, [sp, #132]	@ 0x84
 80052ee:	962c      	str	r6, [sp, #176]	@ 0xb0
 80052f0:	e9cd 303f 	strd	r3, r0, [sp, #252]	@ 0xfc
 80052f4:	4670      	mov	r0, lr
 80052f6:	f8dd e0bc 	ldr.w	lr, [sp, #188]	@ 0xbc
            for(j = 0; j < input_x; j++){
 80052fa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80052fc:	2b1b      	cmp	r3, #27
 80052fe:	d903      	bls.n	8005308 <depthwise_kernel3x3_stride1_inplace_CHW+0x298>
 8005300:	428f      	cmp	r7, r1
 8005302:	d819      	bhi.n	8005338 <depthwise_kernel3x3_stride1_inplace_CHW+0x2c8>
 8005304:	4594      	cmp	ip, r2
 8005306:	d817      	bhi.n	8005338 <depthwise_kernel3x3_stride1_inplace_CHW+0x2c8>
 8005308:	1e7d      	subs	r5, r7, #1
            cols_8b += 1;//skip front
 800530a:	4663      	mov	r3, ip
                *cols_8b++ = *src;// + input_offset;
 800530c:	f993 6000 	ldrsb.w	r6, [r3]
                src += input_ch;
 8005310:	4423      	add	r3, r4
                *cols_8b++ = *src;// + input_offset;
 8005312:	f805 6f01 	strb.w	r6, [r5, #1]!
            for(j = 0; j < input_x; j++){
 8005316:	4295      	cmp	r5, r2
 8005318:	d1f8      	bne.n	800530c <depthwise_kernel3x3_stride1_inplace_CHW+0x29c>
        for(i = 0; i < input_y; i++){
 800531a:	3001      	adds	r0, #1
 800531c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
                src += input_ch;
 800531e:	44c4      	add	ip, r8
        for(i = 0; i < input_y; i++){
 8005320:	444f      	add	r7, r9
 8005322:	4298      	cmp	r0, r3
 8005324:	444a      	add	r2, r9
 8005326:	4441      	add	r1, r8
 8005328:	d1e7      	bne.n	80052fa <depthwise_kernel3x3_stride1_inplace_CHW+0x28a>
 800532a:	4699      	mov	r9, r3
 800532c:	9e2c      	ldr	r6, [sp, #176]	@ 0xb0
 800532e:	f8dd b048 	ldr.w	fp, [sp, #72]	@ 0x48
 8005332:	e9dd 303f 	ldrd	r3, r0, [sp, #252]	@ 0xfc
 8005336:	e774      	b.n	8005222 <depthwise_kernel3x3_stride1_inplace_CHW+0x1b2>
 8005338:	9d20      	ldr	r5, [sp, #128]	@ 0x80
 800533a:	1e7b      	subs	r3, r7, #1
            cols_8b += 1;//skip front
 800533c:	f8cd a06c 	str.w	sl, [sp, #108]	@ 0x6c
 8005340:	18eb      	adds	r3, r5, r3
 8005342:	9d24      	ldr	r5, [sp, #144]	@ 0x90
 8005344:	f8dd a094 	ldr.w	sl, [sp, #148]	@ 0x94
 8005348:	930c      	str	r3, [sp, #48]	@ 0x30
 800534a:	eb05 060c 	add.w	r6, r5, ip
 800534e:	4663      	mov	r3, ip
 8005350:	463d      	mov	r5, r7
 8005352:	e9cd 1819 	strd	r1, r8, [sp, #100]	@ 0x64
 8005356:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 800535a:	e9cd 7917 	strd	r7, r9, [sp, #92]	@ 0x5c
 800535e:	e9cd c015 	strd	ip, r0, [sp, #84]	@ 0x54
 8005362:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 8005366:	920c      	str	r2, [sp, #48]	@ 0x30
                *cols_8b++ = *src;// + input_offset;
 8005368:	f893 c000 	ldrb.w	ip, [r3]
 800536c:	2200      	movs	r2, #0
 800536e:	f816 0008 	ldrb.w	r0, [r6, r8]
 8005372:	3508      	adds	r5, #8
 8005374:	f813 7024 	ldrb.w	r7, [r3, r4, lsl #2]
 8005378:	4611      	mov	r1, r2
 800537a:	f36c 0207 	bfi	r2, ip, #0, #8
 800537e:	f367 0107 	bfi	r1, r7, #0, #8
 8005382:	f360 220f 	bfi	r2, r0, #8, #8
 8005386:	f813 000a 	ldrb.w	r0, [r3, sl]
 800538a:	f360 210f 	bfi	r1, r0, #8, #8
 800538e:	f813 0014 	ldrb.w	r0, [r3, r4, lsl #1]
 8005392:	f360 4217 	bfi	r2, r0, #16, #8
 8005396:	f816 0014 	ldrb.w	r0, [r6, r4, lsl #1]
 800539a:	f360 4117 	bfi	r1, r0, #16, #8
 800539e:	f813 000e 	ldrb.w	r0, [r3, lr]
 80053a2:	445b      	add	r3, fp
 80053a4:	f360 621f 	bfi	r2, r0, #24, #8
 80053a8:	f816 000e 	ldrb.w	r0, [r6, lr]
 80053ac:	445e      	add	r6, fp
 80053ae:	f360 611f 	bfi	r1, r0, #24, #8
 80053b2:	f845 2c08 	str.w	r2, [r5, #-8]
 80053b6:	f845 1c04 	str.w	r1, [r5, #-4]
            for(j = 0; j < input_x; j++){
 80053ba:	454d      	cmp	r5, r9
 80053bc:	d1d4      	bne.n	8005368 <depthwise_kernel3x3_stride1_inplace_CHW+0x2f8>
 80053be:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80053c0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80053c2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80053c4:	f8dd a06c 	ldr.w	sl, [sp, #108]	@ 0x6c
 80053c8:	e9dd 7917 	ldrd	r7, r9, [sp, #92]	@ 0x5c
 80053cc:	e9dd c015 	ldrd	ip, r0, [sp, #84]	@ 0x54
 80053d0:	18fb      	adds	r3, r7, r3
 80053d2:	eb0c 0506 	add.w	r5, ip, r6
 80053d6:	930c      	str	r3, [sp, #48]	@ 0x30
 80053d8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80053da:	e9dd 1819 	ldrd	r1, r8, [sp, #100]	@ 0x64
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d09b      	beq.n	800531a <depthwise_kernel3x3_stride1_inplace_CHW+0x2aa>
                *cols_8b++ = *src;// + input_offset;
 80053e2:	f91c 6006 	ldrsb.w	r6, [ip, r6]
 80053e6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80053e8:	54fe      	strb	r6, [r7, r3]
                src += input_ch;
 80053ea:	192e      	adds	r6, r5, r4
            for(j = 0; j < input_x; j++){
 80053ec:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80053ee:	459a      	cmp	sl, r3
 80053f0:	d993      	bls.n	800531a <depthwise_kernel3x3_stride1_inplace_CHW+0x2aa>
                *cols_8b++ = *src;// + input_offset;
 80053f2:	572d      	ldrsb	r5, [r5, r4]
 80053f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80053f6:	705d      	strb	r5, [r3, #1]
                src += input_ch;
 80053f8:	1935      	adds	r5, r6, r4
            for(j = 0; j < input_x; j++){
 80053fa:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80053fc:	459a      	cmp	sl, r3
 80053fe:	d98c      	bls.n	800531a <depthwise_kernel3x3_stride1_inplace_CHW+0x2aa>
                *cols_8b++ = *src;// + input_offset;
 8005400:	5736      	ldrsb	r6, [r6, r4]
 8005402:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005404:	709e      	strb	r6, [r3, #2]
                src += input_ch;
 8005406:	192e      	adds	r6, r5, r4
            for(j = 0; j < input_x; j++){
 8005408:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800540a:	459a      	cmp	sl, r3
 800540c:	d985      	bls.n	800531a <depthwise_kernel3x3_stride1_inplace_CHW+0x2aa>
                *cols_8b++ = *src;// + input_offset;
 800540e:	572d      	ldrsb	r5, [r5, r4]
 8005410:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005412:	70dd      	strb	r5, [r3, #3]
                src += input_ch;
 8005414:	1935      	adds	r5, r6, r4
            for(j = 0; j < input_x; j++){
 8005416:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8005418:	459a      	cmp	sl, r3
 800541a:	f67f af7e 	bls.w	800531a <depthwise_kernel3x3_stride1_inplace_CHW+0x2aa>
                *cols_8b++ = *src;// + input_offset;
 800541e:	5736      	ldrsb	r6, [r6, r4]
 8005420:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005422:	711e      	strb	r6, [r3, #4]
                src += input_ch;
 8005424:	192e      	adds	r6, r5, r4
            for(j = 0; j < input_x; j++){
 8005426:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8005428:	459a      	cmp	sl, r3
 800542a:	f67f af76 	bls.w	800531a <depthwise_kernel3x3_stride1_inplace_CHW+0x2aa>
                *cols_8b++ = *src;// + input_offset;
 800542e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005430:	572d      	ldrsb	r5, [r5, r4]
 8005432:	715d      	strb	r5, [r3, #5]
            for(j = 0; j < input_x; j++){
 8005434:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8005436:	459a      	cmp	sl, r3
 8005438:	f67f af6f 	bls.w	800531a <depthwise_kernel3x3_stride1_inplace_CHW+0x2aa>
                *cols_8b++ = *src;// + input_offset;
 800543c:	5735      	ldrsb	r5, [r6, r4]
 800543e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005440:	719d      	strb	r5, [r3, #6]
            for(j = 0; j < input_x; j++){
 8005442:	e76a      	b.n	800531a <depthwise_kernel3x3_stride1_inplace_CHW+0x2aa>
}
 8005444:	2000      	movs	r0, #0
 8005446:	b033      	add	sp, #204	@ 0xcc
 8005448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cols_8b = (q7_t*)(cols_8b_start + 1 * (input_x) + 2); //skip 1 rows
 800544c:	2500      	movs	r5, #0
    for(i = 0; i < input_x + 2; i++){
 800544e:	3501      	adds	r5, #1
        *cols_8b++ = PAD8;
 8005450:	f801 2b01 	strb.w	r2, [r1], #1
    for(i = 0; i < input_x + 2; i++){
 8005454:	b2ad      	uxth	r5, r5
 8005456:	42ac      	cmp	r4, r5
 8005458:	daf9      	bge.n	800544e <depthwise_kernel3x3_stride1_inplace_CHW+0x3de>
 800545a:	e65f      	b.n	800511c <depthwise_kernel3x3_stride1_inplace_CHW+0xac>

0800545c <depthwise_kernel5x5_stride1_inplace_kernel_CHW>:
        const uint16_t output_y, const uint16_t output_x,
        const int32_t *bias, const int32_t *biasR, const q7_t *ksrc, const int32_t *multiplier,
        const int32_t *shift, q7_t *output, const int32_t output_offset,
        const int32_t activation_min, const int32_t activation_max,
        q7_t *cols_8b_iterptr, const uint16_t column_x, int channel_offset)
{
 800545c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005460:	4604      	mov	r4, r0
 8005462:	b09d      	sub	sp, #116	@ 0x74
 8005464:	469b      	mov	fp, r3
 8005466:	f8dd a098 	ldr.w	sl, [sp, #152]	@ 0x98
 800546a:	982d      	ldr	r0, [sp, #180]	@ 0xb4
 800546c:	f8bd 80b8 	ldrh.w	r8, [sp, #184]	@ 0xb8
 8005470:	f8dd e0bc 	ldr.w	lr, [sp, #188]	@ 0xbc
 8005474:	920d      	str	r2, [sp, #52]	@ 0x34
    #define STRIDE 1
    int i, j;
    /* MACs for each output */
    for (i = 0; i < output_y; i++) {
 8005476:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005478:	2c00      	cmp	r4, #0
 800547a:	f000 828b 	beq.w	8005994 <depthwise_kernel5x5_stride1_inplace_kernel_CHW+0x538>
 800547e:	4689      	mov	r9, r1
        for (j = 0; j < output_x / 2; j++) {
 8005480:	2601      	movs	r6, #1
 8005482:	084a      	lsrs	r2, r1, #1
 8005484:	f108 0104 	add.w	r1, r8, #4
 8005488:	f109 33ff 	add.w	r3, r9, #4294967295	@ 0xffffffff
    for (i = 0; i < output_y; i++) {
 800548c:	f04f 0c00 	mov.w	ip, #0
        for (j = 0; j < output_x / 2; j++) {
 8005490:	9216      	str	r2, [sp, #88]	@ 0x58
 8005492:	fb0e f303 	mul.w	r3, lr, r3
 8005496:	9104      	str	r1, [sp, #16]
 8005498:	931b      	str	r3, [sp, #108]	@ 0x6c
 800549a:	ea09 0306 	and.w	r3, r9, r6
 800549e:	960f      	str	r6, [sp, #60]	@ 0x3c
 80054a0:	9315      	str	r3, [sp, #84]	@ 0x54
 80054a2:	fb0e f309 	mul.w	r3, lr, r9
 80054a6:	f8cd 905c 	str.w	r9, [sp, #92]	@ 0x5c
 80054aa:	9314      	str	r3, [sp, #80]	@ 0x50
 80054ac:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80054ae:	f8cd b014 	str.w	fp, [sp, #20]
 80054b2:	eb03 070e 	add.w	r7, r3, lr
 80054b6:	fa01 f306 	lsl.w	r3, r1, r6
 80054ba:	9318      	str	r3, [sp, #96]	@ 0x60
 80054bc:	ea4f 0388 	mov.w	r3, r8, lsl #2
 80054c0:	9319      	str	r3, [sp, #100]	@ 0x64
 80054c2:	fa0e f306 	lsl.w	r3, lr, r6
 80054c6:	930e      	str	r3, [sp, #56]	@ 0x38
 80054c8:	fa02 f306 	lsl.w	r3, r2, r6
 80054cc:	931a      	str	r3, [sp, #104]	@ 0x68
 80054ce:	f108 0305 	add.w	r3, r8, #5
 80054d2:	9306      	str	r3, [sp, #24]
 80054d4:	f108 0306 	add.w	r3, r8, #6
 80054d8:	9307      	str	r3, [sp, #28]
 80054da:	f108 0307 	add.w	r3, r8, #7
 80054de:	9308      	str	r3, [sp, #32]
 80054e0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	f000 8259 	beq.w	800599a <depthwise_kernel5x5_stride1_inplace_kernel_CHW+0x53e>
            /* requantize */
            sum0 = arm_nn_requantize(sum0 + biasR[0], *multiplier, *shift);
            sum0 += output_offset;
            sum0 = TN_MAX(sum0, activation_min);
            sum0 = TN_MIN(sum0, activation_max);
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 80054e8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80054ea:	9701      	str	r7, [sp, #4]
 80054ec:	1e53      	subs	r3, r2, #1
 80054ee:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80054f2:	f8cd e0bc 	str.w	lr, [sp, #188]	@ 0xbc
 80054f6:	fb0e f303 	mul.w	r3, lr, r3
 80054fa:	930c      	str	r3, [sp, #48]	@ 0x30
 80054fc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80054fe:	18c5      	adds	r5, r0, r3
 8005500:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005502:	eb00 0b03 	add.w	fp, r0, r3
 8005506:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8005508:	18c3      	adds	r3, r0, r3
 800550a:	f8cd b000 	str.w	fp, [sp]
 800550e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005510:	fb0e f302 	mul.w	r3, lr, r2
 8005514:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005516:	f108 0308 	add.w	r3, r8, #8
 800551a:	9302      	str	r3, [sp, #8]
 800551c:	f108 0309 	add.w	r3, r8, #9
 8005520:	e9cd 7c10 	strd	r7, ip, [sp, #64]	@ 0x40
 8005524:	9303      	str	r3, [sp, #12]
            q31_t sum0 = bias[0] + biasR[0];
 8005526:	9b05      	ldr	r3, [sp, #20]
            sum1 += cols_8b[1]*ksrc[0];
 8005528:	f990 4001 	ldrsb.w	r4, [r0, #1]
            q31_t sum0 = bias[0] + biasR[0];
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
            sum0 += cols_8b[0]*ksrc[0];
 8005530:	f990 1000 	ldrsb.w	r1, [r0]
            q31_t sum0 = bias[0] + biasR[0];
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	9209      	str	r2, [sp, #36]	@ 0x24
 8005538:	4413      	add	r3, r2
            sum0 += cols_8b[0]*ksrc[0];
 800553a:	f99a 2000 	ldrsb.w	r2, [sl]
            sum0 += cols_8b[0]*ksrc[5];
 800553e:	f99a 9005 	ldrsb.w	r9, [sl, #5]
            sum0 += cols_8b[0]*ksrc[0];
 8005542:	fb12 3101 	smlabb	r1, r2, r1, r3
            sum1 += cols_8b[1]*ksrc[0];
 8005546:	fb04 3302 	mla	r3, r4, r2, r3
            sum0 += cols_8b[1]*ksrc[1];
 800554a:	f99a 2001 	ldrsb.w	r2, [sl, #1]
            sum0 += cols_8b[1]*ksrc[6];
 800554e:	f99a e006 	ldrsb.w	lr, [sl, #6]
            sum0 += cols_8b[1]*ksrc[1];
 8005552:	fb02 1104 	mla	r1, r2, r4, r1
            sum1 += cols_8b[2]*ksrc[1];
 8005556:	f990 4002 	ldrsb.w	r4, [r0, #2]
            sum0 += cols_8b[2]*ksrc[7];
 800555a:	f99a 7007 	ldrsb.w	r7, [sl, #7]
            sum1 += cols_8b[2]*ksrc[1];
 800555e:	fb04 3302 	mla	r3, r4, r2, r3
            sum0 += cols_8b[2]*ksrc[2];
 8005562:	f99a 2002 	ldrsb.w	r2, [sl, #2]
            sum1 += cols_8b[3]*ksrc[7];
 8005566:	9e08      	ldr	r6, [sp, #32]
            sum0 += cols_8b[2]*ksrc[2];
 8005568:	fb02 1104 	mla	r1, r2, r4, r1
            sum1 += cols_8b[3]*ksrc[2];
 800556c:	f990 4003 	ldrsb.w	r4, [r0, #3]
            sum1 += cols_8b[3]*ksrc[7];
 8005570:	f910 c006 	ldrsb.w	ip, [r0, r6]
            sum1 += cols_8b[3]*ksrc[2];
 8005574:	fb04 3302 	mla	r3, r4, r2, r3
            sum0 += cols_8b[3]*ksrc[3];
 8005578:	f99a 2003 	ldrsb.w	r2, [sl, #3]
            sum0 += cols_8b[3]*ksrc[8];
 800557c:	f99a 6008 	ldrsb.w	r6, [sl, #8]
            sum0 += cols_8b[3]*ksrc[3];
 8005580:	fb02 1104 	mla	r1, r2, r4, r1
            sum1 += cols_8b[4]*ksrc[3];
 8005584:	f990 4004 	ldrsb.w	r4, [r0, #4]
 8005588:	fb04 3302 	mla	r3, r4, r2, r3
            sum0 += cols_8b[4]*ksrc[4];
 800558c:	f99a 2004 	ldrsb.w	r2, [sl, #4]
 8005590:	fb02 1104 	mla	r1, r2, r4, r1
            sum0 += cols_8b[0]*ksrc[5];
 8005594:	9c04      	ldr	r4, [sp, #16]
 8005596:	5704      	ldrsb	r4, [r0, r4]
 8005598:	fb19 1404 	smlabb	r4, r9, r4, r1
            sum1 += cols_8b[1]*ksrc[5];
 800559c:	9906      	ldr	r1, [sp, #24]
 800559e:	f910 b001 	ldrsb.w	fp, [r0, r1]
            sum1 += cols_8b[2]*ksrc[6];
 80055a2:	9907      	ldr	r1, [sp, #28]
            sum0 += cols_8b[1]*ksrc[6];
 80055a4:	fb0e 440b 	mla	r4, lr, fp, r4
            sum1 += cols_8b[2]*ksrc[6];
 80055a8:	f910 8001 	ldrsb.w	r8, [r0, r1]
            sum1 += cols_8b[5]*ksrc[4];
 80055ac:	f990 1005 	ldrsb.w	r1, [r0, #5]
            sum0 += cols_8b[2]*ksrc[7];
 80055b0:	fb07 4408 	mla	r4, r7, r8, r4
            sum1 += cols_8b[5]*ksrc[4];
 80055b4:	fb11 3102 	smlabb	r1, r1, r2, r3
            sum1 += cols_8b[4]*ksrc[8];
 80055b8:	9b02      	ldr	r3, [sp, #8]
            sum0 += cols_8b[3]*ksrc[8];
 80055ba:	fb06 440c 	mla	r4, r6, ip, r4
            sum1 += cols_8b[1]*ksrc[5];
 80055be:	fb0b 1109 	mla	r1, fp, r9, r1
            sum0 += cols_8b[0]*ksrc[10];
 80055c2:	f99a 900a 	ldrsb.w	r9, [sl, #10]
            sum1 += cols_8b[2]*ksrc[6];
 80055c6:	fb08 110e 	mla	r1, r8, lr, r1
            sum1 += cols_8b[3]*ksrc[7];
 80055ca:	fb0c 1107 	mla	r1, ip, r7, r1
            sum1 += cols_8b[4]*ksrc[8];
 80055ce:	56c7      	ldrsb	r7, [r0, r3]
            sum0 += cols_8b[4]*ksrc[9];
 80055d0:	f99a 3009 	ldrsb.w	r3, [sl, #9]
            sum1 += cols_8b[4]*ksrc[8];
 80055d4:	fb07 1206 	mla	r2, r7, r6, r1
            sum0 += cols_8b[4]*ksrc[9];
 80055d8:	fb03 4707 	mla	r7, r3, r7, r4
            sum0 += cols_8b[0]*ksrc[10];
 80055dc:	f995 4000 	ldrsb.w	r4, [r5]
            sum1 += cols_8b[5]*ksrc[9];
 80055e0:	9903      	ldr	r1, [sp, #12]
            sum1 += cols_8b[1]*ksrc[10];
 80055e2:	f995 b001 	ldrsb.w	fp, [r5, #1]
            sum0 += cols_8b[0]*ksrc[10];
 80055e6:	fb19 7404 	smlabb	r4, r9, r4, r7
            sum1 += cols_8b[5]*ksrc[9];
 80055ea:	5641      	ldrsb	r1, [r0, r1]
            sum0 += cols_8b[1]*ksrc[11];
 80055ec:	f99a e00b 	ldrsb.w	lr, [sl, #11]
            sum1 += cols_8b[5]*ksrc[9];
 80055f0:	fb11 2103 	smlabb	r1, r1, r3, r2
            sum1 += cols_8b[2]*ksrc[11];
 80055f4:	f995 8002 	ldrsb.w	r8, [r5, #2]
            sum0 += cols_8b[2]*ksrc[12];
 80055f8:	f99a 700c 	ldrsb.w	r7, [sl, #12]
            sum0 += cols_8b[1]*ksrc[11];
 80055fc:	fb0e 440b 	mla	r4, lr, fp, r4
            sum1 += cols_8b[1]*ksrc[10];
 8005600:	fb0b 1109 	mla	r1, fp, r9, r1
            sum1 += cols_8b[3]*ksrc[12];
 8005604:	f995 c003 	ldrsb.w	ip, [r5, #3]
            sum0 += cols_8b[3]*ksrc[13];
 8005608:	f99a 600d 	ldrsb.w	r6, [sl, #13]
            sum0 += cols_8b[2]*ksrc[12];
 800560c:	fb07 4408 	mla	r4, r7, r8, r4
            sum1 += cols_8b[2]*ksrc[11];
 8005610:	fb08 110e 	mla	r1, r8, lr, r1
            sum1 += cols_8b[4]*ksrc[13];
 8005614:	f995 2004 	ldrsb.w	r2, [r5, #4]
            sum0 += cols_8b[3]*ksrc[13];
 8005618:	fb06 440c 	mla	r4, r6, ip, r4
            sum0 += cols_8b[0]*ksrc[15];
 800561c:	f99a 900f 	ldrsb.w	r9, [sl, #15]
            sum1 += cols_8b[3]*ksrc[12];
 8005620:	fb0c 1107 	mla	r1, ip, r7, r1
            sum1 += cols_8b[1]*ksrc[15];
 8005624:	9f06      	ldr	r7, [sp, #24]
            sum0 += cols_8b[1]*ksrc[16];
 8005626:	f99a e010 	ldrsb.w	lr, [sl, #16]
            sum1 += cols_8b[4]*ksrc[13];
 800562a:	fb02 1306 	mla	r3, r2, r6, r1
            sum0 += cols_8b[4]*ksrc[14];
 800562e:	f99a 100e 	ldrsb.w	r1, [sl, #14]
            sum1 += cols_8b[1]*ksrc[15];
 8005632:	f915 b007 	ldrsb.w	fp, [r5, r7]
            sum0 += cols_8b[4]*ksrc[14];
 8005636:	fb01 4202 	mla	r2, r1, r2, r4
            sum0 += cols_8b[0]*ksrc[15];
 800563a:	9c04      	ldr	r4, [sp, #16]
            sum1 += cols_8b[2]*ksrc[16];
 800563c:	9f07      	ldr	r7, [sp, #28]
            sum0 += cols_8b[0]*ksrc[15];
 800563e:	572c      	ldrsb	r4, [r5, r4]
            sum1 += cols_8b[2]*ksrc[16];
 8005640:	f915 8007 	ldrsb.w	r8, [r5, r7]
            sum0 += cols_8b[0]*ksrc[15];
 8005644:	fb19 2404 	smlabb	r4, r9, r4, r2
            sum1 += cols_8b[5]*ksrc[14];
 8005648:	f995 2005 	ldrsb.w	r2, [r5, #5]
            sum0 += cols_8b[2]*ksrc[17];
 800564c:	f99a 7011 	ldrsb.w	r7, [sl, #17]
            sum1 += cols_8b[5]*ksrc[14];
 8005650:	fb12 3201 	smlabb	r2, r2, r1, r3
            sum0 += cols_8b[1]*ksrc[16];
 8005654:	fb0e 440b 	mla	r4, lr, fp, r4
            sum1 += cols_8b[3]*ksrc[17];
 8005658:	9e08      	ldr	r6, [sp, #32]
            sum1 += cols_8b[1]*ksrc[15];
 800565a:	fb0b 2209 	mla	r2, fp, r9, r2
            sum1 += cols_8b[4]*ksrc[18];
 800565e:	9b02      	ldr	r3, [sp, #8]
            sum1 += cols_8b[3]*ksrc[17];
 8005660:	f915 c006 	ldrsb.w	ip, [r5, r6]
            sum0 += cols_8b[2]*ksrc[17];
 8005664:	fb07 4408 	mla	r4, r7, r8, r4
            sum0 += cols_8b[3]*ksrc[18];
 8005668:	f99a 6012 	ldrsb.w	r6, [sl, #18]
            sum1 += cols_8b[2]*ksrc[16];
 800566c:	fb08 220e 	mla	r2, r8, lr, r2
            sum1 += cols_8b[4]*ksrc[18];
 8005670:	56eb      	ldrsb	r3, [r5, r3]
            sum0 += cols_8b[3]*ksrc[18];
 8005672:	fb06 440c 	mla	r4, r6, ip, r4
            sum0 += cols_8b[4]*ksrc[19];
 8005676:	f99a 9013 	ldrsb.w	r9, [sl, #19]
            sum1 += cols_8b[3]*ksrc[17];
 800567a:	fb0c 2207 	mla	r2, ip, r7, r2
            sum0 += cols_8b[0]*ksrc[20];
 800567e:	f99a 8014 	ldrsb.w	r8, [sl, #20]
            sum0 += cols_8b[1]*ksrc[21];
 8005682:	f99a c015 	ldrsb.w	ip, [sl, #21]
            sum1 += cols_8b[4]*ksrc[18];
 8005686:	fb03 2106 	mla	r1, r3, r6, r2
            sum0 += cols_8b[4]*ksrc[19];
 800568a:	fb09 4203 	mla	r2, r9, r3, r4
            sum0 += cols_8b[0]*ksrc[20];
 800568e:	9c00      	ldr	r4, [sp, #0]
 8005690:	f994 3010 	ldrsb.w	r3, [r4, #16]
            sum1 += cols_8b[1]*ksrc[20];
 8005694:	f994 b011 	ldrsb.w	fp, [r4, #17]
            sum0 += cols_8b[0]*ksrc[20];
 8005698:	fb18 2303 	smlabb	r3, r8, r3, r2
            sum1 += cols_8b[2]*ksrc[21];
 800569c:	f994 e012 	ldrsb.w	lr, [r4, #18]
            sum1 += cols_8b[5]*ksrc[19];
 80056a0:	9a03      	ldr	r2, [sp, #12]
            sum0 += cols_8b[2]*ksrc[22];
 80056a2:	f99a 6016 	ldrsb.w	r6, [sl, #22]
            sum0 += cols_8b[1]*ksrc[21];
 80056a6:	fb0c 330b 	mla	r3, ip, fp, r3
            sum1 += cols_8b[5]*ksrc[19];
 80056aa:	56aa      	ldrsb	r2, [r5, r2]
            sum1 += cols_8b[3]*ksrc[22];
 80056ac:	f994 7013 	ldrsb.w	r7, [r4, #19]
            sum0 += cols_8b[2]*ksrc[22];
 80056b0:	fb06 330e 	mla	r3, r6, lr, r3
            sum1 += cols_8b[5]*ksrc[19];
 80056b4:	fb12 1209 	smlabb	r2, r2, r9, r1
            sum0 += cols_8b[3]*ksrc[23];
 80056b8:	f99a 4017 	ldrsb.w	r4, [sl, #23]
            sum1 += cols_8b[4]*ksrc[23];
 80056bc:	9900      	ldr	r1, [sp, #0]
            sum1 += cols_8b[1]*ksrc[20];
 80056be:	fb0b 2208 	mla	r2, fp, r8, r2
            sum0 += cols_8b[3]*ksrc[23];
 80056c2:	fb04 3307 	mla	r3, r4, r7, r3
            sum1 += cols_8b[4]*ksrc[23];
 80056c6:	f991 1014 	ldrsb.w	r1, [r1, #20]
            sum1 += cols_8b[2]*ksrc[21];
 80056ca:	fb0e 220c 	mla	r2, lr, ip, r2
            sum1 += cols_8b[3]*ksrc[22];
 80056ce:	fb07 2206 	mla	r2, r7, r6, r2
            sum0 += cols_8b[4]*ksrc[24];
 80056d2:	f99a 7018 	ldrsb.w	r7, [sl, #24]
            sum0 = arm_nn_requantize(sum0 + biasR[0], *multiplier, *shift);
 80056d6:	9e09      	ldr	r6, [sp, #36]	@ 0x24
            sum0 += cols_8b[4]*ksrc[24];
 80056d8:	fb07 3301 	mla	r3, r7, r1, r3
            sum1 += cols_8b[4]*ksrc[23];
 80056dc:	fb01 2404 	mla	r4, r1, r4, r2
            sum1 += cols_8b[5]*ksrc[24];
 80056e0:	9a00      	ldr	r2, [sp, #0]
            sum0 = arm_nn_requantize(sum0 + biasR[0], *multiplier, *shift);
 80056e2:	4433      	add	r3, r6
 80056e4:	9e28      	ldr	r6, [sp, #160]	@ 0xa0
            sum1 += cols_8b[5]*ksrc[24];
 80056e6:	f992 2015 	ldrsb.w	r2, [r2, #21]
            sum0 = arm_nn_requantize(sum0 + biasR[0], *multiplier, *shift);
 80056ea:	6836      	ldr	r6, [r6, #0]
            sum1 += cols_8b[5]*ksrc[24];
 80056ec:	fb12 4207 	smlabb	r2, r2, r7, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80056f0:	9927      	ldr	r1, [sp, #156]	@ 0x9c
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80056f2:	ea26 74e6 	bic.w	r4, r6, r6, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80056f6:	2700      	movs	r7, #0
 80056f8:	6809      	ldr	r1, [r1, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80056fa:	2e00      	cmp	r6, #0
 80056fc:	fa03 f404 	lsl.w	r4, r3, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8005700:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005704:	fbc1 3704 	smlal	r3, r7, r1, r4
    result = (int32_t)(mult.long_long >> 31);
 8005708:	ea4f 73d3 	mov.w	r3, r3, lsr #31
 800570c:	ea43 0347 	orr.w	r3, r3, r7, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8005710:	dc0d      	bgt.n	800572e <depthwise_kernel5x5_stride1_inplace_kernel_CHW+0x2d2>
 8005712:	4276      	negs	r6, r6
    const q31_t remainder_mask = (1 << exponent) - 1;
 8005714:	2101      	movs	r1, #1
 8005716:	40b1      	lsls	r1, r6
 8005718:	3901      	subs	r1, #1
    int32_t remainder = remainder_mask & dividend;
 800571a:	ea01 0403 	and.w	r4, r1, r3
    if (result < 0)
 800571e:	4133      	asrs	r3, r6
    q31_t threshold = remainder_mask >> 1;
 8005720:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
 8005724:	bf48      	it	mi
 8005726:	3101      	addmi	r1, #1
    if (remainder > threshold)
 8005728:	428c      	cmp	r4, r1
        result++;
 800572a:	bfc8      	it	gt
 800572c:	3301      	addgt	r3, #1
            sum0 += output_offset;
 800572e:	992a      	ldr	r1, [sp, #168]	@ 0xa8
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8005730:	2600      	movs	r6, #0
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8005732:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
            sum0 += output_offset;
 8005734:	440b      	add	r3, r1
            sum0 = TN_MAX(sum0, activation_min);
 8005736:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8005738:	428b      	cmp	r3, r1
 800573a:	bfb8      	it	lt
 800573c:	460b      	movlt	r3, r1
            sum0 = TN_MIN(sum0, activation_max);
 800573e:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8005740:	428b      	cmp	r3, r1
 8005742:	bfa8      	it	ge
 8005744:	460b      	movge	r3, r1
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8005746:	9901      	ldr	r1, [sp, #4]
 8005748:	1b09      	subs	r1, r1, r4
 800574a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800574c:	550b      	strb	r3, [r1, r4]
 800574e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000

            sum1 = arm_nn_requantize(sum1 + biasR[0], *multiplier, *shift);
 8005752:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8005754:	681c      	ldr	r4, [r3, #0]
 8005756:	9b05      	ldr	r3, [sp, #20]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8005758:	2c00      	cmp	r4, #0
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	441a      	add	r2, r3
 800575e:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 8005762:	fa02 f203 	lsl.w	r2, r2, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8005766:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	fbc3 1602 	smlal	r1, r6, r3, r2
    result = (int32_t)(mult.long_long >> 31);
 800576e:	ea4f 71d1 	mov.w	r1, r1, lsr #31
 8005772:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8005776:	dc0d      	bgt.n	8005794 <depthwise_kernel5x5_stride1_inplace_kernel_CHW+0x338>
 8005778:	4264      	negs	r4, r4
    const q31_t remainder_mask = (1 << exponent) - 1;
 800577a:	2301      	movs	r3, #1
 800577c:	40a3      	lsls	r3, r4
 800577e:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 8005780:	ea03 0201 	and.w	r2, r3, r1
    if (result < 0)
 8005784:	4121      	asrs	r1, r4
    q31_t threshold = remainder_mask >> 1;
 8005786:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 800578a:	bf48      	it	mi
 800578c:	3301      	addmi	r3, #1
    if (remainder > threshold)
 800578e:	429a      	cmp	r2, r3
        result++;
 8005790:	bfc8      	it	gt
 8005792:	3101      	addgt	r1, #1
            sum1 += output_offset;
 8005794:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
            sum1 = TN_MAX(sum1, activation_min);
            sum1 = TN_MIN(sum1, activation_max);
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;

            cols_8b_iterptr += STRIDE * 2;
 8005796:	3002      	adds	r0, #2
        for (j = 0; j < output_x / 2; j++) {
 8005798:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800579a:	3502      	adds	r5, #2
            sum1 += output_offset;
 800579c:	4419      	add	r1, r3
        for (j = 0; j < output_x / 2; j++) {
 800579e:	9b00      	ldr	r3, [sp, #0]
 80057a0:	3302      	adds	r3, #2
 80057a2:	9300      	str	r3, [sp, #0]
            sum1 = TN_MAX(sum1, activation_min);
 80057a4:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 80057a6:	4299      	cmp	r1, r3
 80057a8:	bfb8      	it	lt
 80057aa:	4619      	movlt	r1, r3
            sum1 = TN_MIN(sum1, activation_max);
 80057ac:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80057ae:	4299      	cmp	r1, r3
 80057b0:	bfa8      	it	ge
 80057b2:	4619      	movge	r1, r3
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;
 80057b4:	9b01      	ldr	r3, [sp, #4]
 80057b6:	7019      	strb	r1, [r3, #0]
        for (j = 0; j < output_x / 2; j++) {
 80057b8:	4413      	add	r3, r2
 80057ba:	9301      	str	r3, [sp, #4]
 80057bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80057be:	4283      	cmp	r3, r0
 80057c0:	f47f aeb1 	bne.w	8005526 <depthwise_kernel5x5_stride1_inplace_kernel_CHW+0xca>
 80057c4:	f8dd 8048 	ldr.w	r8, [sp, #72]	@ 0x48
 80057c8:	f8dd e0bc 	ldr.w	lr, [sp, #188]	@ 0xbc
 80057cc:	e9dd 7c10 	ldrd	r7, ip, [sp, #64]	@ 0x40
        }
        if (output_x & 1) {
 80057d0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80057d2:	f10c 0c01 	add.w	ip, ip, #1
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	f000 80d0 	beq.w	800597c <depthwise_kernel5x5_stride1_inplace_kernel_CHW+0x520>
            q7_t * cols_8b = cols_8b_iterptr;
            q31_t sum = bias[0] + biasR[0];
 80057dc:	9b05      	ldr	r3, [sp, #20]
            sum += cols_8b[0]*ksrc[0];
 80057de:	980a      	ldr	r0, [sp, #40]	@ 0x28
            q31_t sum = bias[0] + biasR[0];
 80057e0:	681c      	ldr	r4, [r3, #0]
 80057e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
            sum += cols_8b[0]*ksrc[0];
 80057e4:	f990 1000 	ldrsb.w	r1, [r0]
            q31_t sum = bias[0] + biasR[0];
 80057e8:	681b      	ldr	r3, [r3, #0]
            sum += cols_8b[1]*ksrc[1];
            sum += cols_8b[2]*ksrc[2];
            sum += cols_8b[3]*ksrc[3];
            sum += cols_8b[4]*ksrc[4];
            cols_8b += column_x + 4;
 80057ea:	9d04      	ldr	r5, [sp, #16]
            q31_t sum = bias[0] + biasR[0];
 80057ec:	18e2      	adds	r2, r4, r3
            sum += cols_8b[0]*ksrc[0];
 80057ee:	f99a 3000 	ldrsb.w	r3, [sl]
 80057f2:	fb11 2203 	smlabb	r2, r1, r3, r2
            sum += cols_8b[1]*ksrc[1];
 80057f6:	f990 1001 	ldrsb.w	r1, [r0, #1]
 80057fa:	f99a 3001 	ldrsb.w	r3, [sl, #1]
 80057fe:	fb11 2203 	smlabb	r2, r1, r3, r2
            sum += cols_8b[2]*ksrc[2];
 8005802:	f990 1002 	ldrsb.w	r1, [r0, #2]
 8005806:	f99a 3002 	ldrsb.w	r3, [sl, #2]
 800580a:	fb11 2203 	smlabb	r2, r1, r3, r2
            sum += cols_8b[3]*ksrc[3];
 800580e:	f990 1003 	ldrsb.w	r1, [r0, #3]
 8005812:	f99a 3003 	ldrsb.w	r3, [sl, #3]
 8005816:	fb11 2203 	smlabb	r2, r1, r3, r2
            sum += cols_8b[4]*ksrc[4];
 800581a:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800581e:	f99a 1004 	ldrsb.w	r1, [sl, #4]
 8005822:	fb13 2301 	smlabb	r3, r3, r1, r2
            cols_8b += column_x + 4;
 8005826:	1942      	adds	r2, r0, r5
            sum += cols_8b[0]*ksrc[5];
 8005828:	5741      	ldrsb	r1, [r0, r5]
 800582a:	f99a 0005 	ldrsb.w	r0, [sl, #5]
 800582e:	fb11 3100 	smlabb	r1, r1, r0, r3
            sum += cols_8b[1]*ksrc[6];
 8005832:	f992 0001 	ldrsb.w	r0, [r2, #1]
 8005836:	f99a 3006 	ldrsb.w	r3, [sl, #6]
 800583a:	fb10 1303 	smlabb	r3, r0, r3, r1
            sum += cols_8b[2]*ksrc[7];
 800583e:	f992 0002 	ldrsb.w	r0, [r2, #2]
 8005842:	f99a 1007 	ldrsb.w	r1, [sl, #7]
 8005846:	fb10 3301 	smlabb	r3, r0, r1, r3
            sum += cols_8b[3]*ksrc[8];
 800584a:	f992 0003 	ldrsb.w	r0, [r2, #3]
 800584e:	f99a 1008 	ldrsb.w	r1, [sl, #8]
 8005852:	fb10 3301 	smlabb	r3, r0, r1, r3
            sum += cols_8b[4]*ksrc[9];
 8005856:	f992 1004 	ldrsb.w	r1, [r2, #4]
 800585a:	f99a 0009 	ldrsb.w	r0, [sl, #9]
 800585e:	fb11 3100 	smlabb	r1, r1, r0, r3
            cols_8b += column_x + 4;
 8005862:	1953      	adds	r3, r2, r5
            sum += cols_8b[0]*ksrc[10];
 8005864:	5750      	ldrsb	r0, [r2, r5]
 8005866:	f99a 200a 	ldrsb.w	r2, [sl, #10]
 800586a:	fb10 1202 	smlabb	r2, r0, r2, r1
            sum += cols_8b[1]*ksrc[11];
 800586e:	f993 0001 	ldrsb.w	r0, [r3, #1]
 8005872:	f99a 100b 	ldrsb.w	r1, [sl, #11]
 8005876:	fb10 2201 	smlabb	r2, r0, r1, r2
            sum += cols_8b[2]*ksrc[12];
 800587a:	f993 0002 	ldrsb.w	r0, [r3, #2]
 800587e:	f99a 100c 	ldrsb.w	r1, [sl, #12]
 8005882:	fb10 2201 	smlabb	r2, r0, r1, r2
            sum += cols_8b[3]*ksrc[13];
 8005886:	f993 0003 	ldrsb.w	r0, [r3, #3]
 800588a:	f99a 100d 	ldrsb.w	r1, [sl, #13]
 800588e:	fb10 2201 	smlabb	r2, r0, r1, r2
            sum += cols_8b[4]*ksrc[14];
 8005892:	f993 1004 	ldrsb.w	r1, [r3, #4]
 8005896:	f99a 000e 	ldrsb.w	r0, [sl, #14]
 800589a:	fb11 2100 	smlabb	r1, r1, r0, r2
            cols_8b += column_x + 4;
            sum += cols_8b[0]*ksrc[15];
 800589e:	5758      	ldrsb	r0, [r3, r5]
 80058a0:	f99a 200f 	ldrsb.w	r2, [sl, #15]
            cols_8b += column_x + 4;
 80058a4:	442b      	add	r3, r5
            sum += cols_8b[0]*ksrc[15];
 80058a6:	fb10 1202 	smlabb	r2, r0, r2, r1
            sum += cols_8b[1]*ksrc[16];
 80058aa:	f993 0001 	ldrsb.w	r0, [r3, #1]
 80058ae:	f99a 1010 	ldrsb.w	r1, [sl, #16]
 80058b2:	fb10 2201 	smlabb	r2, r0, r1, r2
            sum += cols_8b[2]*ksrc[17];
 80058b6:	f993 0002 	ldrsb.w	r0, [r3, #2]
 80058ba:	f99a 1011 	ldrsb.w	r1, [sl, #17]
 80058be:	fb10 2201 	smlabb	r2, r0, r1, r2
            sum += cols_8b[3]*ksrc[18];
 80058c2:	f993 0003 	ldrsb.w	r0, [r3, #3]
 80058c6:	f99a 1012 	ldrsb.w	r1, [sl, #18]
 80058ca:	fb10 2201 	smlabb	r2, r0, r1, r2
            sum += cols_8b[4]*ksrc[19];
 80058ce:	f993 1004 	ldrsb.w	r1, [r3, #4]
 80058d2:	f99a 0013 	ldrsb.w	r0, [sl, #19]
 80058d6:	fb11 2100 	smlabb	r1, r1, r0, r2
            cols_8b += column_x + 4;
 80058da:	195a      	adds	r2, r3, r5
            sum += cols_8b[0]*ksrc[20];
 80058dc:	5758      	ldrsb	r0, [r3, r5]
 80058de:	f99a 3014 	ldrsb.w	r3, [sl, #20]
 80058e2:	fb10 1303 	smlabb	r3, r0, r3, r1
            sum += cols_8b[1]*ksrc[21];
 80058e6:	f992 0001 	ldrsb.w	r0, [r2, #1]
 80058ea:	f99a 1015 	ldrsb.w	r1, [sl, #21]
 80058ee:	fb10 3301 	smlabb	r3, r0, r1, r3
            sum += cols_8b[2]*ksrc[22];
 80058f2:	f992 0002 	ldrsb.w	r0, [r2, #2]
 80058f6:	f99a 1016 	ldrsb.w	r1, [sl, #22]
 80058fa:	fb10 3001 	smlabb	r0, r0, r1, r3
            sum += cols_8b[3]*ksrc[23];
 80058fe:	f992 3003 	ldrsb.w	r3, [r2, #3]
            sum += cols_8b[4]*ksrc[24];
 8005902:	f992 1004 	ldrsb.w	r1, [r2, #4]
            sum += cols_8b[3]*ksrc[23];
 8005906:	f99a 2017 	ldrsb.w	r2, [sl, #23]
 800590a:	fb13 0302 	smlabb	r3, r3, r2, r0
            sum += cols_8b[4]*ksrc[24];
 800590e:	f99a 2018 	ldrsb.w	r2, [sl, #24]
 8005912:	fb11 3102 	smlabb	r1, r1, r2, r3

            sum = arm_nn_requantize(sum + biasR[0], *multiplier, *shift);
 8005916:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8005918:	6818      	ldr	r0, [r3, #0]
 800591a:	4421      	add	r1, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800591c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800591e:	2400      	movs	r4, #0
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8005920:	ea20 72e0 	bic.w	r2, r0, r0, asr #31
 8005924:	2800      	cmp	r0, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8005926:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8005928:	fa01 f102 	lsl.w	r1, r1, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800592c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005930:	fbc1 2403 	smlal	r2, r4, r1, r3
    result = (int32_t)(mult.long_long >> 31);
 8005934:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8005938:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800593c:	dc0d      	bgt.n	800595a <depthwise_kernel5x5_stride1_inplace_kernel_CHW+0x4fe>
 800593e:	4240      	negs	r0, r0
    const q31_t remainder_mask = (1 << exponent) - 1;
 8005940:	2301      	movs	r3, #1
 8005942:	4083      	lsls	r3, r0
 8005944:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 8005946:	ea02 0103 	and.w	r1, r2, r3
    if (result < 0)
 800594a:	4102      	asrs	r2, r0
    q31_t threshold = remainder_mask >> 1;
 800594c:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 8005950:	bf48      	it	mi
 8005952:	3301      	addmi	r3, #1
    if (remainder > threshold)
 8005954:	4299      	cmp	r1, r3
        result++;
 8005956:	bfc8      	it	gt
 8005958:	3201      	addgt	r2, #1
            sum += output_offset;
 800595a:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
            sum = TN_MAX(sum, activation_min);
            sum = TN_MIN(sum, activation_max);
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 800595c:	991b      	ldr	r1, [sp, #108]	@ 0x6c
            sum += output_offset;
 800595e:	441a      	add	r2, r3

            cols_8b_iterptr += STRIDE;
 8005960:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005962:	3301      	adds	r3, #1
 8005964:	930a      	str	r3, [sp, #40]	@ 0x28
            sum = TN_MAX(sum, activation_min);
 8005966:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8005968:	429a      	cmp	r2, r3
 800596a:	bfb8      	it	lt
 800596c:	461a      	movlt	r2, r3
            sum = TN_MIN(sum, activation_max);
 800596e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8005970:	429a      	cmp	r2, r3
 8005972:	bfa8      	it	ge
 8005974:	461a      	movge	r2, r3
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 8005976:	eba7 030e 	sub.w	r3, r7, lr
 800597a:	545a      	strb	r2, [r3, r1]
    for (i = 0; i < output_y; i++) {
 800597c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800597e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
        }
        cols_8b_iterptr += 2 * 2;
 8005980:	980a      	ldr	r0, [sp, #40]	@ 0x28
    for (i = 0; i < output_y; i++) {
 8005982:	4413      	add	r3, r2
        cols_8b_iterptr += 2 * 2;
 8005984:	3004      	adds	r0, #4
    for (i = 0; i < output_y; i++) {
 8005986:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005988:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800598a:	441f      	add	r7, r3
 800598c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800598e:	4563      	cmp	r3, ip
 8005990:	f47f ada6 	bne.w	80054e0 <depthwise_kernel5x5_stride1_inplace_kernel_CHW+0x84>
    }
}
 8005994:	b01d      	add	sp, #116	@ 0x74
 8005996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (j = 0; j < output_x / 2; j++) {
 800599a:	900a      	str	r0, [sp, #40]	@ 0x28
 800599c:	e718      	b.n	80057d0 <depthwise_kernel5x5_stride1_inplace_kernel_CHW+0x374>
 800599e:	bf00      	nop

080059a0 <depthwise_kernel5x5_stride1_inplace_CHW>:
{
 80059a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059a4:	b0b1      	sub	sp, #196	@ 0xc4
 80059a6:	4689      	mov	r9, r1
 80059a8:	4690      	mov	r8, r2
 80059aa:	f04f 0200 	mov.w	r2, #0
 80059ae:	f99d c120 	ldrsb.w	ip, [sp, #288]	@ 0x120
 80059b2:	469b      	mov	fp, r3
 80059b4:	f8bd 1110 	ldrh.w	r1, [sp, #272]	@ 0x110
    for(i = 0; i < input_x + 4; i++){
 80059b8:	f109 0603 	add.w	r6, r9, #3
 80059bc:	f36c 0207 	bfi	r2, ip, #0, #8
{
 80059c0:	900a      	str	r0, [sp, #40]	@ 0x28
 80059c2:	911b      	str	r1, [sp, #108]	@ 0x6c
 80059c4:	f8bd 1114 	ldrh.w	r1, [sp, #276]	@ 0x114
 80059c8:	f36c 220f 	bfi	r2, ip, #8, #8
    q7_t* cols_8b = (q7_t* )cols_8b_start;
 80059cc:	9c47      	ldr	r4, [sp, #284]	@ 0x11c
{
 80059ce:	911c      	str	r1, [sp, #112]	@ 0x70
    for(i = 0; i < input_x + 4; i++){
 80059d0:	2100      	movs	r1, #0
{
 80059d2:	e9dd 033d 	ldrd	r0, r3, [sp, #244]	@ 0xf4
    for(i = 0; i < input_x + 4; i++){
 80059d6:	3101      	adds	r1, #1
        *cols_8b++ = PAD8;
 80059d8:	f824 2b02 	strh.w	r2, [r4], #2
    for(i = 0; i < input_x + 4; i++){
 80059dc:	b289      	uxth	r1, r1
 80059de:	42b1      	cmp	r1, r6
 80059e0:	ddf9      	ble.n	80059d6 <depthwise_kernel5x5_stride1_inplace_CHW+0x36>
    for(i = 0; i < input_y; i++){
 80059e2:	f1b8 0f00 	cmp.w	r8, #0
 80059e6:	d00c      	beq.n	8005a02 <depthwise_kernel5x5_stride1_inplace_CHW+0x62>
        *cols_8b++ = PAD8;
 80059e8:	4621      	mov	r1, r4
        cols_8b += input_x; //skip middle
 80059ea:	2500      	movs	r5, #0
 80059ec:	f109 0704 	add.w	r7, r9, #4
    for(i = 0; i < input_y; i++){
 80059f0:	3501      	adds	r5, #1
        *cols_8b++ = PAD8;//left
 80059f2:	800a      	strh	r2, [r1, #0]
        *cols_8b++ = PAD8;//right
 80059f4:	4439      	add	r1, r7
    for(i = 0; i < input_y; i++){
 80059f6:	4545      	cmp	r5, r8
        *cols_8b++ = PAD8;//right
 80059f8:	f821 2c02 	strh.w	r2, [r1, #-2]
    for(i = 0; i < input_y; i++){
 80059fc:	d1f8      	bne.n	80059f0 <depthwise_kernel5x5_stride1_inplace_CHW+0x50>
        *cols_8b++ = PAD8;//right
 80059fe:	fb07 4408 	mla	r4, r7, r8, r4
 8005a02:	f1a9 0502 	sub.w	r5, r9, #2
 8005a06:	f64f 71f9 	movw	r1, #65529	@ 0xfff9
 8005a0a:	428d      	cmp	r5, r1
 8005a0c:	f200 81bf 	bhi.w	8005d8e <depthwise_kernel5x5_stride1_inplace_CHW+0x3ee>
 8005a10:	2500      	movs	r5, #0
 8005a12:	f109 0704 	add.w	r7, r9, #4
 8005a16:	4621      	mov	r1, r4
 8005a18:	f36c 0507 	bfi	r5, ip, #0, #8
 8005a1c:	087e      	lsrs	r6, r7, #1
 8005a1e:	f36c 250f 	bfi	r5, ip, #8, #8
 8005a22:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8005a26:	f36c 4517 	bfi	r5, ip, #16, #8
 8005a2a:	f36c 651f 	bfi	r5, ip, #24, #8
        *cols_8b++ = PAD8;
 8005a2e:	f841 5b04 	str.w	r5, [r1], #4
    for(i = 0; i < input_x + 4; i++){
 8005a32:	42b1      	cmp	r1, r6
 8005a34:	d1fb      	bne.n	8005a2e <depthwise_kernel5x5_stride1_inplace_CHW+0x8e>
 8005a36:	07fd      	lsls	r5, r7, #31
 8005a38:	f027 0101 	bic.w	r1, r7, #1
 8005a3c:	d501      	bpl.n	8005a42 <depthwise_kernel5x5_stride1_inplace_CHW+0xa2>
        *cols_8b++ = PAD8;
 8005a3e:	f824 2011 	strh.w	r2, [r4, r1, lsl #1]
    for (c = 0; c < input_ch; c++){
 8005a42:	f1bb 0f00 	cmp.w	fp, #0
 8005a46:	f000 819e 	beq.w	8005d86 <depthwise_kernel5x5_stride1_inplace_CHW+0x3e6>
        cols_8b = (q7_t*)(cols_8b_start + 2 * (input_x) + 8); //skip 2 rows
 8005a4a:	9947      	ldr	r1, [sp, #284]	@ 0x11c
 8005a4c:	f029 0407 	bic.w	r4, r9, #7
 8005a50:	f029 0503 	bic.w	r5, r9, #3
 8005a54:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8005a58:	eb01 0149 	add.w	r1, r1, r9, lsl #1
 8005a5c:	469e      	mov	lr, r3
 8005a5e:	b297      	uxth	r7, r2
 8005a60:	fb0b f202 	mul.w	r2, fp, r2
 8005a64:	3108      	adds	r1, #8
 8005a66:	4603      	mov	r3, r0
 8005a68:	922f      	str	r2, [sp, #188]	@ 0xbc
 8005a6a:	ea4f 02d9 	mov.w	r2, r9, lsr #3
 8005a6e:	911d      	str	r1, [sp, #116]	@ 0x74
            for(j = 0; j < input_x; j++){
 8005a70:	1c61      	adds	r1, r4, #1
 8005a72:	00d2      	lsls	r2, r2, #3
 8005a74:	f107 0a01 	add.w	sl, r7, #1
 8005a78:	b289      	uxth	r1, r1
 8005a7a:	983c      	ldr	r0, [sp, #240]	@ 0xf0
 8005a7c:	922d      	str	r2, [sp, #180]	@ 0xb4
 8005a7e:	9125      	str	r1, [sp, #148]	@ 0x94
 8005a80:	1ca1      	adds	r1, r4, #2
 8005a82:	fb0b f204 	mul.w	r2, fp, r4
 8005a86:	b289      	uxth	r1, r1
 8005a88:	f8cd a090 	str.w	sl, [sp, #144]	@ 0x90
 8005a8c:	9221      	str	r2, [sp, #132]	@ 0x84
 8005a8e:	f009 0203 	and.w	r2, r9, #3
 8005a92:	9126      	str	r1, [sp, #152]	@ 0x98
 8005a94:	1ce1      	adds	r1, r4, #3
 8005a96:	b289      	uxth	r1, r1
 8005a98:	9127      	str	r1, [sp, #156]	@ 0x9c
 8005a9a:	1d21      	adds	r1, r4, #4
 8005a9c:	b289      	uxth	r1, r1
 8005a9e:	9128      	str	r1, [sp, #160]	@ 0xa0
 8005aa0:	1d61      	adds	r1, r4, #5
 8005aa2:	b289      	uxth	r1, r1
 8005aa4:	9129      	str	r1, [sp, #164]	@ 0xa4
 8005aa6:	1da1      	adds	r1, r4, #6
 8005aa8:	b289      	uxth	r1, r1
 8005aaa:	912a      	str	r1, [sp, #168]	@ 0xa8
 8005aac:	ea4f 0199 	mov.w	r1, r9, lsr #2
 8005ab0:	0089      	lsls	r1, r1, #2
 8005ab2:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005ab4:	1c69      	adds	r1, r5, #1
 8005ab6:	b289      	uxth	r1, r1
 8005ab8:	910e      	str	r1, [sp, #56]	@ 0x38
 8005aba:	1ca9      	adds	r1, r5, #2
 8005abc:	b2ad      	uxth	r5, r5
 8005abe:	b289      	uxth	r1, r1
 8005ac0:	910f      	str	r1, [sp, #60]	@ 0x3c
 8005ac2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005ac4:	4459      	add	r1, fp
 8005ac6:	911a      	str	r1, [sp, #104]	@ 0x68
 8005ac8:	fb07 b10b 	mla	r1, r7, fp, fp
 8005acc:	9111      	str	r1, [sp, #68]	@ 0x44
 8005ace:	ea4f 01cb 	mov.w	r1, fp, lsl #3
 8005ad2:	912c      	str	r1, [sp, #176]	@ 0xb0
 8005ad4:	ea4f 018b 	mov.w	r1, fp, lsl #2
 8005ad8:	9120      	str	r1, [sp, #128]	@ 0x80
 8005ada:	ebab 018b 	sub.w	r1, fp, fp, lsl #2
 8005ade:	9122      	str	r1, [sp, #136]	@ 0x88
 8005ae0:	ebcb 018b 	rsb	r1, fp, fp, lsl #2
 8005ae4:	912e      	str	r1, [sp, #184]	@ 0xb8
 8005ae6:	eb0b 018b 	add.w	r1, fp, fp, lsl #2
 8005aea:	9123      	str	r1, [sp, #140]	@ 0x8c
 8005aec:	b2a1      	uxth	r1, r4
 8005aee:	465c      	mov	r4, fp
 8005af0:	46c3      	mov	fp, r8
 8005af2:	9112      	str	r1, [sp, #72]	@ 0x48
 8005af4:	e9cd 270c 	strd	r2, r7, [sp, #48]	@ 0x30
        for(i = 0; i < input_y; i++){
 8005af8:	f1bb 0f00 	cmp.w	fp, #0
 8005afc:	d032      	beq.n	8005b64 <depthwise_kernel5x5_stride1_inplace_CHW+0x1c4>
 8005afe:	f1b9 0f00 	cmp.w	r9, #0
 8005b02:	d02f      	beq.n	8005b64 <depthwise_kernel5x5_stride1_inplace_CHW+0x1c4>
 8005b04:	2c01      	cmp	r4, #1
 8005b06:	d17c      	bne.n	8005c02 <depthwise_kernel5x5_stride1_inplace_CHW+0x262>
 8005b08:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8005b0a:	f04f 0c00 	mov.w	ip, #0
 8005b0e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8005b10:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005b12:	f106 0805 	add.w	r8, r6, #5
 8005b16:	1c97      	adds	r7, r2, #2
 8005b18:	f8cd e0f8 	str.w	lr, [sp, #248]	@ 0xf8
 8005b1c:	eb01 0209 	add.w	r2, r1, r9
 8005b20:	46b2      	mov	sl, r6
 8005b22:	f8dd e090 	ldr.w	lr, [sp, #144]	@ 0x90
 8005b26:	9410      	str	r4, [sp, #64]	@ 0x40
 8005b28:	e9cd 033c 	strd	r0, r3, [sp, #240]	@ 0xf0
            for(j = 0; j < input_x; j++){
 8005b2c:	f1ba 0f05 	cmp.w	sl, #5
 8005b30:	d904      	bls.n	8005b3c <depthwise_kernel5x5_stride1_inplace_CHW+0x19c>
 8005b32:	1c48      	adds	r0, r1, #1
 8005b34:	460b      	mov	r3, r1
 8005b36:	1a38      	subs	r0, r7, r0
 8005b38:	2802      	cmp	r0, #2
 8005b3a:	d83e      	bhi.n	8005bba <depthwise_kernel5x5_stride1_inplace_CHW+0x21a>
 8005b3c:	460b      	mov	r3, r1
 8005b3e:	1e78      	subs	r0, r7, #1
                *cols_8b++ = *src;// + input_offset;
 8005b40:	f913 4b01 	ldrsb.w	r4, [r3], #1
            for(j = 0; j < input_x; j++){
 8005b44:	429a      	cmp	r2, r3
                *cols_8b++ = *src;// + input_offset;
 8005b46:	f800 4f01 	strb.w	r4, [r0, #1]!
            for(j = 0; j < input_x; j++){
 8005b4a:	d1f9      	bne.n	8005b40 <depthwise_kernel5x5_stride1_inplace_CHW+0x1a0>
        for(i = 0; i < input_y; i++){
 8005b4c:	f10c 0c01 	add.w	ip, ip, #1
                src += input_ch;
 8005b50:	4471      	add	r1, lr
        for(i = 0; i < input_y; i++){
 8005b52:	4447      	add	r7, r8
 8005b54:	4472      	add	r2, lr
 8005b56:	45dc      	cmp	ip, fp
 8005b58:	d1e8      	bne.n	8005b2c <depthwise_kernel5x5_stride1_inplace_CHW+0x18c>
 8005b5a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8005b5c:	f8dd e0f8 	ldr.w	lr, [sp, #248]	@ 0xf8
 8005b60:	e9dd 033c 	ldrd	r0, r3, [sp, #240]	@ 0xf0
        depthwise_kernel5x5_stride1_inplace_kernel_CHW(output_y, output_x, bias++, biasR++, ksrc, output_mult++, output_shift++, inplace_out,output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8005b64:	993a      	ldr	r1, [sp, #232]	@ 0xe8
 8005b66:	f103 0804 	add.w	r8, r3, #4
 8005b6a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005b6c:	1d07      	adds	r7, r0, #4
 8005b6e:	9100      	str	r1, [sp, #0]
 8005b70:	f10e 0a04 	add.w	sl, lr, #4
 8005b74:	9947      	ldr	r1, [sp, #284]	@ 0x11c
 8005b76:	9203      	str	r2, [sp, #12]
        input++;
 8005b78:	3201      	adds	r2, #1
        depthwise_kernel5x5_stride1_inplace_kernel_CHW(output_y, output_x, bias++, biasR++, ksrc, output_mult++, output_shift++, inplace_out,output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8005b7a:	9107      	str	r1, [sp, #28]
 8005b7c:	9942      	ldr	r1, [sp, #264]	@ 0x108
        input++;
 8005b7e:	920a      	str	r2, [sp, #40]	@ 0x28
        depthwise_kernel5x5_stride1_inplace_kernel_CHW(output_y, output_x, bias++, biasR++, ksrc, output_mult++, output_shift++, inplace_out,output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8005b80:	9106      	str	r1, [sp, #24]
 8005b82:	9941      	ldr	r1, [sp, #260]	@ 0x104
 8005b84:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
 8005b86:	9105      	str	r1, [sp, #20]
 8005b88:	993f      	ldr	r1, [sp, #252]	@ 0xfc
 8005b8a:	1d16      	adds	r6, r2, #4
 8005b8c:	e9cd e301 	strd	lr, r3, [sp, #4]
        ksrc += 25;
 8005b90:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
        depthwise_kernel5x5_stride1_inplace_kernel_CHW(output_y, output_x, bias++, biasR++, ksrc, output_mult++, output_shift++, inplace_out,output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8005b92:	9104      	str	r1, [sp, #16]
        ksrc += 25;
 8005b94:	3319      	adds	r3, #25
        depthwise_kernel5x5_stride1_inplace_kernel_CHW(output_y, output_x, bias++, biasR++, ksrc, output_mult++, output_shift++, inplace_out,output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8005b96:	e9cd 9408 	strd	r9, r4, [sp, #32]
        ksrc += 25;
 8005b9a:	933a      	str	r3, [sp, #232]	@ 0xe8
        depthwise_kernel5x5_stride1_inplace_kernel_CHW(output_y, output_x, bias++, biasR++, ksrc, output_mult++, output_shift++, inplace_out,output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	e9dd 101b 	ldrd	r1, r0, [sp, #108]	@ 0x6c
 8005ba2:	f7ff fc5b 	bl	800545c <depthwise_kernel5x5_stride1_inplace_kernel_CHW>
    for (c = 0; c < input_ch; c++){
 8005ba6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005ba8:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8005baa:	429a      	cmp	r2, r3
 8005bac:	f000 80eb 	beq.w	8005d86 <depthwise_kernel5x5_stride1_inplace_CHW+0x3e6>
        depthwise_kernel5x5_stride1_inplace_kernel_CHW(output_y, output_x, bias++, biasR++, ksrc, output_mult++, output_shift++, inplace_out,output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8005bb0:	46d6      	mov	lr, sl
 8005bb2:	4643      	mov	r3, r8
 8005bb4:	4638      	mov	r0, r7
 8005bb6:	963b      	str	r6, [sp, #236]	@ 0xec
 8005bb8:	e79e      	b.n	8005af8 <depthwise_kernel5x5_stride1_inplace_CHW+0x158>
 8005bba:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8005bbc:	1846      	adds	r6, r0, r1
            cols_8b += 2;//skip front
 8005bbe:	4638      	mov	r0, r7
                *cols_8b++ = *src;// + input_offset;
 8005bc0:	f853 4b04 	ldr.w	r4, [r3], #4
 8005bc4:	429e      	cmp	r6, r3
 8005bc6:	f840 4b04 	str.w	r4, [r0], #4
            for(j = 0; j < input_x; j++){
 8005bca:	d1f9      	bne.n	8005bc0 <depthwise_kernel5x5_stride1_inplace_CHW+0x220>
 8005bcc:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8005bce:	197b      	adds	r3, r7, r5
 8005bd0:	1948      	adds	r0, r1, r5
 8005bd2:	2c00      	cmp	r4, #0
 8005bd4:	d0ba      	beq.n	8005b4c <depthwise_kernel5x5_stride1_inplace_CHW+0x1ac>
                *cols_8b++ = *src;// + input_offset;
 8005bd6:	574c      	ldrsb	r4, [r1, r5]
 8005bd8:	557c      	strb	r4, [r7, r5]
            for(j = 0; j < input_x; j++){
 8005bda:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8005bdc:	454c      	cmp	r4, r9
 8005bde:	d2b5      	bcs.n	8005b4c <depthwise_kernel5x5_stride1_inplace_CHW+0x1ac>
                *cols_8b++ = *src;// + input_offset;
 8005be0:	f990 4001 	ldrsb.w	r4, [r0, #1]
 8005be4:	705c      	strb	r4, [r3, #1]
            for(j = 0; j < input_x; j++){
 8005be6:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8005be8:	45a1      	cmp	r9, r4
 8005bea:	d9af      	bls.n	8005b4c <depthwise_kernel5x5_stride1_inplace_CHW+0x1ac>
        for(i = 0; i < input_y; i++){
 8005bec:	f10c 0c01 	add.w	ip, ip, #1
                *cols_8b++ = *src;// + input_offset;
 8005bf0:	f990 0002 	ldrsb.w	r0, [r0, #2]
                src += input_ch;
 8005bf4:	4471      	add	r1, lr
        for(i = 0; i < input_y; i++){
 8005bf6:	4447      	add	r7, r8
 8005bf8:	45dc      	cmp	ip, fp
 8005bfa:	4472      	add	r2, lr
                *cols_8b++ = *src;// + input_offset;
 8005bfc:	7098      	strb	r0, [r3, #2]
        for(i = 0; i < input_y; i++){
 8005bfe:	d195      	bne.n	8005b2c <depthwise_kernel5x5_stride1_inplace_CHW+0x18c>
 8005c00:	e7ab      	b.n	8005b5a <depthwise_kernel5x5_stride1_inplace_CHW+0x1ba>
 8005c02:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8005c04:	f109 0201 	add.w	r2, r9, #1
 8005c08:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8005c0a:	f04f 0c00 	mov.w	ip, #0
 8005c0e:	440a      	add	r2, r1
 8005c10:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8005c12:	f106 0a05 	add.w	sl, r6, #5
 8005c16:	1c8e      	adds	r6, r1, #2
 8005c18:	992f      	ldr	r1, [sp, #188]	@ 0xbc
 8005c1a:	f8cd b040 	str.w	fp, [sp, #64]	@ 0x40
 8005c1e:	eb07 0801 	add.w	r8, r7, r1
 8005c22:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 8005c24:	f8cd e0f8 	str.w	lr, [sp, #248]	@ 0xf8
 8005c28:	3102      	adds	r1, #2
 8005c2a:	f8dd b0b0 	ldr.w	fp, [sp, #176]	@ 0xb0
 8005c2e:	f8dd e0b8 	ldr.w	lr, [sp, #184]	@ 0xb8
 8005c32:	911e      	str	r1, [sp, #120]	@ 0x78
 8005c34:	f009 0107 	and.w	r1, r9, #7
 8005c38:	952b      	str	r5, [sp, #172]	@ 0xac
 8005c3a:	911f      	str	r1, [sp, #124]	@ 0x7c
 8005c3c:	4661      	mov	r1, ip
 8005c3e:	e9cd 033c 	strd	r0, r3, [sp, #240]	@ 0xf0
            for(j = 0; j < input_x; j++){
 8005c42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005c44:	2b1b      	cmp	r3, #27
 8005c46:	d903      	bls.n	8005c50 <depthwise_kernel5x5_stride1_inplace_CHW+0x2b0>
 8005c48:	4546      	cmp	r6, r8
 8005c4a:	d81a      	bhi.n	8005c82 <depthwise_kernel5x5_stride1_inplace_CHW+0x2e2>
 8005c4c:	4297      	cmp	r7, r2
 8005c4e:	d818      	bhi.n	8005c82 <depthwise_kernel5x5_stride1_inplace_CHW+0x2e2>
 8005c50:	1e70      	subs	r0, r6, #1
            cols_8b += 2;//skip front
 8005c52:	463b      	mov	r3, r7
                *cols_8b++ = *src;// + input_offset;
 8005c54:	f993 5000 	ldrsb.w	r5, [r3]
                src += input_ch;
 8005c58:	4423      	add	r3, r4
                *cols_8b++ = *src;// + input_offset;
 8005c5a:	f800 5f01 	strb.w	r5, [r0, #1]!
            for(j = 0; j < input_x; j++){
 8005c5e:	4290      	cmp	r0, r2
 8005c60:	d1f8      	bne.n	8005c54 <depthwise_kernel5x5_stride1_inplace_CHW+0x2b4>
                src += input_ch;
 8005c62:	9b11      	ldr	r3, [sp, #68]	@ 0x44
        for(i = 0; i < input_y; i++){
 8005c64:	3101      	adds	r1, #1
 8005c66:	4456      	add	r6, sl
 8005c68:	4452      	add	r2, sl
                src += input_ch;
 8005c6a:	441f      	add	r7, r3
        for(i = 0; i < input_y; i++){
 8005c6c:	4498      	add	r8, r3
 8005c6e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005c70:	4299      	cmp	r1, r3
 8005c72:	d1e6      	bne.n	8005c42 <depthwise_kernel5x5_stride1_inplace_CHW+0x2a2>
 8005c74:	469b      	mov	fp, r3
 8005c76:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 8005c78:	f8dd e0f8 	ldr.w	lr, [sp, #248]	@ 0xf8
 8005c7c:	e9dd 033c 	ldrd	r0, r3, [sp, #240]	@ 0xf0
 8005c80:	e770      	b.n	8005b64 <depthwise_kernel5x5_stride1_inplace_CHW+0x1c4>
 8005c82:	1eb3      	subs	r3, r6, #2
 8005c84:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8005c86:	9d20      	ldr	r5, [sp, #128]	@ 0x80
 8005c88:	4418      	add	r0, r3
            cols_8b += 2;//skip front
 8005c8a:	f8cd 9064 	str.w	r9, [sp, #100]	@ 0x64
 8005c8e:	eb05 0c07 	add.w	ip, r5, r7
 8005c92:	463b      	mov	r3, r7
 8005c94:	4635      	mov	r5, r6
 8005c96:	f8dd 908c 	ldr.w	r9, [sp, #140]	@ 0x8c
 8005c9a:	e9cd 6a15 	strd	r6, sl, [sp, #84]	@ 0x54
 8005c9e:	e9cd 2817 	strd	r2, r8, [sp, #92]	@ 0x5c
 8005ca2:	4682      	mov	sl, r0
 8005ca4:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 8005ca8:	e9cd 7113 	strd	r7, r1, [sp, #76]	@ 0x4c
                *cols_8b++ = *src;// + input_offset;
 8005cac:	781f      	ldrb	r7, [r3, #0]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f81c 0008 	ldrb.w	r0, [ip, r8]
 8005cb4:	3508      	adds	r5, #8
 8005cb6:	f813 6024 	ldrb.w	r6, [r3, r4, lsl #2]
 8005cba:	4611      	mov	r1, r2
 8005cbc:	f367 0207 	bfi	r2, r7, #0, #8
 8005cc0:	f366 0107 	bfi	r1, r6, #0, #8
 8005cc4:	f360 220f 	bfi	r2, r0, #8, #8
 8005cc8:	f813 0009 	ldrb.w	r0, [r3, r9]
 8005ccc:	f360 210f 	bfi	r1, r0, #8, #8
 8005cd0:	f813 0014 	ldrb.w	r0, [r3, r4, lsl #1]
 8005cd4:	f360 4217 	bfi	r2, r0, #16, #8
 8005cd8:	f81c 0014 	ldrb.w	r0, [ip, r4, lsl #1]
 8005cdc:	f360 4117 	bfi	r1, r0, #16, #8
 8005ce0:	f813 000e 	ldrb.w	r0, [r3, lr]
 8005ce4:	445b      	add	r3, fp
 8005ce6:	f360 621f 	bfi	r2, r0, #24, #8
 8005cea:	f81c 000e 	ldrb.w	r0, [ip, lr]
 8005cee:	44dc      	add	ip, fp
 8005cf0:	f360 611f 	bfi	r1, r0, #24, #8
 8005cf4:	f845 2c08 	str.w	r2, [r5, #-8]
 8005cf8:	f845 1c04 	str.w	r1, [r5, #-4]
            for(j = 0; j < input_x; j++){
 8005cfc:	4555      	cmp	r5, sl
 8005cfe:	d1d5      	bne.n	8005cac <depthwise_kernel5x5_stride1_inplace_CHW+0x30c>
 8005d00:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005d02:	9d21      	ldr	r5, [sp, #132]	@ 0x84
 8005d04:	f8dd 9064 	ldr.w	r9, [sp, #100]	@ 0x64
 8005d08:	e9dd 6a15 	ldrd	r6, sl, [sp, #84]	@ 0x54
 8005d0c:	e9dd 7113 	ldrd	r7, r1, [sp, #76]	@ 0x4c
 8005d10:	eb06 0c03 	add.w	ip, r6, r3
 8005d14:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8005d16:	1978      	adds	r0, r7, r5
 8005d18:	e9dd 2817 	ldrd	r2, r8, [sp, #92]	@ 0x5c
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d0a0      	beq.n	8005c62 <depthwise_kernel5x5_stride1_inplace_CHW+0x2c2>
                *cols_8b++ = *src;// + input_offset;
 8005d20:	577d      	ldrsb	r5, [r7, r5]
 8005d22:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005d24:	54f5      	strb	r5, [r6, r3]
                src += input_ch;
 8005d26:	1905      	adds	r5, r0, r4
            for(j = 0; j < input_x; j++){
 8005d28:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8005d2a:	4599      	cmp	r9, r3
 8005d2c:	d999      	bls.n	8005c62 <depthwise_kernel5x5_stride1_inplace_CHW+0x2c2>
 8005d2e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
                *cols_8b++ = *src;// + input_offset;
 8005d30:	5700      	ldrsb	r0, [r0, r4]
            for(j = 0; j < input_x; j++){
 8005d32:	4599      	cmp	r9, r3
                *cols_8b++ = *src;// + input_offset;
 8005d34:	f88c 0001 	strb.w	r0, [ip, #1]
                src += input_ch;
 8005d38:	eb05 0004 	add.w	r0, r5, r4
            for(j = 0; j < input_x; j++){
 8005d3c:	d991      	bls.n	8005c62 <depthwise_kernel5x5_stride1_inplace_CHW+0x2c2>
 8005d3e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
                *cols_8b++ = *src;// + input_offset;
 8005d40:	572d      	ldrsb	r5, [r5, r4]
            for(j = 0; j < input_x; j++){
 8005d42:	4599      	cmp	r9, r3
                *cols_8b++ = *src;// + input_offset;
 8005d44:	f88c 5002 	strb.w	r5, [ip, #2]
                src += input_ch;
 8005d48:	eb00 0504 	add.w	r5, r0, r4
            for(j = 0; j < input_x; j++){
 8005d4c:	d989      	bls.n	8005c62 <depthwise_kernel5x5_stride1_inplace_CHW+0x2c2>
 8005d4e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
                *cols_8b++ = *src;// + input_offset;
 8005d50:	5700      	ldrsb	r0, [r0, r4]
            for(j = 0; j < input_x; j++){
 8005d52:	4599      	cmp	r9, r3
                *cols_8b++ = *src;// + input_offset;
 8005d54:	f88c 0003 	strb.w	r0, [ip, #3]
                src += input_ch;
 8005d58:	eb05 0004 	add.w	r0, r5, r4
            for(j = 0; j < input_x; j++){
 8005d5c:	d981      	bls.n	8005c62 <depthwise_kernel5x5_stride1_inplace_CHW+0x2c2>
 8005d5e:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
                *cols_8b++ = *src;// + input_offset;
 8005d60:	572d      	ldrsb	r5, [r5, r4]
            for(j = 0; j < input_x; j++){
 8005d62:	4599      	cmp	r9, r3
                *cols_8b++ = *src;// + input_offset;
 8005d64:	f88c 5004 	strb.w	r5, [ip, #4]
                src += input_ch;
 8005d68:	eb00 0504 	add.w	r5, r0, r4
            for(j = 0; j < input_x; j++){
 8005d6c:	f67f af79 	bls.w	8005c62 <depthwise_kernel5x5_stride1_inplace_CHW+0x2c2>
 8005d70:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
                *cols_8b++ = *src;// + input_offset;
 8005d72:	5700      	ldrsb	r0, [r0, r4]
            for(j = 0; j < input_x; j++){
 8005d74:	4599      	cmp	r9, r3
                *cols_8b++ = *src;// + input_offset;
 8005d76:	f88c 0005 	strb.w	r0, [ip, #5]
            for(j = 0; j < input_x; j++){
 8005d7a:	f67f af72 	bls.w	8005c62 <depthwise_kernel5x5_stride1_inplace_CHW+0x2c2>
                *cols_8b++ = *src;// + input_offset;
 8005d7e:	5728      	ldrsb	r0, [r5, r4]
 8005d80:	f88c 0006 	strb.w	r0, [ip, #6]
            for(j = 0; j < input_x; j++){
 8005d84:	e76d      	b.n	8005c62 <depthwise_kernel5x5_stride1_inplace_CHW+0x2c2>
}
 8005d86:	2000      	movs	r0, #0
 8005d88:	b031      	add	sp, #196	@ 0xc4
 8005d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for(i = 0; i < input_x + 4; i++){
 8005d8e:	2100      	movs	r1, #0
 8005d90:	3101      	adds	r1, #1
        *cols_8b++ = PAD8;
 8005d92:	f824 2b02 	strh.w	r2, [r4], #2
    for(i = 0; i < input_x + 4; i++){
 8005d96:	b289      	uxth	r1, r1
 8005d98:	428e      	cmp	r6, r1
 8005d9a:	daf9      	bge.n	8005d90 <depthwise_kernel5x5_stride1_inplace_CHW+0x3f0>
 8005d9c:	e651      	b.n	8005a42 <depthwise_kernel5x5_stride1_inplace_CHW+0xa2>
 8005d9e:	bf00      	nop

08005da0 <depthwise_kernel5x5_stride2_inplace_kernel_CHW>:
        const uint16_t output_y, const uint16_t output_x,
        const int32_t *bias, const int32_t *biasR, const q7_t *ksrc, const int32_t *multiplier,
        const int32_t *shift, q7_t *output, const int32_t output_offset,
        const int32_t activation_min, const int32_t activation_max,
        q7_t *cols_8b_iterptr, const uint16_t column_x, int channel_offset)
{
 8005da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005da4:	b09f      	sub	sp, #124	@ 0x7c
 8005da6:	469a      	mov	sl, r3
 8005da8:	f8dd 90a0 	ldr.w	r9, [sp, #160]	@ 0xa0
 8005dac:	f8dd 80bc 	ldr.w	r8, [sp, #188]	@ 0xbc
 8005db0:	f8bd c0c0 	ldrh.w	ip, [sp, #192]	@ 0xc0
 8005db4:	f8dd b0c4 	ldr.w	fp, [sp, #196]	@ 0xc4
 8005db8:	9115      	str	r1, [sp, #84]	@ 0x54
 8005dba:	920e      	str	r2, [sp, #56]	@ 0x38
    #define STRIDE 2
    int i, j;
    /* MACs for each output */
    for (i = 0; i < output_y; i++) {
 8005dbc:	9014      	str	r0, [sp, #80]	@ 0x50
 8005dbe:	2800      	cmp	r0, #0
 8005dc0:	f000 829a 	beq.w	80062f8 <depthwise_kernel5x5_stride2_inplace_kernel_CHW+0x558>
            sum = TN_MIN(sum, activation_max);
            output[(i * output_x + output_x - 1) * channel_offset] = sum;

            cols_8b_iterptr += STRIDE;
        }
        cols_8b_iterptr += 2 * 2 - (column_x & 1);
 8005dc4:	f00c 0301 	and.w	r3, ip, #1
        cols_8b_iterptr += (STRIDE - 1) * (column_x + 2 * 2);
 8005dc8:	f10c 0004 	add.w	r0, ip, #4
        for (j = 0; j < output_x / 2; j++) {
 8005dcc:	460a      	mov	r2, r1
        cols_8b_iterptr += (STRIDE - 1) * (column_x + 2 * 2);
 8005dce:	2601      	movs	r6, #1
        cols_8b_iterptr += 2 * 2 - (column_x & 1);
 8005dd0:	f1c3 0304 	rsb	r3, r3, #4
        for (j = 0; j < output_x / 2; j++) {
 8005dd4:	0849      	lsrs	r1, r1, #1
    for (i = 0; i < output_y; i++) {
 8005dd6:	f04f 0e00 	mov.w	lr, #0
        cols_8b_iterptr += (STRIDE - 1) * (column_x + 2 * 2);
 8005dda:	9004      	str	r0, [sp, #16]
 8005ddc:	4403      	add	r3, r0
        for (j = 0; j < output_x / 2; j++) {
 8005dde:	9117      	str	r1, [sp, #92]	@ 0x5c
 8005de0:	f8cd a014 	str.w	sl, [sp, #20]
 8005de4:	9318      	str	r3, [sp, #96]	@ 0x60
 8005de6:	1e53      	subs	r3, r2, #1
 8005de8:	fb0b f303 	mul.w	r3, fp, r3
 8005dec:	931d      	str	r3, [sp, #116]	@ 0x74
 8005dee:	ea02 0306 	and.w	r3, r2, r6
 8005df2:	9316      	str	r3, [sp, #88]	@ 0x58
 8005df4:	fb0b f302 	mul.w	r3, fp, r2
 8005df8:	9319      	str	r3, [sp, #100]	@ 0x64
 8005dfa:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8005dfc:	eb03 070b 	add.w	r7, r3, fp
 8005e00:	fa00 f306 	lsl.w	r3, r0, r6
 8005e04:	931a      	str	r3, [sp, #104]	@ 0x68
 8005e06:	ea4f 038c 	mov.w	r3, ip, lsl #2
 8005e0a:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005e0c:	fa0b f306 	lsl.w	r3, fp, r6
 8005e10:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005e12:	008b      	lsls	r3, r1, #2
 8005e14:	931c      	str	r3, [sp, #112]	@ 0x70
 8005e16:	f10c 0306 	add.w	r3, ip, #6
 8005e1a:	9306      	str	r3, [sp, #24]
 8005e1c:	f10c 0305 	add.w	r3, ip, #5
 8005e20:	9307      	str	r3, [sp, #28]
 8005e22:	f10c 0307 	add.w	r3, ip, #7
 8005e26:	9308      	str	r3, [sp, #32]
 8005e28:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	f000 8267 	beq.w	80062fe <depthwise_kernel5x5_stride2_inplace_kernel_CHW+0x55e>
 8005e30:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8005e32:	1e73      	subs	r3, r6, #1
 8005e34:	9700      	str	r7, [sp, #0]
 8005e36:	eb08 0102 	add.w	r1, r8, r2
 8005e3a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8005e3c:	fb0b f303 	mul.w	r3, fp, r3
 8005e40:	4442      	add	r2, r8
 8005e42:	f8cd b0c4 	str.w	fp, [sp, #196]	@ 0xc4
 8005e46:	930d      	str	r3, [sp, #52]	@ 0x34
 8005e48:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005e4a:	fb0b f206 	mul.w	r2, fp, r6
 8005e4e:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8005e50:	920c      	str	r2, [sp, #48]	@ 0x30
 8005e52:	f10c 0208 	add.w	r2, ip, #8
 8005e56:	4443      	add	r3, r8
 8005e58:	9201      	str	r2, [sp, #4]
 8005e5a:	f10c 0209 	add.w	r2, ip, #9
 8005e5e:	9202      	str	r2, [sp, #8]
 8005e60:	f10c 020a 	add.w	r2, ip, #10
 8005e64:	e9cd e610 	strd	lr, r6, [sp, #64]	@ 0x40
 8005e68:	9203      	str	r2, [sp, #12]
 8005e6a:	e9cd 7c12 	strd	r7, ip, [sp, #72]	@ 0x48
            q31_t sum0 = bias[0] + biasR[0];
 8005e6e:	9a05      	ldr	r2, [sp, #20]
            sum0 += cols_8b[0]*ksrc[0];
 8005e70:	f999 6000 	ldrsb.w	r6, [r9]
            q31_t sum0 = bias[0] + biasR[0];
 8005e74:	6810      	ldr	r0, [r2, #0]
 8005e76:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
            sum0 += cols_8b[0]*ksrc[0];
 8005e78:	f998 4000 	ldrsb.w	r4, [r8]
            q31_t sum0 = bias[0] + biasR[0];
 8005e7c:	6812      	ldr	r2, [r2, #0]
            sum0 += cols_8b[1]*ksrc[1];
 8005e7e:	f999 5001 	ldrsb.w	r5, [r9, #1]
            q31_t sum0 = bias[0] + biasR[0];
 8005e82:	4402      	add	r2, r0
 8005e84:	900a      	str	r0, [sp, #40]	@ 0x28
            sum0 += cols_8b[1]*ksrc[1];
 8005e86:	f998 0001 	ldrsb.w	r0, [r8, #1]
            sum0 += cols_8b[0]*ksrc[0];
 8005e8a:	fb16 2404 	smlabb	r4, r6, r4, r2
            sum0 += cols_8b[4]*ksrc[4];
 8005e8e:	f999 b004 	ldrsb.w	fp, [r9, #4]
            sum0 += cols_8b[0]*ksrc[5];
 8005e92:	f999 e005 	ldrsb.w	lr, [r9, #5]
            sum0 += cols_8b[1]*ksrc[1];
 8005e96:	fb15 4000 	smlabb	r0, r5, r0, r4
            sum1 += cols_8b[2]*ksrc[0];
 8005e9a:	f998 4002 	ldrsb.w	r4, [r8, #2]
            sum0 += cols_8b[1]*ksrc[6];
 8005e9e:	f999 7006 	ldrsb.w	r7, [r9, #6]
            sum1 += cols_8b[2]*ksrc[0];
 8005ea2:	fb04 2206 	mla	r2, r4, r6, r2
            sum0 += cols_8b[2]*ksrc[2];
 8005ea6:	f999 6002 	ldrsb.w	r6, [r9, #2]
 8005eaa:	fb06 0004 	mla	r0, r6, r4, r0
            sum1 += cols_8b[3]*ksrc[1];
 8005eae:	f998 4003 	ldrsb.w	r4, [r8, #3]
 8005eb2:	fb04 2205 	mla	r2, r4, r5, r2
            sum0 += cols_8b[3]*ksrc[3];
 8005eb6:	f999 5003 	ldrsb.w	r5, [r9, #3]
 8005eba:	fb05 0004 	mla	r0, r5, r4, r0
            sum1 += cols_8b[4]*ksrc[2];
 8005ebe:	f998 4004 	ldrsb.w	r4, [r8, #4]
 8005ec2:	fb04 2206 	mla	r2, r4, r6, r2
            sum0 += cols_8b[1]*ksrc[6];
 8005ec6:	9e07      	ldr	r6, [sp, #28]
            sum0 += cols_8b[4]*ksrc[4];
 8005ec8:	fb0b 0004 	mla	r0, fp, r4, r0
            sum0 += cols_8b[0]*ksrc[5];
 8005ecc:	9c04      	ldr	r4, [sp, #16]
 8005ece:	f918 4004 	ldrsb.w	r4, [r8, r4]
 8005ed2:	fb1e 0404 	smlabb	r4, lr, r4, r0
            sum0 += cols_8b[1]*ksrc[6];
 8005ed6:	f918 0006 	ldrsb.w	r0, [r8, r6]
            sum1 += cols_8b[2]*ksrc[5];
 8005eda:	9e06      	ldr	r6, [sp, #24]
            sum0 += cols_8b[1]*ksrc[6];
 8005edc:	fb17 4000 	smlabb	r0, r7, r0, r4
            sum1 += cols_8b[5]*ksrc[3];
 8005ee0:	f998 4005 	ldrsb.w	r4, [r8, #5]
            sum1 += cols_8b[2]*ksrc[5];
 8005ee4:	f918 a006 	ldrsb.w	sl, [r8, r6]
            sum1 += cols_8b[5]*ksrc[3];
 8005ee8:	fb14 2405 	smlabb	r4, r4, r5, r2
            sum1 += cols_8b[3]*ksrc[6];
 8005eec:	9a08      	ldr	r2, [sp, #32]
            sum0 += cols_8b[2]*ksrc[7];
 8005eee:	f999 6007 	ldrsb.w	r6, [r9, #7]
            sum1 += cols_8b[3]*ksrc[6];
 8005ef2:	f918 c002 	ldrsb.w	ip, [r8, r2]
            sum1 += cols_8b[6]*ksrc[4];
 8005ef6:	f998 2006 	ldrsb.w	r2, [r8, #6]
            sum0 += cols_8b[2]*ksrc[7];
 8005efa:	fb06 000a 	mla	r0, r6, sl, r0
            sum0 += cols_8b[3]*ksrc[8];
 8005efe:	f999 5008 	ldrsb.w	r5, [r9, #8]
            sum1 += cols_8b[6]*ksrc[4];
 8005f02:	fb12 420b 	smlabb	r2, r2, fp, r4
            sum0 += cols_8b[3]*ksrc[8];
 8005f06:	fb05 000c 	mla	r0, r5, ip, r0
            sum1 += cols_8b[2]*ksrc[5];
 8005f0a:	fb0a 220e 	mla	r2, sl, lr, r2
            sum0 += cols_8b[4]*ksrc[9];
 8005f0e:	f999 e009 	ldrsb.w	lr, [r9, #9]
            sum1 += cols_8b[3]*ksrc[6];
 8005f12:	fb0c 2207 	mla	r2, ip, r7, r2
            sum1 += cols_8b[4]*ksrc[7];
 8005f16:	9f01      	ldr	r7, [sp, #4]
 8005f18:	f918 4007 	ldrsb.w	r4, [r8, r7]
            sum0 += cols_8b[0]*ksrc[10];
 8005f1c:	f999 a00a 	ldrsb.w	sl, [r9, #10]
            sum1 += cols_8b[4]*ksrc[7];
 8005f20:	fb04 2206 	mla	r2, r4, r6, r2
            sum0 += cols_8b[1]*ksrc[11];
 8005f24:	f999 c00b 	ldrsb.w	ip, [r9, #11]
            sum0 += cols_8b[4]*ksrc[9];
 8005f28:	fb0e 0004 	mla	r0, lr, r4, r0
            sum0 += cols_8b[0]*ksrc[10];
 8005f2c:	f993 4000 	ldrsb.w	r4, [r3]
            sum1 += cols_8b[2]*ksrc[10];
 8005f30:	f993 7002 	ldrsb.w	r7, [r3, #2]
            sum0 += cols_8b[0]*ksrc[10];
 8005f34:	fb1a 0404 	smlabb	r4, sl, r4, r0
            sum0 += cols_8b[1]*ksrc[11];
 8005f38:	f993 0001 	ldrsb.w	r0, [r3, #1]
            sum1 += cols_8b[3]*ksrc[11];
 8005f3c:	f993 6003 	ldrsb.w	r6, [r3, #3]
            sum0 += cols_8b[1]*ksrc[11];
 8005f40:	fb1c 4000 	smlabb	r0, ip, r0, r4
            sum1 += cols_8b[5]*ksrc[8];
 8005f44:	9c02      	ldr	r4, [sp, #8]
            sum0 += cols_8b[4]*ksrc[14];
 8005f46:	f999 b00e 	ldrsb.w	fp, [r9, #14]
            sum1 += cols_8b[5]*ksrc[8];
 8005f4a:	f918 4004 	ldrsb.w	r4, [r8, r4]
 8005f4e:	fb14 2405 	smlabb	r4, r4, r5, r2
            sum1 += cols_8b[6]*ksrc[9];
 8005f52:	9d03      	ldr	r5, [sp, #12]
 8005f54:	f918 2005 	ldrsb.w	r2, [r8, r5]
            sum1 += cols_8b[4]*ksrc[12];
 8005f58:	f993 5004 	ldrsb.w	r5, [r3, #4]
            sum1 += cols_8b[6]*ksrc[9];
 8005f5c:	fb12 420e 	smlabb	r2, r2, lr, r4
            sum0 += cols_8b[2]*ksrc[12];
 8005f60:	f999 400c 	ldrsb.w	r4, [r9, #12]
            sum0 += cols_8b[0]*ksrc[15];
 8005f64:	f999 e00f 	ldrsb.w	lr, [r9, #15]
            sum1 += cols_8b[2]*ksrc[10];
 8005f68:	fb07 220a 	mla	r2, r7, sl, r2
            sum0 += cols_8b[2]*ksrc[12];
 8005f6c:	fb04 0007 	mla	r0, r4, r7, r0
            sum0 += cols_8b[3]*ksrc[13];
 8005f70:	f999 700d 	ldrsb.w	r7, [r9, #13]
            sum1 += cols_8b[3]*ksrc[11];
 8005f74:	fb06 220c 	mla	r2, r6, ip, r2
            sum0 += cols_8b[3]*ksrc[13];
 8005f78:	fb07 0006 	mla	r0, r7, r6, r0
            sum0 += cols_8b[1]*ksrc[16];
 8005f7c:	f999 6010 	ldrsb.w	r6, [r9, #16]
            sum1 += cols_8b[4]*ksrc[12];
 8005f80:	fb05 2204 	mla	r2, r5, r4, r2
            sum0 += cols_8b[0]*ksrc[15];
 8005f84:	9c04      	ldr	r4, [sp, #16]
            sum0 += cols_8b[4]*ksrc[14];
 8005f86:	fb0b 0005 	mla	r0, fp, r5, r0
            sum0 += cols_8b[1]*ksrc[16];
 8005f8a:	9d07      	ldr	r5, [sp, #28]
            sum0 += cols_8b[0]*ksrc[15];
 8005f8c:	571c      	ldrsb	r4, [r3, r4]
 8005f8e:	fb1e 0404 	smlabb	r4, lr, r4, r0
            sum0 += cols_8b[1]*ksrc[16];
 8005f92:	5758      	ldrsb	r0, [r3, r5]
            sum0 += cols_8b[2]*ksrc[17];
 8005f94:	f999 5011 	ldrsb.w	r5, [r9, #17]
            sum0 += cols_8b[1]*ksrc[16];
 8005f98:	fb16 4000 	smlabb	r0, r6, r0, r4
            sum1 += cols_8b[2]*ksrc[15];
 8005f9c:	9c06      	ldr	r4, [sp, #24]
 8005f9e:	f913 a004 	ldrsb.w	sl, [r3, r4]
            sum1 += cols_8b[5]*ksrc[13];
 8005fa2:	f993 4005 	ldrsb.w	r4, [r3, #5]
            sum0 += cols_8b[2]*ksrc[17];
 8005fa6:	fb05 000a 	mla	r0, r5, sl, r0
            sum1 += cols_8b[5]*ksrc[13];
 8005faa:	fb14 2407 	smlabb	r4, r4, r7, r2
            sum1 += cols_8b[3]*ksrc[16];
 8005fae:	9a08      	ldr	r2, [sp, #32]
            sum0 += cols_8b[3]*ksrc[18];
 8005fb0:	f999 7012 	ldrsb.w	r7, [r9, #18]
            sum1 += cols_8b[3]*ksrc[16];
 8005fb4:	f913 c002 	ldrsb.w	ip, [r3, r2]
            sum1 += cols_8b[6]*ksrc[14];
 8005fb8:	f993 2006 	ldrsb.w	r2, [r3, #6]
            sum0 += cols_8b[3]*ksrc[18];
 8005fbc:	fb07 000c 	mla	r0, r7, ip, r0
            sum1 += cols_8b[6]*ksrc[14];
 8005fc0:	fb12 420b 	smlabb	r2, r2, fp, r4
            sum1 += cols_8b[4]*ksrc[17];
 8005fc4:	9c01      	ldr	r4, [sp, #4]
            sum1 += cols_8b[2]*ksrc[15];
 8005fc6:	fb0a 220e 	mla	r2, sl, lr, r2
            sum0 += cols_8b[4]*ksrc[19];
 8005fca:	f999 a013 	ldrsb.w	sl, [r9, #19]
            sum1 += cols_8b[3]*ksrc[16];
 8005fce:	fb0c 2206 	mla	r2, ip, r6, r2
            sum1 += cols_8b[4]*ksrc[17];
 8005fd2:	571e      	ldrsb	r6, [r3, r4]
            sum0 += cols_8b[0]*ksrc[20];
 8005fd4:	f999 c014 	ldrsb.w	ip, [r9, #20]
            sum1 += cols_8b[4]*ksrc[17];
 8005fd8:	fb06 2405 	mla	r4, r6, r5, r2
            sum0 += cols_8b[4]*ksrc[19];
 8005fdc:	fb0a 0606 	mla	r6, sl, r6, r0
            sum0 += cols_8b[0]*ksrc[20];
 8005fe0:	f991 0010 	ldrsb.w	r0, [r1, #16]
            sum0 += cols_8b[1]*ksrc[21];
 8005fe4:	f991 2011 	ldrsb.w	r2, [r1, #17]
            sum0 += cols_8b[0]*ksrc[20];
 8005fe8:	fb1c 6000 	smlabb	r0, ip, r0, r6
            sum0 += cols_8b[1]*ksrc[21];
 8005fec:	f999 6015 	ldrsb.w	r6, [r9, #21]
            sum0 += cols_8b[2]*ksrc[22];
 8005ff0:	f999 5016 	ldrsb.w	r5, [r9, #22]
            sum0 += cols_8b[1]*ksrc[21];
 8005ff4:	fb16 0202 	smlabb	r2, r6, r2, r0
            sum1 += cols_8b[5]*ksrc[18];
 8005ff8:	9802      	ldr	r0, [sp, #8]
            sum1 += cols_8b[2]*ksrc[20];
 8005ffa:	f991 e012 	ldrsb.w	lr, [r1, #18]
            sum1 += cols_8b[5]*ksrc[18];
 8005ffe:	5618      	ldrsb	r0, [r3, r0]
            sum0 += cols_8b[2]*ksrc[22];
 8006000:	fb05 220e 	mla	r2, r5, lr, r2
            sum1 += cols_8b[5]*ksrc[18];
 8006004:	fb10 4007 	smlabb	r0, r0, r7, r4
            sum1 += cols_8b[3]*ksrc[21];
 8006008:	f991 7013 	ldrsb.w	r7, [r1, #19]
            sum0 += cols_8b[3]*ksrc[23];
 800600c:	f999 4017 	ldrsb.w	r4, [r9, #23]
 8006010:	fb04 2207 	mla	r2, r4, r7, r2
 8006014:	9209      	str	r2, [sp, #36]	@ 0x24
            sum1 += cols_8b[6]*ksrc[19];
 8006016:	9a03      	ldr	r2, [sp, #12]
 8006018:	f913 b002 	ldrsb.w	fp, [r3, r2]
            sum0 += cols_8b[4]*ksrc[24];
 800601c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
            sum1 += cols_8b[6]*ksrc[19];
 800601e:	fb1b 0b0a 	smlabb	fp, fp, sl, r0
            sum1 += cols_8b[4]*ksrc[22];
 8006022:	f991 0014 	ldrsb.w	r0, [r1, #20]
            sum1 += cols_8b[2]*ksrc[20];
 8006026:	fb0e bb0c 	mla	fp, lr, ip, fp
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800602a:	f04f 0c00 	mov.w	ip, #0
            sum1 += cols_8b[3]*ksrc[21];
 800602e:	fb07 bb06 	mla	fp, r7, r6, fp
            sum0 += cols_8b[4]*ksrc[24];
 8006032:	f999 6018 	ldrsb.w	r6, [r9, #24]
            sum1 += cols_8b[5]*ksrc[23];
 8006036:	f991 7015 	ldrsb.w	r7, [r1, #21]
            sum1 += cols_8b[4]*ksrc[22];
 800603a:	fb00 bb05 	mla	fp, r0, r5, fp
            sum0 += cols_8b[4]*ksrc[24];
 800603e:	fb06 2200 	mla	r2, r6, r0, r2
            sum0 = arm_nn_requantize(sum0 + biasR[0], *multiplier, *shift);
 8006042:	980a      	ldr	r0, [sp, #40]	@ 0x28
            sum1 += cols_8b[5]*ksrc[23];
 8006044:	fb17 b704 	smlabb	r7, r7, r4, fp
 8006048:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
            sum0 = arm_nn_requantize(sum0 + biasR[0], *multiplier, *shift);
 800604c:	4402      	add	r2, r0
 800604e:	982a      	ldr	r0, [sp, #168]	@ 0xa8
 8006050:	6805      	ldr	r5, [r0, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8006052:	ea25 70e5 	bic.w	r0, r5, r5, asr #31
 8006056:	2d00      	cmp	r5, #0
 8006058:	fa02 f200 	lsl.w	r2, r2, r0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800605c:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 800605e:	6800      	ldr	r0, [r0, #0]
 8006060:	fbc0 4c02 	smlal	r4, ip, r0, r2
            sum1 += cols_8b[6]*ksrc[24];
 8006064:	f991 0016 	ldrsb.w	r0, [r1, #22]
    result = (int32_t)(mult.long_long >> 31);
 8006068:	ea4f 74d4 	mov.w	r4, r4, lsr #31
 800606c:	fb10 7006 	smlabb	r0, r0, r6, r7
 8006070:	ea44 044c 	orr.w	r4, r4, ip, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8006074:	dc0d      	bgt.n	8006092 <depthwise_kernel5x5_stride2_inplace_kernel_CHW+0x2f2>
 8006076:	426d      	negs	r5, r5
    const q31_t remainder_mask = (1 << exponent) - 1;
 8006078:	2201      	movs	r2, #1
 800607a:	40aa      	lsls	r2, r5
 800607c:	3a01      	subs	r2, #1
    int32_t remainder = remainder_mask & dividend;
 800607e:	ea02 0604 	and.w	r6, r2, r4
    if (result < 0)
 8006082:	412c      	asrs	r4, r5
    q31_t threshold = remainder_mask >> 1;
 8006084:	ea4f 0262 	mov.w	r2, r2, asr #1
        threshold++;
 8006088:	bf48      	it	mi
 800608a:	3201      	addmi	r2, #1
    if (remainder > threshold)
 800608c:	4296      	cmp	r6, r2
        result++;
 800608e:	bfc8      	it	gt
 8006090:	3401      	addgt	r4, #1
            sum0 += output_offset;
 8006092:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8006094:	2600      	movs	r6, #0
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8006096:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
            sum0 += output_offset;
 8006098:	4414      	add	r4, r2
            sum0 = TN_MAX(sum0, activation_min);
 800609a:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 800609c:	4294      	cmp	r4, r2
 800609e:	bfb8      	it	lt
 80060a0:	4614      	movlt	r4, r2
            sum0 = TN_MIN(sum0, activation_max);
 80060a2:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
 80060a4:	4294      	cmp	r4, r2
 80060a6:	bfa8      	it	ge
 80060a8:	4614      	movge	r4, r2
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 80060aa:	9a00      	ldr	r2, [sp, #0]
 80060ac:	1b52      	subs	r2, r2, r5
 80060ae:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80060b0:	5554      	strb	r4, [r2, r5]
            sum1 = arm_nn_requantize(sum1 + biasR[0], *multiplier, *shift);
 80060b2:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 80060b4:	6815      	ldr	r5, [r2, #0]
 80060b6:	9a05      	ldr	r2, [sp, #20]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80060b8:	2d00      	cmp	r5, #0
 80060ba:	6812      	ldr	r2, [r2, #0]
 80060bc:	eb00 0402 	add.w	r4, r0, r2
 80060c0:	ea25 72e5 	bic.w	r2, r5, r5, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80060c4:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80060c8:	fa04 f402 	lsl.w	r4, r4, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80060cc:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 80060ce:	6812      	ldr	r2, [r2, #0]
 80060d0:	fbc2 0604 	smlal	r0, r6, r2, r4
    result = (int32_t)(mult.long_long >> 31);
 80060d4:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 80060d8:	ea40 0046 	orr.w	r0, r0, r6, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80060dc:	dc0d      	bgt.n	80060fa <depthwise_kernel5x5_stride2_inplace_kernel_CHW+0x35a>
 80060de:	426d      	negs	r5, r5
    const q31_t remainder_mask = (1 << exponent) - 1;
 80060e0:	2201      	movs	r2, #1
 80060e2:	40aa      	lsls	r2, r5
 80060e4:	3a01      	subs	r2, #1
    int32_t remainder = remainder_mask & dividend;
 80060e6:	ea02 0400 	and.w	r4, r2, r0
    if (result < 0)
 80060ea:	4128      	asrs	r0, r5
    q31_t threshold = remainder_mask >> 1;
 80060ec:	ea4f 0262 	mov.w	r2, r2, asr #1
        threshold++;
 80060f0:	bf48      	it	mi
 80060f2:	3201      	addmi	r2, #1
    if (remainder > threshold)
 80060f4:	4294      	cmp	r4, r2
        result++;
 80060f6:	bfc8      	it	gt
 80060f8:	3001      	addgt	r0, #1
            sum1 += output_offset;
 80060fa:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
            cols_8b_iterptr += STRIDE * 2;
 80060fc:	f108 0804 	add.w	r8, r8, #4
        for (j = 0; j < output_x / 2; j++) {
 8006100:	3304      	adds	r3, #4
 8006102:	3104      	adds	r1, #4
            sum1 += output_offset;
 8006104:	4410      	add	r0, r2
            sum1 = TN_MAX(sum1, activation_min);
 8006106:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8006108:	4290      	cmp	r0, r2
 800610a:	bfb8      	it	lt
 800610c:	4610      	movlt	r0, r2
            sum1 = TN_MIN(sum1, activation_max);
 800610e:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
 8006110:	4290      	cmp	r0, r2
 8006112:	bfa8      	it	ge
 8006114:	4610      	movge	r0, r2
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;
 8006116:	9a00      	ldr	r2, [sp, #0]
 8006118:	7010      	strb	r0, [r2, #0]
        for (j = 0; j < output_x / 2; j++) {
 800611a:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800611c:	4402      	add	r2, r0
 800611e:	9200      	str	r2, [sp, #0]
 8006120:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006122:	4590      	cmp	r8, r2
 8006124:	f47f aea3 	bne.w	8005e6e <depthwise_kernel5x5_stride2_inplace_kernel_CHW+0xce>
 8006128:	f8dd b0c4 	ldr.w	fp, [sp, #196]	@ 0xc4
 800612c:	e9dd e610 	ldrd	lr, r6, [sp, #64]	@ 0x40
 8006130:	e9dd 7c12 	ldrd	r7, ip, [sp, #72]	@ 0x48
        if (output_x & 1) {
 8006134:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006136:	f10e 0e01 	add.w	lr, lr, #1
 800613a:	2b00      	cmp	r3, #0
 800613c:	f000 80d0 	beq.w	80062e0 <depthwise_kernel5x5_stride2_inplace_kernel_CHW+0x540>
            q31_t sum = bias[0] + biasR[0];
 8006140:	9b05      	ldr	r3, [sp, #20]
            sum += cols_8b[0]*ksrc[0];
 8006142:	980b      	ldr	r0, [sp, #44]	@ 0x2c
            q31_t sum = bias[0] + biasR[0];
 8006144:	681c      	ldr	r4, [r3, #0]
 8006146:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
            sum += cols_8b[0]*ksrc[0];
 8006148:	f990 1000 	ldrsb.w	r1, [r0]
            q31_t sum = bias[0] + biasR[0];
 800614c:	681b      	ldr	r3, [r3, #0]
            cols_8b += column_x + 4;
 800614e:	9d04      	ldr	r5, [sp, #16]
            q31_t sum = bias[0] + biasR[0];
 8006150:	18e2      	adds	r2, r4, r3
            sum += cols_8b[0]*ksrc[0];
 8006152:	f999 3000 	ldrsb.w	r3, [r9]
 8006156:	fb11 2203 	smlabb	r2, r1, r3, r2
            sum += cols_8b[1]*ksrc[1];
 800615a:	f990 1001 	ldrsb.w	r1, [r0, #1]
 800615e:	f999 3001 	ldrsb.w	r3, [r9, #1]
 8006162:	fb11 2203 	smlabb	r2, r1, r3, r2
            sum += cols_8b[2]*ksrc[2];
 8006166:	f990 1002 	ldrsb.w	r1, [r0, #2]
 800616a:	f999 3002 	ldrsb.w	r3, [r9, #2]
 800616e:	fb11 2203 	smlabb	r2, r1, r3, r2
            sum += cols_8b[3]*ksrc[3];
 8006172:	f990 1003 	ldrsb.w	r1, [r0, #3]
 8006176:	f999 3003 	ldrsb.w	r3, [r9, #3]
 800617a:	fb11 2203 	smlabb	r2, r1, r3, r2
            sum += cols_8b[4]*ksrc[4];
 800617e:	f990 3004 	ldrsb.w	r3, [r0, #4]
 8006182:	f999 1004 	ldrsb.w	r1, [r9, #4]
 8006186:	fb13 2301 	smlabb	r3, r3, r1, r2
            cols_8b += column_x + 4;
 800618a:	1942      	adds	r2, r0, r5
            sum += cols_8b[0]*ksrc[5];
 800618c:	5741      	ldrsb	r1, [r0, r5]
 800618e:	f999 0005 	ldrsb.w	r0, [r9, #5]
 8006192:	fb11 3100 	smlabb	r1, r1, r0, r3
            sum += cols_8b[1]*ksrc[6];
 8006196:	f992 0001 	ldrsb.w	r0, [r2, #1]
 800619a:	f999 3006 	ldrsb.w	r3, [r9, #6]
 800619e:	fb10 1303 	smlabb	r3, r0, r3, r1
            sum += cols_8b[2]*ksrc[7];
 80061a2:	f992 0002 	ldrsb.w	r0, [r2, #2]
 80061a6:	f999 1007 	ldrsb.w	r1, [r9, #7]
 80061aa:	fb10 3301 	smlabb	r3, r0, r1, r3
            sum += cols_8b[3]*ksrc[8];
 80061ae:	f992 0003 	ldrsb.w	r0, [r2, #3]
 80061b2:	f999 1008 	ldrsb.w	r1, [r9, #8]
 80061b6:	fb10 3301 	smlabb	r3, r0, r1, r3
            sum += cols_8b[4]*ksrc[9];
 80061ba:	f992 1004 	ldrsb.w	r1, [r2, #4]
 80061be:	f999 0009 	ldrsb.w	r0, [r9, #9]
 80061c2:	fb11 3100 	smlabb	r1, r1, r0, r3
            cols_8b += column_x + 4;
 80061c6:	1953      	adds	r3, r2, r5
            sum += cols_8b[0]*ksrc[10];
 80061c8:	5750      	ldrsb	r0, [r2, r5]
 80061ca:	f999 200a 	ldrsb.w	r2, [r9, #10]
 80061ce:	fb10 1202 	smlabb	r2, r0, r2, r1
            sum += cols_8b[1]*ksrc[11];
 80061d2:	f993 0001 	ldrsb.w	r0, [r3, #1]
 80061d6:	f999 100b 	ldrsb.w	r1, [r9, #11]
 80061da:	fb10 2201 	smlabb	r2, r0, r1, r2
            sum += cols_8b[2]*ksrc[12];
 80061de:	f993 0002 	ldrsb.w	r0, [r3, #2]
 80061e2:	f999 100c 	ldrsb.w	r1, [r9, #12]
 80061e6:	fb10 2201 	smlabb	r2, r0, r1, r2
            sum += cols_8b[3]*ksrc[13];
 80061ea:	f993 0003 	ldrsb.w	r0, [r3, #3]
 80061ee:	f999 100d 	ldrsb.w	r1, [r9, #13]
 80061f2:	fb10 2201 	smlabb	r2, r0, r1, r2
            sum += cols_8b[4]*ksrc[14];
 80061f6:	f993 1004 	ldrsb.w	r1, [r3, #4]
 80061fa:	f999 000e 	ldrsb.w	r0, [r9, #14]
 80061fe:	fb11 2100 	smlabb	r1, r1, r0, r2
            sum += cols_8b[0]*ksrc[15];
 8006202:	5758      	ldrsb	r0, [r3, r5]
 8006204:	f999 200f 	ldrsb.w	r2, [r9, #15]
            cols_8b += column_x + 4;
 8006208:	442b      	add	r3, r5
            sum += cols_8b[0]*ksrc[15];
 800620a:	fb10 1202 	smlabb	r2, r0, r2, r1
            sum += cols_8b[1]*ksrc[16];
 800620e:	f993 0001 	ldrsb.w	r0, [r3, #1]
 8006212:	f999 1010 	ldrsb.w	r1, [r9, #16]
 8006216:	fb10 2201 	smlabb	r2, r0, r1, r2
            sum += cols_8b[2]*ksrc[17];
 800621a:	f993 0002 	ldrsb.w	r0, [r3, #2]
 800621e:	f999 1011 	ldrsb.w	r1, [r9, #17]
 8006222:	fb10 2201 	smlabb	r2, r0, r1, r2
            sum += cols_8b[3]*ksrc[18];
 8006226:	f993 0003 	ldrsb.w	r0, [r3, #3]
 800622a:	f999 1012 	ldrsb.w	r1, [r9, #18]
 800622e:	fb10 2201 	smlabb	r2, r0, r1, r2
            sum += cols_8b[4]*ksrc[19];
 8006232:	f993 1004 	ldrsb.w	r1, [r3, #4]
 8006236:	f999 0013 	ldrsb.w	r0, [r9, #19]
 800623a:	fb11 2100 	smlabb	r1, r1, r0, r2
            cols_8b += column_x + 4;
 800623e:	195a      	adds	r2, r3, r5
            sum += cols_8b[0]*ksrc[20];
 8006240:	5758      	ldrsb	r0, [r3, r5]
 8006242:	f999 3014 	ldrsb.w	r3, [r9, #20]
 8006246:	fb10 1303 	smlabb	r3, r0, r3, r1
            sum += cols_8b[1]*ksrc[21];
 800624a:	f992 0001 	ldrsb.w	r0, [r2, #1]
 800624e:	f999 1015 	ldrsb.w	r1, [r9, #21]
 8006252:	fb10 3301 	smlabb	r3, r0, r1, r3
            sum += cols_8b[2]*ksrc[22];
 8006256:	f992 0002 	ldrsb.w	r0, [r2, #2]
 800625a:	f999 1016 	ldrsb.w	r1, [r9, #22]
 800625e:	fb10 3001 	smlabb	r0, r0, r1, r3
            sum += cols_8b[3]*ksrc[23];
 8006262:	f992 3003 	ldrsb.w	r3, [r2, #3]
            sum += cols_8b[4]*ksrc[24];
 8006266:	f992 1004 	ldrsb.w	r1, [r2, #4]
            sum += cols_8b[3]*ksrc[23];
 800626a:	f999 2017 	ldrsb.w	r2, [r9, #23]
 800626e:	fb13 0302 	smlabb	r3, r3, r2, r0
            sum += cols_8b[4]*ksrc[24];
 8006272:	f999 2018 	ldrsb.w	r2, [r9, #24]
 8006276:	fb11 3102 	smlabb	r1, r1, r2, r3
            sum = arm_nn_requantize(sum + biasR[0], *multiplier, *shift);
 800627a:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800627c:	6818      	ldr	r0, [r3, #0]
 800627e:	4421      	add	r1, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8006280:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8006282:	2400      	movs	r4, #0
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8006284:	ea20 72e0 	bic.w	r2, r0, r0, asr #31
 8006288:	2800      	cmp	r0, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800628a:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800628c:	fa01 f102 	lsl.w	r1, r1, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8006290:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006294:	fbc1 2403 	smlal	r2, r4, r1, r3
    result = (int32_t)(mult.long_long >> 31);
 8006298:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 800629c:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80062a0:	dc0d      	bgt.n	80062be <depthwise_kernel5x5_stride2_inplace_kernel_CHW+0x51e>
 80062a2:	4240      	negs	r0, r0
    const q31_t remainder_mask = (1 << exponent) - 1;
 80062a4:	2301      	movs	r3, #1
 80062a6:	4083      	lsls	r3, r0
 80062a8:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 80062aa:	ea02 0103 	and.w	r1, r2, r3
    if (result < 0)
 80062ae:	4102      	asrs	r2, r0
    q31_t threshold = remainder_mask >> 1;
 80062b0:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 80062b4:	bf48      	it	mi
 80062b6:	3301      	addmi	r3, #1
    if (remainder > threshold)
 80062b8:	4299      	cmp	r1, r3
        result++;
 80062ba:	bfc8      	it	gt
 80062bc:	3201      	addgt	r2, #1
            sum += output_offset;
 80062be:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 80062c0:	991d      	ldr	r1, [sp, #116]	@ 0x74
            sum += output_offset;
 80062c2:	441a      	add	r2, r3
            cols_8b_iterptr += STRIDE;
 80062c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80062c6:	3302      	adds	r3, #2
 80062c8:	930b      	str	r3, [sp, #44]	@ 0x2c
            sum = TN_MAX(sum, activation_min);
 80062ca:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 80062cc:	429a      	cmp	r2, r3
 80062ce:	bfb8      	it	lt
 80062d0:	461a      	movlt	r2, r3
            sum = TN_MIN(sum, activation_max);
 80062d2:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 80062d4:	429a      	cmp	r2, r3
 80062d6:	bfa8      	it	ge
 80062d8:	461a      	movge	r2, r3
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 80062da:	eba7 030b 	sub.w	r3, r7, fp
 80062de:	545a      	strb	r2, [r3, r1]
        cols_8b_iterptr += (STRIDE - 1) * (column_x + 2 * 2);
 80062e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80062e2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80062e4:	4413      	add	r3, r2
 80062e6:	4698      	mov	r8, r3
    for (i = 0; i < output_y; i++) {
 80062e8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80062ea:	441e      	add	r6, r3
 80062ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80062ee:	441f      	add	r7, r3
 80062f0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80062f2:	4573      	cmp	r3, lr
 80062f4:	f47f ad98 	bne.w	8005e28 <depthwise_kernel5x5_stride2_inplace_kernel_CHW+0x88>
    }
}
 80062f8:	b01f      	add	sp, #124	@ 0x7c
 80062fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (j = 0; j < output_x / 2; j++) {
 80062fe:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 8006302:	e717      	b.n	8006134 <depthwise_kernel5x5_stride2_inplace_kernel_CHW+0x394>

08006304 <depthwise_kernel5x5_stride2_inplace_CHW>:
{
 8006304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006308:	b0b1      	sub	sp, #196	@ 0xc4
 800630a:	4689      	mov	r9, r1
 800630c:	4690      	mov	r8, r2
 800630e:	f04f 0200 	mov.w	r2, #0
 8006312:	f99d c120 	ldrsb.w	ip, [sp, #288]	@ 0x120
 8006316:	469b      	mov	fp, r3
 8006318:	f8bd 1110 	ldrh.w	r1, [sp, #272]	@ 0x110
    for(i = 0; i < input_x + 4; i++){
 800631c:	f109 0603 	add.w	r6, r9, #3
 8006320:	f36c 0207 	bfi	r2, ip, #0, #8
{
 8006324:	900a      	str	r0, [sp, #40]	@ 0x28
 8006326:	911b      	str	r1, [sp, #108]	@ 0x6c
 8006328:	f8bd 1114 	ldrh.w	r1, [sp, #276]	@ 0x114
 800632c:	f36c 220f 	bfi	r2, ip, #8, #8
    q7_t* cols_8b = (q7_t* )cols_8b_start;
 8006330:	9c47      	ldr	r4, [sp, #284]	@ 0x11c
{
 8006332:	911c      	str	r1, [sp, #112]	@ 0x70
    for(i = 0; i < input_x + 4; i++){
 8006334:	2100      	movs	r1, #0
{
 8006336:	e9dd 033d 	ldrd	r0, r3, [sp, #244]	@ 0xf4
    for(i = 0; i < input_x + 4; i++){
 800633a:	3101      	adds	r1, #1
        *cols_8b++ = PAD8;
 800633c:	f824 2b02 	strh.w	r2, [r4], #2
    for(i = 0; i < input_x + 4; i++){
 8006340:	b289      	uxth	r1, r1
 8006342:	42b1      	cmp	r1, r6
 8006344:	ddf9      	ble.n	800633a <depthwise_kernel5x5_stride2_inplace_CHW+0x36>
    for(i = 0; i < input_y; i++){
 8006346:	f1b8 0f00 	cmp.w	r8, #0
 800634a:	d00c      	beq.n	8006366 <depthwise_kernel5x5_stride2_inplace_CHW+0x62>
        *cols_8b++ = PAD8;
 800634c:	4621      	mov	r1, r4
        cols_8b += input_x; //skip middle
 800634e:	2500      	movs	r5, #0
 8006350:	f109 0704 	add.w	r7, r9, #4
    for(i = 0; i < input_y; i++){
 8006354:	3501      	adds	r5, #1
        *cols_8b++ = PAD8;//left
 8006356:	800a      	strh	r2, [r1, #0]
        *cols_8b++ = PAD8;//right
 8006358:	4439      	add	r1, r7
    for(i = 0; i < input_y; i++){
 800635a:	4545      	cmp	r5, r8
        *cols_8b++ = PAD8;//right
 800635c:	f821 2c02 	strh.w	r2, [r1, #-2]
    for(i = 0; i < input_y; i++){
 8006360:	d1f8      	bne.n	8006354 <depthwise_kernel5x5_stride2_inplace_CHW+0x50>
        *cols_8b++ = PAD8;//right
 8006362:	fb07 4408 	mla	r4, r7, r8, r4
 8006366:	f1a9 0502 	sub.w	r5, r9, #2
 800636a:	f64f 71f9 	movw	r1, #65529	@ 0xfff9
 800636e:	428d      	cmp	r5, r1
 8006370:	f200 81bf 	bhi.w	80066f2 <depthwise_kernel5x5_stride2_inplace_CHW+0x3ee>
 8006374:	2500      	movs	r5, #0
 8006376:	f109 0704 	add.w	r7, r9, #4
 800637a:	4621      	mov	r1, r4
 800637c:	f36c 0507 	bfi	r5, ip, #0, #8
 8006380:	087e      	lsrs	r6, r7, #1
 8006382:	f36c 250f 	bfi	r5, ip, #8, #8
 8006386:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800638a:	f36c 4517 	bfi	r5, ip, #16, #8
 800638e:	f36c 651f 	bfi	r5, ip, #24, #8
        *cols_8b++ = PAD8;
 8006392:	f841 5b04 	str.w	r5, [r1], #4
    for(i = 0; i < input_x + 4; i++){
 8006396:	42b1      	cmp	r1, r6
 8006398:	d1fb      	bne.n	8006392 <depthwise_kernel5x5_stride2_inplace_CHW+0x8e>
 800639a:	07fd      	lsls	r5, r7, #31
 800639c:	f027 0101 	bic.w	r1, r7, #1
 80063a0:	d501      	bpl.n	80063a6 <depthwise_kernel5x5_stride2_inplace_CHW+0xa2>
        *cols_8b++ = PAD8;
 80063a2:	f824 2011 	strh.w	r2, [r4, r1, lsl #1]
    for (c = 0; c < input_ch; c++){
 80063a6:	f1bb 0f00 	cmp.w	fp, #0
 80063aa:	f000 819e 	beq.w	80066ea <depthwise_kernel5x5_stride2_inplace_CHW+0x3e6>
        cols_8b = (q7_t*)(cols_8b_start + 2 * (input_x) + 8); //skip 2 rows
 80063ae:	9947      	ldr	r1, [sp, #284]	@ 0x11c
 80063b0:	f029 0407 	bic.w	r4, r9, #7
 80063b4:	f029 0503 	bic.w	r5, r9, #3
 80063b8:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 80063bc:	eb01 0149 	add.w	r1, r1, r9, lsl #1
 80063c0:	469e      	mov	lr, r3
 80063c2:	b297      	uxth	r7, r2
 80063c4:	fb0b f202 	mul.w	r2, fp, r2
 80063c8:	3108      	adds	r1, #8
 80063ca:	4603      	mov	r3, r0
 80063cc:	922f      	str	r2, [sp, #188]	@ 0xbc
 80063ce:	ea4f 02d9 	mov.w	r2, r9, lsr #3
 80063d2:	911d      	str	r1, [sp, #116]	@ 0x74
            for(j = 0; j < input_x; j++){
 80063d4:	1c61      	adds	r1, r4, #1
 80063d6:	00d2      	lsls	r2, r2, #3
 80063d8:	f107 0a01 	add.w	sl, r7, #1
 80063dc:	b289      	uxth	r1, r1
 80063de:	983c      	ldr	r0, [sp, #240]	@ 0xf0
 80063e0:	922d      	str	r2, [sp, #180]	@ 0xb4
 80063e2:	9125      	str	r1, [sp, #148]	@ 0x94
 80063e4:	1ca1      	adds	r1, r4, #2
 80063e6:	fb0b f204 	mul.w	r2, fp, r4
 80063ea:	b289      	uxth	r1, r1
 80063ec:	f8cd a090 	str.w	sl, [sp, #144]	@ 0x90
 80063f0:	9221      	str	r2, [sp, #132]	@ 0x84
 80063f2:	f009 0203 	and.w	r2, r9, #3
 80063f6:	9126      	str	r1, [sp, #152]	@ 0x98
 80063f8:	1ce1      	adds	r1, r4, #3
 80063fa:	b289      	uxth	r1, r1
 80063fc:	9127      	str	r1, [sp, #156]	@ 0x9c
 80063fe:	1d21      	adds	r1, r4, #4
 8006400:	b289      	uxth	r1, r1
 8006402:	9128      	str	r1, [sp, #160]	@ 0xa0
 8006404:	1d61      	adds	r1, r4, #5
 8006406:	b289      	uxth	r1, r1
 8006408:	9129      	str	r1, [sp, #164]	@ 0xa4
 800640a:	1da1      	adds	r1, r4, #6
 800640c:	b289      	uxth	r1, r1
 800640e:	912a      	str	r1, [sp, #168]	@ 0xa8
 8006410:	ea4f 0199 	mov.w	r1, r9, lsr #2
 8006414:	0089      	lsls	r1, r1, #2
 8006416:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006418:	1c69      	adds	r1, r5, #1
 800641a:	b289      	uxth	r1, r1
 800641c:	910e      	str	r1, [sp, #56]	@ 0x38
 800641e:	1ca9      	adds	r1, r5, #2
 8006420:	b2ad      	uxth	r5, r5
 8006422:	b289      	uxth	r1, r1
 8006424:	910f      	str	r1, [sp, #60]	@ 0x3c
 8006426:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006428:	4459      	add	r1, fp
 800642a:	911a      	str	r1, [sp, #104]	@ 0x68
 800642c:	fb07 b10b 	mla	r1, r7, fp, fp
 8006430:	9111      	str	r1, [sp, #68]	@ 0x44
 8006432:	ea4f 01cb 	mov.w	r1, fp, lsl #3
 8006436:	912c      	str	r1, [sp, #176]	@ 0xb0
 8006438:	ea4f 018b 	mov.w	r1, fp, lsl #2
 800643c:	9120      	str	r1, [sp, #128]	@ 0x80
 800643e:	ebab 018b 	sub.w	r1, fp, fp, lsl #2
 8006442:	9122      	str	r1, [sp, #136]	@ 0x88
 8006444:	ebcb 018b 	rsb	r1, fp, fp, lsl #2
 8006448:	912e      	str	r1, [sp, #184]	@ 0xb8
 800644a:	eb0b 018b 	add.w	r1, fp, fp, lsl #2
 800644e:	9123      	str	r1, [sp, #140]	@ 0x8c
 8006450:	b2a1      	uxth	r1, r4
 8006452:	465c      	mov	r4, fp
 8006454:	46c3      	mov	fp, r8
 8006456:	9112      	str	r1, [sp, #72]	@ 0x48
 8006458:	e9cd 270c 	strd	r2, r7, [sp, #48]	@ 0x30
        for(i = 0; i < input_y; i++){
 800645c:	f1bb 0f00 	cmp.w	fp, #0
 8006460:	d032      	beq.n	80064c8 <depthwise_kernel5x5_stride2_inplace_CHW+0x1c4>
 8006462:	f1b9 0f00 	cmp.w	r9, #0
 8006466:	d02f      	beq.n	80064c8 <depthwise_kernel5x5_stride2_inplace_CHW+0x1c4>
 8006468:	2c01      	cmp	r4, #1
 800646a:	d17c      	bne.n	8006566 <depthwise_kernel5x5_stride2_inplace_CHW+0x262>
 800646c:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 800646e:	f04f 0c00 	mov.w	ip, #0
 8006472:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8006474:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006476:	f106 0805 	add.w	r8, r6, #5
 800647a:	1c97      	adds	r7, r2, #2
 800647c:	f8cd e0f8 	str.w	lr, [sp, #248]	@ 0xf8
 8006480:	eb01 0209 	add.w	r2, r1, r9
 8006484:	46b2      	mov	sl, r6
 8006486:	f8dd e090 	ldr.w	lr, [sp, #144]	@ 0x90
 800648a:	9410      	str	r4, [sp, #64]	@ 0x40
 800648c:	e9cd 033c 	strd	r0, r3, [sp, #240]	@ 0xf0
            for(j = 0; j < input_x; j++){
 8006490:	f1ba 0f05 	cmp.w	sl, #5
 8006494:	d904      	bls.n	80064a0 <depthwise_kernel5x5_stride2_inplace_CHW+0x19c>
 8006496:	1c48      	adds	r0, r1, #1
 8006498:	460b      	mov	r3, r1
 800649a:	1a38      	subs	r0, r7, r0
 800649c:	2802      	cmp	r0, #2
 800649e:	d83e      	bhi.n	800651e <depthwise_kernel5x5_stride2_inplace_CHW+0x21a>
 80064a0:	460b      	mov	r3, r1
 80064a2:	1e78      	subs	r0, r7, #1
                *cols_8b++ = *src;// + input_offset;
 80064a4:	f913 4b01 	ldrsb.w	r4, [r3], #1
            for(j = 0; j < input_x; j++){
 80064a8:	429a      	cmp	r2, r3
                *cols_8b++ = *src;// + input_offset;
 80064aa:	f800 4f01 	strb.w	r4, [r0, #1]!
            for(j = 0; j < input_x; j++){
 80064ae:	d1f9      	bne.n	80064a4 <depthwise_kernel5x5_stride2_inplace_CHW+0x1a0>
        for(i = 0; i < input_y; i++){
 80064b0:	f10c 0c01 	add.w	ip, ip, #1
                src += input_ch;
 80064b4:	4471      	add	r1, lr
        for(i = 0; i < input_y; i++){
 80064b6:	4447      	add	r7, r8
 80064b8:	4472      	add	r2, lr
 80064ba:	45dc      	cmp	ip, fp
 80064bc:	d1e8      	bne.n	8006490 <depthwise_kernel5x5_stride2_inplace_CHW+0x18c>
 80064be:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80064c0:	f8dd e0f8 	ldr.w	lr, [sp, #248]	@ 0xf8
 80064c4:	e9dd 033c 	ldrd	r0, r3, [sp, #240]	@ 0xf0
        depthwise_kernel5x5_stride2_inplace_kernel_CHW(output_y, output_x, bias++, biasR++, ksrc, output_mult++, output_shift++, inplace_out,output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 80064c8:	993a      	ldr	r1, [sp, #232]	@ 0xe8
 80064ca:	f103 0804 	add.w	r8, r3, #4
 80064ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80064d0:	1d07      	adds	r7, r0, #4
 80064d2:	9100      	str	r1, [sp, #0]
 80064d4:	f10e 0a04 	add.w	sl, lr, #4
 80064d8:	9947      	ldr	r1, [sp, #284]	@ 0x11c
 80064da:	9203      	str	r2, [sp, #12]
        input++;
 80064dc:	3201      	adds	r2, #1
        depthwise_kernel5x5_stride2_inplace_kernel_CHW(output_y, output_x, bias++, biasR++, ksrc, output_mult++, output_shift++, inplace_out,output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 80064de:	9107      	str	r1, [sp, #28]
 80064e0:	9942      	ldr	r1, [sp, #264]	@ 0x108
        input++;
 80064e2:	920a      	str	r2, [sp, #40]	@ 0x28
        depthwise_kernel5x5_stride2_inplace_kernel_CHW(output_y, output_x, bias++, biasR++, ksrc, output_mult++, output_shift++, inplace_out,output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 80064e4:	9106      	str	r1, [sp, #24]
 80064e6:	9941      	ldr	r1, [sp, #260]	@ 0x104
 80064e8:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
 80064ea:	9105      	str	r1, [sp, #20]
 80064ec:	993f      	ldr	r1, [sp, #252]	@ 0xfc
 80064ee:	1d16      	adds	r6, r2, #4
 80064f0:	e9cd e301 	strd	lr, r3, [sp, #4]
        ksrc += 25;
 80064f4:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
        depthwise_kernel5x5_stride2_inplace_kernel_CHW(output_y, output_x, bias++, biasR++, ksrc, output_mult++, output_shift++, inplace_out,output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 80064f6:	9104      	str	r1, [sp, #16]
        ksrc += 25;
 80064f8:	3319      	adds	r3, #25
        depthwise_kernel5x5_stride2_inplace_kernel_CHW(output_y, output_x, bias++, biasR++, ksrc, output_mult++, output_shift++, inplace_out,output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 80064fa:	e9cd 9408 	strd	r9, r4, [sp, #32]
        ksrc += 25;
 80064fe:	933a      	str	r3, [sp, #232]	@ 0xe8
        depthwise_kernel5x5_stride2_inplace_kernel_CHW(output_y, output_x, bias++, biasR++, ksrc, output_mult++, output_shift++, inplace_out,output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8006500:	4603      	mov	r3, r0
 8006502:	e9dd 101b 	ldrd	r1, r0, [sp, #108]	@ 0x6c
 8006506:	f7ff fc4b 	bl	8005da0 <depthwise_kernel5x5_stride2_inplace_kernel_CHW>
    for (c = 0; c < input_ch; c++){
 800650a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800650c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800650e:	429a      	cmp	r2, r3
 8006510:	f000 80eb 	beq.w	80066ea <depthwise_kernel5x5_stride2_inplace_CHW+0x3e6>
        depthwise_kernel5x5_stride2_inplace_kernel_CHW(output_y, output_x, bias++, biasR++, ksrc, output_mult++, output_shift++, inplace_out,output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8006514:	46d6      	mov	lr, sl
 8006516:	4643      	mov	r3, r8
 8006518:	4638      	mov	r0, r7
 800651a:	963b      	str	r6, [sp, #236]	@ 0xec
 800651c:	e79e      	b.n	800645c <depthwise_kernel5x5_stride2_inplace_CHW+0x158>
 800651e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8006520:	1846      	adds	r6, r0, r1
            cols_8b += 2;//skip front
 8006522:	4638      	mov	r0, r7
                *cols_8b++ = *src;// + input_offset;
 8006524:	f853 4b04 	ldr.w	r4, [r3], #4
 8006528:	429e      	cmp	r6, r3
 800652a:	f840 4b04 	str.w	r4, [r0], #4
            for(j = 0; j < input_x; j++){
 800652e:	d1f9      	bne.n	8006524 <depthwise_kernel5x5_stride2_inplace_CHW+0x220>
 8006530:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8006532:	197b      	adds	r3, r7, r5
 8006534:	1948      	adds	r0, r1, r5
 8006536:	2c00      	cmp	r4, #0
 8006538:	d0ba      	beq.n	80064b0 <depthwise_kernel5x5_stride2_inplace_CHW+0x1ac>
                *cols_8b++ = *src;// + input_offset;
 800653a:	574c      	ldrsb	r4, [r1, r5]
 800653c:	557c      	strb	r4, [r7, r5]
            for(j = 0; j < input_x; j++){
 800653e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8006540:	454c      	cmp	r4, r9
 8006542:	d2b5      	bcs.n	80064b0 <depthwise_kernel5x5_stride2_inplace_CHW+0x1ac>
                *cols_8b++ = *src;// + input_offset;
 8006544:	f990 4001 	ldrsb.w	r4, [r0, #1]
 8006548:	705c      	strb	r4, [r3, #1]
            for(j = 0; j < input_x; j++){
 800654a:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 800654c:	45a1      	cmp	r9, r4
 800654e:	d9af      	bls.n	80064b0 <depthwise_kernel5x5_stride2_inplace_CHW+0x1ac>
        for(i = 0; i < input_y; i++){
 8006550:	f10c 0c01 	add.w	ip, ip, #1
                *cols_8b++ = *src;// + input_offset;
 8006554:	f990 0002 	ldrsb.w	r0, [r0, #2]
                src += input_ch;
 8006558:	4471      	add	r1, lr
        for(i = 0; i < input_y; i++){
 800655a:	4447      	add	r7, r8
 800655c:	45dc      	cmp	ip, fp
 800655e:	4472      	add	r2, lr
                *cols_8b++ = *src;// + input_offset;
 8006560:	7098      	strb	r0, [r3, #2]
        for(i = 0; i < input_y; i++){
 8006562:	d195      	bne.n	8006490 <depthwise_kernel5x5_stride2_inplace_CHW+0x18c>
 8006564:	e7ab      	b.n	80064be <depthwise_kernel5x5_stride2_inplace_CHW+0x1ba>
 8006566:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8006568:	f109 0201 	add.w	r2, r9, #1
 800656c:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 800656e:	f04f 0c00 	mov.w	ip, #0
 8006572:	440a      	add	r2, r1
 8006574:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8006576:	f106 0a05 	add.w	sl, r6, #5
 800657a:	1c8e      	adds	r6, r1, #2
 800657c:	992f      	ldr	r1, [sp, #188]	@ 0xbc
 800657e:	f8cd b040 	str.w	fp, [sp, #64]	@ 0x40
 8006582:	eb07 0801 	add.w	r8, r7, r1
 8006586:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 8006588:	f8cd e0f8 	str.w	lr, [sp, #248]	@ 0xf8
 800658c:	3102      	adds	r1, #2
 800658e:	f8dd b0b0 	ldr.w	fp, [sp, #176]	@ 0xb0
 8006592:	f8dd e0b8 	ldr.w	lr, [sp, #184]	@ 0xb8
 8006596:	911e      	str	r1, [sp, #120]	@ 0x78
 8006598:	f009 0107 	and.w	r1, r9, #7
 800659c:	952b      	str	r5, [sp, #172]	@ 0xac
 800659e:	911f      	str	r1, [sp, #124]	@ 0x7c
 80065a0:	4661      	mov	r1, ip
 80065a2:	e9cd 033c 	strd	r0, r3, [sp, #240]	@ 0xf0
            for(j = 0; j < input_x; j++){
 80065a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80065a8:	2b1b      	cmp	r3, #27
 80065aa:	d903      	bls.n	80065b4 <depthwise_kernel5x5_stride2_inplace_CHW+0x2b0>
 80065ac:	4546      	cmp	r6, r8
 80065ae:	d81a      	bhi.n	80065e6 <depthwise_kernel5x5_stride2_inplace_CHW+0x2e2>
 80065b0:	4297      	cmp	r7, r2
 80065b2:	d818      	bhi.n	80065e6 <depthwise_kernel5x5_stride2_inplace_CHW+0x2e2>
 80065b4:	1e70      	subs	r0, r6, #1
            cols_8b += 2;//skip front
 80065b6:	463b      	mov	r3, r7
                *cols_8b++ = *src;// + input_offset;
 80065b8:	f993 5000 	ldrsb.w	r5, [r3]
                src += input_ch;
 80065bc:	4423      	add	r3, r4
                *cols_8b++ = *src;// + input_offset;
 80065be:	f800 5f01 	strb.w	r5, [r0, #1]!
            for(j = 0; j < input_x; j++){
 80065c2:	4290      	cmp	r0, r2
 80065c4:	d1f8      	bne.n	80065b8 <depthwise_kernel5x5_stride2_inplace_CHW+0x2b4>
                src += input_ch;
 80065c6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
        for(i = 0; i < input_y; i++){
 80065c8:	3101      	adds	r1, #1
 80065ca:	4456      	add	r6, sl
 80065cc:	4452      	add	r2, sl
                src += input_ch;
 80065ce:	441f      	add	r7, r3
        for(i = 0; i < input_y; i++){
 80065d0:	4498      	add	r8, r3
 80065d2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80065d4:	4299      	cmp	r1, r3
 80065d6:	d1e6      	bne.n	80065a6 <depthwise_kernel5x5_stride2_inplace_CHW+0x2a2>
 80065d8:	469b      	mov	fp, r3
 80065da:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 80065dc:	f8dd e0f8 	ldr.w	lr, [sp, #248]	@ 0xf8
 80065e0:	e9dd 033c 	ldrd	r0, r3, [sp, #240]	@ 0xf0
 80065e4:	e770      	b.n	80064c8 <depthwise_kernel5x5_stride2_inplace_CHW+0x1c4>
 80065e6:	1eb3      	subs	r3, r6, #2
 80065e8:	981e      	ldr	r0, [sp, #120]	@ 0x78
 80065ea:	9d20      	ldr	r5, [sp, #128]	@ 0x80
 80065ec:	4418      	add	r0, r3
            cols_8b += 2;//skip front
 80065ee:	f8cd 9064 	str.w	r9, [sp, #100]	@ 0x64
 80065f2:	eb05 0c07 	add.w	ip, r5, r7
 80065f6:	463b      	mov	r3, r7
 80065f8:	4635      	mov	r5, r6
 80065fa:	f8dd 908c 	ldr.w	r9, [sp, #140]	@ 0x8c
 80065fe:	e9cd 6a15 	strd	r6, sl, [sp, #84]	@ 0x54
 8006602:	e9cd 2817 	strd	r2, r8, [sp, #92]	@ 0x5c
 8006606:	4682      	mov	sl, r0
 8006608:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 800660c:	e9cd 7113 	strd	r7, r1, [sp, #76]	@ 0x4c
                *cols_8b++ = *src;// + input_offset;
 8006610:	781f      	ldrb	r7, [r3, #0]
 8006612:	2200      	movs	r2, #0
 8006614:	f81c 0008 	ldrb.w	r0, [ip, r8]
 8006618:	3508      	adds	r5, #8
 800661a:	f813 6024 	ldrb.w	r6, [r3, r4, lsl #2]
 800661e:	4611      	mov	r1, r2
 8006620:	f367 0207 	bfi	r2, r7, #0, #8
 8006624:	f366 0107 	bfi	r1, r6, #0, #8
 8006628:	f360 220f 	bfi	r2, r0, #8, #8
 800662c:	f813 0009 	ldrb.w	r0, [r3, r9]
 8006630:	f360 210f 	bfi	r1, r0, #8, #8
 8006634:	f813 0014 	ldrb.w	r0, [r3, r4, lsl #1]
 8006638:	f360 4217 	bfi	r2, r0, #16, #8
 800663c:	f81c 0014 	ldrb.w	r0, [ip, r4, lsl #1]
 8006640:	f360 4117 	bfi	r1, r0, #16, #8
 8006644:	f813 000e 	ldrb.w	r0, [r3, lr]
 8006648:	445b      	add	r3, fp
 800664a:	f360 621f 	bfi	r2, r0, #24, #8
 800664e:	f81c 000e 	ldrb.w	r0, [ip, lr]
 8006652:	44dc      	add	ip, fp
 8006654:	f360 611f 	bfi	r1, r0, #24, #8
 8006658:	f845 2c08 	str.w	r2, [r5, #-8]
 800665c:	f845 1c04 	str.w	r1, [r5, #-4]
            for(j = 0; j < input_x; j++){
 8006660:	4555      	cmp	r5, sl
 8006662:	d1d5      	bne.n	8006610 <depthwise_kernel5x5_stride2_inplace_CHW+0x30c>
 8006664:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006666:	9d21      	ldr	r5, [sp, #132]	@ 0x84
 8006668:	f8dd 9064 	ldr.w	r9, [sp, #100]	@ 0x64
 800666c:	e9dd 6a15 	ldrd	r6, sl, [sp, #84]	@ 0x54
 8006670:	e9dd 7113 	ldrd	r7, r1, [sp, #76]	@ 0x4c
 8006674:	eb06 0c03 	add.w	ip, r6, r3
 8006678:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800667a:	1978      	adds	r0, r7, r5
 800667c:	e9dd 2817 	ldrd	r2, r8, [sp, #92]	@ 0x5c
 8006680:	2b00      	cmp	r3, #0
 8006682:	d0a0      	beq.n	80065c6 <depthwise_kernel5x5_stride2_inplace_CHW+0x2c2>
                *cols_8b++ = *src;// + input_offset;
 8006684:	577d      	ldrsb	r5, [r7, r5]
 8006686:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006688:	54f5      	strb	r5, [r6, r3]
                src += input_ch;
 800668a:	1905      	adds	r5, r0, r4
            for(j = 0; j < input_x; j++){
 800668c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800668e:	4599      	cmp	r9, r3
 8006690:	d999      	bls.n	80065c6 <depthwise_kernel5x5_stride2_inplace_CHW+0x2c2>
 8006692:	9b26      	ldr	r3, [sp, #152]	@ 0x98
                *cols_8b++ = *src;// + input_offset;
 8006694:	5700      	ldrsb	r0, [r0, r4]
            for(j = 0; j < input_x; j++){
 8006696:	4599      	cmp	r9, r3
                *cols_8b++ = *src;// + input_offset;
 8006698:	f88c 0001 	strb.w	r0, [ip, #1]
                src += input_ch;
 800669c:	eb05 0004 	add.w	r0, r5, r4
            for(j = 0; j < input_x; j++){
 80066a0:	d991      	bls.n	80065c6 <depthwise_kernel5x5_stride2_inplace_CHW+0x2c2>
 80066a2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
                *cols_8b++ = *src;// + input_offset;
 80066a4:	572d      	ldrsb	r5, [r5, r4]
            for(j = 0; j < input_x; j++){
 80066a6:	4599      	cmp	r9, r3
                *cols_8b++ = *src;// + input_offset;
 80066a8:	f88c 5002 	strb.w	r5, [ip, #2]
                src += input_ch;
 80066ac:	eb00 0504 	add.w	r5, r0, r4
            for(j = 0; j < input_x; j++){
 80066b0:	d989      	bls.n	80065c6 <depthwise_kernel5x5_stride2_inplace_CHW+0x2c2>
 80066b2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
                *cols_8b++ = *src;// + input_offset;
 80066b4:	5700      	ldrsb	r0, [r0, r4]
            for(j = 0; j < input_x; j++){
 80066b6:	4599      	cmp	r9, r3
                *cols_8b++ = *src;// + input_offset;
 80066b8:	f88c 0003 	strb.w	r0, [ip, #3]
                src += input_ch;
 80066bc:	eb05 0004 	add.w	r0, r5, r4
            for(j = 0; j < input_x; j++){
 80066c0:	d981      	bls.n	80065c6 <depthwise_kernel5x5_stride2_inplace_CHW+0x2c2>
 80066c2:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
                *cols_8b++ = *src;// + input_offset;
 80066c4:	572d      	ldrsb	r5, [r5, r4]
            for(j = 0; j < input_x; j++){
 80066c6:	4599      	cmp	r9, r3
                *cols_8b++ = *src;// + input_offset;
 80066c8:	f88c 5004 	strb.w	r5, [ip, #4]
                src += input_ch;
 80066cc:	eb00 0504 	add.w	r5, r0, r4
            for(j = 0; j < input_x; j++){
 80066d0:	f67f af79 	bls.w	80065c6 <depthwise_kernel5x5_stride2_inplace_CHW+0x2c2>
 80066d4:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
                *cols_8b++ = *src;// + input_offset;
 80066d6:	5700      	ldrsb	r0, [r0, r4]
            for(j = 0; j < input_x; j++){
 80066d8:	4599      	cmp	r9, r3
                *cols_8b++ = *src;// + input_offset;
 80066da:	f88c 0005 	strb.w	r0, [ip, #5]
            for(j = 0; j < input_x; j++){
 80066de:	f67f af72 	bls.w	80065c6 <depthwise_kernel5x5_stride2_inplace_CHW+0x2c2>
                *cols_8b++ = *src;// + input_offset;
 80066e2:	5728      	ldrsb	r0, [r5, r4]
 80066e4:	f88c 0006 	strb.w	r0, [ip, #6]
            for(j = 0; j < input_x; j++){
 80066e8:	e76d      	b.n	80065c6 <depthwise_kernel5x5_stride2_inplace_CHW+0x2c2>
}
 80066ea:	2000      	movs	r0, #0
 80066ec:	b031      	add	sp, #196	@ 0xc4
 80066ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for(i = 0; i < input_x + 4; i++){
 80066f2:	2100      	movs	r1, #0
 80066f4:	3101      	adds	r1, #1
        *cols_8b++ = PAD8;
 80066f6:	f824 2b02 	strh.w	r2, [r4], #2
    for(i = 0; i < input_x + 4; i++){
 80066fa:	b289      	uxth	r1, r1
 80066fc:	428e      	cmp	r6, r1
 80066fe:	daf9      	bge.n	80066f4 <depthwise_kernel5x5_stride2_inplace_CHW+0x3f0>
 8006700:	e651      	b.n	80063a6 <depthwise_kernel5x5_stride2_inplace_CHW+0xa2>
 8006702:	bf00      	nop

08006704 <depthwise_kernel7x7_stride1_inplace_kernel_CHW>:
        const uint16_t output_y, const uint16_t output_x,
        const int32_t *bias, const int32_t *biasR, const q7_t *ksrc, const int32_t *multiplier,
        const int32_t *shift, q7_t *output, const int32_t output_offset,
        const int32_t activation_min, const int32_t activation_max,
        q7_t *cols_8b_iterptr, const uint16_t column_x, int channel_offset)
{
 8006704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006708:	b0a3      	sub	sp, #140	@ 0x8c
 800670a:	461e      	mov	r6, r3
 800670c:	f8dd e0b0 	ldr.w	lr, [sp, #176]	@ 0xb0
 8006710:	9c33      	ldr	r4, [sp, #204]	@ 0xcc
 8006712:	f8bd 70d0 	ldrh.w	r7, [sp, #208]	@ 0xd0
 8006716:	f8dd 90d4 	ldr.w	r9, [sp, #212]	@ 0xd4
 800671a:	9119      	str	r1, [sp, #100]	@ 0x64
 800671c:	9212      	str	r2, [sp, #72]	@ 0x48
    #define STRIDE 1
    int i, j;
    /* MACs for each output */
    for (i = 0; i < output_y; i++) {
 800671e:	9018      	str	r0, [sp, #96]	@ 0x60
 8006720:	2800      	cmp	r0, #0
 8006722:	f000 8405 	beq.w	8006f30 <depthwise_kernel7x7_stride1_inplace_kernel_CHW+0x82c>
 8006726:	eb07 0347 	add.w	r3, r7, r7, lsl #1
        for (j = 0; j < output_x / 2; j++) {
 800672a:	460a      	mov	r2, r1
 800672c:	f04f 0801 	mov.w	r8, #1
 8006730:	1db8      	adds	r0, r7, #6
 8006732:	005b      	lsls	r3, r3, #1
    for (i = 0; i < output_y; i++) {
 8006734:	f04f 0b00 	mov.w	fp, #0
        for (j = 0; j < output_x / 2; j++) {
 8006738:	0849      	lsrs	r1, r1, #1
 800673a:	9006      	str	r0, [sp, #24]
 800673c:	9320      	str	r3, [sp, #128]	@ 0x80
 800673e:	1e53      	subs	r3, r2, #1
 8006740:	911c      	str	r1, [sp, #112]	@ 0x70
 8006742:	fb09 f303 	mul.w	r3, r9, r3
 8006746:	960a      	str	r6, [sp, #40]	@ 0x28
 8006748:	9321      	str	r3, [sp, #132]	@ 0x84
 800674a:	ea02 0308 	and.w	r3, r2, r8
 800674e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006750:	fb09 f302 	mul.w	r3, r9, r2
 8006754:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006756:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 8006758:	eb03 0a09 	add.w	sl, r3, r9
 800675c:	fa00 f308 	lsl.w	r3, r0, r8
 8006760:	931d      	str	r3, [sp, #116]	@ 0x74
 8006762:	0083      	lsls	r3, r0, #2
 8006764:	931e      	str	r3, [sp, #120]	@ 0x78
 8006766:	fa09 f308 	lsl.w	r3, r9, r8
 800676a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800676c:	fa01 f308 	lsl.w	r3, r1, r8
 8006770:	931f      	str	r3, [sp, #124]	@ 0x7c
 8006772:	1dfb      	adds	r3, r7, #7
 8006774:	9307      	str	r3, [sp, #28]
 8006776:	f107 0308 	add.w	r3, r7, #8
 800677a:	9308      	str	r3, [sp, #32]
 800677c:	f107 0309 	add.w	r3, r7, #9
 8006780:	e9cd b814 	strd	fp, r8, [sp, #80]	@ 0x50
 8006784:	9309      	str	r3, [sp, #36]	@ 0x24
 8006786:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8006788:	2b00      	cmp	r3, #0
 800678a:	f000 83d4 	beq.w	8006f36 <depthwise_kernel7x7_stride1_inplace_kernel_CHW+0x832>
            /* requantize */
            sum0 = arm_nn_requantize(sum0 + biasR[0], *multiplier, *shift);
            sum0 += output_offset;
            sum0 = TN_MAX(sum0, activation_min);
            sum0 = TN_MIN(sum0, activation_max);
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 800678e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006790:	9935      	ldr	r1, [sp, #212]	@ 0xd4
 8006792:	1e53      	subs	r3, r2, #1
 8006794:	f8cd a004 	str.w	sl, [sp, #4]
 8006798:	f8cd a058 	str.w	sl, [sp, #88]	@ 0x58
 800679c:	fb01 f303 	mul.w	r3, r1, r3
 80067a0:	9717      	str	r7, [sp, #92]	@ 0x5c
 80067a2:	9311      	str	r3, [sp, #68]	@ 0x44
 80067a4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80067a6:	eb04 0b03 	add.w	fp, r4, r3
 80067aa:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80067ac:	eb04 0903 	add.w	r9, r4, r3
 80067b0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80067b2:	46d8      	mov	r8, fp
 80067b4:	eb04 0c03 	add.w	ip, r4, r3
 80067b8:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80067ba:	18e3      	adds	r3, r4, r3
 80067bc:	930f      	str	r3, [sp, #60]	@ 0x3c
 80067be:	fb01 f302 	mul.w	r3, r1, r2
 80067c2:	9310      	str	r3, [sp, #64]	@ 0x40
 80067c4:	f107 030a 	add.w	r3, r7, #10
 80067c8:	9302      	str	r3, [sp, #8]
 80067ca:	f107 030b 	add.w	r3, r7, #11
 80067ce:	9303      	str	r3, [sp, #12]
 80067d0:	f107 030c 	add.w	r3, r7, #12
 80067d4:	9304      	str	r3, [sp, #16]
 80067d6:	f107 030d 	add.w	r3, r7, #13
 80067da:	9305      	str	r3, [sp, #20]
            q31_t sum0 = bias[0] + biasR[0];
 80067dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
            sum0 += cols_8b[0]*ksrc[0];
 80067de:	f99e 0000 	ldrsb.w	r0, [lr]
            q31_t sum0 = bias[0] + biasR[0];
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
            sum1 += cols_8b[1]*ksrc[0];
 80067e6:	f994 1001 	ldrsb.w	r1, [r4, #1]
            q31_t sum0 = bias[0] + biasR[0];
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	920e      	str	r2, [sp, #56]	@ 0x38
 80067ee:	4413      	add	r3, r2
            sum0 += cols_8b[0]*ksrc[0];
 80067f0:	f994 2000 	ldrsb.w	r2, [r4]
            sum0 += cols_8b[6]*ksrc[6];
 80067f4:	f99e b006 	ldrsb.w	fp, [lr, #6]
            sum0 += cols_8b[0]*ksrc[0];
 80067f8:	fb10 3202 	smlabb	r2, r0, r2, r3
            sum1 += cols_8b[1]*ksrc[0];
 80067fc:	fb01 3300 	mla	r3, r1, r0, r3
            sum0 += cols_8b[1]*ksrc[1];
 8006800:	f99e 0001 	ldrsb.w	r0, [lr, #1]
            sum0 += cols_8b[1]*ksrc[8];
 8006804:	f99e 7008 	ldrsb.w	r7, [lr, #8]
            sum0 += cols_8b[1]*ksrc[1];
 8006808:	fb00 2201 	mla	r2, r0, r1, r2
            sum1 += cols_8b[2]*ksrc[1];
 800680c:	f994 1002 	ldrsb.w	r1, [r4, #2]
            sum1 += cols_8b[2]*ksrc[8];
 8006810:	9d08      	ldr	r5, [sp, #32]
            sum1 += cols_8b[2]*ksrc[1];
 8006812:	fb01 3300 	mla	r3, r1, r0, r3
            sum0 += cols_8b[2]*ksrc[2];
 8006816:	f99e 0002 	ldrsb.w	r0, [lr, #2]
            sum1 += cols_8b[3]*ksrc[9];
 800681a:	9e09      	ldr	r6, [sp, #36]	@ 0x24
            sum0 += cols_8b[2]*ksrc[2];
 800681c:	fb00 2201 	mla	r2, r0, r1, r2
            sum1 += cols_8b[3]*ksrc[2];
 8006820:	f994 1003 	ldrsb.w	r1, [r4, #3]
            sum1 += cols_8b[3]*ksrc[9];
 8006824:	57a6      	ldrsb	r6, [r4, r6]
            sum1 += cols_8b[3]*ksrc[2];
 8006826:	fb01 3300 	mla	r3, r1, r0, r3
            sum0 += cols_8b[3]*ksrc[3];
 800682a:	f99e 0003 	ldrsb.w	r0, [lr, #3]
 800682e:	fb00 2201 	mla	r2, r0, r1, r2
            sum1 += cols_8b[4]*ksrc[3];
 8006832:	f994 1004 	ldrsb.w	r1, [r4, #4]
 8006836:	fb01 3300 	mla	r3, r1, r0, r3
            sum0 += cols_8b[4]*ksrc[4];
 800683a:	f99e 0004 	ldrsb.w	r0, [lr, #4]
 800683e:	fb00 2201 	mla	r2, r0, r1, r2
            sum1 += cols_8b[5]*ksrc[4];
 8006842:	f994 1005 	ldrsb.w	r1, [r4, #5]
 8006846:	fb01 3300 	mla	r3, r1, r0, r3
            sum0 += cols_8b[5]*ksrc[5];
 800684a:	f99e 0005 	ldrsb.w	r0, [lr, #5]
 800684e:	fb00 2201 	mla	r2, r0, r1, r2
            sum1 += cols_8b[6]*ksrc[5];
 8006852:	f994 1006 	ldrsb.w	r1, [r4, #6]
 8006856:	fb01 3000 	mla	r0, r1, r0, r3
            sum0 += cols_8b[0]*ksrc[7];
 800685a:	9b06      	ldr	r3, [sp, #24]
            sum0 += cols_8b[6]*ksrc[6];
 800685c:	fb0b 2201 	mla	r2, fp, r1, r2
            sum1 += cols_8b[6]*ksrc[5];
 8006860:	900d      	str	r0, [sp, #52]	@ 0x34
            sum0 += cols_8b[0]*ksrc[7];
 8006862:	56e1      	ldrsb	r1, [r4, r3]
 8006864:	f99e 0007 	ldrsb.w	r0, [lr, #7]
            sum1 += cols_8b[2]*ksrc[8];
 8006868:	5763      	ldrsb	r3, [r4, r5]
            sum0 += cols_8b[0]*ksrc[7];
 800686a:	fb10 2101 	smlabb	r1, r0, r1, r2
 800686e:	900c      	str	r0, [sp, #48]	@ 0x30
            sum1 += cols_8b[1]*ksrc[7];
 8006870:	9807      	ldr	r0, [sp, #28]
            sum0 += cols_8b[2]*ksrc[9];
 8006872:	f99e 5009 	ldrsb.w	r5, [lr, #9]
            sum1 += cols_8b[1]*ksrc[7];
 8006876:	f914 a000 	ldrsb.w	sl, [r4, r0]
            sum0 += cols_8b[3]*ksrc[10];
 800687a:	f99e 000a 	ldrsb.w	r0, [lr, #10]
            sum0 += cols_8b[1]*ksrc[8];
 800687e:	fb07 110a 	mla	r1, r7, sl, r1
            sum1 += cols_8b[7]*ksrc[6];
 8006882:	f994 2007 	ldrsb.w	r2, [r4, #7]
            sum0 += cols_8b[2]*ksrc[9];
 8006886:	fb05 1103 	mla	r1, r5, r3, r1
            sum0 += cols_8b[3]*ksrc[10];
 800688a:	fb00 1106 	mla	r1, r0, r6, r1
 800688e:	910b      	str	r1, [sp, #44]	@ 0x2c
            sum1 += cols_8b[7]*ksrc[6];
 8006890:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006892:	fb12 120b 	smlabb	r2, r2, fp, r1
            sum1 += cols_8b[1]*ksrc[7];
 8006896:	990c      	ldr	r1, [sp, #48]	@ 0x30
            sum0 += cols_8b[6]*ksrc[20];
 8006898:	f99e b014 	ldrsb.w	fp, [lr, #20]
            sum1 += cols_8b[1]*ksrc[7];
 800689c:	fb0a 2201 	mla	r2, sl, r1, r2
            sum0 += cols_8b[4]*ksrc[11];
 80068a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
            sum1 += cols_8b[2]*ksrc[8];
 80068a2:	fb03 2207 	mla	r2, r3, r7, r2
            sum1 += cols_8b[4]*ksrc[10];
 80068a6:	9f02      	ldr	r7, [sp, #8]
            sum1 += cols_8b[3]*ksrc[9];
 80068a8:	fb06 2205 	mla	r2, r6, r5, r2
            sum1 += cols_8b[4]*ksrc[10];
 80068ac:	57e3      	ldrsb	r3, [r4, r7]
            sum0 += cols_8b[4]*ksrc[11];
 80068ae:	f99e 500b 	ldrsb.w	r5, [lr, #11]
            sum1 += cols_8b[4]*ksrc[10];
 80068b2:	fb03 2200 	mla	r2, r3, r0, r2
            sum0 += cols_8b[4]*ksrc[11];
 80068b6:	fb05 1303 	mla	r3, r5, r3, r1
            sum1 += cols_8b[5]*ksrc[11];
 80068ba:	9903      	ldr	r1, [sp, #12]
 80068bc:	5660      	ldrsb	r0, [r4, r1]
            sum0 += cols_8b[5]*ksrc[12];
 80068be:	f99e 100c 	ldrsb.w	r1, [lr, #12]
            sum1 += cols_8b[5]*ksrc[11];
 80068c2:	fb00 2205 	mla	r2, r0, r5, r2
            sum0 += cols_8b[5]*ksrc[12];
 80068c6:	fb01 3300 	mla	r3, r1, r0, r3
            sum1 += cols_8b[6]*ksrc[12];
 80068ca:	9804      	ldr	r0, [sp, #16]
 80068cc:	5625      	ldrsb	r5, [r4, r0]
            sum0 += cols_8b[6]*ksrc[13];
 80068ce:	f99e 000d 	ldrsb.w	r0, [lr, #13]
            sum1 += cols_8b[6]*ksrc[12];
 80068d2:	fb05 2101 	mla	r1, r5, r1, r2
            sum1 += cols_8b[7]*ksrc[13];
 80068d6:	9a05      	ldr	r2, [sp, #20]
            sum0 += cols_8b[6]*ksrc[13];
 80068d8:	fb00 3305 	mla	r3, r0, r5, r3
            sum1 += cols_8b[7]*ksrc[13];
 80068dc:	56a2      	ldrsb	r2, [r4, r2]
 80068de:	fb12 1200 	smlabb	r2, r2, r0, r1
            sum0 += cols_8b[0]*ksrc[14];
 80068e2:	f99e 000e 	ldrsb.w	r0, [lr, #14]
 80068e6:	f998 1000 	ldrsb.w	r1, [r8]
 80068ea:	fb10 3301 	smlabb	r3, r0, r1, r3
            sum1 += cols_8b[1]*ksrc[14];
 80068ee:	f998 1001 	ldrsb.w	r1, [r8, #1]
 80068f2:	fb01 2200 	mla	r2, r1, r0, r2
            sum0 += cols_8b[1]*ksrc[15];
 80068f6:	f99e 000f 	ldrsb.w	r0, [lr, #15]
 80068fa:	fb00 3301 	mla	r3, r0, r1, r3
            sum1 += cols_8b[2]*ksrc[15];
 80068fe:	f998 1002 	ldrsb.w	r1, [r8, #2]
 8006902:	fb01 2200 	mla	r2, r1, r0, r2
            sum0 += cols_8b[2]*ksrc[16];
 8006906:	f99e 0010 	ldrsb.w	r0, [lr, #16]
 800690a:	fb00 3301 	mla	r3, r0, r1, r3
            sum1 += cols_8b[3]*ksrc[16];
 800690e:	f998 1003 	ldrsb.w	r1, [r8, #3]
 8006912:	fb01 2200 	mla	r2, r1, r0, r2
            sum0 += cols_8b[3]*ksrc[17];
 8006916:	f99e 0011 	ldrsb.w	r0, [lr, #17]
 800691a:	fb00 3301 	mla	r3, r0, r1, r3
            sum1 += cols_8b[4]*ksrc[17];
 800691e:	f998 1004 	ldrsb.w	r1, [r8, #4]
 8006922:	fb01 2200 	mla	r2, r1, r0, r2
            sum0 += cols_8b[4]*ksrc[18];
 8006926:	f99e 0012 	ldrsb.w	r0, [lr, #18]
 800692a:	fb00 3301 	mla	r3, r0, r1, r3
            sum1 += cols_8b[5]*ksrc[18];
 800692e:	f998 1005 	ldrsb.w	r1, [r8, #5]
 8006932:	fb01 2200 	mla	r2, r1, r0, r2
            sum0 += cols_8b[5]*ksrc[19];
 8006936:	f99e 0013 	ldrsb.w	r0, [lr, #19]
 800693a:	fb00 3301 	mla	r3, r0, r1, r3
            sum1 += cols_8b[6]*ksrc[19];
 800693e:	f998 1006 	ldrsb.w	r1, [r8, #6]
 8006942:	fb01 2a00 	mla	sl, r1, r0, r2
            sum0 += cols_8b[6]*ksrc[20];
 8006946:	fb0b 3301 	mla	r3, fp, r1, r3
            sum1 += cols_8b[6]*ksrc[19];
 800694a:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
            sum0 += cols_8b[0]*ksrc[21];
 800694e:	f99e a015 	ldrsb.w	sl, [lr, #21]
 8006952:	9a06      	ldr	r2, [sp, #24]
            sum1 += cols_8b[1]*ksrc[21];
 8006954:	9807      	ldr	r0, [sp, #28]
            sum0 += cols_8b[0]*ksrc[21];
 8006956:	f918 1002 	ldrsb.w	r1, [r8, r2]
            sum0 += cols_8b[1]*ksrc[22];
 800695a:	f99e 7016 	ldrsb.w	r7, [lr, #22]
            sum0 += cols_8b[0]*ksrc[21];
 800695e:	fb1a 3101 	smlabb	r1, sl, r1, r3
 8006962:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
            sum1 += cols_8b[1]*ksrc[21];
 8006966:	f918 a000 	ldrsb.w	sl, [r8, r0]
            sum0 += cols_8b[1]*ksrc[22];
 800696a:	970b      	str	r7, [sp, #44]	@ 0x2c
 800696c:	fb07 110a 	mla	r1, r7, sl, r1
            sum1 += cols_8b[7]*ksrc[20];
 8006970:	f998 3007 	ldrsb.w	r3, [r8, #7]
 8006974:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
            sum1 += cols_8b[2]*ksrc[22];
 8006976:	9d08      	ldr	r5, [sp, #32]
            sum1 += cols_8b[7]*ksrc[20];
 8006978:	fb13 730b 	smlabb	r3, r3, fp, r7
            sum1 += cols_8b[1]*ksrc[21];
 800697c:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
            sum1 += cols_8b[2]*ksrc[22];
 800697e:	f918 2005 	ldrsb.w	r2, [r8, r5]
            sum1 += cols_8b[1]*ksrc[21];
 8006982:	fb0a 3307 	mla	r3, sl, r7, r3
            sum1 += cols_8b[3]*ksrc[23];
 8006986:	9e09      	ldr	r6, [sp, #36]	@ 0x24
            sum1 += cols_8b[2]*ksrc[22];
 8006988:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
            sum0 += cols_8b[2]*ksrc[23];
 800698a:	f99e 5017 	ldrsb.w	r5, [lr, #23]
            sum1 += cols_8b[3]*ksrc[23];
 800698e:	f918 6006 	ldrsb.w	r6, [r8, r6]
            sum1 += cols_8b[2]*ksrc[22];
 8006992:	fb02 3307 	mla	r3, r2, r7, r3
            sum1 += cols_8b[4]*ksrc[24];
 8006996:	9f02      	ldr	r7, [sp, #8]
            sum0 += cols_8b[2]*ksrc[23];
 8006998:	fb05 1102 	mla	r1, r5, r2, r1
            sum0 += cols_8b[3]*ksrc[24];
 800699c:	f99e 0018 	ldrsb.w	r0, [lr, #24]
            sum1 += cols_8b[3]*ksrc[23];
 80069a0:	fb06 3305 	mla	r3, r6, r5, r3
            sum1 += cols_8b[4]*ksrc[24];
 80069a4:	f918 2007 	ldrsb.w	r2, [r8, r7]
            sum0 += cols_8b[3]*ksrc[24];
 80069a8:	fb00 1106 	mla	r1, r0, r6, r1
            sum1 += cols_8b[6]*ksrc[26];
 80069ac:	9d04      	ldr	r5, [sp, #16]
            sum1 += cols_8b[4]*ksrc[24];
 80069ae:	fb02 3300 	mla	r3, r2, r0, r3
            sum0 += cols_8b[4]*ksrc[25];
 80069b2:	f99e 0019 	ldrsb.w	r0, [lr, #25]
            sum1 += cols_8b[7]*ksrc[27];
 80069b6:	9e05      	ldr	r6, [sp, #20]
            sum0 += cols_8b[4]*ksrc[25];
 80069b8:	fb00 1102 	mla	r1, r0, r2, r1
            sum1 += cols_8b[5]*ksrc[25];
 80069bc:	9a03      	ldr	r2, [sp, #12]
 80069be:	f918 2002 	ldrsb.w	r2, [r8, r2]
 80069c2:	fb02 3300 	mla	r3, r2, r0, r3
            sum0 += cols_8b[5]*ksrc[26];
 80069c6:	f99e 001a 	ldrsb.w	r0, [lr, #26]
 80069ca:	fb00 1102 	mla	r1, r0, r2, r1
            sum1 += cols_8b[6]*ksrc[26];
 80069ce:	f918 2005 	ldrsb.w	r2, [r8, r5]
            sum0 += cols_8b[0]*ksrc[28];
 80069d2:	f99e 501c 	ldrsb.w	r5, [lr, #28]
            sum1 += cols_8b[6]*ksrc[26];
 80069d6:	fb02 3300 	mla	r3, r2, r0, r3
            sum0 += cols_8b[6]*ksrc[27];
 80069da:	f99e 001b 	ldrsb.w	r0, [lr, #27]
 80069de:	fb00 1102 	mla	r1, r0, r2, r1
            sum0 += cols_8b[0]*ksrc[28];
 80069e2:	f999 2000 	ldrsb.w	r2, [r9]
 80069e6:	fb15 1102 	smlabb	r1, r5, r2, r1
            sum1 += cols_8b[7]*ksrc[27];
 80069ea:	f918 2006 	ldrsb.w	r2, [r8, r6]
 80069ee:	fb12 3200 	smlabb	r2, r2, r0, r3
            sum1 += cols_8b[1]*ksrc[28];
 80069f2:	f999 3001 	ldrsb.w	r3, [r9, #1]
            sum0 += cols_8b[1]*ksrc[29];
 80069f6:	f99e 001d 	ldrsb.w	r0, [lr, #29]
            sum1 += cols_8b[1]*ksrc[28];
 80069fa:	fb03 2205 	mla	r2, r3, r5, r2
            sum0 += cols_8b[6]*ksrc[34];
 80069fe:	f99e b022 	ldrsb.w	fp, [lr, #34]	@ 0x22
            sum0 += cols_8b[1]*ksrc[29];
 8006a02:	fb00 1303 	mla	r3, r0, r3, r1
            sum1 += cols_8b[2]*ksrc[29];
 8006a06:	f999 1002 	ldrsb.w	r1, [r9, #2]
            sum0 += cols_8b[1]*ksrc[36];
 8006a0a:	f99e 7024 	ldrsb.w	r7, [lr, #36]	@ 0x24
            sum1 += cols_8b[2]*ksrc[29];
 8006a0e:	fb01 2200 	mla	r2, r1, r0, r2
            sum0 += cols_8b[2]*ksrc[30];
 8006a12:	f99e 001e 	ldrsb.w	r0, [lr, #30]
            sum1 += cols_8b[2]*ksrc[36];
 8006a16:	9d08      	ldr	r5, [sp, #32]
            sum0 += cols_8b[2]*ksrc[30];
 8006a18:	fb00 3301 	mla	r3, r0, r1, r3
            sum1 += cols_8b[3]*ksrc[30];
 8006a1c:	f999 1003 	ldrsb.w	r1, [r9, #3]
            sum1 += cols_8b[3]*ksrc[37];
 8006a20:	9e09      	ldr	r6, [sp, #36]	@ 0x24
            sum1 += cols_8b[3]*ksrc[30];
 8006a22:	fb01 2200 	mla	r2, r1, r0, r2
            sum0 += cols_8b[3]*ksrc[31];
 8006a26:	f99e 001f 	ldrsb.w	r0, [lr, #31]
            sum1 += cols_8b[3]*ksrc[37];
 8006a2a:	f919 6006 	ldrsb.w	r6, [r9, r6]
            sum0 += cols_8b[3]*ksrc[31];
 8006a2e:	fb00 3301 	mla	r3, r0, r1, r3
            sum1 += cols_8b[4]*ksrc[31];
 8006a32:	f999 1004 	ldrsb.w	r1, [r9, #4]
 8006a36:	fb01 2200 	mla	r2, r1, r0, r2
            sum0 += cols_8b[4]*ksrc[32];
 8006a3a:	f99e 0020 	ldrsb.w	r0, [lr, #32]
 8006a3e:	fb00 3301 	mla	r3, r0, r1, r3
            sum1 += cols_8b[5]*ksrc[32];
 8006a42:	f999 1005 	ldrsb.w	r1, [r9, #5]
 8006a46:	fb01 2200 	mla	r2, r1, r0, r2
            sum0 += cols_8b[5]*ksrc[33];
 8006a4a:	f99e 0021 	ldrsb.w	r0, [lr, #33]	@ 0x21
 8006a4e:	fb00 3301 	mla	r3, r0, r1, r3
            sum1 += cols_8b[6]*ksrc[33];
 8006a52:	f999 1006 	ldrsb.w	r1, [r9, #6]
 8006a56:	fb01 2a00 	mla	sl, r1, r0, r2
            sum0 += cols_8b[0]*ksrc[35];
 8006a5a:	9a06      	ldr	r2, [sp, #24]
            sum0 += cols_8b[6]*ksrc[34];
 8006a5c:	fb0b 3301 	mla	r3, fp, r1, r3
            sum1 += cols_8b[1]*ksrc[35];
 8006a60:	9807      	ldr	r0, [sp, #28]
            sum0 += cols_8b[0]*ksrc[35];
 8006a62:	f919 1002 	ldrsb.w	r1, [r9, r2]
            sum1 += cols_8b[6]*ksrc[33];
 8006a66:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
            sum0 += cols_8b[0]*ksrc[35];
 8006a6a:	f99e a023 	ldrsb.w	sl, [lr, #35]	@ 0x23
            sum1 += cols_8b[2]*ksrc[36];
 8006a6e:	f919 2005 	ldrsb.w	r2, [r9, r5]
            sum0 += cols_8b[0]*ksrc[35];
 8006a72:	fb1a 3101 	smlabb	r1, sl, r1, r3
 8006a76:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
            sum1 += cols_8b[1]*ksrc[35];
 8006a7a:	f919 a000 	ldrsb.w	sl, [r9, r0]
            sum0 += cols_8b[2]*ksrc[37];
 8006a7e:	f99e 5025 	ldrsb.w	r5, [lr, #37]	@ 0x25
            sum0 += cols_8b[1]*ksrc[36];
 8006a82:	fb07 110a 	mla	r1, r7, sl, r1
            sum0 += cols_8b[3]*ksrc[38];
 8006a86:	f99e 3026 	ldrsb.w	r3, [lr, #38]	@ 0x26
            sum1 += cols_8b[7]*ksrc[34];
 8006a8a:	980d      	ldr	r0, [sp, #52]	@ 0x34
            sum0 += cols_8b[2]*ksrc[37];
 8006a8c:	fb05 1102 	mla	r1, r5, r2, r1
            sum0 += cols_8b[3]*ksrc[38];
 8006a90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a92:	fb03 1106 	mla	r1, r3, r6, r1
            sum1 += cols_8b[7]*ksrc[34];
 8006a96:	f999 3007 	ldrsb.w	r3, [r9, #7]
 8006a9a:	fb13 030b 	smlabb	r3, r3, fp, r0
            sum1 += cols_8b[1]*ksrc[35];
 8006a9e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8006aa0:	fb0a 3300 	mla	r3, sl, r0, r3
            sum1 += cols_8b[2]*ksrc[36];
 8006aa4:	fb02 3307 	mla	r3, r2, r7, r3
            sum1 += cols_8b[4]*ksrc[38];
 8006aa8:	9f02      	ldr	r7, [sp, #8]
 8006aaa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
            sum1 += cols_8b[3]*ksrc[37];
 8006aac:	fb06 3305 	mla	r3, r6, r5, r3
            sum1 += cols_8b[4]*ksrc[38];
 8006ab0:	f919 5007 	ldrsb.w	r5, [r9, r7]
            sum0 += cols_8b[4]*ksrc[39];
 8006ab4:	f99e 0027 	ldrsb.w	r0, [lr, #39]	@ 0x27
            sum1 += cols_8b[4]*ksrc[38];
 8006ab8:	fb05 3202 	mla	r2, r5, r2, r3
            sum0 += cols_8b[6]*ksrc[41];
 8006abc:	f99e 7029 	ldrsb.w	r7, [lr, #41]	@ 0x29
            sum0 += cols_8b[4]*ksrc[39];
 8006ac0:	fb00 1305 	mla	r3, r0, r5, r1
            sum1 += cols_8b[5]*ksrc[39];
 8006ac4:	9903      	ldr	r1, [sp, #12]
            sum1 += cols_8b[6]*ksrc[40];
 8006ac6:	9d04      	ldr	r5, [sp, #16]
            sum1 += cols_8b[5]*ksrc[39];
 8006ac8:	f919 1001 	ldrsb.w	r1, [r9, r1]
            sum1 += cols_8b[1]*ksrc[42];
 8006acc:	f99c 6025 	ldrsb.w	r6, [ip, #37]	@ 0x25
            sum1 += cols_8b[5]*ksrc[39];
 8006ad0:	fb01 2200 	mla	r2, r1, r0, r2
            sum0 += cols_8b[5]*ksrc[40];
 8006ad4:	f99e 0028 	ldrsb.w	r0, [lr, #40]	@ 0x28
 8006ad8:	fb00 3301 	mla	r3, r0, r1, r3
            sum1 += cols_8b[6]*ksrc[40];
 8006adc:	f919 1005 	ldrsb.w	r1, [r9, r5]
            sum0 += cols_8b[0]*ksrc[42];
 8006ae0:	f99e 502a 	ldrsb.w	r5, [lr, #42]	@ 0x2a
            sum1 += cols_8b[6]*ksrc[40];
 8006ae4:	fb01 2200 	mla	r2, r1, r0, r2
            sum0 += cols_8b[1]*ksrc[43];
 8006ae8:	f99e 002b 	ldrsb.w	r0, [lr, #43]	@ 0x2b
            sum0 += cols_8b[6]*ksrc[41];
 8006aec:	fb07 3301 	mla	r3, r7, r1, r3
            sum0 += cols_8b[0]*ksrc[42];
 8006af0:	f99c 1024 	ldrsb.w	r1, [ip, #36]	@ 0x24
 8006af4:	fb15 3101 	smlabb	r1, r5, r1, r3
            sum1 += cols_8b[7]*ksrc[41];
 8006af8:	9b05      	ldr	r3, [sp, #20]
 8006afa:	f919 3003 	ldrsb.w	r3, [r9, r3]
            sum0 += cols_8b[1]*ksrc[43];
 8006afe:	fb00 1106 	mla	r1, r0, r6, r1
            sum1 += cols_8b[7]*ksrc[41];
 8006b02:	fb13 2307 	smlabb	r3, r3, r7, r2
            sum1 += cols_8b[1]*ksrc[42];
 8006b06:	fb06 3205 	mla	r2, r6, r5, r3
            sum1 += cols_8b[2]*ksrc[43];
 8006b0a:	f99c 5026 	ldrsb.w	r5, [ip, #38]	@ 0x26
            sum1 += cols_8b[3]*ksrc[44];
 8006b0e:	f99c 3027 	ldrsb.w	r3, [ip, #39]	@ 0x27
            sum1 += cols_8b[2]*ksrc[43];
 8006b12:	fb05 2200 	mla	r2, r5, r0, r2
            sum0 += cols_8b[2]*ksrc[44];
 8006b16:	f99e 002c 	ldrsb.w	r0, [lr, #44]	@ 0x2c
            sum0 += cols_8b[6]*ksrc[48];
 8006b1a:	f99e 6030 	ldrsb.w	r6, [lr, #48]	@ 0x30
            sum0 += cols_8b[2]*ksrc[44];
 8006b1e:	fb00 1105 	mla	r1, r0, r5, r1
            sum1 += cols_8b[3]*ksrc[44];
 8006b22:	fb03 2200 	mla	r2, r3, r0, r2
            sum0 += cols_8b[3]*ksrc[45];
 8006b26:	f99e 002d 	ldrsb.w	r0, [lr, #45]	@ 0x2d
 8006b2a:	fb00 1103 	mla	r1, r0, r3, r1
            sum1 += cols_8b[4]*ksrc[45];
 8006b2e:	f99c 3028 	ldrsb.w	r3, [ip, #40]	@ 0x28
 8006b32:	fb03 2200 	mla	r2, r3, r0, r2
            sum0 += cols_8b[4]*ksrc[46];
 8006b36:	f99e 002e 	ldrsb.w	r0, [lr, #46]	@ 0x2e
 8006b3a:	fb00 1103 	mla	r1, r0, r3, r1
            sum1 += cols_8b[5]*ksrc[46];
 8006b3e:	f99c 3029 	ldrsb.w	r3, [ip, #41]	@ 0x29
 8006b42:	fb03 2200 	mla	r2, r3, r0, r2
            sum0 += cols_8b[5]*ksrc[47];
 8006b46:	f99e 002f 	ldrsb.w	r0, [lr, #47]	@ 0x2f
 8006b4a:	fb00 1103 	mla	r1, r0, r3, r1
            sum1 += cols_8b[6]*ksrc[47];
 8006b4e:	f99c 302a 	ldrsb.w	r3, [ip, #42]	@ 0x2a
 8006b52:	fb03 2200 	mla	r2, r3, r0, r2
            sum1 += cols_8b[7]*ksrc[48];
 8006b56:	f99c 002b 	ldrsb.w	r0, [ip, #43]	@ 0x2b
            sum0 += cols_8b[6]*ksrc[48];
 8006b5a:	fb06 1103 	mla	r1, r6, r3, r1
            sum0 = arm_nn_requantize(sum0 + biasR[0], *multiplier, *shift);
 8006b5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
            sum1 += cols_8b[7]*ksrc[48];
 8006b60:	fb10 2006 	smlabb	r0, r0, r6, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8006b64:	2600      	movs	r6, #0
            sum0 = arm_nn_requantize(sum0 + biasR[0], *multiplier, *shift);
 8006b66:	4419      	add	r1, r3
 8006b68:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8006b6a:	681d      	ldr	r5, [r3, #0]
 8006b6c:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8006b6e:	ea25 72e5 	bic.w	r2, r5, r5, asr #31
 8006b72:	2d00      	cmp	r5, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8006b74:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8006b76:	fa01 f102 	lsl.w	r1, r1, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8006b7a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006b7e:	fbc3 2601 	smlal	r2, r6, r3, r1
    result = (int32_t)(mult.long_long >> 31);
 8006b82:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8006b86:	ea42 0246 	orr.w	r2, r2, r6, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8006b8a:	dc0d      	bgt.n	8006ba8 <depthwise_kernel7x7_stride1_inplace_kernel_CHW+0x4a4>
 8006b8c:	426d      	negs	r5, r5
    const q31_t remainder_mask = (1 << exponent) - 1;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	40ab      	lsls	r3, r5
 8006b92:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 8006b94:	ea03 0102 	and.w	r1, r3, r2
    if (result < 0)
 8006b98:	412a      	asrs	r2, r5
    q31_t threshold = remainder_mask >> 1;
 8006b9a:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 8006b9e:	bf48      	it	mi
 8006ba0:	3301      	addmi	r3, #1
    if (remainder > threshold)
 8006ba2:	4299      	cmp	r1, r3
        result++;
 8006ba4:	bfc8      	it	gt
 8006ba6:	3201      	addgt	r2, #1
            sum0 += output_offset;
 8006ba8:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8006baa:	2500      	movs	r5, #0
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8006bac:	9910      	ldr	r1, [sp, #64]	@ 0x40
            sum0 += output_offset;
 8006bae:	441a      	add	r2, r3
            sum0 = TN_MAX(sum0, activation_min);
 8006bb0:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	bfb8      	it	lt
 8006bb6:	461a      	movlt	r2, r3
            sum0 = TN_MIN(sum0, activation_max);
 8006bb8:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	bfa8      	it	ge
 8006bbe:	461a      	movge	r2, r3
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8006bc0:	9b01      	ldr	r3, [sp, #4]
 8006bc2:	1a5b      	subs	r3, r3, r1
 8006bc4:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8006bc6:	545a      	strb	r2, [r3, r1]
 8006bc8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000

            sum1 = arm_nn_requantize(sum1 + biasR[0], *multiplier, *shift);
 8006bcc:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8006bce:	6819      	ldr	r1, [r3, #0]
 8006bd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8006bd2:	2900      	cmp	r1, #0
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4418      	add	r0, r3
 8006bd8:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
 8006bdc:	fa00 f003 	lsl.w	r0, r0, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8006be0:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	fbc3 2500 	smlal	r2, r5, r3, r0
    result = (int32_t)(mult.long_long >> 31);
 8006be8:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8006bec:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8006bf0:	dc0d      	bgt.n	8006c0e <depthwise_kernel7x7_stride1_inplace_kernel_CHW+0x50a>
 8006bf2:	4249      	negs	r1, r1
    const q31_t remainder_mask = (1 << exponent) - 1;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	408b      	lsls	r3, r1
 8006bf8:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 8006bfa:	ea03 0002 	and.w	r0, r3, r2
    if (result < 0)
 8006bfe:	410a      	asrs	r2, r1
    q31_t threshold = remainder_mask >> 1;
 8006c00:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 8006c04:	bf48      	it	mi
 8006c06:	3301      	addmi	r3, #1
    if (remainder > threshold)
 8006c08:	4298      	cmp	r0, r3
        result++;
 8006c0a:	bfc8      	it	gt
 8006c0c:	3201      	addgt	r2, #1
            sum1 += output_offset;
 8006c0e:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
            sum1 = TN_MAX(sum1, activation_min);
            sum1 = TN_MIN(sum1, activation_max);
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;

            cols_8b_iterptr += STRIDE * 2;
 8006c10:	3402      	adds	r4, #2
        for (j = 0; j < output_x / 2; j++) {
 8006c12:	f108 0802 	add.w	r8, r8, #2
 8006c16:	f109 0902 	add.w	r9, r9, #2
            sum1 += output_offset;
 8006c1a:	441a      	add	r2, r3
            sum1 = TN_MAX(sum1, activation_min);
 8006c1c:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
        for (j = 0; j < output_x / 2; j++) {
 8006c1e:	f10c 0c02 	add.w	ip, ip, #2
            sum1 = TN_MAX(sum1, activation_min);
 8006c22:	429a      	cmp	r2, r3
 8006c24:	bfb8      	it	lt
 8006c26:	461a      	movlt	r2, r3
            sum1 = TN_MIN(sum1, activation_max);
 8006c28:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	bfa8      	it	ge
 8006c2e:	461a      	movge	r2, r3
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;
 8006c30:	9b01      	ldr	r3, [sp, #4]
 8006c32:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < output_x / 2; j++) {
 8006c34:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006c36:	4413      	add	r3, r2
 8006c38:	9301      	str	r3, [sp, #4]
 8006c3a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c3c:	42a3      	cmp	r3, r4
 8006c3e:	f47f adcd 	bne.w	80067dc <depthwise_kernel7x7_stride1_inplace_kernel_CHW+0xd8>
 8006c42:	e9dd a716 	ldrd	sl, r7, [sp, #88]	@ 0x58
        }
        if (output_x & 1) {
 8006c46:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006c48:	3301      	adds	r3, #1
 8006c4a:	9314      	str	r3, [sp, #80]	@ 0x50
 8006c4c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	f000 8161 	beq.w	8006f16 <depthwise_kernel7x7_stride1_inplace_kernel_CHW+0x812>
            q7_t * cols_8b = cols_8b_iterptr;
            q31_t sum = bias[0] + biasR[0];
 8006c54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
            sum += cols_8b[0]*ksrc[0];
 8006c56:	980f      	ldr	r0, [sp, #60]	@ 0x3c
            q31_t sum = bias[0] + biasR[0];
 8006c58:	681c      	ldr	r4, [r3, #0]
 8006c5a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
            sum += cols_8b[0]*ksrc[0];
 8006c5c:	f990 1000 	ldrsb.w	r1, [r0]
            q31_t sum = bias[0] + biasR[0];
 8006c60:	681b      	ldr	r3, [r3, #0]
            sum += cols_8b[2]*ksrc[2];
            sum += cols_8b[3]*ksrc[3];
            sum += cols_8b[4]*ksrc[4];
            sum += cols_8b[5]*ksrc[5];
            sum += cols_8b[6]*ksrc[6];
            cols_8b += column_x + 6;
 8006c62:	9d06      	ldr	r5, [sp, #24]
            q31_t sum = bias[0] + biasR[0];
 8006c64:	18e2      	adds	r2, r4, r3
            sum += cols_8b[0]*ksrc[0];
 8006c66:	f99e 3000 	ldrsb.w	r3, [lr]
 8006c6a:	fb11 2203 	smlabb	r2, r1, r3, r2
            sum += cols_8b[1]*ksrc[1];
 8006c6e:	f990 1001 	ldrsb.w	r1, [r0, #1]
 8006c72:	f99e 3001 	ldrsb.w	r3, [lr, #1]
 8006c76:	fb11 2203 	smlabb	r2, r1, r3, r2
            sum += cols_8b[2]*ksrc[2];
 8006c7a:	f990 1002 	ldrsb.w	r1, [r0, #2]
 8006c7e:	f99e 3002 	ldrsb.w	r3, [lr, #2]
 8006c82:	fb11 2203 	smlabb	r2, r1, r3, r2
            sum += cols_8b[3]*ksrc[3];
 8006c86:	f990 1003 	ldrsb.w	r1, [r0, #3]
 8006c8a:	f99e 3003 	ldrsb.w	r3, [lr, #3]
 8006c8e:	fb11 2203 	smlabb	r2, r1, r3, r2
            sum += cols_8b[4]*ksrc[4];
 8006c92:	f990 1004 	ldrsb.w	r1, [r0, #4]
 8006c96:	f99e 3004 	ldrsb.w	r3, [lr, #4]
 8006c9a:	fb11 2203 	smlabb	r2, r1, r3, r2
            sum += cols_8b[5]*ksrc[5];
 8006c9e:	f990 1005 	ldrsb.w	r1, [r0, #5]
 8006ca2:	f99e 3005 	ldrsb.w	r3, [lr, #5]
 8006ca6:	fb11 2203 	smlabb	r2, r1, r3, r2
            sum += cols_8b[6]*ksrc[6];
 8006caa:	f990 3006 	ldrsb.w	r3, [r0, #6]
 8006cae:	f99e 1006 	ldrsb.w	r1, [lr, #6]
 8006cb2:	fb13 2301 	smlabb	r3, r3, r1, r2
            cols_8b += column_x + 6;
 8006cb6:	1942      	adds	r2, r0, r5
            sum += cols_8b[0]*ksrc[7];
 8006cb8:	5741      	ldrsb	r1, [r0, r5]
 8006cba:	f99e 0007 	ldrsb.w	r0, [lr, #7]
 8006cbe:	fb11 3100 	smlabb	r1, r1, r0, r3
            sum += cols_8b[1]*ksrc[8];
 8006cc2:	f992 0001 	ldrsb.w	r0, [r2, #1]
 8006cc6:	f99e 3008 	ldrsb.w	r3, [lr, #8]
 8006cca:	fb10 1303 	smlabb	r3, r0, r3, r1
            sum += cols_8b[2]*ksrc[9];
 8006cce:	f992 0002 	ldrsb.w	r0, [r2, #2]
 8006cd2:	f99e 1009 	ldrsb.w	r1, [lr, #9]
 8006cd6:	fb10 3301 	smlabb	r3, r0, r1, r3
            sum += cols_8b[3]*ksrc[10];
 8006cda:	f992 0003 	ldrsb.w	r0, [r2, #3]
 8006cde:	f99e 100a 	ldrsb.w	r1, [lr, #10]
 8006ce2:	fb10 3301 	smlabb	r3, r0, r1, r3
            sum += cols_8b[4]*ksrc[11];
 8006ce6:	f992 0004 	ldrsb.w	r0, [r2, #4]
 8006cea:	f99e 100b 	ldrsb.w	r1, [lr, #11]
 8006cee:	fb10 3301 	smlabb	r3, r0, r1, r3
            sum += cols_8b[5]*ksrc[12];
 8006cf2:	f992 0005 	ldrsb.w	r0, [r2, #5]
 8006cf6:	f99e 100c 	ldrsb.w	r1, [lr, #12]
 8006cfa:	fb10 3301 	smlabb	r3, r0, r1, r3
            sum += cols_8b[6]*ksrc[13];
 8006cfe:	f992 0006 	ldrsb.w	r0, [r2, #6]
 8006d02:	f99e 100d 	ldrsb.w	r1, [lr, #13]
 8006d06:	fb10 3001 	smlabb	r0, r0, r1, r3
            cols_8b += column_x + 6;
 8006d0a:	1951      	adds	r1, r2, r5
            sum += cols_8b[0]*ksrc[14];
 8006d0c:	f99e 300e 	ldrsb.w	r3, [lr, #14]
 8006d10:	5752      	ldrsb	r2, [r2, r5]
 8006d12:	fb12 0303 	smlabb	r3, r2, r3, r0
            sum += cols_8b[1]*ksrc[15];
 8006d16:	f991 0001 	ldrsb.w	r0, [r1, #1]
 8006d1a:	f99e 200f 	ldrsb.w	r2, [lr, #15]
 8006d1e:	fb10 3302 	smlabb	r3, r0, r2, r3
            sum += cols_8b[2]*ksrc[16];
 8006d22:	f991 0002 	ldrsb.w	r0, [r1, #2]
 8006d26:	f99e 2010 	ldrsb.w	r2, [lr, #16]
 8006d2a:	fb10 3302 	smlabb	r3, r0, r2, r3
            sum += cols_8b[3]*ksrc[17];
 8006d2e:	f991 0003 	ldrsb.w	r0, [r1, #3]
 8006d32:	f99e 2011 	ldrsb.w	r2, [lr, #17]
 8006d36:	fb10 3302 	smlabb	r3, r0, r2, r3
            sum += cols_8b[4]*ksrc[18];
 8006d3a:	f991 0004 	ldrsb.w	r0, [r1, #4]
 8006d3e:	f99e 2012 	ldrsb.w	r2, [lr, #18]
 8006d42:	fb10 3302 	smlabb	r3, r0, r2, r3
            sum += cols_8b[5]*ksrc[19];
 8006d46:	f991 0005 	ldrsb.w	r0, [r1, #5]
 8006d4a:	f99e 2013 	ldrsb.w	r2, [lr, #19]
 8006d4e:	fb10 3302 	smlabb	r3, r0, r2, r3
            sum += cols_8b[6]*ksrc[20];
 8006d52:	f991 0006 	ldrsb.w	r0, [r1, #6]
 8006d56:	f99e 2014 	ldrsb.w	r2, [lr, #20]
 8006d5a:	fb10 3002 	smlabb	r0, r0, r2, r3
            cols_8b += column_x + 6;
 8006d5e:	194a      	adds	r2, r1, r5
            sum += cols_8b[0]*ksrc[21];
 8006d60:	f99e 3015 	ldrsb.w	r3, [lr, #21]
 8006d64:	5749      	ldrsb	r1, [r1, r5]
 8006d66:	fb11 0303 	smlabb	r3, r1, r3, r0
            sum += cols_8b[1]*ksrc[22];
 8006d6a:	f992 0001 	ldrsb.w	r0, [r2, #1]
 8006d6e:	f99e 1016 	ldrsb.w	r1, [lr, #22]
 8006d72:	fb10 3301 	smlabb	r3, r0, r1, r3
            sum += cols_8b[2]*ksrc[23];
 8006d76:	f992 0002 	ldrsb.w	r0, [r2, #2]
 8006d7a:	f99e 1017 	ldrsb.w	r1, [lr, #23]
 8006d7e:	fb10 3301 	smlabb	r3, r0, r1, r3
            sum += cols_8b[3]*ksrc[24];
 8006d82:	f992 0003 	ldrsb.w	r0, [r2, #3]
 8006d86:	f99e 1018 	ldrsb.w	r1, [lr, #24]
 8006d8a:	fb10 3301 	smlabb	r3, r0, r1, r3
            sum += cols_8b[4]*ksrc[25];
 8006d8e:	f992 0004 	ldrsb.w	r0, [r2, #4]
 8006d92:	f99e 1019 	ldrsb.w	r1, [lr, #25]
 8006d96:	fb10 3301 	smlabb	r3, r0, r1, r3
            sum += cols_8b[5]*ksrc[26];
 8006d9a:	f992 0005 	ldrsb.w	r0, [r2, #5]
 8006d9e:	f99e 101a 	ldrsb.w	r1, [lr, #26]
 8006da2:	fb10 3301 	smlabb	r3, r0, r1, r3
            sum += cols_8b[6]*ksrc[27];
 8006da6:	f992 0006 	ldrsb.w	r0, [r2, #6]
 8006daa:	f99e 101b 	ldrsb.w	r1, [lr, #27]
 8006dae:	fb10 3001 	smlabb	r0, r0, r1, r3
            cols_8b += column_x + 6;
 8006db2:	1951      	adds	r1, r2, r5
            sum += cols_8b[0]*ksrc[28];
 8006db4:	f99e 301c 	ldrsb.w	r3, [lr, #28]
 8006db8:	5752      	ldrsb	r2, [r2, r5]
 8006dba:	fb12 0303 	smlabb	r3, r2, r3, r0
            sum += cols_8b[1]*ksrc[29];
 8006dbe:	f991 0001 	ldrsb.w	r0, [r1, #1]
 8006dc2:	f99e 201d 	ldrsb.w	r2, [lr, #29]
 8006dc6:	fb10 3302 	smlabb	r3, r0, r2, r3
            sum += cols_8b[2]*ksrc[30];
 8006dca:	f991 0002 	ldrsb.w	r0, [r1, #2]
 8006dce:	f99e 201e 	ldrsb.w	r2, [lr, #30]
 8006dd2:	fb10 3302 	smlabb	r3, r0, r2, r3
            sum += cols_8b[3]*ksrc[31];
 8006dd6:	f991 0003 	ldrsb.w	r0, [r1, #3]
 8006dda:	f99e 201f 	ldrsb.w	r2, [lr, #31]
 8006dde:	fb10 3302 	smlabb	r3, r0, r2, r3
            sum += cols_8b[4]*ksrc[32];
 8006de2:	f991 0004 	ldrsb.w	r0, [r1, #4]
 8006de6:	f99e 2020 	ldrsb.w	r2, [lr, #32]
 8006dea:	fb10 3302 	smlabb	r3, r0, r2, r3
            sum += cols_8b[5]*ksrc[33];
 8006dee:	f991 0005 	ldrsb.w	r0, [r1, #5]
 8006df2:	f99e 2021 	ldrsb.w	r2, [lr, #33]	@ 0x21
 8006df6:	fb10 3302 	smlabb	r3, r0, r2, r3
            sum += cols_8b[6]*ksrc[34];
 8006dfa:	f991 0006 	ldrsb.w	r0, [r1, #6]
 8006dfe:	f99e 2022 	ldrsb.w	r2, [lr, #34]	@ 0x22
 8006e02:	fb10 3002 	smlabb	r0, r0, r2, r3
            cols_8b += column_x + 6;
 8006e06:	194a      	adds	r2, r1, r5
            sum += cols_8b[0]*ksrc[35];
 8006e08:	f99e 3023 	ldrsb.w	r3, [lr, #35]	@ 0x23
 8006e0c:	5749      	ldrsb	r1, [r1, r5]
 8006e0e:	fb11 0303 	smlabb	r3, r1, r3, r0
            sum += cols_8b[1]*ksrc[36];
 8006e12:	f992 0001 	ldrsb.w	r0, [r2, #1]
 8006e16:	f99e 1024 	ldrsb.w	r1, [lr, #36]	@ 0x24
 8006e1a:	fb10 3301 	smlabb	r3, r0, r1, r3
            sum += cols_8b[2]*ksrc[37];
 8006e1e:	f992 0002 	ldrsb.w	r0, [r2, #2]
 8006e22:	f99e 1025 	ldrsb.w	r1, [lr, #37]	@ 0x25
 8006e26:	fb10 3301 	smlabb	r3, r0, r1, r3
            sum += cols_8b[3]*ksrc[38];
 8006e2a:	f992 0003 	ldrsb.w	r0, [r2, #3]
 8006e2e:	f99e 1026 	ldrsb.w	r1, [lr, #38]	@ 0x26
 8006e32:	fb10 3301 	smlabb	r3, r0, r1, r3
            sum += cols_8b[4]*ksrc[39];
 8006e36:	f992 0004 	ldrsb.w	r0, [r2, #4]
 8006e3a:	f99e 1027 	ldrsb.w	r1, [lr, #39]	@ 0x27
 8006e3e:	fb10 3301 	smlabb	r3, r0, r1, r3
            sum += cols_8b[5]*ksrc[40];
 8006e42:	f992 0005 	ldrsb.w	r0, [r2, #5]
 8006e46:	f99e 1028 	ldrsb.w	r1, [lr, #40]	@ 0x28
 8006e4a:	fb10 3301 	smlabb	r3, r0, r1, r3
            sum += cols_8b[6]*ksrc[41];
 8006e4e:	f992 0006 	ldrsb.w	r0, [r2, #6]
 8006e52:	f99e 1029 	ldrsb.w	r1, [lr, #41]	@ 0x29
 8006e56:	fb10 3001 	smlabb	r0, r0, r1, r3
            cols_8b += column_x + 6;
 8006e5a:	1951      	adds	r1, r2, r5
            sum += cols_8b[0]*ksrc[42];
 8006e5c:	f99e 302a 	ldrsb.w	r3, [lr, #42]	@ 0x2a
 8006e60:	5752      	ldrsb	r2, [r2, r5]
 8006e62:	fb12 0303 	smlabb	r3, r2, r3, r0
            sum += cols_8b[1]*ksrc[43];
 8006e66:	f991 0001 	ldrsb.w	r0, [r1, #1]
 8006e6a:	f99e 202b 	ldrsb.w	r2, [lr, #43]	@ 0x2b
 8006e6e:	fb10 3302 	smlabb	r3, r0, r2, r3
            sum += cols_8b[2]*ksrc[44];
 8006e72:	f991 0002 	ldrsb.w	r0, [r1, #2]
 8006e76:	f99e 202c 	ldrsb.w	r2, [lr, #44]	@ 0x2c
 8006e7a:	fb10 3302 	smlabb	r3, r0, r2, r3
            sum += cols_8b[3]*ksrc[45];
 8006e7e:	f991 0003 	ldrsb.w	r0, [r1, #3]
 8006e82:	f99e 202d 	ldrsb.w	r2, [lr, #45]	@ 0x2d
 8006e86:	fb10 3302 	smlabb	r3, r0, r2, r3
            sum += cols_8b[4]*ksrc[46];
 8006e8a:	f991 2004 	ldrsb.w	r2, [r1, #4]
 8006e8e:	f99e 002e 	ldrsb.w	r0, [lr, #46]	@ 0x2e
 8006e92:	fb12 3200 	smlabb	r2, r2, r0, r3
            sum += cols_8b[5]*ksrc[47];
 8006e96:	f991 3005 	ldrsb.w	r3, [r1, #5]
 8006e9a:	f99e 002f 	ldrsb.w	r0, [lr, #47]	@ 0x2f
            sum += cols_8b[6]*ksrc[48];
 8006e9e:	f991 1006 	ldrsb.w	r1, [r1, #6]
            sum += cols_8b[5]*ksrc[47];
 8006ea2:	fb13 2300 	smlabb	r3, r3, r0, r2
            sum += cols_8b[6]*ksrc[48];
 8006ea6:	f99e 2030 	ldrsb.w	r2, [lr, #48]	@ 0x30
 8006eaa:	fb11 3102 	smlabb	r1, r1, r2, r3

            sum = arm_nn_requantize(sum + biasR[0], *multiplier, *shift);
 8006eae:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8006eb0:	6818      	ldr	r0, [r3, #0]
 8006eb2:	4421      	add	r1, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8006eb4:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8006eb6:	2400      	movs	r4, #0
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8006eb8:	ea20 72e0 	bic.w	r2, r0, r0, asr #31
 8006ebc:	2800      	cmp	r0, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8006ebe:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8006ec0:	fa01 f102 	lsl.w	r1, r1, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8006ec4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006ec8:	fbc1 2403 	smlal	r2, r4, r1, r3
    result = (int32_t)(mult.long_long >> 31);
 8006ecc:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8006ed0:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8006ed4:	dc0d      	bgt.n	8006ef2 <depthwise_kernel7x7_stride1_inplace_kernel_CHW+0x7ee>
 8006ed6:	4240      	negs	r0, r0
    const q31_t remainder_mask = (1 << exponent) - 1;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	4083      	lsls	r3, r0
 8006edc:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 8006ede:	ea02 0103 	and.w	r1, r2, r3
    if (result < 0)
 8006ee2:	4102      	asrs	r2, r0
    q31_t threshold = remainder_mask >> 1;
 8006ee4:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 8006ee8:	bf48      	it	mi
 8006eea:	3301      	addmi	r3, #1
    if (remainder > threshold)
 8006eec:	4299      	cmp	r1, r3
        result++;
 8006eee:	bfc8      	it	gt
 8006ef0:	3201      	addgt	r2, #1
            sum += output_offset;
 8006ef2:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
            sum = TN_MAX(sum, activation_min);
            sum = TN_MIN(sum, activation_max);
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 8006ef4:	9921      	ldr	r1, [sp, #132]	@ 0x84
            sum += output_offset;
 8006ef6:	441a      	add	r2, r3

            cols_8b_iterptr += STRIDE;
 8006ef8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006efa:	3301      	adds	r3, #1
 8006efc:	930f      	str	r3, [sp, #60]	@ 0x3c
            sum = TN_MAX(sum, activation_min);
 8006efe:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8006f00:	429a      	cmp	r2, r3
 8006f02:	bfb8      	it	lt
 8006f04:	461a      	movlt	r2, r3
            sum = TN_MIN(sum, activation_max);
 8006f06:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	bfa8      	it	ge
 8006f0c:	461a      	movge	r2, r3
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 8006f0e:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8006f10:	ebaa 0303 	sub.w	r3, sl, r3
 8006f14:	545a      	strb	r2, [r3, r1]
    for (i = 0; i < output_y; i++) {
 8006f16:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006f18:	9a19      	ldr	r2, [sp, #100]	@ 0x64
        }
        cols_8b_iterptr += 3 * 2;
 8006f1a:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
    for (i = 0; i < output_y; i++) {
 8006f1c:	4413      	add	r3, r2
 8006f1e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
        cols_8b_iterptr += 3 * 2;
 8006f20:	3406      	adds	r4, #6
    for (i = 0; i < output_y; i++) {
 8006f22:	9315      	str	r3, [sp, #84]	@ 0x54
 8006f24:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8006f26:	449a      	add	sl, r3
 8006f28:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	f47f ac2b 	bne.w	8006786 <depthwise_kernel7x7_stride1_inplace_kernel_CHW+0x82>
    }
}
 8006f30:	b023      	add	sp, #140	@ 0x8c
 8006f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (j = 0; j < output_x / 2; j++) {
 8006f36:	940f      	str	r4, [sp, #60]	@ 0x3c
 8006f38:	e685      	b.n	8006c46 <depthwise_kernel7x7_stride1_inplace_kernel_CHW+0x542>
 8006f3a:	bf00      	nop

08006f3c <depthwise_kernel7x7_stride1_inplace_CHW>:
{
 8006f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f40:	b0b1      	sub	sp, #196	@ 0xc4
 8006f42:	4689      	mov	r9, r1
 8006f44:	4690      	mov	r8, r2
 8006f46:	f04f 0400 	mov.w	r4, #0
 8006f4a:	f99d 1120 	ldrsb.w	r1, [sp, #288]	@ 0x120
 8006f4e:	469b      	mov	fp, r3
 8006f50:	f8bd 2110 	ldrh.w	r2, [sp, #272]	@ 0x110
    for(i = 0; i < input_x + 6; i++){
 8006f54:	f109 0705 	add.w	r7, r9, #5
 8006f58:	f361 0407 	bfi	r4, r1, #0, #8
{
 8006f5c:	900a      	str	r0, [sp, #40]	@ 0x28
 8006f5e:	921b      	str	r2, [sp, #108]	@ 0x6c
 8006f60:	f8bd 2114 	ldrh.w	r2, [sp, #276]	@ 0x114
 8006f64:	f361 240f 	bfi	r4, r1, #8, #8
 8006f68:	9b3e      	ldr	r3, [sp, #248]	@ 0xf8
 8006f6a:	921c      	str	r2, [sp, #112]	@ 0x70
    for(i = 0; i < input_x + 6; i++){
 8006f6c:	2200      	movs	r2, #0
    q7_t* cols_8b = (q7_t* )cols_8b_start;
 8006f6e:	9847      	ldr	r0, [sp, #284]	@ 0x11c
    for(i = 0; i < input_x + 6; i++){
 8006f70:	3201      	adds	r2, #1
        *cols_8b++ = PAD8;
 8006f72:	f820 4b03 	strh.w	r4, [r0], #3
        *cols_8b++ = PAD8;
 8006f76:	f800 1c01 	strb.w	r1, [r0, #-1]
    for(i = 0; i < input_x + 6; i++){
 8006f7a:	b292      	uxth	r2, r2
 8006f7c:	42ba      	cmp	r2, r7
 8006f7e:	ddf7      	ble.n	8006f70 <depthwise_kernel7x7_stride1_inplace_CHW+0x34>
    for(i = 0; i < input_y; i++){
 8006f80:	f1b8 0f00 	cmp.w	r8, #0
 8006f84:	f000 81e8 	beq.w	8007358 <depthwise_kernel7x7_stride1_inplace_CHW+0x41c>
 8006f88:	f109 0c03 	add.w	ip, r9, #3
        *cols_8b++ = PAD8;
 8006f8c:	4602      	mov	r2, r0
        cols_8b += input_x; //skip middle
 8006f8e:	2500      	movs	r5, #0
 8006f90:	f109 0606 	add.w	r6, r9, #6
    for(i = 0; i < input_y; i++){
 8006f94:	3501      	adds	r5, #1
        *cols_8b++ = PAD8;//left
 8006f96:	8014      	strh	r4, [r2, #0]
        *cols_8b++ = PAD8;//left
 8006f98:	7091      	strb	r1, [r2, #2]
    for(i = 0; i < input_y; i++){
 8006f9a:	4545      	cmp	r5, r8
        *cols_8b++ = PAD8;//right
 8006f9c:	f82c 4002 	strh.w	r4, [ip, r2]
        *cols_8b++ = PAD8;//right
 8006fa0:	4432      	add	r2, r6
 8006fa2:	f802 1c01 	strb.w	r1, [r2, #-1]
    for(i = 0; i < input_y; i++){
 8006fa6:	d1f5      	bne.n	8006f94 <depthwise_kernel7x7_stride1_inplace_CHW+0x58>
        *cols_8b++ = PAD8;//right
 8006fa8:	fb06 0008 	mla	r0, r6, r8, r0
 8006fac:	2500      	movs	r5, #0
 8006fae:	ea4f 0c96 	mov.w	ip, r6, lsr #2
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	f361 0507 	bfi	r5, r1, #0, #8
 8006fb8:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8006fbc:	f361 250f 	bfi	r5, r1, #8, #8
 8006fc0:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8006fc4:	f361 4517 	bfi	r5, r1, #16, #8
 8006fc8:	f361 651f 	bfi	r5, r1, #24, #8
        *cols_8b++ = PAD8;
 8006fcc:	6015      	str	r5, [r2, #0]
 8006fce:	320c      	adds	r2, #12
 8006fd0:	f842 5c08 	str.w	r5, [r2, #-8]
 8006fd4:	f842 5c04 	str.w	r5, [r2, #-4]
    for(i = 0; i < input_x + 6; i++){
 8006fd8:	4562      	cmp	r2, ip
 8006fda:	d1f7      	bne.n	8006fcc <depthwise_kernel7x7_stride1_inplace_CHW+0x90>
 8006fdc:	07b2      	lsls	r2, r6, #30
 8006fde:	d014      	beq.n	800700a <depthwise_kernel7x7_stride1_inplace_CHW+0xce>
 8006fe0:	f026 0603 	bic.w	r6, r6, #3
 8006fe4:	b2b5      	uxth	r5, r6
 8006fe6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8006fea:	1982      	adds	r2, r0, r6
        *cols_8b++ = PAD8;
 8006fec:	5384      	strh	r4, [r0, r6]
    for(i = 0; i < input_x + 6; i++){
 8006fee:	1c68      	adds	r0, r5, #1
        *cols_8b++ = PAD8;
 8006ff0:	7091      	strb	r1, [r2, #2]
    for(i = 0; i < input_x + 6; i++){
 8006ff2:	b280      	uxth	r0, r0
 8006ff4:	4287      	cmp	r7, r0
 8006ff6:	db08      	blt.n	800700a <depthwise_kernel7x7_stride1_inplace_CHW+0xce>
 8006ff8:	1ca8      	adds	r0, r5, #2
        *cols_8b++ = PAD8;
 8006ffa:	f8a2 4003 	strh.w	r4, [r2, #3]
        *cols_8b++ = PAD8;
 8006ffe:	7151      	strb	r1, [r2, #5]
    for(i = 0; i < input_x + 6; i++){
 8007000:	b280      	uxth	r0, r0
 8007002:	4287      	cmp	r7, r0
 8007004:	db01      	blt.n	800700a <depthwise_kernel7x7_stride1_inplace_CHW+0xce>
        *cols_8b++ = PAD8;
 8007006:	80d4      	strh	r4, [r2, #6]
        *cols_8b++ = PAD8;
 8007008:	7211      	strb	r1, [r2, #8]
    for (c = 0; c < input_ch; c++){
 800700a:	f1bb 0f00 	cmp.w	fp, #0
 800700e:	f000 819f 	beq.w	8007350 <depthwise_kernel7x7_stride1_inplace_CHW+0x414>
        cols_8b = (q7_t*)(cols_8b_start + 3 * (input_x) + 18); //skip 3 rows
 8007012:	eb09 0149 	add.w	r1, r9, r9, lsl #1
 8007016:	9d47      	ldr	r5, [sp, #284]	@ 0x11c
 8007018:	f029 0007 	bic.w	r0, r9, #7
 800701c:	f029 0403 	bic.w	r4, r9, #3
 8007020:	3112      	adds	r1, #18
 8007022:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8007026:	469e      	mov	lr, r3
 8007028:	9b3d      	ldr	r3, [sp, #244]	@ 0xf4
 800702a:	1869      	adds	r1, r5, r1
 800702c:	b297      	uxth	r7, r2
 800702e:	fb0b f202 	mul.w	r2, fp, r2
 8007032:	b2a5      	uxth	r5, r4
 8007034:	911d      	str	r1, [sp, #116]	@ 0x74
            for(j = 0; j < input_x; j++){
 8007036:	1c41      	adds	r1, r0, #1
 8007038:	922f      	str	r2, [sp, #188]	@ 0xbc
 800703a:	ea4f 02d9 	mov.w	r2, r9, lsr #3
 800703e:	b289      	uxth	r1, r1
 8007040:	f107 0a01 	add.w	sl, r7, #1
 8007044:	00d2      	lsls	r2, r2, #3
 8007046:	9125      	str	r1, [sp, #148]	@ 0x94
 8007048:	1c81      	adds	r1, r0, #2
 800704a:	922d      	str	r2, [sp, #180]	@ 0xb4
 800704c:	b289      	uxth	r1, r1
 800704e:	fb0b f200 	mul.w	r2, fp, r0
 8007052:	f8cd a090 	str.w	sl, [sp, #144]	@ 0x90
 8007056:	9126      	str	r1, [sp, #152]	@ 0x98
 8007058:	1cc1      	adds	r1, r0, #3
 800705a:	9221      	str	r2, [sp, #132]	@ 0x84
 800705c:	f009 0203 	and.w	r2, r9, #3
 8007060:	b289      	uxth	r1, r1
 8007062:	9127      	str	r1, [sp, #156]	@ 0x9c
 8007064:	1d01      	adds	r1, r0, #4
 8007066:	b289      	uxth	r1, r1
 8007068:	9128      	str	r1, [sp, #160]	@ 0xa0
 800706a:	1d41      	adds	r1, r0, #5
 800706c:	b289      	uxth	r1, r1
 800706e:	9129      	str	r1, [sp, #164]	@ 0xa4
 8007070:	1d81      	adds	r1, r0, #6
 8007072:	b289      	uxth	r1, r1
 8007074:	912a      	str	r1, [sp, #168]	@ 0xa8
 8007076:	ea4f 0199 	mov.w	r1, r9, lsr #2
 800707a:	0089      	lsls	r1, r1, #2
 800707c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800707e:	1c61      	adds	r1, r4, #1
 8007080:	b289      	uxth	r1, r1
 8007082:	910e      	str	r1, [sp, #56]	@ 0x38
 8007084:	1ca1      	adds	r1, r4, #2
 8007086:	465c      	mov	r4, fp
 8007088:	b289      	uxth	r1, r1
 800708a:	910f      	str	r1, [sp, #60]	@ 0x3c
 800708c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800708e:	4459      	add	r1, fp
 8007090:	911a      	str	r1, [sp, #104]	@ 0x68
 8007092:	fb07 b10b 	mla	r1, r7, fp, fp
 8007096:	9111      	str	r1, [sp, #68]	@ 0x44
 8007098:	ea4f 01cb 	mov.w	r1, fp, lsl #3
 800709c:	912c      	str	r1, [sp, #176]	@ 0xb0
 800709e:	ea4f 018b 	mov.w	r1, fp, lsl #2
 80070a2:	9120      	str	r1, [sp, #128]	@ 0x80
 80070a4:	ebab 018b 	sub.w	r1, fp, fp, lsl #2
 80070a8:	9122      	str	r1, [sp, #136]	@ 0x88
 80070aa:	ebcb 018b 	rsb	r1, fp, fp, lsl #2
 80070ae:	912e      	str	r1, [sp, #184]	@ 0xb8
 80070b0:	eb0b 018b 	add.w	r1, fp, fp, lsl #2
 80070b4:	46c3      	mov	fp, r8
 80070b6:	9123      	str	r1, [sp, #140]	@ 0x8c
 80070b8:	b281      	uxth	r1, r0
 80070ba:	983c      	ldr	r0, [sp, #240]	@ 0xf0
 80070bc:	9112      	str	r1, [sp, #72]	@ 0x48
 80070be:	e9cd 270c 	strd	r2, r7, [sp, #48]	@ 0x30
        for(i = 0; i < input_y; i++){
 80070c2:	f1bb 0f00 	cmp.w	fp, #0
 80070c6:	d032      	beq.n	800712e <depthwise_kernel7x7_stride1_inplace_CHW+0x1f2>
 80070c8:	f1b9 0f00 	cmp.w	r9, #0
 80070cc:	d02f      	beq.n	800712e <depthwise_kernel7x7_stride1_inplace_CHW+0x1f2>
 80070ce:	2c01      	cmp	r4, #1
 80070d0:	d17c      	bne.n	80071cc <depthwise_kernel7x7_stride1_inplace_CHW+0x290>
 80070d2:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 80070d4:	f04f 0c00 	mov.w	ip, #0
 80070d8:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80070da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80070dc:	f106 0807 	add.w	r8, r6, #7
 80070e0:	1cd7      	adds	r7, r2, #3
 80070e2:	f8cd e0f8 	str.w	lr, [sp, #248]	@ 0xf8
 80070e6:	eb01 0209 	add.w	r2, r1, r9
 80070ea:	46b2      	mov	sl, r6
 80070ec:	f8dd e090 	ldr.w	lr, [sp, #144]	@ 0x90
 80070f0:	9410      	str	r4, [sp, #64]	@ 0x40
 80070f2:	e9cd 033c 	strd	r0, r3, [sp, #240]	@ 0xf0
            for(j = 0; j < input_x; j++){
 80070f6:	f1ba 0f05 	cmp.w	sl, #5
 80070fa:	d904      	bls.n	8007106 <depthwise_kernel7x7_stride1_inplace_CHW+0x1ca>
 80070fc:	1c48      	adds	r0, r1, #1
 80070fe:	460b      	mov	r3, r1
 8007100:	1a38      	subs	r0, r7, r0
 8007102:	2802      	cmp	r0, #2
 8007104:	d83e      	bhi.n	8007184 <depthwise_kernel7x7_stride1_inplace_CHW+0x248>
 8007106:	460b      	mov	r3, r1
 8007108:	1e78      	subs	r0, r7, #1
                *cols_8b++ = *src;// + input_offset;
 800710a:	f913 4b01 	ldrsb.w	r4, [r3], #1
            for(j = 0; j < input_x; j++){
 800710e:	429a      	cmp	r2, r3
                *cols_8b++ = *src;// + input_offset;
 8007110:	f800 4f01 	strb.w	r4, [r0, #1]!
            for(j = 0; j < input_x; j++){
 8007114:	d1f9      	bne.n	800710a <depthwise_kernel7x7_stride1_inplace_CHW+0x1ce>
        for(i = 0; i < input_y; i++){
 8007116:	f10c 0c01 	add.w	ip, ip, #1
                src += input_ch;
 800711a:	4471      	add	r1, lr
        for(i = 0; i < input_y; i++){
 800711c:	4447      	add	r7, r8
 800711e:	4472      	add	r2, lr
 8007120:	45dc      	cmp	ip, fp
 8007122:	d1e8      	bne.n	80070f6 <depthwise_kernel7x7_stride1_inplace_CHW+0x1ba>
 8007124:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8007126:	f8dd e0f8 	ldr.w	lr, [sp, #248]	@ 0xf8
 800712a:	e9dd 033c 	ldrd	r0, r3, [sp, #240]	@ 0xf0
        depthwise_kernel7x7_stride1_inplace_kernel_CHW(output_y, output_x, bias++, biasR++, ksrc, output_mult++, output_shift++, inplace_out,output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 800712e:	993a      	ldr	r1, [sp, #232]	@ 0xe8
 8007130:	f103 0804 	add.w	r8, r3, #4
 8007134:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007136:	1d07      	adds	r7, r0, #4
 8007138:	9100      	str	r1, [sp, #0]
 800713a:	f10e 0a04 	add.w	sl, lr, #4
 800713e:	9947      	ldr	r1, [sp, #284]	@ 0x11c
 8007140:	9203      	str	r2, [sp, #12]
        input++;
 8007142:	3201      	adds	r2, #1
        depthwise_kernel7x7_stride1_inplace_kernel_CHW(output_y, output_x, bias++, biasR++, ksrc, output_mult++, output_shift++, inplace_out,output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8007144:	9107      	str	r1, [sp, #28]
 8007146:	9942      	ldr	r1, [sp, #264]	@ 0x108
        input++;
 8007148:	920a      	str	r2, [sp, #40]	@ 0x28
        depthwise_kernel7x7_stride1_inplace_kernel_CHW(output_y, output_x, bias++, biasR++, ksrc, output_mult++, output_shift++, inplace_out,output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 800714a:	9106      	str	r1, [sp, #24]
 800714c:	9941      	ldr	r1, [sp, #260]	@ 0x104
 800714e:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
 8007150:	9105      	str	r1, [sp, #20]
 8007152:	993f      	ldr	r1, [sp, #252]	@ 0xfc
 8007154:	1d16      	adds	r6, r2, #4
 8007156:	e9cd e301 	strd	lr, r3, [sp, #4]
        ksrc += 49;
 800715a:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
        depthwise_kernel7x7_stride1_inplace_kernel_CHW(output_y, output_x, bias++, biasR++, ksrc, output_mult++, output_shift++, inplace_out,output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 800715c:	9104      	str	r1, [sp, #16]
        ksrc += 49;
 800715e:	3331      	adds	r3, #49	@ 0x31
        depthwise_kernel7x7_stride1_inplace_kernel_CHW(output_y, output_x, bias++, biasR++, ksrc, output_mult++, output_shift++, inplace_out,output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8007160:	e9cd 9408 	strd	r9, r4, [sp, #32]
        ksrc += 49;
 8007164:	933a      	str	r3, [sp, #232]	@ 0xe8
        depthwise_kernel7x7_stride1_inplace_kernel_CHW(output_y, output_x, bias++, biasR++, ksrc, output_mult++, output_shift++, inplace_out,output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8007166:	4603      	mov	r3, r0
 8007168:	e9dd 101b 	ldrd	r1, r0, [sp, #108]	@ 0x6c
 800716c:	f7ff faca 	bl	8006704 <depthwise_kernel7x7_stride1_inplace_kernel_CHW>
    for (c = 0; c < input_ch; c++){
 8007170:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007172:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8007174:	429a      	cmp	r2, r3
 8007176:	f000 80eb 	beq.w	8007350 <depthwise_kernel7x7_stride1_inplace_CHW+0x414>
        depthwise_kernel7x7_stride1_inplace_kernel_CHW(output_y, output_x, bias++, biasR++, ksrc, output_mult++, output_shift++, inplace_out,output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 800717a:	46d6      	mov	lr, sl
 800717c:	4643      	mov	r3, r8
 800717e:	4638      	mov	r0, r7
 8007180:	963b      	str	r6, [sp, #236]	@ 0xec
 8007182:	e79e      	b.n	80070c2 <depthwise_kernel7x7_stride1_inplace_CHW+0x186>
 8007184:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8007186:	1846      	adds	r6, r0, r1
            cols_8b += 3;//skip front
 8007188:	4638      	mov	r0, r7
                *cols_8b++ = *src;// + input_offset;
 800718a:	f853 4b04 	ldr.w	r4, [r3], #4
 800718e:	42b3      	cmp	r3, r6
 8007190:	f840 4b04 	str.w	r4, [r0], #4
            for(j = 0; j < input_x; j++){
 8007194:	d1f9      	bne.n	800718a <depthwise_kernel7x7_stride1_inplace_CHW+0x24e>
 8007196:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8007198:	197b      	adds	r3, r7, r5
 800719a:	1948      	adds	r0, r1, r5
 800719c:	2c00      	cmp	r4, #0
 800719e:	d0ba      	beq.n	8007116 <depthwise_kernel7x7_stride1_inplace_CHW+0x1da>
                *cols_8b++ = *src;// + input_offset;
 80071a0:	574c      	ldrsb	r4, [r1, r5]
 80071a2:	557c      	strb	r4, [r7, r5]
            for(j = 0; j < input_x; j++){
 80071a4:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80071a6:	454c      	cmp	r4, r9
 80071a8:	d2b5      	bcs.n	8007116 <depthwise_kernel7x7_stride1_inplace_CHW+0x1da>
                *cols_8b++ = *src;// + input_offset;
 80071aa:	f990 4001 	ldrsb.w	r4, [r0, #1]
 80071ae:	705c      	strb	r4, [r3, #1]
            for(j = 0; j < input_x; j++){
 80071b0:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80071b2:	45a1      	cmp	r9, r4
 80071b4:	d9af      	bls.n	8007116 <depthwise_kernel7x7_stride1_inplace_CHW+0x1da>
        for(i = 0; i < input_y; i++){
 80071b6:	f10c 0c01 	add.w	ip, ip, #1
                *cols_8b++ = *src;// + input_offset;
 80071ba:	f990 0002 	ldrsb.w	r0, [r0, #2]
                src += input_ch;
 80071be:	4471      	add	r1, lr
        for(i = 0; i < input_y; i++){
 80071c0:	4447      	add	r7, r8
 80071c2:	45dc      	cmp	ip, fp
 80071c4:	4472      	add	r2, lr
                *cols_8b++ = *src;// + input_offset;
 80071c6:	7098      	strb	r0, [r3, #2]
        for(i = 0; i < input_y; i++){
 80071c8:	d195      	bne.n	80070f6 <depthwise_kernel7x7_stride1_inplace_CHW+0x1ba>
 80071ca:	e7ab      	b.n	8007124 <depthwise_kernel7x7_stride1_inplace_CHW+0x1e8>
 80071cc:	991d      	ldr	r1, [sp, #116]	@ 0x74
 80071ce:	f109 0202 	add.w	r2, r9, #2
 80071d2:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 80071d4:	f04f 0c00 	mov.w	ip, #0
 80071d8:	440a      	add	r2, r1
 80071da:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80071dc:	f106 0a07 	add.w	sl, r6, #7
 80071e0:	1cce      	adds	r6, r1, #3
 80071e2:	992f      	ldr	r1, [sp, #188]	@ 0xbc
 80071e4:	f8cd b040 	str.w	fp, [sp, #64]	@ 0x40
 80071e8:	eb07 0801 	add.w	r8, r7, r1
 80071ec:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 80071ee:	f8cd e0f8 	str.w	lr, [sp, #248]	@ 0xf8
 80071f2:	3103      	adds	r1, #3
 80071f4:	f8dd b0b0 	ldr.w	fp, [sp, #176]	@ 0xb0
 80071f8:	f8dd e0b8 	ldr.w	lr, [sp, #184]	@ 0xb8
 80071fc:	911e      	str	r1, [sp, #120]	@ 0x78
 80071fe:	f009 0107 	and.w	r1, r9, #7
 8007202:	952b      	str	r5, [sp, #172]	@ 0xac
 8007204:	911f      	str	r1, [sp, #124]	@ 0x7c
 8007206:	4661      	mov	r1, ip
 8007208:	e9cd 033c 	strd	r0, r3, [sp, #240]	@ 0xf0
            for(j = 0; j < input_x; j++){
 800720c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800720e:	2b1b      	cmp	r3, #27
 8007210:	d903      	bls.n	800721a <depthwise_kernel7x7_stride1_inplace_CHW+0x2de>
 8007212:	4546      	cmp	r6, r8
 8007214:	d81a      	bhi.n	800724c <depthwise_kernel7x7_stride1_inplace_CHW+0x310>
 8007216:	4297      	cmp	r7, r2
 8007218:	d818      	bhi.n	800724c <depthwise_kernel7x7_stride1_inplace_CHW+0x310>
 800721a:	1e70      	subs	r0, r6, #1
            cols_8b += 3;//skip front
 800721c:	463b      	mov	r3, r7
                *cols_8b++ = *src;// + input_offset;
 800721e:	f993 5000 	ldrsb.w	r5, [r3]
                src += input_ch;
 8007222:	4423      	add	r3, r4
                *cols_8b++ = *src;// + input_offset;
 8007224:	f800 5f01 	strb.w	r5, [r0, #1]!
            for(j = 0; j < input_x; j++){
 8007228:	4290      	cmp	r0, r2
 800722a:	d1f8      	bne.n	800721e <depthwise_kernel7x7_stride1_inplace_CHW+0x2e2>
                src += input_ch;
 800722c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
        for(i = 0; i < input_y; i++){
 800722e:	3101      	adds	r1, #1
 8007230:	4456      	add	r6, sl
 8007232:	4452      	add	r2, sl
                src += input_ch;
 8007234:	441f      	add	r7, r3
        for(i = 0; i < input_y; i++){
 8007236:	4498      	add	r8, r3
 8007238:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800723a:	4299      	cmp	r1, r3
 800723c:	d1e6      	bne.n	800720c <depthwise_kernel7x7_stride1_inplace_CHW+0x2d0>
 800723e:	469b      	mov	fp, r3
 8007240:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 8007242:	f8dd e0f8 	ldr.w	lr, [sp, #248]	@ 0xf8
 8007246:	e9dd 033c 	ldrd	r0, r3, [sp, #240]	@ 0xf0
 800724a:	e770      	b.n	800712e <depthwise_kernel7x7_stride1_inplace_CHW+0x1f2>
 800724c:	1ef3      	subs	r3, r6, #3
 800724e:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8007250:	9d20      	ldr	r5, [sp, #128]	@ 0x80
 8007252:	4418      	add	r0, r3
            cols_8b += 3;//skip front
 8007254:	f8cd 9064 	str.w	r9, [sp, #100]	@ 0x64
 8007258:	eb05 0c07 	add.w	ip, r5, r7
 800725c:	463b      	mov	r3, r7
 800725e:	4635      	mov	r5, r6
 8007260:	f8dd 908c 	ldr.w	r9, [sp, #140]	@ 0x8c
 8007264:	e9cd 6a15 	strd	r6, sl, [sp, #84]	@ 0x54
 8007268:	e9cd 2817 	strd	r2, r8, [sp, #92]	@ 0x5c
 800726c:	4682      	mov	sl, r0
 800726e:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 8007272:	e9cd 7113 	strd	r7, r1, [sp, #76]	@ 0x4c
                *cols_8b++ = *src;// + input_offset;
 8007276:	781f      	ldrb	r7, [r3, #0]
 8007278:	2200      	movs	r2, #0
 800727a:	f81c 0008 	ldrb.w	r0, [ip, r8]
 800727e:	3508      	adds	r5, #8
 8007280:	f813 6024 	ldrb.w	r6, [r3, r4, lsl #2]
 8007284:	4611      	mov	r1, r2
 8007286:	f367 0207 	bfi	r2, r7, #0, #8
 800728a:	f366 0107 	bfi	r1, r6, #0, #8
 800728e:	f360 220f 	bfi	r2, r0, #8, #8
 8007292:	f813 0009 	ldrb.w	r0, [r3, r9]
 8007296:	f360 210f 	bfi	r1, r0, #8, #8
 800729a:	f813 0014 	ldrb.w	r0, [r3, r4, lsl #1]
 800729e:	f360 4217 	bfi	r2, r0, #16, #8
 80072a2:	f81c 0014 	ldrb.w	r0, [ip, r4, lsl #1]
 80072a6:	f360 4117 	bfi	r1, r0, #16, #8
 80072aa:	f813 000e 	ldrb.w	r0, [r3, lr]
 80072ae:	445b      	add	r3, fp
 80072b0:	f360 621f 	bfi	r2, r0, #24, #8
 80072b4:	f81c 000e 	ldrb.w	r0, [ip, lr]
 80072b8:	44dc      	add	ip, fp
 80072ba:	f360 611f 	bfi	r1, r0, #24, #8
 80072be:	f845 2c08 	str.w	r2, [r5, #-8]
 80072c2:	f845 1c04 	str.w	r1, [r5, #-4]
            for(j = 0; j < input_x; j++){
 80072c6:	4555      	cmp	r5, sl
 80072c8:	d1d5      	bne.n	8007276 <depthwise_kernel7x7_stride1_inplace_CHW+0x33a>
 80072ca:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80072cc:	9d21      	ldr	r5, [sp, #132]	@ 0x84
 80072ce:	f8dd 9064 	ldr.w	r9, [sp, #100]	@ 0x64
 80072d2:	e9dd 6a15 	ldrd	r6, sl, [sp, #84]	@ 0x54
 80072d6:	e9dd 7113 	ldrd	r7, r1, [sp, #76]	@ 0x4c
 80072da:	eb06 0c03 	add.w	ip, r6, r3
 80072de:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80072e0:	1978      	adds	r0, r7, r5
 80072e2:	e9dd 2817 	ldrd	r2, r8, [sp, #92]	@ 0x5c
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d0a0      	beq.n	800722c <depthwise_kernel7x7_stride1_inplace_CHW+0x2f0>
                *cols_8b++ = *src;// + input_offset;
 80072ea:	577d      	ldrsb	r5, [r7, r5]
 80072ec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80072ee:	54f5      	strb	r5, [r6, r3]
                src += input_ch;
 80072f0:	1905      	adds	r5, r0, r4
            for(j = 0; j < input_x; j++){
 80072f2:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80072f4:	4599      	cmp	r9, r3
 80072f6:	d999      	bls.n	800722c <depthwise_kernel7x7_stride1_inplace_CHW+0x2f0>
 80072f8:	9b26      	ldr	r3, [sp, #152]	@ 0x98
                *cols_8b++ = *src;// + input_offset;
 80072fa:	5700      	ldrsb	r0, [r0, r4]
            for(j = 0; j < input_x; j++){
 80072fc:	4599      	cmp	r9, r3
                *cols_8b++ = *src;// + input_offset;
 80072fe:	f88c 0001 	strb.w	r0, [ip, #1]
                src += input_ch;
 8007302:	eb05 0004 	add.w	r0, r5, r4
            for(j = 0; j < input_x; j++){
 8007306:	d991      	bls.n	800722c <depthwise_kernel7x7_stride1_inplace_CHW+0x2f0>
 8007308:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
                *cols_8b++ = *src;// + input_offset;
 800730a:	572d      	ldrsb	r5, [r5, r4]
            for(j = 0; j < input_x; j++){
 800730c:	4599      	cmp	r9, r3
                *cols_8b++ = *src;// + input_offset;
 800730e:	f88c 5002 	strb.w	r5, [ip, #2]
                src += input_ch;
 8007312:	eb00 0504 	add.w	r5, r0, r4
            for(j = 0; j < input_x; j++){
 8007316:	d989      	bls.n	800722c <depthwise_kernel7x7_stride1_inplace_CHW+0x2f0>
 8007318:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
                *cols_8b++ = *src;// + input_offset;
 800731a:	5700      	ldrsb	r0, [r0, r4]
            for(j = 0; j < input_x; j++){
 800731c:	4599      	cmp	r9, r3
                *cols_8b++ = *src;// + input_offset;
 800731e:	f88c 0003 	strb.w	r0, [ip, #3]
                src += input_ch;
 8007322:	eb05 0004 	add.w	r0, r5, r4
            for(j = 0; j < input_x; j++){
 8007326:	d981      	bls.n	800722c <depthwise_kernel7x7_stride1_inplace_CHW+0x2f0>
 8007328:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
                *cols_8b++ = *src;// + input_offset;
 800732a:	572d      	ldrsb	r5, [r5, r4]
            for(j = 0; j < input_x; j++){
 800732c:	4599      	cmp	r9, r3
                *cols_8b++ = *src;// + input_offset;
 800732e:	f88c 5004 	strb.w	r5, [ip, #4]
                src += input_ch;
 8007332:	eb00 0504 	add.w	r5, r0, r4
            for(j = 0; j < input_x; j++){
 8007336:	f67f af79 	bls.w	800722c <depthwise_kernel7x7_stride1_inplace_CHW+0x2f0>
 800733a:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
                *cols_8b++ = *src;// + input_offset;
 800733c:	5700      	ldrsb	r0, [r0, r4]
            for(j = 0; j < input_x; j++){
 800733e:	4599      	cmp	r9, r3
                *cols_8b++ = *src;// + input_offset;
 8007340:	f88c 0005 	strb.w	r0, [ip, #5]
            for(j = 0; j < input_x; j++){
 8007344:	f67f af72 	bls.w	800722c <depthwise_kernel7x7_stride1_inplace_CHW+0x2f0>
                *cols_8b++ = *src;// + input_offset;
 8007348:	5728      	ldrsb	r0, [r5, r4]
 800734a:	f88c 0006 	strb.w	r0, [ip, #6]
            for(j = 0; j < input_x; j++){
 800734e:	e76d      	b.n	800722c <depthwise_kernel7x7_stride1_inplace_CHW+0x2f0>
}
 8007350:	2000      	movs	r0, #0
 8007352:	b031      	add	sp, #196	@ 0xc4
 8007354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007358:	f109 0606 	add.w	r6, r9, #6
 800735c:	e626      	b.n	8006fac <depthwise_kernel7x7_stride1_inplace_CHW+0x70>
 800735e:	bf00      	nop

08007360 <depthwise_kernel7x7_stride2_inplace_kernel_CHW>:
        const uint16_t output_y, const uint16_t output_x,
        const int32_t *bias, const int32_t *biasR, const q7_t *ksrc, const int32_t *multiplier,
        const int32_t *shift, q7_t *output, const int32_t output_offset,
        const int32_t activation_min, const int32_t activation_max,
        q7_t *cols_8b_iterptr, const uint16_t column_x, int channel_offset)
{
 8007360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007364:	b0a5      	sub	sp, #148	@ 0x94
 8007366:	f8dd e0b8 	ldr.w	lr, [sp, #184]	@ 0xb8
 800736a:	9e35      	ldr	r6, [sp, #212]	@ 0xd4
 800736c:	f8bd 70d8 	ldrh.w	r7, [sp, #216]	@ 0xd8
 8007370:	f8dd a0dc 	ldr.w	sl, [sp, #220]	@ 0xdc
 8007374:	9212      	str	r2, [sp, #72]	@ 0x48
 8007376:	9309      	str	r3, [sp, #36]	@ 0x24
    #define STRIDE 2
    int i, j;
    /* MACs for each output */
    for (i = 0; i < output_y; i++) {
 8007378:	9018      	str	r0, [sp, #96]	@ 0x60
 800737a:	2800      	cmp	r0, #0
 800737c:	f000 8410 	beq.w	8007ba0 <depthwise_kernel7x7_stride2_inplace_kernel_CHW+0x840>
            sum = TN_MIN(sum, activation_max);
            output[(i * output_x + output_x - 1) * channel_offset] = sum;

            cols_8b_iterptr += STRIDE;
        }
        cols_8b_iterptr += 3 * 2 - (column_x & 1);
 8007380:	f007 0301 	and.w	r3, r7, #1
        cols_8b_iterptr += (STRIDE - 1) * (column_x + 3 * 2);
 8007384:	1dba      	adds	r2, r7, #6
 8007386:	468b      	mov	fp, r1
 8007388:	f04f 0c01 	mov.w	ip, #1
        cols_8b_iterptr += 3 * 2 - (column_x & 1);
 800738c:	f1c3 0306 	rsb	r3, r3, #6
 8007390:	eb07 0047 	add.w	r0, r7, r7, lsl #1
        for (j = 0; j < output_x / 2; j++) {
 8007394:	0849      	lsrs	r1, r1, #1
    for (i = 0; i < output_y; i++) {
 8007396:	f04f 0900 	mov.w	r9, #0
 800739a:	4413      	add	r3, r2
        cols_8b_iterptr += (STRIDE - 1) * (column_x + 3 * 2);
 800739c:	920a      	str	r2, [sp, #40]	@ 0x28
        for (j = 0; j < output_x / 2; j++) {
 800739e:	911a      	str	r1, [sp, #104]	@ 0x68
 80073a0:	931b      	str	r3, [sp, #108]	@ 0x6c
 80073a2:	f10b 33ff 	add.w	r3, fp, #4294967295	@ 0xffffffff
 80073a6:	901f      	str	r0, [sp, #124]	@ 0x7c
 80073a8:	fb0a f303 	mul.w	r3, sl, r3
 80073ac:	f8cd b074 	str.w	fp, [sp, #116]	@ 0x74
 80073b0:	9323      	str	r3, [sp, #140]	@ 0x8c
 80073b2:	ea0b 030c 	and.w	r3, fp, ip
 80073b6:	9319      	str	r3, [sp, #100]	@ 0x64
 80073b8:	fb0a f30b 	mul.w	r3, sl, fp
 80073bc:	931c      	str	r3, [sp, #112]	@ 0x70
 80073be:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 80073c0:	eb03 080a 	add.w	r8, r3, sl
 80073c4:	fa07 f30c 	lsl.w	r3, r7, ip
 80073c8:	931e      	str	r3, [sp, #120]	@ 0x78
 80073ca:	0093      	lsls	r3, r2, #2
 80073cc:	9320      	str	r3, [sp, #128]	@ 0x80
 80073ce:	fa00 f30c 	lsl.w	r3, r0, ip
 80073d2:	9322      	str	r3, [sp, #136]	@ 0x88
 80073d4:	fa0a f30c 	lsl.w	r3, sl, ip
 80073d8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80073da:	008b      	lsls	r3, r1, #2
 80073dc:	9321      	str	r3, [sp, #132]	@ 0x84
 80073de:	f107 0308 	add.w	r3, r7, #8
 80073e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80073e4:	1dfb      	adds	r3, r7, #7
 80073e6:	930c      	str	r3, [sp, #48]	@ 0x30
 80073e8:	f107 0309 	add.w	r3, r7, #9
 80073ec:	930d      	str	r3, [sp, #52]	@ 0x34
 80073ee:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	f000 83d8 	beq.w	8007ba6 <depthwise_kernel7x7_stride2_inplace_kernel_CHW+0x846>
 80073f6:	9a22      	ldr	r2, [sp, #136]	@ 0x88
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 80073f8:	f10c 33ff 	add.w	r3, ip, #4294967295	@ 0xffffffff
 80073fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8007400:	18b1      	adds	r1, r6, r2
 8007402:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007404:	fb0a f303 	mul.w	r3, sl, r3
 8007408:	18b2      	adds	r2, r6, r2
 800740a:	f8cd a0dc 	str.w	sl, [sp, #220]	@ 0xdc
 800740e:	9311      	str	r3, [sp, #68]	@ 0x44
 8007410:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007412:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8007414:	fb0a f20c 	mul.w	r2, sl, ip
 8007418:	18f3      	adds	r3, r6, r3
 800741a:	9210      	str	r2, [sp, #64]	@ 0x40
 800741c:	f107 020a 	add.w	r2, r7, #10
 8007420:	9302      	str	r3, [sp, #8]
 8007422:	9204      	str	r2, [sp, #16]
 8007424:	f107 020b 	add.w	r2, r7, #11
 8007428:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800742a:	9205      	str	r2, [sp, #20]
 800742c:	f107 020c 	add.w	r2, r7, #12
 8007430:	18f3      	adds	r3, r6, r3
 8007432:	9206      	str	r2, [sp, #24]
 8007434:	f107 020d 	add.w	r2, r7, #13
 8007438:	9301      	str	r3, [sp, #4]
 800743a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800743c:	9207      	str	r2, [sp, #28]
 800743e:	f107 020e 	add.w	r2, r7, #14
 8007442:	18f3      	adds	r3, r6, r3
 8007444:	9208      	str	r2, [sp, #32]
 8007446:	e9cd 9c14 	strd	r9, ip, [sp, #80]	@ 0x50
 800744a:	e9cd 8716 	strd	r8, r7, [sp, #88]	@ 0x58
            q31_t sum0 = bias[0] + biasR[0];
 800744e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
            sum0 += cols_8b[0]*ksrc[0];
 8007450:	f99e 7000 	ldrsb.w	r7, [lr]
            q31_t sum0 = bias[0] + biasR[0];
 8007454:	6810      	ldr	r0, [r2, #0]
 8007456:	9a12      	ldr	r2, [sp, #72]	@ 0x48
            sum0 += cols_8b[0]*ksrc[0];
 8007458:	f996 4000 	ldrsb.w	r4, [r6]
            q31_t sum0 = bias[0] + biasR[0];
 800745c:	6812      	ldr	r2, [r2, #0]
            sum0 += cols_8b[1]*ksrc[1];
 800745e:	f99e 5001 	ldrsb.w	r5, [lr, #1]
            q31_t sum0 = bias[0] + biasR[0];
 8007462:	4402      	add	r2, r0
 8007464:	900e      	str	r0, [sp, #56]	@ 0x38
            sum0 += cols_8b[1]*ksrc[1];
 8007466:	f996 0001 	ldrsb.w	r0, [r6, #1]
            sum0 += cols_8b[0]*ksrc[0];
 800746a:	fb17 2404 	smlabb	r4, r7, r4, r2
            sum0 += cols_8b[6]*ksrc[6];
 800746e:	f99e b006 	ldrsb.w	fp, [lr, #6]
            sum0 += cols_8b[0]*ksrc[7];
 8007472:	f99e 9007 	ldrsb.w	r9, [lr, #7]
            sum0 += cols_8b[1]*ksrc[1];
 8007476:	fb15 4000 	smlabb	r0, r5, r0, r4
            sum1 += cols_8b[2]*ksrc[0];
 800747a:	f996 4002 	ldrsb.w	r4, [r6, #2]
            sum0 += cols_8b[1]*ksrc[8];
 800747e:	f99e c008 	ldrsb.w	ip, [lr, #8]
            sum1 += cols_8b[2]*ksrc[0];
 8007482:	fb04 2207 	mla	r2, r4, r7, r2
            sum0 += cols_8b[2]*ksrc[2];
 8007486:	f99e 7002 	ldrsb.w	r7, [lr, #2]
 800748a:	fb07 0004 	mla	r0, r7, r4, r0
            sum1 += cols_8b[3]*ksrc[1];
 800748e:	f996 4003 	ldrsb.w	r4, [r6, #3]
 8007492:	fb04 2205 	mla	r2, r4, r5, r2
            sum0 += cols_8b[3]*ksrc[3];
 8007496:	f99e 5003 	ldrsb.w	r5, [lr, #3]
 800749a:	fb05 0004 	mla	r0, r5, r4, r0
            sum1 += cols_8b[4]*ksrc[2];
 800749e:	f996 4004 	ldrsb.w	r4, [r6, #4]
 80074a2:	fb04 2207 	mla	r2, r4, r7, r2
            sum0 += cols_8b[4]*ksrc[4];
 80074a6:	f99e 7004 	ldrsb.w	r7, [lr, #4]
 80074aa:	fb07 0004 	mla	r0, r7, r4, r0
            sum1 += cols_8b[5]*ksrc[3];
 80074ae:	f996 4005 	ldrsb.w	r4, [r6, #5]
 80074b2:	fb04 2205 	mla	r2, r4, r5, r2
            sum0 += cols_8b[5]*ksrc[5];
 80074b6:	f99e 5005 	ldrsb.w	r5, [lr, #5]
 80074ba:	fb05 0004 	mla	r0, r5, r4, r0
            sum1 += cols_8b[6]*ksrc[4];
 80074be:	f996 4006 	ldrsb.w	r4, [r6, #6]
 80074c2:	fb04 2207 	mla	r2, r4, r7, r2
            sum0 += cols_8b[1]*ksrc[8];
 80074c6:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
            sum0 += cols_8b[6]*ksrc[6];
 80074c8:	fb0b 0004 	mla	r0, fp, r4, r0
            sum0 += cols_8b[0]*ksrc[7];
 80074cc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80074ce:	5734      	ldrsb	r4, [r6, r4]
 80074d0:	fb19 0404 	smlabb	r4, r9, r4, r0
            sum0 += cols_8b[1]*ksrc[8];
 80074d4:	57f0      	ldrsb	r0, [r6, r7]
            sum0 += cols_8b[2]*ksrc[9];
 80074d6:	f99e 7009 	ldrsb.w	r7, [lr, #9]
            sum0 += cols_8b[1]*ksrc[8];
 80074da:	fb1c 4000 	smlabb	r0, ip, r0, r4
            sum1 += cols_8b[2]*ksrc[7];
 80074de:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80074e0:	f916 a004 	ldrsb.w	sl, [r6, r4]
            sum1 += cols_8b[7]*ksrc[5];
 80074e4:	f996 4007 	ldrsb.w	r4, [r6, #7]
            sum0 += cols_8b[2]*ksrc[9];
 80074e8:	fb07 000a 	mla	r0, r7, sl, r0
            sum1 += cols_8b[7]*ksrc[5];
 80074ec:	fb14 2405 	smlabb	r4, r4, r5, r2
            sum1 += cols_8b[3]*ksrc[8];
 80074f0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
            sum0 += cols_8b[3]*ksrc[10];
 80074f2:	f99e 500a 	ldrsb.w	r5, [lr, #10]
            sum1 += cols_8b[3]*ksrc[8];
 80074f6:	f916 8002 	ldrsb.w	r8, [r6, r2]
            sum1 += cols_8b[8]*ksrc[6];
 80074fa:	f996 2008 	ldrsb.w	r2, [r6, #8]
            sum0 += cols_8b[3]*ksrc[10];
 80074fe:	fb05 0008 	mla	r0, r5, r8, r0
            sum1 += cols_8b[8]*ksrc[6];
 8007502:	fb12 420b 	smlabb	r2, r2, fp, r4
            sum1 += cols_8b[4]*ksrc[9];
 8007506:	9c04      	ldr	r4, [sp, #16]
            sum0 += cols_8b[6]*ksrc[13];
 8007508:	f99e b00d 	ldrsb.w	fp, [lr, #13]
            sum1 += cols_8b[2]*ksrc[7];
 800750c:	fb0a 2209 	mla	r2, sl, r9, r2
            sum0 += cols_8b[0]*ksrc[14];
 8007510:	f99e 900e 	ldrsb.w	r9, [lr, #14]
            sum1 += cols_8b[3]*ksrc[8];
 8007514:	fb08 220c 	mla	r2, r8, ip, r2
            sum1 += cols_8b[4]*ksrc[9];
 8007518:	f916 c004 	ldrsb.w	ip, [r6, r4]
            sum0 += cols_8b[4]*ksrc[11];
 800751c:	f99e 400b 	ldrsb.w	r4, [lr, #11]
            sum1 += cols_8b[4]*ksrc[9];
 8007520:	fb0c 2207 	mla	r2, ip, r7, r2
            sum1 += cols_8b[5]*ksrc[10];
 8007524:	9f05      	ldr	r7, [sp, #20]
            sum0 += cols_8b[4]*ksrc[11];
 8007526:	fb04 000c 	mla	r0, r4, ip, r0
            sum1 += cols_8b[5]*ksrc[10];
 800752a:	f916 c007 	ldrsb.w	ip, [r6, r7]
            sum0 += cols_8b[5]*ksrc[12];
 800752e:	f99e 700c 	ldrsb.w	r7, [lr, #12]
            sum1 += cols_8b[5]*ksrc[10];
 8007532:	fb0c 2205 	mla	r2, ip, r5, r2
            sum1 += cols_8b[6]*ksrc[11];
 8007536:	9d06      	ldr	r5, [sp, #24]
            sum0 += cols_8b[5]*ksrc[12];
 8007538:	fb07 000c 	mla	r0, r7, ip, r0
            sum0 += cols_8b[1]*ksrc[15];
 800753c:	f99e c00f 	ldrsb.w	ip, [lr, #15]
            sum1 += cols_8b[6]*ksrc[11];
 8007540:	5775      	ldrsb	r5, [r6, r5]
 8007542:	fb05 2204 	mla	r2, r5, r4, r2
            sum1 += cols_8b[7]*ksrc[12];
 8007546:	9c07      	ldr	r4, [sp, #28]
            sum0 += cols_8b[6]*ksrc[13];
 8007548:	fb0b 0005 	mla	r0, fp, r5, r0
            sum0 += cols_8b[0]*ksrc[14];
 800754c:	9d02      	ldr	r5, [sp, #8]
            sum1 += cols_8b[7]*ksrc[12];
 800754e:	5734      	ldrsb	r4, [r6, r4]
            sum1 += cols_8b[2]*ksrc[14];
 8007550:	f995 a00e 	ldrsb.w	sl, [r5, #14]
            sum1 += cols_8b[7]*ksrc[12];
 8007554:	fb14 2407 	smlabb	r4, r4, r7, r2
            sum0 += cols_8b[0]*ksrc[14];
 8007558:	f995 200c 	ldrsb.w	r2, [r5, #12]
            sum1 += cols_8b[3]*ksrc[15];
 800755c:	f995 800f 	ldrsb.w	r8, [r5, #15]
            sum0 += cols_8b[0]*ksrc[14];
 8007560:	fb19 0202 	smlabb	r2, r9, r2, r0
            sum0 += cols_8b[1]*ksrc[15];
 8007564:	f995 000d 	ldrsb.w	r0, [r5, #13]
            sum0 += cols_8b[2]*ksrc[16];
 8007568:	f99e 7010 	ldrsb.w	r7, [lr, #16]
            sum0 += cols_8b[1]*ksrc[15];
 800756c:	fb1c 2000 	smlabb	r0, ip, r0, r2
            sum1 += cols_8b[8]*ksrc[13];
 8007570:	9a08      	ldr	r2, [sp, #32]
            sum0 += cols_8b[3]*ksrc[17];
 8007572:	f99e 5011 	ldrsb.w	r5, [lr, #17]
            sum1 += cols_8b[8]*ksrc[13];
 8007576:	56b2      	ldrsb	r2, [r6, r2]
            sum0 += cols_8b[2]*ksrc[16];
 8007578:	fb07 000a 	mla	r0, r7, sl, r0
            sum1 += cols_8b[8]*ksrc[13];
 800757c:	fb12 420b 	smlabb	r2, r2, fp, r4
            sum1 += cols_8b[4]*ksrc[16];
 8007580:	9c02      	ldr	r4, [sp, #8]
            sum0 += cols_8b[3]*ksrc[17];
 8007582:	fb05 0008 	mla	r0, r5, r8, r0
            sum0 += cols_8b[6]*ksrc[20];
 8007586:	f99e b014 	ldrsb.w	fp, [lr, #20]
            sum1 += cols_8b[2]*ksrc[14];
 800758a:	fb0a 2209 	mla	r2, sl, r9, r2
            sum1 += cols_8b[4]*ksrc[16];
 800758e:	f994 4010 	ldrsb.w	r4, [r4, #16]
            sum1 += cols_8b[3]*ksrc[15];
 8007592:	fb08 220c 	mla	r2, r8, ip, r2
            sum1 += cols_8b[4]*ksrc[16];
 8007596:	fb04 2207 	mla	r2, r4, r7, r2
            sum0 += cols_8b[4]*ksrc[18];
 800759a:	f99e 7012 	ldrsb.w	r7, [lr, #18]
 800759e:	fb07 0004 	mla	r0, r7, r4, r0
            sum1 += cols_8b[5]*ksrc[17];
 80075a2:	9c02      	ldr	r4, [sp, #8]
 80075a4:	f994 4011 	ldrsb.w	r4, [r4, #17]
 80075a8:	fb04 2205 	mla	r2, r4, r5, r2
            sum0 += cols_8b[5]*ksrc[19];
 80075ac:	f99e 5013 	ldrsb.w	r5, [lr, #19]
 80075b0:	fb05 0004 	mla	r0, r5, r4, r0
            sum1 += cols_8b[6]*ksrc[18];
 80075b4:	9c02      	ldr	r4, [sp, #8]
 80075b6:	f994 4012 	ldrsb.w	r4, [r4, #18]
            sum0 += cols_8b[0]*ksrc[21];
 80075ba:	f99e 9015 	ldrsb.w	r9, [lr, #21]
            sum1 += cols_8b[6]*ksrc[18];
 80075be:	fb04 2207 	mla	r2, r4, r7, r2
            sum0 += cols_8b[0]*ksrc[21];
 80075c2:	9f01      	ldr	r7, [sp, #4]
            sum0 += cols_8b[6]*ksrc[20];
 80075c4:	fb0b 0004 	mla	r0, fp, r4, r0
            sum0 += cols_8b[1]*ksrc[22];
 80075c8:	f99e c016 	ldrsb.w	ip, [lr, #22]
            sum0 += cols_8b[0]*ksrc[21];
 80075cc:	f997 4012 	ldrsb.w	r4, [r7, #18]
            sum1 += cols_8b[2]*ksrc[21];
 80075d0:	f997 a014 	ldrsb.w	sl, [r7, #20]
            sum0 += cols_8b[0]*ksrc[21];
 80075d4:	fb19 0404 	smlabb	r4, r9, r4, r0
            sum0 += cols_8b[1]*ksrc[22];
 80075d8:	f997 0013 	ldrsb.w	r0, [r7, #19]
            sum0 += cols_8b[2]*ksrc[23];
 80075dc:	f99e 7017 	ldrsb.w	r7, [lr, #23]
            sum0 += cols_8b[1]*ksrc[22];
 80075e0:	fb1c 4000 	smlabb	r0, ip, r0, r4
            sum1 += cols_8b[7]*ksrc[19];
 80075e4:	9c02      	ldr	r4, [sp, #8]
 80075e6:	f994 4013 	ldrsb.w	r4, [r4, #19]
            sum0 += cols_8b[2]*ksrc[23];
 80075ea:	fb07 000a 	mla	r0, r7, sl, r0
            sum1 += cols_8b[7]*ksrc[19];
 80075ee:	fb14 2405 	smlabb	r4, r4, r5, r2
            sum1 += cols_8b[8]*ksrc[20];
 80075f2:	9a02      	ldr	r2, [sp, #8]
            sum1 += cols_8b[3]*ksrc[22];
 80075f4:	9d01      	ldr	r5, [sp, #4]
            sum1 += cols_8b[8]*ksrc[20];
 80075f6:	f992 2014 	ldrsb.w	r2, [r2, #20]
            sum1 += cols_8b[3]*ksrc[22];
 80075fa:	f995 8015 	ldrsb.w	r8, [r5, #21]
            sum1 += cols_8b[8]*ksrc[20];
 80075fe:	fb12 420b 	smlabb	r2, r2, fp, r4
            sum1 += cols_8b[4]*ksrc[23];
 8007602:	9c01      	ldr	r4, [sp, #4]
            sum0 += cols_8b[3]*ksrc[24];
 8007604:	f99e 5018 	ldrsb.w	r5, [lr, #24]
            sum1 += cols_8b[2]*ksrc[21];
 8007608:	fb0a 2209 	mla	r2, sl, r9, r2
            sum0 += cols_8b[6]*ksrc[27];
 800760c:	f99e b01b 	ldrsb.w	fp, [lr, #27]
            sum0 += cols_8b[3]*ksrc[24];
 8007610:	fb05 0008 	mla	r0, r5, r8, r0
            sum0 += cols_8b[0]*ksrc[28];
 8007614:	f99e 901c 	ldrsb.w	r9, [lr, #28]
            sum1 += cols_8b[3]*ksrc[22];
 8007618:	fb08 220c 	mla	r2, r8, ip, r2
            sum1 += cols_8b[4]*ksrc[23];
 800761c:	f994 c016 	ldrsb.w	ip, [r4, #22]
            sum0 += cols_8b[4]*ksrc[25];
 8007620:	f99e 4019 	ldrsb.w	r4, [lr, #25]
            sum1 += cols_8b[4]*ksrc[23];
 8007624:	fb0c 2207 	mla	r2, ip, r7, r2
            sum1 += cols_8b[5]*ksrc[24];
 8007628:	9f01      	ldr	r7, [sp, #4]
            sum0 += cols_8b[4]*ksrc[25];
 800762a:	fb04 000c 	mla	r0, r4, ip, r0
            sum1 += cols_8b[2]*ksrc[28];
 800762e:	f993 a002 	ldrsb.w	sl, [r3, #2]
            sum1 += cols_8b[5]*ksrc[24];
 8007632:	f997 c017 	ldrsb.w	ip, [r7, #23]
            sum0 += cols_8b[5]*ksrc[26];
 8007636:	f99e 701a 	ldrsb.w	r7, [lr, #26]
            sum1 += cols_8b[5]*ksrc[24];
 800763a:	fb0c 2205 	mla	r2, ip, r5, r2
            sum1 += cols_8b[6]*ksrc[25];
 800763e:	9d01      	ldr	r5, [sp, #4]
            sum0 += cols_8b[5]*ksrc[26];
 8007640:	fb07 000c 	mla	r0, r7, ip, r0
            sum0 += cols_8b[1]*ksrc[29];
 8007644:	f99e c01d 	ldrsb.w	ip, [lr, #29]
            sum1 += cols_8b[6]*ksrc[25];
 8007648:	f995 5018 	ldrsb.w	r5, [r5, #24]
            sum1 += cols_8b[3]*ksrc[29];
 800764c:	f993 8003 	ldrsb.w	r8, [r3, #3]
            sum1 += cols_8b[6]*ksrc[25];
 8007650:	fb05 2204 	mla	r2, r5, r4, r2
            sum1 += cols_8b[7]*ksrc[26];
 8007654:	9c01      	ldr	r4, [sp, #4]
            sum0 += cols_8b[6]*ksrc[27];
 8007656:	fb0b 0005 	mla	r0, fp, r5, r0
            sum1 += cols_8b[7]*ksrc[26];
 800765a:	f994 4019 	ldrsb.w	r4, [r4, #25]
 800765e:	fb14 2407 	smlabb	r4, r4, r7, r2
            sum0 += cols_8b[0]*ksrc[28];
 8007662:	f993 2000 	ldrsb.w	r2, [r3]
            sum0 += cols_8b[2]*ksrc[30];
 8007666:	f99e 701e 	ldrsb.w	r7, [lr, #30]
            sum0 += cols_8b[0]*ksrc[28];
 800766a:	fb19 0202 	smlabb	r2, r9, r2, r0
            sum0 += cols_8b[1]*ksrc[29];
 800766e:	f993 0001 	ldrsb.w	r0, [r3, #1]
            sum0 += cols_8b[3]*ksrc[31];
 8007672:	f99e 501f 	ldrsb.w	r5, [lr, #31]
            sum0 += cols_8b[1]*ksrc[29];
 8007676:	fb1c 2000 	smlabb	r0, ip, r0, r2
            sum1 += cols_8b[8]*ksrc[27];
 800767a:	9a01      	ldr	r2, [sp, #4]
 800767c:	f992 201a 	ldrsb.w	r2, [r2, #26]
            sum0 += cols_8b[2]*ksrc[30];
 8007680:	fb07 000a 	mla	r0, r7, sl, r0
            sum1 += cols_8b[8]*ksrc[27];
 8007684:	fb12 420b 	smlabb	r2, r2, fp, r4
            sum1 += cols_8b[4]*ksrc[30];
 8007688:	f993 4004 	ldrsb.w	r4, [r3, #4]
            sum0 += cols_8b[3]*ksrc[31];
 800768c:	fb05 0008 	mla	r0, r5, r8, r0
            sum0 += cols_8b[6]*ksrc[34];
 8007690:	f99e b022 	ldrsb.w	fp, [lr, #34]	@ 0x22
            sum1 += cols_8b[2]*ksrc[28];
 8007694:	fb0a 2209 	mla	r2, sl, r9, r2
            sum0 += cols_8b[0]*ksrc[35];
 8007698:	f99e 9023 	ldrsb.w	r9, [lr, #35]	@ 0x23
            sum1 += cols_8b[3]*ksrc[29];
 800769c:	fb08 220c 	mla	r2, r8, ip, r2
            sum0 += cols_8b[1]*ksrc[36];
 80076a0:	f99e c024 	ldrsb.w	ip, [lr, #36]	@ 0x24
            sum1 += cols_8b[4]*ksrc[30];
 80076a4:	fb04 2207 	mla	r2, r4, r7, r2
            sum0 += cols_8b[4]*ksrc[32];
 80076a8:	f99e 7020 	ldrsb.w	r7, [lr, #32]
 80076ac:	fb07 0004 	mla	r0, r7, r4, r0
            sum1 += cols_8b[5]*ksrc[31];
 80076b0:	f993 4005 	ldrsb.w	r4, [r3, #5]
 80076b4:	fb04 2205 	mla	r2, r4, r5, r2
            sum0 += cols_8b[5]*ksrc[33];
 80076b8:	f99e 5021 	ldrsb.w	r5, [lr, #33]	@ 0x21
 80076bc:	fb05 0004 	mla	r0, r5, r4, r0
            sum1 += cols_8b[6]*ksrc[32];
 80076c0:	f993 4006 	ldrsb.w	r4, [r3, #6]
 80076c4:	fb04 2207 	mla	r2, r4, r7, r2
            sum0 += cols_8b[1]*ksrc[36];
 80076c8:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
            sum0 += cols_8b[6]*ksrc[34];
 80076ca:	fb0b 0004 	mla	r0, fp, r4, r0
            sum0 += cols_8b[0]*ksrc[35];
 80076ce:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80076d0:	571c      	ldrsb	r4, [r3, r4]
 80076d2:	fb19 0404 	smlabb	r4, r9, r4, r0
            sum0 += cols_8b[1]*ksrc[36];
 80076d6:	57d8      	ldrsb	r0, [r3, r7]
            sum0 += cols_8b[2]*ksrc[37];
 80076d8:	f99e 7025 	ldrsb.w	r7, [lr, #37]	@ 0x25
            sum0 += cols_8b[1]*ksrc[36];
 80076dc:	fb1c 4000 	smlabb	r0, ip, r0, r4
            sum1 += cols_8b[2]*ksrc[35];
 80076e0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80076e2:	f913 a004 	ldrsb.w	sl, [r3, r4]
            sum1 += cols_8b[7]*ksrc[33];
 80076e6:	f993 4007 	ldrsb.w	r4, [r3, #7]
            sum0 += cols_8b[2]*ksrc[37];
 80076ea:	fb07 000a 	mla	r0, r7, sl, r0
            sum1 += cols_8b[7]*ksrc[33];
 80076ee:	fb14 2405 	smlabb	r4, r4, r5, r2
            sum1 += cols_8b[3]*ksrc[36];
 80076f2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
            sum0 += cols_8b[3]*ksrc[38];
 80076f4:	f99e 5026 	ldrsb.w	r5, [lr, #38]	@ 0x26
            sum1 += cols_8b[3]*ksrc[36];
 80076f8:	f913 8002 	ldrsb.w	r8, [r3, r2]
            sum1 += cols_8b[8]*ksrc[34];
 80076fc:	f993 2008 	ldrsb.w	r2, [r3, #8]
            sum0 += cols_8b[3]*ksrc[38];
 8007700:	fb05 0008 	mla	r0, r5, r8, r0
            sum1 += cols_8b[8]*ksrc[34];
 8007704:	fb12 420b 	smlabb	r2, r2, fp, r4
            sum1 += cols_8b[4]*ksrc[37];
 8007708:	9c04      	ldr	r4, [sp, #16]
            sum1 += cols_8b[2]*ksrc[35];
 800770a:	fb0a 2209 	mla	r2, sl, r9, r2
            sum1 += cols_8b[3]*ksrc[36];
 800770e:	fb08 220c 	mla	r2, r8, ip, r2
            sum1 += cols_8b[4]*ksrc[37];
 8007712:	f913 c004 	ldrsb.w	ip, [r3, r4]
            sum0 += cols_8b[4]*ksrc[39];
 8007716:	f99e 4027 	ldrsb.w	r4, [lr, #39]	@ 0x27
            sum1 += cols_8b[4]*ksrc[37];
 800771a:	fb0c 2207 	mla	r2, ip, r7, r2
            sum1 += cols_8b[5]*ksrc[38];
 800771e:	9f05      	ldr	r7, [sp, #20]
            sum0 += cols_8b[4]*ksrc[39];
 8007720:	fb04 000c 	mla	r0, r4, ip, r0
            sum1 += cols_8b[5]*ksrc[38];
 8007724:	f913 c007 	ldrsb.w	ip, [r3, r7]
            sum0 += cols_8b[5]*ksrc[40];
 8007728:	f99e 7028 	ldrsb.w	r7, [lr, #40]	@ 0x28
            sum1 += cols_8b[5]*ksrc[38];
 800772c:	fb0c 2205 	mla	r2, ip, r5, r2
            sum1 += cols_8b[6]*ksrc[39];
 8007730:	9d06      	ldr	r5, [sp, #24]
            sum0 += cols_8b[5]*ksrc[40];
 8007732:	fb07 000c 	mla	r0, r7, ip, r0
            sum1 += cols_8b[6]*ksrc[39];
 8007736:	575d      	ldrsb	r5, [r3, r5]
 8007738:	fb05 2204 	mla	r2, r5, r4, r2
            sum1 += cols_8b[7]*ksrc[40];
 800773c:	9c07      	ldr	r4, [sp, #28]
 800773e:	571c      	ldrsb	r4, [r3, r4]
            sum0 += cols_8b[6]*ksrc[41];
 8007740:	f99e b029 	ldrsb.w	fp, [lr, #41]	@ 0x29
            sum1 += cols_8b[7]*ksrc[40];
 8007744:	fb14 2407 	smlabb	r4, r4, r7, r2
            sum0 += cols_8b[0]*ksrc[42];
 8007748:	f99e 902a 	ldrsb.w	r9, [lr, #42]	@ 0x2a
            sum0 += cols_8b[6]*ksrc[41];
 800774c:	fb0b 0005 	mla	r0, fp, r5, r0
            sum0 += cols_8b[0]*ksrc[42];
 8007750:	f991 2024 	ldrsb.w	r2, [r1, #36]	@ 0x24
            sum0 += cols_8b[1]*ksrc[43];
 8007754:	f99e c02b 	ldrsb.w	ip, [lr, #43]	@ 0x2b
            sum0 += cols_8b[0]*ksrc[42];
 8007758:	fb19 0202 	smlabb	r2, r9, r2, r0
            sum0 += cols_8b[1]*ksrc[43];
 800775c:	f991 0025 	ldrsb.w	r0, [r1, #37]	@ 0x25
            sum1 += cols_8b[2]*ksrc[42];
 8007760:	f991 a026 	ldrsb.w	sl, [r1, #38]	@ 0x26
            sum0 += cols_8b[1]*ksrc[43];
 8007764:	fb1c 2000 	smlabb	r0, ip, r0, r2
            sum1 += cols_8b[8]*ksrc[41];
 8007768:	9a08      	ldr	r2, [sp, #32]
            sum0 += cols_8b[2]*ksrc[44];
 800776a:	f99e 702c 	ldrsb.w	r7, [lr, #44]	@ 0x2c
            sum1 += cols_8b[8]*ksrc[41];
 800776e:	569a      	ldrsb	r2, [r3, r2]
            sum1 += cols_8b[3]*ksrc[43];
 8007770:	f991 8027 	ldrsb.w	r8, [r1, #39]	@ 0x27
            sum0 += cols_8b[2]*ksrc[44];
 8007774:	fb07 000a 	mla	r0, r7, sl, r0
            sum1 += cols_8b[8]*ksrc[41];
 8007778:	fb12 420b 	smlabb	r2, r2, fp, r4
            sum0 += cols_8b[3]*ksrc[45];
 800777c:	f99e 502d 	ldrsb.w	r5, [lr, #45]	@ 0x2d
            sum1 += cols_8b[4]*ksrc[44];
 8007780:	f991 4028 	ldrsb.w	r4, [r1, #40]	@ 0x28
            sum1 += cols_8b[2]*ksrc[42];
 8007784:	fb0a 2209 	mla	r2, sl, r9, r2
            sum0 += cols_8b[3]*ksrc[45];
 8007788:	fb05 0008 	mla	r0, r5, r8, r0
            sum1 += cols_8b[3]*ksrc[43];
 800778c:	fb08 220c 	mla	r2, r8, ip, r2
            sum1 += cols_8b[5]*ksrc[45];
 8007790:	f991 c029 	ldrsb.w	ip, [r1, #41]	@ 0x29
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8007794:	f04f 0800 	mov.w	r8, #0
            sum1 += cols_8b[4]*ksrc[44];
 8007798:	fb04 2207 	mla	r2, r4, r7, r2
            sum0 += cols_8b[4]*ksrc[46];
 800779c:	f99e 702e 	ldrsb.w	r7, [lr, #46]	@ 0x2e
 80077a0:	fb07 0404 	mla	r4, r7, r4, r0
            sum0 += cols_8b[5]*ksrc[47];
 80077a4:	f99e 002f 	ldrsb.w	r0, [lr, #47]	@ 0x2f
            sum1 += cols_8b[5]*ksrc[45];
 80077a8:	fb0c 2205 	mla	r2, ip, r5, r2
            sum1 += cols_8b[6]*ksrc[46];
 80077ac:	f991 502a 	ldrsb.w	r5, [r1, #42]	@ 0x2a
            sum0 += cols_8b[5]*ksrc[47];
 80077b0:	fb00 440c 	mla	r4, r0, ip, r4
            sum0 += cols_8b[6]*ksrc[48];
 80077b4:	f99e c030 	ldrsb.w	ip, [lr, #48]	@ 0x30
            sum1 += cols_8b[6]*ksrc[46];
 80077b8:	fb05 2207 	mla	r2, r5, r7, r2
            sum1 += cols_8b[7]*ksrc[47];
 80077bc:	f991 702b 	ldrsb.w	r7, [r1, #43]	@ 0x2b
            sum0 += cols_8b[6]*ksrc[48];
 80077c0:	fb0c 4405 	mla	r4, ip, r5, r4
            sum0 = arm_nn_requantize(sum0 + biasR[0], *multiplier, *shift);
 80077c4:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
            sum1 += cols_8b[7]*ksrc[47];
 80077c6:	fb17 2700 	smlabb	r7, r7, r0, r2
 80077ca:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
            sum0 = arm_nn_requantize(sum0 + biasR[0], *multiplier, *shift);
 80077ce:	442c      	add	r4, r5
 80077d0:	9d30      	ldr	r5, [sp, #192]	@ 0xc0
 80077d2:	682d      	ldr	r5, [r5, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80077d4:	ea25 72e5 	bic.w	r2, r5, r5, asr #31
 80077d8:	2d00      	cmp	r5, #0
 80077da:	fa04 f402 	lsl.w	r4, r4, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80077de:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 80077e0:	6812      	ldr	r2, [r2, #0]
 80077e2:	fbc2 0804 	smlal	r0, r8, r2, r4
            sum1 += cols_8b[8]*ksrc[48];
 80077e6:	f991 402c 	ldrsb.w	r4, [r1, #44]	@ 0x2c
    result = (int32_t)(mult.long_long >> 31);
 80077ea:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 80077ee:	fb14 740c 	smlabb	r4, r4, ip, r7
 80077f2:	ea40 0048 	orr.w	r0, r0, r8, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80077f6:	dc0d      	bgt.n	8007814 <depthwise_kernel7x7_stride2_inplace_kernel_CHW+0x4b4>
 80077f8:	426d      	negs	r5, r5
    const q31_t remainder_mask = (1 << exponent) - 1;
 80077fa:	2201      	movs	r2, #1
 80077fc:	40aa      	lsls	r2, r5
 80077fe:	3a01      	subs	r2, #1
    int32_t remainder = remainder_mask & dividend;
 8007800:	ea02 0700 	and.w	r7, r2, r0
    if (result < 0)
 8007804:	4128      	asrs	r0, r5
    q31_t threshold = remainder_mask >> 1;
 8007806:	ea4f 0262 	mov.w	r2, r2, asr #1
        threshold++;
 800780a:	bf48      	it	mi
 800780c:	3201      	addmi	r2, #1
    if (remainder > threshold)
 800780e:	4297      	cmp	r7, r2
        result++;
 8007810:	bfc8      	it	gt
 8007812:	3001      	addgt	r0, #1
            sum0 += output_offset;
 8007814:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8007816:	2700      	movs	r7, #0
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8007818:	9d10      	ldr	r5, [sp, #64]	@ 0x40
            sum0 += output_offset;
 800781a:	4410      	add	r0, r2
            sum0 = TN_MAX(sum0, activation_min);
 800781c:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
 800781e:	4290      	cmp	r0, r2
 8007820:	bfb8      	it	lt
 8007822:	4610      	movlt	r0, r2
            sum0 = TN_MIN(sum0, activation_max);
 8007824:	9a34      	ldr	r2, [sp, #208]	@ 0xd0
 8007826:	4290      	cmp	r0, r2
 8007828:	bfa8      	it	ge
 800782a:	4610      	movge	r0, r2
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 800782c:	9a03      	ldr	r2, [sp, #12]
 800782e:	1b52      	subs	r2, r2, r5
 8007830:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8007832:	5550      	strb	r0, [r2, r5]
 8007834:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
            sum1 = arm_nn_requantize(sum1 + biasR[0], *multiplier, *shift);
 8007838:	9a30      	ldr	r2, [sp, #192]	@ 0xc0
 800783a:	6815      	ldr	r5, [r2, #0]
 800783c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800783e:	2d00      	cmp	r5, #0
 8007840:	6812      	ldr	r2, [r2, #0]
 8007842:	4414      	add	r4, r2
 8007844:	ea25 72e5 	bic.w	r2, r5, r5, asr #31
 8007848:	fa04 f402 	lsl.w	r4, r4, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800784c:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 800784e:	6812      	ldr	r2, [r2, #0]
 8007850:	fbc2 0704 	smlal	r0, r7, r2, r4
    result = (int32_t)(mult.long_long >> 31);
 8007854:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8007858:	ea40 0047 	orr.w	r0, r0, r7, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800785c:	dc0d      	bgt.n	800787a <depthwise_kernel7x7_stride2_inplace_kernel_CHW+0x51a>
 800785e:	426d      	negs	r5, r5
    const q31_t remainder_mask = (1 << exponent) - 1;
 8007860:	2201      	movs	r2, #1
 8007862:	40aa      	lsls	r2, r5
 8007864:	3a01      	subs	r2, #1
    int32_t remainder = remainder_mask & dividend;
 8007866:	ea02 0400 	and.w	r4, r2, r0
    if (result < 0)
 800786a:	4128      	asrs	r0, r5
    q31_t threshold = remainder_mask >> 1;
 800786c:	ea4f 0262 	mov.w	r2, r2, asr #1
        threshold++;
 8007870:	bf48      	it	mi
 8007872:	3201      	addmi	r2, #1
    if (remainder > threshold)
 8007874:	4294      	cmp	r4, r2
        result++;
 8007876:	bfc8      	it	gt
 8007878:	3001      	addgt	r0, #1
            sum1 += output_offset;
 800787a:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
            cols_8b_iterptr += STRIDE * 2;
 800787c:	3604      	adds	r6, #4
        for (j = 0; j < output_x / 2; j++) {
 800787e:	3304      	adds	r3, #4
 8007880:	3104      	adds	r1, #4
            sum1 += output_offset;
 8007882:	4410      	add	r0, r2
        for (j = 0; j < output_x / 2; j++) {
 8007884:	9a02      	ldr	r2, [sp, #8]
 8007886:	3204      	adds	r2, #4
 8007888:	9202      	str	r2, [sp, #8]
 800788a:	9a01      	ldr	r2, [sp, #4]
 800788c:	3204      	adds	r2, #4
 800788e:	9201      	str	r2, [sp, #4]
            sum1 = TN_MAX(sum1, activation_min);
 8007890:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
 8007892:	4290      	cmp	r0, r2
 8007894:	bfb8      	it	lt
 8007896:	4610      	movlt	r0, r2
            sum1 = TN_MIN(sum1, activation_max);
 8007898:	9a34      	ldr	r2, [sp, #208]	@ 0xd0
 800789a:	4290      	cmp	r0, r2
 800789c:	bfa8      	it	ge
 800789e:	4610      	movge	r0, r2
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;
 80078a0:	9a03      	ldr	r2, [sp, #12]
 80078a2:	7010      	strb	r0, [r2, #0]
        for (j = 0; j < output_x / 2; j++) {
 80078a4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80078a6:	4402      	add	r2, r0
 80078a8:	9203      	str	r2, [sp, #12]
 80078aa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80078ac:	4296      	cmp	r6, r2
 80078ae:	f47f adce 	bne.w	800744e <depthwise_kernel7x7_stride2_inplace_kernel_CHW+0xee>
 80078b2:	f8dd a0dc 	ldr.w	sl, [sp, #220]	@ 0xdc
 80078b6:	e9dd 9c14 	ldrd	r9, ip, [sp, #80]	@ 0x50
 80078ba:	e9dd 8716 	ldrd	r8, r7, [sp, #88]	@ 0x58
        if (output_x & 1) {
 80078be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80078c0:	f109 0901 	add.w	r9, r9, #1
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	f000 8160 	beq.w	8007b8a <depthwise_kernel7x7_stride2_inplace_kernel_CHW+0x82a>
            q31_t sum = bias[0] + biasR[0];
 80078ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
            sum += cols_8b[0]*ksrc[0];
 80078cc:	980f      	ldr	r0, [sp, #60]	@ 0x3c
            q31_t sum = bias[0] + biasR[0];
 80078ce:	681c      	ldr	r4, [r3, #0]
 80078d0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
            sum += cols_8b[0]*ksrc[0];
 80078d2:	f990 1000 	ldrsb.w	r1, [r0]
            q31_t sum = bias[0] + biasR[0];
 80078d6:	681b      	ldr	r3, [r3, #0]
            cols_8b += column_x + 6;
 80078d8:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
            q31_t sum = bias[0] + biasR[0];
 80078da:	18e2      	adds	r2, r4, r3
            sum += cols_8b[0]*ksrc[0];
 80078dc:	f99e 3000 	ldrsb.w	r3, [lr]
 80078e0:	fb11 2203 	smlabb	r2, r1, r3, r2
            sum += cols_8b[1]*ksrc[1];
 80078e4:	f990 1001 	ldrsb.w	r1, [r0, #1]
 80078e8:	f99e 3001 	ldrsb.w	r3, [lr, #1]
 80078ec:	fb11 2203 	smlabb	r2, r1, r3, r2
            sum += cols_8b[2]*ksrc[2];
 80078f0:	f990 1002 	ldrsb.w	r1, [r0, #2]
 80078f4:	f99e 3002 	ldrsb.w	r3, [lr, #2]
 80078f8:	fb11 2203 	smlabb	r2, r1, r3, r2
            sum += cols_8b[3]*ksrc[3];
 80078fc:	f990 1003 	ldrsb.w	r1, [r0, #3]
 8007900:	f99e 3003 	ldrsb.w	r3, [lr, #3]
 8007904:	fb11 2203 	smlabb	r2, r1, r3, r2
            sum += cols_8b[4]*ksrc[4];
 8007908:	f990 1004 	ldrsb.w	r1, [r0, #4]
 800790c:	f99e 3004 	ldrsb.w	r3, [lr, #4]
 8007910:	fb11 2203 	smlabb	r2, r1, r3, r2
            sum += cols_8b[5]*ksrc[5];
 8007914:	f990 1005 	ldrsb.w	r1, [r0, #5]
 8007918:	f99e 3005 	ldrsb.w	r3, [lr, #5]
 800791c:	fb11 2203 	smlabb	r2, r1, r3, r2
            sum += cols_8b[6]*ksrc[6];
 8007920:	f990 3006 	ldrsb.w	r3, [r0, #6]
 8007924:	f99e 1006 	ldrsb.w	r1, [lr, #6]
 8007928:	fb13 2301 	smlabb	r3, r3, r1, r2
            cols_8b += column_x + 6;
 800792c:	1942      	adds	r2, r0, r5
            sum += cols_8b[0]*ksrc[7];
 800792e:	5741      	ldrsb	r1, [r0, r5]
 8007930:	f99e 0007 	ldrsb.w	r0, [lr, #7]
 8007934:	fb11 3100 	smlabb	r1, r1, r0, r3
            sum += cols_8b[1]*ksrc[8];
 8007938:	f992 0001 	ldrsb.w	r0, [r2, #1]
 800793c:	f99e 3008 	ldrsb.w	r3, [lr, #8]
 8007940:	fb10 1303 	smlabb	r3, r0, r3, r1
            sum += cols_8b[2]*ksrc[9];
 8007944:	f992 0002 	ldrsb.w	r0, [r2, #2]
 8007948:	f99e 1009 	ldrsb.w	r1, [lr, #9]
 800794c:	fb10 3301 	smlabb	r3, r0, r1, r3
            sum += cols_8b[3]*ksrc[10];
 8007950:	f992 0003 	ldrsb.w	r0, [r2, #3]
 8007954:	f99e 100a 	ldrsb.w	r1, [lr, #10]
 8007958:	fb10 3301 	smlabb	r3, r0, r1, r3
            sum += cols_8b[4]*ksrc[11];
 800795c:	f992 0004 	ldrsb.w	r0, [r2, #4]
 8007960:	f99e 100b 	ldrsb.w	r1, [lr, #11]
 8007964:	fb10 3301 	smlabb	r3, r0, r1, r3
            sum += cols_8b[5]*ksrc[12];
 8007968:	f992 0005 	ldrsb.w	r0, [r2, #5]
 800796c:	f99e 100c 	ldrsb.w	r1, [lr, #12]
 8007970:	fb10 3301 	smlabb	r3, r0, r1, r3
            sum += cols_8b[6]*ksrc[13];
 8007974:	f992 0006 	ldrsb.w	r0, [r2, #6]
 8007978:	f99e 100d 	ldrsb.w	r1, [lr, #13]
 800797c:	fb10 3001 	smlabb	r0, r0, r1, r3
            cols_8b += column_x + 6;
 8007980:	1951      	adds	r1, r2, r5
            sum += cols_8b[0]*ksrc[14];
 8007982:	f99e 300e 	ldrsb.w	r3, [lr, #14]
 8007986:	5752      	ldrsb	r2, [r2, r5]
 8007988:	fb12 0303 	smlabb	r3, r2, r3, r0
            sum += cols_8b[1]*ksrc[15];
 800798c:	f991 0001 	ldrsb.w	r0, [r1, #1]
 8007990:	f99e 200f 	ldrsb.w	r2, [lr, #15]
 8007994:	fb10 3302 	smlabb	r3, r0, r2, r3
            sum += cols_8b[2]*ksrc[16];
 8007998:	f991 0002 	ldrsb.w	r0, [r1, #2]
 800799c:	f99e 2010 	ldrsb.w	r2, [lr, #16]
 80079a0:	fb10 3302 	smlabb	r3, r0, r2, r3
            sum += cols_8b[3]*ksrc[17];
 80079a4:	f991 0003 	ldrsb.w	r0, [r1, #3]
 80079a8:	f99e 2011 	ldrsb.w	r2, [lr, #17]
 80079ac:	fb10 3302 	smlabb	r3, r0, r2, r3
            sum += cols_8b[4]*ksrc[18];
 80079b0:	f991 0004 	ldrsb.w	r0, [r1, #4]
 80079b4:	f99e 2012 	ldrsb.w	r2, [lr, #18]
 80079b8:	fb10 3302 	smlabb	r3, r0, r2, r3
            sum += cols_8b[5]*ksrc[19];
 80079bc:	f991 0005 	ldrsb.w	r0, [r1, #5]
 80079c0:	f99e 2013 	ldrsb.w	r2, [lr, #19]
 80079c4:	fb10 3302 	smlabb	r3, r0, r2, r3
            sum += cols_8b[6]*ksrc[20];
 80079c8:	f991 0006 	ldrsb.w	r0, [r1, #6]
 80079cc:	f99e 2014 	ldrsb.w	r2, [lr, #20]
 80079d0:	fb10 3002 	smlabb	r0, r0, r2, r3
            cols_8b += column_x + 6;
 80079d4:	194a      	adds	r2, r1, r5
            sum += cols_8b[0]*ksrc[21];
 80079d6:	f99e 3015 	ldrsb.w	r3, [lr, #21]
 80079da:	5749      	ldrsb	r1, [r1, r5]
 80079dc:	fb11 0303 	smlabb	r3, r1, r3, r0
            sum += cols_8b[1]*ksrc[22];
 80079e0:	f992 0001 	ldrsb.w	r0, [r2, #1]
 80079e4:	f99e 1016 	ldrsb.w	r1, [lr, #22]
 80079e8:	fb10 3301 	smlabb	r3, r0, r1, r3
            sum += cols_8b[2]*ksrc[23];
 80079ec:	f992 0002 	ldrsb.w	r0, [r2, #2]
 80079f0:	f99e 1017 	ldrsb.w	r1, [lr, #23]
 80079f4:	fb10 3301 	smlabb	r3, r0, r1, r3
            sum += cols_8b[3]*ksrc[24];
 80079f8:	f992 0003 	ldrsb.w	r0, [r2, #3]
 80079fc:	f99e 1018 	ldrsb.w	r1, [lr, #24]
 8007a00:	fb10 3301 	smlabb	r3, r0, r1, r3
            sum += cols_8b[4]*ksrc[25];
 8007a04:	f992 0004 	ldrsb.w	r0, [r2, #4]
 8007a08:	f99e 1019 	ldrsb.w	r1, [lr, #25]
 8007a0c:	fb10 3301 	smlabb	r3, r0, r1, r3
            sum += cols_8b[5]*ksrc[26];
 8007a10:	f992 0005 	ldrsb.w	r0, [r2, #5]
 8007a14:	f99e 101a 	ldrsb.w	r1, [lr, #26]
 8007a18:	fb10 3301 	smlabb	r3, r0, r1, r3
            sum += cols_8b[6]*ksrc[27];
 8007a1c:	f992 0006 	ldrsb.w	r0, [r2, #6]
 8007a20:	f99e 101b 	ldrsb.w	r1, [lr, #27]
 8007a24:	fb10 3001 	smlabb	r0, r0, r1, r3
            cols_8b += column_x + 6;
 8007a28:	1951      	adds	r1, r2, r5
            sum += cols_8b[0]*ksrc[28];
 8007a2a:	f99e 301c 	ldrsb.w	r3, [lr, #28]
 8007a2e:	5752      	ldrsb	r2, [r2, r5]
 8007a30:	fb12 0303 	smlabb	r3, r2, r3, r0
            sum += cols_8b[1]*ksrc[29];
 8007a34:	f991 0001 	ldrsb.w	r0, [r1, #1]
 8007a38:	f99e 201d 	ldrsb.w	r2, [lr, #29]
 8007a3c:	fb10 3302 	smlabb	r3, r0, r2, r3
            sum += cols_8b[2]*ksrc[30];
 8007a40:	f991 0002 	ldrsb.w	r0, [r1, #2]
 8007a44:	f99e 201e 	ldrsb.w	r2, [lr, #30]
 8007a48:	fb10 3302 	smlabb	r3, r0, r2, r3
            sum += cols_8b[3]*ksrc[31];
 8007a4c:	f991 0003 	ldrsb.w	r0, [r1, #3]
 8007a50:	f99e 201f 	ldrsb.w	r2, [lr, #31]
 8007a54:	fb10 3302 	smlabb	r3, r0, r2, r3
            sum += cols_8b[4]*ksrc[32];
 8007a58:	f991 0004 	ldrsb.w	r0, [r1, #4]
 8007a5c:	f99e 2020 	ldrsb.w	r2, [lr, #32]
 8007a60:	fb10 3302 	smlabb	r3, r0, r2, r3
            sum += cols_8b[5]*ksrc[33];
 8007a64:	f991 0005 	ldrsb.w	r0, [r1, #5]
 8007a68:	f99e 2021 	ldrsb.w	r2, [lr, #33]	@ 0x21
 8007a6c:	fb10 3302 	smlabb	r3, r0, r2, r3
            sum += cols_8b[6]*ksrc[34];
 8007a70:	f991 0006 	ldrsb.w	r0, [r1, #6]
 8007a74:	f99e 2022 	ldrsb.w	r2, [lr, #34]	@ 0x22
 8007a78:	fb10 3002 	smlabb	r0, r0, r2, r3
            cols_8b += column_x + 6;
 8007a7c:	194a      	adds	r2, r1, r5
            sum += cols_8b[0]*ksrc[35];
 8007a7e:	f99e 3023 	ldrsb.w	r3, [lr, #35]	@ 0x23
 8007a82:	5749      	ldrsb	r1, [r1, r5]
 8007a84:	fb11 0303 	smlabb	r3, r1, r3, r0
            sum += cols_8b[1]*ksrc[36];
 8007a88:	f992 0001 	ldrsb.w	r0, [r2, #1]
 8007a8c:	f99e 1024 	ldrsb.w	r1, [lr, #36]	@ 0x24
 8007a90:	fb10 3301 	smlabb	r3, r0, r1, r3
            sum += cols_8b[2]*ksrc[37];
 8007a94:	f992 0002 	ldrsb.w	r0, [r2, #2]
 8007a98:	f99e 1025 	ldrsb.w	r1, [lr, #37]	@ 0x25
 8007a9c:	fb10 3301 	smlabb	r3, r0, r1, r3
            sum += cols_8b[3]*ksrc[38];
 8007aa0:	f992 0003 	ldrsb.w	r0, [r2, #3]
 8007aa4:	f99e 1026 	ldrsb.w	r1, [lr, #38]	@ 0x26
 8007aa8:	fb10 3301 	smlabb	r3, r0, r1, r3
            sum += cols_8b[4]*ksrc[39];
 8007aac:	f992 0004 	ldrsb.w	r0, [r2, #4]
 8007ab0:	f99e 1027 	ldrsb.w	r1, [lr, #39]	@ 0x27
 8007ab4:	fb10 3301 	smlabb	r3, r0, r1, r3
            sum += cols_8b[5]*ksrc[40];
 8007ab8:	f992 0005 	ldrsb.w	r0, [r2, #5]
 8007abc:	f99e 1028 	ldrsb.w	r1, [lr, #40]	@ 0x28
 8007ac0:	fb10 3301 	smlabb	r3, r0, r1, r3
            sum += cols_8b[6]*ksrc[41];
 8007ac4:	f992 0006 	ldrsb.w	r0, [r2, #6]
 8007ac8:	f99e 1029 	ldrsb.w	r1, [lr, #41]	@ 0x29
 8007acc:	fb10 3001 	smlabb	r0, r0, r1, r3
            cols_8b += column_x + 6;
 8007ad0:	1951      	adds	r1, r2, r5
            sum += cols_8b[0]*ksrc[42];
 8007ad2:	f99e 302a 	ldrsb.w	r3, [lr, #42]	@ 0x2a
 8007ad6:	5752      	ldrsb	r2, [r2, r5]
 8007ad8:	fb12 0303 	smlabb	r3, r2, r3, r0
            sum += cols_8b[1]*ksrc[43];
 8007adc:	f991 0001 	ldrsb.w	r0, [r1, #1]
 8007ae0:	f99e 202b 	ldrsb.w	r2, [lr, #43]	@ 0x2b
 8007ae4:	fb10 3302 	smlabb	r3, r0, r2, r3
            sum += cols_8b[2]*ksrc[44];
 8007ae8:	f991 0002 	ldrsb.w	r0, [r1, #2]
 8007aec:	f99e 202c 	ldrsb.w	r2, [lr, #44]	@ 0x2c
 8007af0:	fb10 3302 	smlabb	r3, r0, r2, r3
            sum += cols_8b[3]*ksrc[45];
 8007af4:	f991 0003 	ldrsb.w	r0, [r1, #3]
 8007af8:	f99e 202d 	ldrsb.w	r2, [lr, #45]	@ 0x2d
 8007afc:	fb10 3302 	smlabb	r3, r0, r2, r3
            sum += cols_8b[4]*ksrc[46];
 8007b00:	f991 2004 	ldrsb.w	r2, [r1, #4]
 8007b04:	f99e 002e 	ldrsb.w	r0, [lr, #46]	@ 0x2e
 8007b08:	fb12 3200 	smlabb	r2, r2, r0, r3
            sum += cols_8b[5]*ksrc[47];
 8007b0c:	f991 3005 	ldrsb.w	r3, [r1, #5]
 8007b10:	f99e 002f 	ldrsb.w	r0, [lr, #47]	@ 0x2f
            sum += cols_8b[6]*ksrc[48];
 8007b14:	f991 1006 	ldrsb.w	r1, [r1, #6]
            sum += cols_8b[5]*ksrc[47];
 8007b18:	fb13 2300 	smlabb	r3, r3, r0, r2
            sum += cols_8b[6]*ksrc[48];
 8007b1c:	f99e 2030 	ldrsb.w	r2, [lr, #48]	@ 0x30
 8007b20:	fb11 3102 	smlabb	r1, r1, r2, r3
            sum = arm_nn_requantize(sum + biasR[0], *multiplier, *shift);
 8007b24:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8007b26:	6818      	ldr	r0, [r3, #0]
 8007b28:	4421      	add	r1, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8007b2a:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 8007b2c:	2400      	movs	r4, #0
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8007b2e:	ea20 72e0 	bic.w	r2, r0, r0, asr #31
 8007b32:	2800      	cmp	r0, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8007b34:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8007b36:	fa01 f102 	lsl.w	r1, r1, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8007b3a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007b3e:	fbc1 2403 	smlal	r2, r4, r1, r3
    result = (int32_t)(mult.long_long >> 31);
 8007b42:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8007b46:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8007b4a:	dc0d      	bgt.n	8007b68 <depthwise_kernel7x7_stride2_inplace_kernel_CHW+0x808>
 8007b4c:	4240      	negs	r0, r0
    const q31_t remainder_mask = (1 << exponent) - 1;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	4083      	lsls	r3, r0
 8007b52:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 8007b54:	ea02 0103 	and.w	r1, r2, r3
    if (result < 0)
 8007b58:	4102      	asrs	r2, r0
    q31_t threshold = remainder_mask >> 1;
 8007b5a:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 8007b5e:	bf48      	it	mi
 8007b60:	3301      	addmi	r3, #1
    if (remainder > threshold)
 8007b62:	4299      	cmp	r1, r3
        result++;
 8007b64:	bfc8      	it	gt
 8007b66:	3201      	addgt	r2, #1
            sum += output_offset;
 8007b68:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 8007b6a:	9923      	ldr	r1, [sp, #140]	@ 0x8c
            sum += output_offset;
 8007b6c:	441a      	add	r2, r3
            cols_8b_iterptr += STRIDE;
 8007b6e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b70:	3302      	adds	r3, #2
 8007b72:	930f      	str	r3, [sp, #60]	@ 0x3c
            sum = TN_MAX(sum, activation_min);
 8007b74:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 8007b76:	429a      	cmp	r2, r3
 8007b78:	bfb8      	it	lt
 8007b7a:	461a      	movlt	r2, r3
            sum = TN_MIN(sum, activation_max);
 8007b7c:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	bfa8      	it	ge
 8007b82:	461a      	movge	r2, r3
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 8007b84:	eba8 030a 	sub.w	r3, r8, sl
 8007b88:	545a      	strb	r2, [r3, r1]
        cols_8b_iterptr += (STRIDE - 1) * (column_x + 3 * 2);
 8007b8a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8007b8c:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8007b8e:	441e      	add	r6, r3
    for (i = 0; i < output_y; i++) {
 8007b90:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007b92:	449c      	add	ip, r3
 8007b94:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8007b96:	4498      	add	r8, r3
 8007b98:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8007b9a:	454b      	cmp	r3, r9
 8007b9c:	f47f ac27 	bne.w	80073ee <depthwise_kernel7x7_stride2_inplace_kernel_CHW+0x8e>
    }
}
 8007ba0:	b025      	add	sp, #148	@ 0x94
 8007ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (j = 0; j < output_x / 2; j++) {
 8007ba6:	960f      	str	r6, [sp, #60]	@ 0x3c
 8007ba8:	e689      	b.n	80078be <depthwise_kernel7x7_stride2_inplace_kernel_CHW+0x55e>
 8007baa:	bf00      	nop

08007bac <depthwise_kernel7x7_stride2_inplace_CHW>:
{
 8007bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bb0:	b0b1      	sub	sp, #196	@ 0xc4
 8007bb2:	4689      	mov	r9, r1
 8007bb4:	4690      	mov	r8, r2
 8007bb6:	f04f 0400 	mov.w	r4, #0
 8007bba:	f99d 1120 	ldrsb.w	r1, [sp, #288]	@ 0x120
 8007bbe:	469b      	mov	fp, r3
 8007bc0:	f8bd 2110 	ldrh.w	r2, [sp, #272]	@ 0x110
    for(i = 0; i < input_x + 6; i++){
 8007bc4:	f109 0705 	add.w	r7, r9, #5
 8007bc8:	f361 0407 	bfi	r4, r1, #0, #8
{
 8007bcc:	900a      	str	r0, [sp, #40]	@ 0x28
 8007bce:	921b      	str	r2, [sp, #108]	@ 0x6c
 8007bd0:	f8bd 2114 	ldrh.w	r2, [sp, #276]	@ 0x114
 8007bd4:	f361 240f 	bfi	r4, r1, #8, #8
 8007bd8:	9b3e      	ldr	r3, [sp, #248]	@ 0xf8
 8007bda:	921c      	str	r2, [sp, #112]	@ 0x70
    for(i = 0; i < input_x + 6; i++){
 8007bdc:	2200      	movs	r2, #0
    q7_t* cols_8b = (q7_t* )cols_8b_start;
 8007bde:	9847      	ldr	r0, [sp, #284]	@ 0x11c
    for(i = 0; i < input_x + 6; i++){
 8007be0:	3201      	adds	r2, #1
        *cols_8b++ = PAD8;
 8007be2:	f820 4b03 	strh.w	r4, [r0], #3
        *cols_8b++ = PAD8;
 8007be6:	f800 1c01 	strb.w	r1, [r0, #-1]
    for(i = 0; i < input_x + 6; i++){
 8007bea:	b292      	uxth	r2, r2
 8007bec:	42ba      	cmp	r2, r7
 8007bee:	ddf7      	ble.n	8007be0 <depthwise_kernel7x7_stride2_inplace_CHW+0x34>
    for(i = 0; i < input_y; i++){
 8007bf0:	f1b8 0f00 	cmp.w	r8, #0
 8007bf4:	f000 81e8 	beq.w	8007fc8 <depthwise_kernel7x7_stride2_inplace_CHW+0x41c>
 8007bf8:	f109 0c03 	add.w	ip, r9, #3
        *cols_8b++ = PAD8;
 8007bfc:	4602      	mov	r2, r0
        cols_8b += input_x; //skip middle
 8007bfe:	2500      	movs	r5, #0
 8007c00:	f109 0606 	add.w	r6, r9, #6
    for(i = 0; i < input_y; i++){
 8007c04:	3501      	adds	r5, #1
        *cols_8b++ = PAD8;//left
 8007c06:	8014      	strh	r4, [r2, #0]
        *cols_8b++ = PAD8;//left
 8007c08:	7091      	strb	r1, [r2, #2]
    for(i = 0; i < input_y; i++){
 8007c0a:	4545      	cmp	r5, r8
        *cols_8b++ = PAD8;//right
 8007c0c:	f82c 4002 	strh.w	r4, [ip, r2]
        *cols_8b++ = PAD8;//right
 8007c10:	4432      	add	r2, r6
 8007c12:	f802 1c01 	strb.w	r1, [r2, #-1]
    for(i = 0; i < input_y; i++){
 8007c16:	d1f5      	bne.n	8007c04 <depthwise_kernel7x7_stride2_inplace_CHW+0x58>
        *cols_8b++ = PAD8;//right
 8007c18:	fb06 0008 	mla	r0, r6, r8, r0
 8007c1c:	2500      	movs	r5, #0
 8007c1e:	ea4f 0c96 	mov.w	ip, r6, lsr #2
 8007c22:	4602      	mov	r2, r0
 8007c24:	f361 0507 	bfi	r5, r1, #0, #8
 8007c28:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8007c2c:	f361 250f 	bfi	r5, r1, #8, #8
 8007c30:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8007c34:	f361 4517 	bfi	r5, r1, #16, #8
 8007c38:	f361 651f 	bfi	r5, r1, #24, #8
        *cols_8b++ = PAD8;
 8007c3c:	6015      	str	r5, [r2, #0]
 8007c3e:	320c      	adds	r2, #12
 8007c40:	f842 5c08 	str.w	r5, [r2, #-8]
 8007c44:	f842 5c04 	str.w	r5, [r2, #-4]
    for(i = 0; i < input_x + 6; i++){
 8007c48:	4562      	cmp	r2, ip
 8007c4a:	d1f7      	bne.n	8007c3c <depthwise_kernel7x7_stride2_inplace_CHW+0x90>
 8007c4c:	07b2      	lsls	r2, r6, #30
 8007c4e:	d014      	beq.n	8007c7a <depthwise_kernel7x7_stride2_inplace_CHW+0xce>
 8007c50:	f026 0603 	bic.w	r6, r6, #3
 8007c54:	b2b5      	uxth	r5, r6
 8007c56:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8007c5a:	1982      	adds	r2, r0, r6
        *cols_8b++ = PAD8;
 8007c5c:	5384      	strh	r4, [r0, r6]
    for(i = 0; i < input_x + 6; i++){
 8007c5e:	1c68      	adds	r0, r5, #1
        *cols_8b++ = PAD8;
 8007c60:	7091      	strb	r1, [r2, #2]
    for(i = 0; i < input_x + 6; i++){
 8007c62:	b280      	uxth	r0, r0
 8007c64:	4287      	cmp	r7, r0
 8007c66:	db08      	blt.n	8007c7a <depthwise_kernel7x7_stride2_inplace_CHW+0xce>
 8007c68:	1ca8      	adds	r0, r5, #2
        *cols_8b++ = PAD8;
 8007c6a:	f8a2 4003 	strh.w	r4, [r2, #3]
        *cols_8b++ = PAD8;
 8007c6e:	7151      	strb	r1, [r2, #5]
    for(i = 0; i < input_x + 6; i++){
 8007c70:	b280      	uxth	r0, r0
 8007c72:	4287      	cmp	r7, r0
 8007c74:	db01      	blt.n	8007c7a <depthwise_kernel7x7_stride2_inplace_CHW+0xce>
        *cols_8b++ = PAD8;
 8007c76:	80d4      	strh	r4, [r2, #6]
        *cols_8b++ = PAD8;
 8007c78:	7211      	strb	r1, [r2, #8]
    for (c = 0; c < input_ch; c++){
 8007c7a:	f1bb 0f00 	cmp.w	fp, #0
 8007c7e:	f000 819f 	beq.w	8007fc0 <depthwise_kernel7x7_stride2_inplace_CHW+0x414>
        cols_8b = (q7_t*)(cols_8b_start + 3 * (input_x) + 18); //skip 3 rows
 8007c82:	eb09 0149 	add.w	r1, r9, r9, lsl #1
 8007c86:	9d47      	ldr	r5, [sp, #284]	@ 0x11c
 8007c88:	f029 0007 	bic.w	r0, r9, #7
 8007c8c:	f029 0403 	bic.w	r4, r9, #3
 8007c90:	3112      	adds	r1, #18
 8007c92:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8007c96:	469e      	mov	lr, r3
 8007c98:	9b3d      	ldr	r3, [sp, #244]	@ 0xf4
 8007c9a:	1869      	adds	r1, r5, r1
 8007c9c:	b297      	uxth	r7, r2
 8007c9e:	fb0b f202 	mul.w	r2, fp, r2
 8007ca2:	b2a5      	uxth	r5, r4
 8007ca4:	911d      	str	r1, [sp, #116]	@ 0x74
            for(j = 0; j < input_x; j++){
 8007ca6:	1c41      	adds	r1, r0, #1
 8007ca8:	922f      	str	r2, [sp, #188]	@ 0xbc
 8007caa:	ea4f 02d9 	mov.w	r2, r9, lsr #3
 8007cae:	b289      	uxth	r1, r1
 8007cb0:	f107 0a01 	add.w	sl, r7, #1
 8007cb4:	00d2      	lsls	r2, r2, #3
 8007cb6:	9125      	str	r1, [sp, #148]	@ 0x94
 8007cb8:	1c81      	adds	r1, r0, #2
 8007cba:	922d      	str	r2, [sp, #180]	@ 0xb4
 8007cbc:	b289      	uxth	r1, r1
 8007cbe:	fb0b f200 	mul.w	r2, fp, r0
 8007cc2:	f8cd a090 	str.w	sl, [sp, #144]	@ 0x90
 8007cc6:	9126      	str	r1, [sp, #152]	@ 0x98
 8007cc8:	1cc1      	adds	r1, r0, #3
 8007cca:	9221      	str	r2, [sp, #132]	@ 0x84
 8007ccc:	f009 0203 	and.w	r2, r9, #3
 8007cd0:	b289      	uxth	r1, r1
 8007cd2:	9127      	str	r1, [sp, #156]	@ 0x9c
 8007cd4:	1d01      	adds	r1, r0, #4
 8007cd6:	b289      	uxth	r1, r1
 8007cd8:	9128      	str	r1, [sp, #160]	@ 0xa0
 8007cda:	1d41      	adds	r1, r0, #5
 8007cdc:	b289      	uxth	r1, r1
 8007cde:	9129      	str	r1, [sp, #164]	@ 0xa4
 8007ce0:	1d81      	adds	r1, r0, #6
 8007ce2:	b289      	uxth	r1, r1
 8007ce4:	912a      	str	r1, [sp, #168]	@ 0xa8
 8007ce6:	ea4f 0199 	mov.w	r1, r9, lsr #2
 8007cea:	0089      	lsls	r1, r1, #2
 8007cec:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007cee:	1c61      	adds	r1, r4, #1
 8007cf0:	b289      	uxth	r1, r1
 8007cf2:	910e      	str	r1, [sp, #56]	@ 0x38
 8007cf4:	1ca1      	adds	r1, r4, #2
 8007cf6:	465c      	mov	r4, fp
 8007cf8:	b289      	uxth	r1, r1
 8007cfa:	910f      	str	r1, [sp, #60]	@ 0x3c
 8007cfc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007cfe:	4459      	add	r1, fp
 8007d00:	911a      	str	r1, [sp, #104]	@ 0x68
 8007d02:	fb07 b10b 	mla	r1, r7, fp, fp
 8007d06:	9111      	str	r1, [sp, #68]	@ 0x44
 8007d08:	ea4f 01cb 	mov.w	r1, fp, lsl #3
 8007d0c:	912c      	str	r1, [sp, #176]	@ 0xb0
 8007d0e:	ea4f 018b 	mov.w	r1, fp, lsl #2
 8007d12:	9120      	str	r1, [sp, #128]	@ 0x80
 8007d14:	ebab 018b 	sub.w	r1, fp, fp, lsl #2
 8007d18:	9122      	str	r1, [sp, #136]	@ 0x88
 8007d1a:	ebcb 018b 	rsb	r1, fp, fp, lsl #2
 8007d1e:	912e      	str	r1, [sp, #184]	@ 0xb8
 8007d20:	eb0b 018b 	add.w	r1, fp, fp, lsl #2
 8007d24:	46c3      	mov	fp, r8
 8007d26:	9123      	str	r1, [sp, #140]	@ 0x8c
 8007d28:	b281      	uxth	r1, r0
 8007d2a:	983c      	ldr	r0, [sp, #240]	@ 0xf0
 8007d2c:	9112      	str	r1, [sp, #72]	@ 0x48
 8007d2e:	e9cd 270c 	strd	r2, r7, [sp, #48]	@ 0x30
        for(i = 0; i < input_y; i++){
 8007d32:	f1bb 0f00 	cmp.w	fp, #0
 8007d36:	d032      	beq.n	8007d9e <depthwise_kernel7x7_stride2_inplace_CHW+0x1f2>
 8007d38:	f1b9 0f00 	cmp.w	r9, #0
 8007d3c:	d02f      	beq.n	8007d9e <depthwise_kernel7x7_stride2_inplace_CHW+0x1f2>
 8007d3e:	2c01      	cmp	r4, #1
 8007d40:	d17c      	bne.n	8007e3c <depthwise_kernel7x7_stride2_inplace_CHW+0x290>
 8007d42:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8007d44:	f04f 0c00 	mov.w	ip, #0
 8007d48:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8007d4a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007d4c:	f106 0807 	add.w	r8, r6, #7
 8007d50:	1cd7      	adds	r7, r2, #3
 8007d52:	f8cd e0f8 	str.w	lr, [sp, #248]	@ 0xf8
 8007d56:	eb01 0209 	add.w	r2, r1, r9
 8007d5a:	46b2      	mov	sl, r6
 8007d5c:	f8dd e090 	ldr.w	lr, [sp, #144]	@ 0x90
 8007d60:	9410      	str	r4, [sp, #64]	@ 0x40
 8007d62:	e9cd 033c 	strd	r0, r3, [sp, #240]	@ 0xf0
            for(j = 0; j < input_x; j++){
 8007d66:	f1ba 0f05 	cmp.w	sl, #5
 8007d6a:	d904      	bls.n	8007d76 <depthwise_kernel7x7_stride2_inplace_CHW+0x1ca>
 8007d6c:	1c48      	adds	r0, r1, #1
 8007d6e:	460b      	mov	r3, r1
 8007d70:	1a38      	subs	r0, r7, r0
 8007d72:	2802      	cmp	r0, #2
 8007d74:	d83e      	bhi.n	8007df4 <depthwise_kernel7x7_stride2_inplace_CHW+0x248>
 8007d76:	460b      	mov	r3, r1
 8007d78:	1e78      	subs	r0, r7, #1
                *cols_8b++ = *src;// + input_offset;
 8007d7a:	f913 4b01 	ldrsb.w	r4, [r3], #1
            for(j = 0; j < input_x; j++){
 8007d7e:	429a      	cmp	r2, r3
                *cols_8b++ = *src;// + input_offset;
 8007d80:	f800 4f01 	strb.w	r4, [r0, #1]!
            for(j = 0; j < input_x; j++){
 8007d84:	d1f9      	bne.n	8007d7a <depthwise_kernel7x7_stride2_inplace_CHW+0x1ce>
        for(i = 0; i < input_y; i++){
 8007d86:	f10c 0c01 	add.w	ip, ip, #1
                src += input_ch;
 8007d8a:	4471      	add	r1, lr
        for(i = 0; i < input_y; i++){
 8007d8c:	4447      	add	r7, r8
 8007d8e:	4472      	add	r2, lr
 8007d90:	45dc      	cmp	ip, fp
 8007d92:	d1e8      	bne.n	8007d66 <depthwise_kernel7x7_stride2_inplace_CHW+0x1ba>
 8007d94:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8007d96:	f8dd e0f8 	ldr.w	lr, [sp, #248]	@ 0xf8
 8007d9a:	e9dd 033c 	ldrd	r0, r3, [sp, #240]	@ 0xf0
        depthwise_kernel7x7_stride2_inplace_kernel_CHW(output_y, output_x, bias++, biasR++, ksrc, output_mult++, output_shift++, inplace_out,output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8007d9e:	993a      	ldr	r1, [sp, #232]	@ 0xe8
 8007da0:	f103 0804 	add.w	r8, r3, #4
 8007da4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007da6:	1d07      	adds	r7, r0, #4
 8007da8:	9100      	str	r1, [sp, #0]
 8007daa:	f10e 0a04 	add.w	sl, lr, #4
 8007dae:	9947      	ldr	r1, [sp, #284]	@ 0x11c
 8007db0:	9203      	str	r2, [sp, #12]
        input++;
 8007db2:	3201      	adds	r2, #1
        depthwise_kernel7x7_stride2_inplace_kernel_CHW(output_y, output_x, bias++, biasR++, ksrc, output_mult++, output_shift++, inplace_out,output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8007db4:	9107      	str	r1, [sp, #28]
 8007db6:	9942      	ldr	r1, [sp, #264]	@ 0x108
        input++;
 8007db8:	920a      	str	r2, [sp, #40]	@ 0x28
        depthwise_kernel7x7_stride2_inplace_kernel_CHW(output_y, output_x, bias++, biasR++, ksrc, output_mult++, output_shift++, inplace_out,output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8007dba:	9106      	str	r1, [sp, #24]
 8007dbc:	9941      	ldr	r1, [sp, #260]	@ 0x104
 8007dbe:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
 8007dc0:	9105      	str	r1, [sp, #20]
 8007dc2:	993f      	ldr	r1, [sp, #252]	@ 0xfc
 8007dc4:	1d16      	adds	r6, r2, #4
 8007dc6:	e9cd e301 	strd	lr, r3, [sp, #4]
        ksrc += 49;
 8007dca:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
        depthwise_kernel7x7_stride2_inplace_kernel_CHW(output_y, output_x, bias++, biasR++, ksrc, output_mult++, output_shift++, inplace_out,output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8007dcc:	9104      	str	r1, [sp, #16]
        ksrc += 49;
 8007dce:	3331      	adds	r3, #49	@ 0x31
        depthwise_kernel7x7_stride2_inplace_kernel_CHW(output_y, output_x, bias++, biasR++, ksrc, output_mult++, output_shift++, inplace_out,output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8007dd0:	e9cd 9408 	strd	r9, r4, [sp, #32]
        ksrc += 49;
 8007dd4:	933a      	str	r3, [sp, #232]	@ 0xe8
        depthwise_kernel7x7_stride2_inplace_kernel_CHW(output_y, output_x, bias++, biasR++, ksrc, output_mult++, output_shift++, inplace_out,output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	e9dd 101b 	ldrd	r1, r0, [sp, #108]	@ 0x6c
 8007ddc:	f7ff fac0 	bl	8007360 <depthwise_kernel7x7_stride2_inplace_kernel_CHW>
    for (c = 0; c < input_ch; c++){
 8007de0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007de2:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8007de4:	429a      	cmp	r2, r3
 8007de6:	f000 80eb 	beq.w	8007fc0 <depthwise_kernel7x7_stride2_inplace_CHW+0x414>
        depthwise_kernel7x7_stride2_inplace_kernel_CHW(output_y, output_x, bias++, biasR++, ksrc, output_mult++, output_shift++, inplace_out,output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8007dea:	46d6      	mov	lr, sl
 8007dec:	4643      	mov	r3, r8
 8007dee:	4638      	mov	r0, r7
 8007df0:	963b      	str	r6, [sp, #236]	@ 0xec
 8007df2:	e79e      	b.n	8007d32 <depthwise_kernel7x7_stride2_inplace_CHW+0x186>
 8007df4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8007df6:	1846      	adds	r6, r0, r1
            cols_8b += 3;//skip front
 8007df8:	4638      	mov	r0, r7
                *cols_8b++ = *src;// + input_offset;
 8007dfa:	f853 4b04 	ldr.w	r4, [r3], #4
 8007dfe:	42b3      	cmp	r3, r6
 8007e00:	f840 4b04 	str.w	r4, [r0], #4
            for(j = 0; j < input_x; j++){
 8007e04:	d1f9      	bne.n	8007dfa <depthwise_kernel7x7_stride2_inplace_CHW+0x24e>
 8007e06:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8007e08:	197b      	adds	r3, r7, r5
 8007e0a:	1948      	adds	r0, r1, r5
 8007e0c:	2c00      	cmp	r4, #0
 8007e0e:	d0ba      	beq.n	8007d86 <depthwise_kernel7x7_stride2_inplace_CHW+0x1da>
                *cols_8b++ = *src;// + input_offset;
 8007e10:	574c      	ldrsb	r4, [r1, r5]
 8007e12:	557c      	strb	r4, [r7, r5]
            for(j = 0; j < input_x; j++){
 8007e14:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8007e16:	454c      	cmp	r4, r9
 8007e18:	d2b5      	bcs.n	8007d86 <depthwise_kernel7x7_stride2_inplace_CHW+0x1da>
                *cols_8b++ = *src;// + input_offset;
 8007e1a:	f990 4001 	ldrsb.w	r4, [r0, #1]
 8007e1e:	705c      	strb	r4, [r3, #1]
            for(j = 0; j < input_x; j++){
 8007e20:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8007e22:	45a1      	cmp	r9, r4
 8007e24:	d9af      	bls.n	8007d86 <depthwise_kernel7x7_stride2_inplace_CHW+0x1da>
        for(i = 0; i < input_y; i++){
 8007e26:	f10c 0c01 	add.w	ip, ip, #1
                *cols_8b++ = *src;// + input_offset;
 8007e2a:	f990 0002 	ldrsb.w	r0, [r0, #2]
                src += input_ch;
 8007e2e:	4471      	add	r1, lr
        for(i = 0; i < input_y; i++){
 8007e30:	4447      	add	r7, r8
 8007e32:	45dc      	cmp	ip, fp
 8007e34:	4472      	add	r2, lr
                *cols_8b++ = *src;// + input_offset;
 8007e36:	7098      	strb	r0, [r3, #2]
        for(i = 0; i < input_y; i++){
 8007e38:	d195      	bne.n	8007d66 <depthwise_kernel7x7_stride2_inplace_CHW+0x1ba>
 8007e3a:	e7ab      	b.n	8007d94 <depthwise_kernel7x7_stride2_inplace_CHW+0x1e8>
 8007e3c:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8007e3e:	f109 0202 	add.w	r2, r9, #2
 8007e42:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8007e44:	f04f 0c00 	mov.w	ip, #0
 8007e48:	440a      	add	r2, r1
 8007e4a:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8007e4c:	f106 0a07 	add.w	sl, r6, #7
 8007e50:	1cce      	adds	r6, r1, #3
 8007e52:	992f      	ldr	r1, [sp, #188]	@ 0xbc
 8007e54:	f8cd b040 	str.w	fp, [sp, #64]	@ 0x40
 8007e58:	eb07 0801 	add.w	r8, r7, r1
 8007e5c:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 8007e5e:	f8cd e0f8 	str.w	lr, [sp, #248]	@ 0xf8
 8007e62:	3103      	adds	r1, #3
 8007e64:	f8dd b0b0 	ldr.w	fp, [sp, #176]	@ 0xb0
 8007e68:	f8dd e0b8 	ldr.w	lr, [sp, #184]	@ 0xb8
 8007e6c:	911e      	str	r1, [sp, #120]	@ 0x78
 8007e6e:	f009 0107 	and.w	r1, r9, #7
 8007e72:	952b      	str	r5, [sp, #172]	@ 0xac
 8007e74:	911f      	str	r1, [sp, #124]	@ 0x7c
 8007e76:	4661      	mov	r1, ip
 8007e78:	e9cd 033c 	strd	r0, r3, [sp, #240]	@ 0xf0
            for(j = 0; j < input_x; j++){
 8007e7c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007e7e:	2b1b      	cmp	r3, #27
 8007e80:	d903      	bls.n	8007e8a <depthwise_kernel7x7_stride2_inplace_CHW+0x2de>
 8007e82:	4546      	cmp	r6, r8
 8007e84:	d81a      	bhi.n	8007ebc <depthwise_kernel7x7_stride2_inplace_CHW+0x310>
 8007e86:	4297      	cmp	r7, r2
 8007e88:	d818      	bhi.n	8007ebc <depthwise_kernel7x7_stride2_inplace_CHW+0x310>
 8007e8a:	1e70      	subs	r0, r6, #1
            cols_8b += 3;//skip front
 8007e8c:	463b      	mov	r3, r7
                *cols_8b++ = *src;// + input_offset;
 8007e8e:	f993 5000 	ldrsb.w	r5, [r3]
                src += input_ch;
 8007e92:	4423      	add	r3, r4
                *cols_8b++ = *src;// + input_offset;
 8007e94:	f800 5f01 	strb.w	r5, [r0, #1]!
            for(j = 0; j < input_x; j++){
 8007e98:	4290      	cmp	r0, r2
 8007e9a:	d1f8      	bne.n	8007e8e <depthwise_kernel7x7_stride2_inplace_CHW+0x2e2>
                src += input_ch;
 8007e9c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
        for(i = 0; i < input_y; i++){
 8007e9e:	3101      	adds	r1, #1
 8007ea0:	4456      	add	r6, sl
 8007ea2:	4452      	add	r2, sl
                src += input_ch;
 8007ea4:	441f      	add	r7, r3
        for(i = 0; i < input_y; i++){
 8007ea6:	4498      	add	r8, r3
 8007ea8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007eaa:	4299      	cmp	r1, r3
 8007eac:	d1e6      	bne.n	8007e7c <depthwise_kernel7x7_stride2_inplace_CHW+0x2d0>
 8007eae:	469b      	mov	fp, r3
 8007eb0:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 8007eb2:	f8dd e0f8 	ldr.w	lr, [sp, #248]	@ 0xf8
 8007eb6:	e9dd 033c 	ldrd	r0, r3, [sp, #240]	@ 0xf0
 8007eba:	e770      	b.n	8007d9e <depthwise_kernel7x7_stride2_inplace_CHW+0x1f2>
 8007ebc:	1ef3      	subs	r3, r6, #3
 8007ebe:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8007ec0:	9d20      	ldr	r5, [sp, #128]	@ 0x80
 8007ec2:	4418      	add	r0, r3
            cols_8b += 3;//skip front
 8007ec4:	f8cd 9064 	str.w	r9, [sp, #100]	@ 0x64
 8007ec8:	eb05 0c07 	add.w	ip, r5, r7
 8007ecc:	463b      	mov	r3, r7
 8007ece:	4635      	mov	r5, r6
 8007ed0:	f8dd 908c 	ldr.w	r9, [sp, #140]	@ 0x8c
 8007ed4:	e9cd 6a15 	strd	r6, sl, [sp, #84]	@ 0x54
 8007ed8:	e9cd 2817 	strd	r2, r8, [sp, #92]	@ 0x5c
 8007edc:	4682      	mov	sl, r0
 8007ede:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 8007ee2:	e9cd 7113 	strd	r7, r1, [sp, #76]	@ 0x4c
                *cols_8b++ = *src;// + input_offset;
 8007ee6:	781f      	ldrb	r7, [r3, #0]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f81c 0008 	ldrb.w	r0, [ip, r8]
 8007eee:	3508      	adds	r5, #8
 8007ef0:	f813 6024 	ldrb.w	r6, [r3, r4, lsl #2]
 8007ef4:	4611      	mov	r1, r2
 8007ef6:	f367 0207 	bfi	r2, r7, #0, #8
 8007efa:	f366 0107 	bfi	r1, r6, #0, #8
 8007efe:	f360 220f 	bfi	r2, r0, #8, #8
 8007f02:	f813 0009 	ldrb.w	r0, [r3, r9]
 8007f06:	f360 210f 	bfi	r1, r0, #8, #8
 8007f0a:	f813 0014 	ldrb.w	r0, [r3, r4, lsl #1]
 8007f0e:	f360 4217 	bfi	r2, r0, #16, #8
 8007f12:	f81c 0014 	ldrb.w	r0, [ip, r4, lsl #1]
 8007f16:	f360 4117 	bfi	r1, r0, #16, #8
 8007f1a:	f813 000e 	ldrb.w	r0, [r3, lr]
 8007f1e:	445b      	add	r3, fp
 8007f20:	f360 621f 	bfi	r2, r0, #24, #8
 8007f24:	f81c 000e 	ldrb.w	r0, [ip, lr]
 8007f28:	44dc      	add	ip, fp
 8007f2a:	f360 611f 	bfi	r1, r0, #24, #8
 8007f2e:	f845 2c08 	str.w	r2, [r5, #-8]
 8007f32:	f845 1c04 	str.w	r1, [r5, #-4]
            for(j = 0; j < input_x; j++){
 8007f36:	4555      	cmp	r5, sl
 8007f38:	d1d5      	bne.n	8007ee6 <depthwise_kernel7x7_stride2_inplace_CHW+0x33a>
 8007f3a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007f3c:	9d21      	ldr	r5, [sp, #132]	@ 0x84
 8007f3e:	f8dd 9064 	ldr.w	r9, [sp, #100]	@ 0x64
 8007f42:	e9dd 6a15 	ldrd	r6, sl, [sp, #84]	@ 0x54
 8007f46:	e9dd 7113 	ldrd	r7, r1, [sp, #76]	@ 0x4c
 8007f4a:	eb06 0c03 	add.w	ip, r6, r3
 8007f4e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8007f50:	1978      	adds	r0, r7, r5
 8007f52:	e9dd 2817 	ldrd	r2, r8, [sp, #92]	@ 0x5c
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d0a0      	beq.n	8007e9c <depthwise_kernel7x7_stride2_inplace_CHW+0x2f0>
                *cols_8b++ = *src;// + input_offset;
 8007f5a:	577d      	ldrsb	r5, [r7, r5]
 8007f5c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007f5e:	54f5      	strb	r5, [r6, r3]
                src += input_ch;
 8007f60:	1905      	adds	r5, r0, r4
            for(j = 0; j < input_x; j++){
 8007f62:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8007f64:	4599      	cmp	r9, r3
 8007f66:	d999      	bls.n	8007e9c <depthwise_kernel7x7_stride2_inplace_CHW+0x2f0>
 8007f68:	9b26      	ldr	r3, [sp, #152]	@ 0x98
                *cols_8b++ = *src;// + input_offset;
 8007f6a:	5700      	ldrsb	r0, [r0, r4]
            for(j = 0; j < input_x; j++){
 8007f6c:	4599      	cmp	r9, r3
                *cols_8b++ = *src;// + input_offset;
 8007f6e:	f88c 0001 	strb.w	r0, [ip, #1]
                src += input_ch;
 8007f72:	eb05 0004 	add.w	r0, r5, r4
            for(j = 0; j < input_x; j++){
 8007f76:	d991      	bls.n	8007e9c <depthwise_kernel7x7_stride2_inplace_CHW+0x2f0>
 8007f78:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
                *cols_8b++ = *src;// + input_offset;
 8007f7a:	572d      	ldrsb	r5, [r5, r4]
            for(j = 0; j < input_x; j++){
 8007f7c:	4599      	cmp	r9, r3
                *cols_8b++ = *src;// + input_offset;
 8007f7e:	f88c 5002 	strb.w	r5, [ip, #2]
                src += input_ch;
 8007f82:	eb00 0504 	add.w	r5, r0, r4
            for(j = 0; j < input_x; j++){
 8007f86:	d989      	bls.n	8007e9c <depthwise_kernel7x7_stride2_inplace_CHW+0x2f0>
 8007f88:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
                *cols_8b++ = *src;// + input_offset;
 8007f8a:	5700      	ldrsb	r0, [r0, r4]
            for(j = 0; j < input_x; j++){
 8007f8c:	4599      	cmp	r9, r3
                *cols_8b++ = *src;// + input_offset;
 8007f8e:	f88c 0003 	strb.w	r0, [ip, #3]
                src += input_ch;
 8007f92:	eb05 0004 	add.w	r0, r5, r4
            for(j = 0; j < input_x; j++){
 8007f96:	d981      	bls.n	8007e9c <depthwise_kernel7x7_stride2_inplace_CHW+0x2f0>
 8007f98:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
                *cols_8b++ = *src;// + input_offset;
 8007f9a:	572d      	ldrsb	r5, [r5, r4]
            for(j = 0; j < input_x; j++){
 8007f9c:	4599      	cmp	r9, r3
                *cols_8b++ = *src;// + input_offset;
 8007f9e:	f88c 5004 	strb.w	r5, [ip, #4]
                src += input_ch;
 8007fa2:	eb00 0504 	add.w	r5, r0, r4
            for(j = 0; j < input_x; j++){
 8007fa6:	f67f af79 	bls.w	8007e9c <depthwise_kernel7x7_stride2_inplace_CHW+0x2f0>
 8007faa:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
                *cols_8b++ = *src;// + input_offset;
 8007fac:	5700      	ldrsb	r0, [r0, r4]
            for(j = 0; j < input_x; j++){
 8007fae:	4599      	cmp	r9, r3
                *cols_8b++ = *src;// + input_offset;
 8007fb0:	f88c 0005 	strb.w	r0, [ip, #5]
            for(j = 0; j < input_x; j++){
 8007fb4:	f67f af72 	bls.w	8007e9c <depthwise_kernel7x7_stride2_inplace_CHW+0x2f0>
                *cols_8b++ = *src;// + input_offset;
 8007fb8:	5728      	ldrsb	r0, [r5, r4]
 8007fba:	f88c 0006 	strb.w	r0, [ip, #6]
            for(j = 0; j < input_x; j++){
 8007fbe:	e76d      	b.n	8007e9c <depthwise_kernel7x7_stride2_inplace_CHW+0x2f0>
}
 8007fc0:	2000      	movs	r0, #0
 8007fc2:	b031      	add	sp, #196	@ 0xc4
 8007fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fc8:	f109 0606 	add.w	r6, r9, #6
 8007fcc:	e626      	b.n	8007c1c <depthwise_kernel7x7_stride2_inplace_CHW+0x70>
 8007fce:	bf00      	nop

08007fd0 <getInput>:

void invoke_1patch(uint16_t,  uint16_t,  uint16_t,  uint16_t);

signed char* getInput() {
    return &buffer0[8464];
}
 8007fd0:	4800      	ldr	r0, [pc, #0]	@ (8007fd4 <getInput+0x4>)
 8007fd2:	4770      	bx	lr
 8007fd4:	20002b1c 	.word	0x20002b1c

08007fd8 <getOutput>:
signed char* getOutput() {
    return NNoutput;
}
 8007fd8:	4800      	ldr	r0, [pc, #0]	@ (8007fdc <getOutput+0x4>)
 8007fda:	4770      	bx	lr
 8007fdc:	20000aac 	.word	0x20000aac

08007fe0 <invoke>:
/* layer 4:DEPTHWISE_CONV_2D */
patchpadding_depthwise_kernel3x3_stride2_inplace_CHW(&buffer0[0],21,21,48,(const q7_t*) CHWweight4,offsetBias4,offsetRBias4,shift4,multiplier4,-128,128,-128,127,&buffer0[0],10,10,48,sbuf,-128, pad_t, pad_b, pad_l, pad_r);
pad_t /= 2;pad_b /= 2;pad_l /= 2;pad_r /= 2;
}

void invoke(float* labels){
 8007fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
/* layer 0:CONV_2D */
convolve_1x1_s8_ch48(&buffer0[21168],20,20,48,(const q7_t*) weight5,bias5,shift5,multiplier5,-22,128,-128,127,&buffer0[40368],20,20,16,sbuf);
 8007fe4:	2380      	movs	r3, #128	@ 0x80
 8007fe6:	48be      	ldr	r0, [pc, #760]	@ (80082e0 <invoke+0x300>)
 8007fe8:	f06f 047f 	mvn.w	r4, #127	@ 0x7f
 8007fec:	f04f 0b7f 	mov.w	fp, #127	@ 0x7f
 8007ff0:	f500 4a16 	add.w	sl, r0, #38400	@ 0x9600
 8007ff4:	2614      	movs	r6, #20
 8007ff6:	f500 4896 	add.w	r8, r0, #19200	@ 0x4b00
 8007ffa:	2710      	movs	r7, #16
 8007ffc:	4632      	mov	r2, r6
 8007ffe:	4631      	mov	r1, r6
/* layer 1:CONV_2D */
convolve_1x1_s8_ch16(&buffer0[40368],20,20,16,(const q7_t*) weight6,bias6,shift6,multiplier6,-128,22,-128,127,&buffer0[0],20,20,48,sbuf);
 8008000:	4db8      	ldr	r5, [pc, #736]	@ (80082e4 <invoke+0x304>)
/* layer 2:DEPTHWISE_CONV_2D */
depthwise_kernel3x3_stride1_inplace_CHW(&buffer0[0],20,20,48,(const q7_t*) CHWweight7,offsetBias7,offsetRBias7,shift7,multiplier7,-128,128,-128,127,&buffer0[0],20,20,48,sbuf,-128);
/* layer 3:CONV_2D */
convolve_1x1_s8_ch48(&buffer0[0],20,20,48,(const q7_t*) weight8,bias8,shift8,multiplier8,8,128,-128,127,&buffer0[46768],20,20,16,sbuf);
 8008002:	f508 59c8 	add.w	r9, r8, #6400	@ 0x1900
void invoke(float* labels){
 8008006:	ed2d 8b04 	vpush	{d8-d9}
 800800a:	b091      	sub	sp, #68	@ 0x44
/* layer 4:ADD */
add_fpreq(6400, &buffer0[46768],0.07699620723724365,8,&buffer0[40368],0.08598089963197708,-22,0.10197763890028,-20,&buffer0[53168]);
 800800c:	ed9f 9ab6 	vldr	s18, [pc, #728]	@ 80082e8 <invoke+0x308>
/* layer 13:DEPTHWISE_CONV_2D */
depthwise_kernel3x3_stride1_inplace_CHW(&buffer0[0],10,10,144,(const q7_t*) CHWweight16,offsetBias16,offsetRBias16,shift16,multiplier16,-128,128,-128,127,&buffer0[0],10,10,144,sbuf,-128);
/* layer 14:CONV_2D */
convolve_1x1_s8(&buffer0[0],10,10,144,(const q7_t*) weight17,bias17,shift17,multiplier17,-14,128,-128,127,&buffer0[16800],10,10,24,sbuf);
/* layer 15:ADD */
add_fpreq(2400, &buffer0[16800],0.06462342292070389,-14,&buffer0[14400],0.06311018764972687,-16,0.07023955136537552,-3,&buffer0[12000]);
 8008010:	eddf 8ab6 	vldr	s17, [pc, #728]	@ 80082ec <invoke+0x30c>
convolve_1x1_s8_ch48(&buffer0[21168],20,20,48,(const q7_t*) weight5,bias5,shift5,multiplier5,-22,128,-128,127,&buffer0[40368],20,20,16,sbuf);
 8008014:	9305      	str	r3, [sp, #20]
 8008016:	f06f 0315 	mvn.w	r3, #21
 800801a:	9406      	str	r4, [sp, #24]
 800801c:	9304      	str	r3, [sp, #16]
 800801e:	4bb4      	ldr	r3, [pc, #720]	@ (80082f0 <invoke+0x310>)
 8008020:	970b      	str	r7, [sp, #44]	@ 0x2c
 8008022:	9303      	str	r3, [sp, #12]
 8008024:	4bb3      	ldr	r3, [pc, #716]	@ (80082f4 <invoke+0x314>)
 8008026:	f8cd 8020 	str.w	r8, [sp, #32]
 800802a:	9302      	str	r3, [sp, #8]
 800802c:	4bb2      	ldr	r3, [pc, #712]	@ (80082f8 <invoke+0x318>)
 800802e:	f8cd b01c 	str.w	fp, [sp, #28]
 8008032:	9301      	str	r3, [sp, #4]
 8008034:	4bb1      	ldr	r3, [pc, #708]	@ (80082fc <invoke+0x31c>)
 8008036:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
 800803a:	9300      	str	r3, [sp, #0]
 800803c:	2330      	movs	r3, #48	@ 0x30
/* layer 38:DEPTHWISE_CONV_2D */
depthwise_kernel3x3_stride1_inplace_CHW(&buffer0[0],3,3,480,(const q7_t*) CHWweight37,offsetBias37,offsetRBias37,shift37,multiplier37,-128,128,-128,127,&buffer0[0],3,3,480,sbuf,-128);
/* layer 39:CONV_2D */
convolve_1x1_s8(&buffer0[0],3,3,480,(const q7_t*) weight38,bias38,shift38,multiplier38,-2,128,-128,127,&buffer0[5184],3,3,96,sbuf);
/* layer 40:ADD */
add_fpreq(864, &buffer0[5184],0.04011229798197746,-2,&buffer0[4320],0.042191825807094574,-7,0.03923744335770607,-9,&buffer0[3456]);
 800803e:	ed9f 8ab0 	vldr	s16, [pc, #704]	@ 8008300 <invoke+0x320>
convolve_1x1_s8_ch48(&buffer0[21168],20,20,48,(const q7_t*) weight5,bias5,shift5,multiplier5,-22,128,-128,127,&buffer0[40368],20,20,16,sbuf);
 8008042:	e9cd 6609 	strd	r6, r6, [sp, #36]	@ 0x24
 8008046:	f7fc fc0b 	bl	8004860 <convolve_1x1_s8_ch48>
convolve_1x1_s8_ch16(&buffer0[40368],20,20,16,(const q7_t*) weight6,bias6,shift6,multiplier6,-128,22,-128,127,&buffer0[0],20,20,48,sbuf);
 800804a:	2330      	movs	r3, #48	@ 0x30
 800804c:	4632      	mov	r2, r6
 800804e:	4631      	mov	r1, r6
 8008050:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008052:	2316      	movs	r3, #22
 8008054:	9404      	str	r4, [sp, #16]
 8008056:	4640      	mov	r0, r8
 8008058:	9305      	str	r3, [sp, #20]
 800805a:	4baa      	ldr	r3, [pc, #680]	@ (8008304 <invoke+0x324>)
 800805c:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
 8008060:	9303      	str	r3, [sp, #12]
 8008062:	4ba9      	ldr	r3, [pc, #676]	@ (8008308 <invoke+0x328>)
 8008064:	9508      	str	r5, [sp, #32]
 8008066:	9302      	str	r3, [sp, #8]
 8008068:	4ba8      	ldr	r3, [pc, #672]	@ (800830c <invoke+0x32c>)
 800806a:	9301      	str	r3, [sp, #4]
 800806c:	4ba8      	ldr	r3, [pc, #672]	@ (8008310 <invoke+0x330>)
 800806e:	e9cd 6609 	strd	r6, r6, [sp, #36]	@ 0x24
 8008072:	e9cd 4b06 	strd	r4, fp, [sp, #24]
 8008076:	9300      	str	r3, [sp, #0]
 8008078:	463b      	mov	r3, r7
 800807a:	f7fc fa21 	bl	80044c0 <convolve_1x1_s8_ch16>
depthwise_kernel3x3_stride1_inplace_CHW(&buffer0[0],20,20,48,(const q7_t*) CHWweight7,offsetBias7,offsetRBias7,shift7,multiplier7,-128,128,-128,127,&buffer0[0],20,20,48,sbuf,-128);
 800807e:	2330      	movs	r3, #48	@ 0x30
 8008080:	4632      	mov	r2, r6
 8008082:	4631      	mov	r1, r6
 8008084:	4628      	mov	r0, r5
 8008086:	e9cd 630b 	strd	r6, r3, [sp, #44]	@ 0x2c
 800808a:	2380      	movs	r3, #128	@ 0x80
 800808c:	e9cd 4305 	strd	r4, r3, [sp, #20]
 8008090:	4ba0      	ldr	r3, [pc, #640]	@ (8008314 <invoke+0x334>)
 8008092:	9304      	str	r3, [sp, #16]
 8008094:	4ba0      	ldr	r3, [pc, #640]	@ (8008318 <invoke+0x338>)
 8008096:	9303      	str	r3, [sp, #12]
 8008098:	4ba0      	ldr	r3, [pc, #640]	@ (800831c <invoke+0x33c>)
 800809a:	9302      	str	r3, [sp, #8]
 800809c:	4ba0      	ldr	r3, [pc, #640]	@ (8008320 <invoke+0x340>)
 800809e:	9301      	str	r3, [sp, #4]
 80080a0:	4ba0      	ldr	r3, [pc, #640]	@ (8008324 <invoke+0x344>)
 80080a2:	e9cd a40d 	strd	sl, r4, [sp, #52]	@ 0x34
 80080a6:	e9cd 5609 	strd	r5, r6, [sp, #36]	@ 0x24
 80080aa:	e9cd 4b07 	strd	r4, fp, [sp, #28]
 80080ae:	9300      	str	r3, [sp, #0]
 80080b0:	2330      	movs	r3, #48	@ 0x30
 80080b2:	f7fc ffdd 	bl	8005070 <depthwise_kernel3x3_stride1_inplace_CHW>
convolve_1x1_s8_ch48(&buffer0[0],20,20,48,(const q7_t*) weight8,bias8,shift8,multiplier8,8,128,-128,127,&buffer0[46768],20,20,16,sbuf);
 80080b6:	2380      	movs	r3, #128	@ 0x80
 80080b8:	4632      	mov	r2, r6
 80080ba:	4631      	mov	r1, r6
 80080bc:	9305      	str	r3, [sp, #20]
 80080be:	2308      	movs	r3, #8
 80080c0:	f8cd 9020 	str.w	r9, [sp, #32]
 80080c4:	4628      	mov	r0, r5
 80080c6:	9304      	str	r3, [sp, #16]
 80080c8:	4b97      	ldr	r3, [pc, #604]	@ (8008328 <invoke+0x348>)
 80080ca:	9303      	str	r3, [sp, #12]
 80080cc:	4b97      	ldr	r3, [pc, #604]	@ (800832c <invoke+0x34c>)
 80080ce:	9302      	str	r3, [sp, #8]
 80080d0:	4b97      	ldr	r3, [pc, #604]	@ (8008330 <invoke+0x350>)
 80080d2:	9301      	str	r3, [sp, #4]
 80080d4:	4b97      	ldr	r3, [pc, #604]	@ (8008334 <invoke+0x354>)
 80080d6:	e9cd 7a0b 	strd	r7, sl, [sp, #44]	@ 0x2c
 80080da:	e9cd 6609 	strd	r6, r6, [sp, #36]	@ 0x24
 80080de:	e9cd 4b06 	strd	r4, fp, [sp, #24]
 80080e2:	9300      	str	r3, [sp, #0]
 80080e4:	2330      	movs	r3, #48	@ 0x30
 80080e6:	f7fc fbbb 	bl	8004860 <convolve_1x1_s8_ch48>
add_fpreq(6400, &buffer0[46768],0.07699620723724365,8,&buffer0[40368],0.08598089963197708,-22,0.10197763890028,-20,&buffer0[53168]);
 80080ea:	eeb0 2a49 	vmov.f32	s4, s18
 80080ee:	eefb 2a04 	vmov.f32	s5, #180	@ 0xc1a00000 -20.0
 80080f2:	ed9f 1a91 	vldr	s2, [pc, #580]	@ 8008338 <invoke+0x358>
 80080f6:	eefb 1a06 	vmov.f32	s3, #182	@ 0xc1b00000 -22.0
 80080fa:	ed9f 0a90 	vldr	s0, [pc, #576]	@ 800833c <invoke+0x35c>
 80080fe:	eef2 0a00 	vmov.f32	s1, #32	@ 0x41000000  8.0
 8008102:	f508 5348 	add.w	r3, r8, #12800	@ 0x3200
 8008106:	4642      	mov	r2, r8
 8008108:	4649      	mov	r1, r9
 800810a:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 800810e:	f7fb fe6d 	bl	8003dec <add_fpreq>
convolve_1x1_s8_ch16(&buffer0[53168],20,20,16,(const q7_t*) weight9,bias9,shift9,multiplier9,-128,20,-128,127,&buffer0[0],20,20,48,sbuf);
 8008112:	2330      	movs	r3, #48	@ 0x30
 8008114:	4632      	mov	r2, r6
 8008116:	4631      	mov	r1, r6
 8008118:	f508 5048 	add.w	r0, r8, #12800	@ 0x3200
 800811c:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
 8008120:	e9cd 630a 	strd	r6, r3, [sp, #40]	@ 0x28
 8008124:	4b86      	ldr	r3, [pc, #536]	@ (8008340 <invoke+0x360>)
 8008126:	9303      	str	r3, [sp, #12]
 8008128:	4b86      	ldr	r3, [pc, #536]	@ (8008344 <invoke+0x364>)
 800812a:	9302      	str	r3, [sp, #8]
 800812c:	4b86      	ldr	r3, [pc, #536]	@ (8008348 <invoke+0x368>)
 800812e:	9301      	str	r3, [sp, #4]
 8008130:	4b86      	ldr	r3, [pc, #536]	@ (800834c <invoke+0x36c>)
 8008132:	e9cd 4604 	strd	r4, r6, [sp, #16]
 8008136:	e9cd 5608 	strd	r5, r6, [sp, #32]
 800813a:	e9cd 4b06 	strd	r4, fp, [sp, #24]
 800813e:	9300      	str	r3, [sp, #0]
 8008140:	463b      	mov	r3, r7
 8008142:	f7fc f9bd 	bl	80044c0 <convolve_1x1_s8_ch16>
depthwise_kernel3x3_stride1_inplace_CHW(&buffer0[0],20,20,48,(const q7_t*) CHWweight10,offsetBias10,offsetRBias10,shift10,multiplier10,-128,128,-128,127,&buffer0[0],20,20,48,sbuf,-128);
 8008146:	2330      	movs	r3, #48	@ 0x30
 8008148:	4632      	mov	r2, r6
 800814a:	4631      	mov	r1, r6
 800814c:	4628      	mov	r0, r5
 800814e:	e9cd 630b 	strd	r6, r3, [sp, #44]	@ 0x2c
 8008152:	2380      	movs	r3, #128	@ 0x80
 8008154:	e9cd 4305 	strd	r4, r3, [sp, #20]
 8008158:	4b7d      	ldr	r3, [pc, #500]	@ (8008350 <invoke+0x370>)
 800815a:	9304      	str	r3, [sp, #16]
 800815c:	4b7d      	ldr	r3, [pc, #500]	@ (8008354 <invoke+0x374>)
 800815e:	9303      	str	r3, [sp, #12]
 8008160:	4b7d      	ldr	r3, [pc, #500]	@ (8008358 <invoke+0x378>)
 8008162:	9302      	str	r3, [sp, #8]
 8008164:	4b7d      	ldr	r3, [pc, #500]	@ (800835c <invoke+0x37c>)
 8008166:	9301      	str	r3, [sp, #4]
 8008168:	4b7d      	ldr	r3, [pc, #500]	@ (8008360 <invoke+0x380>)
 800816a:	e9cd a40d 	strd	sl, r4, [sp, #52]	@ 0x34
 800816e:	e9cd 5609 	strd	r5, r6, [sp, #36]	@ 0x24
 8008172:	e9cd 4b07 	strd	r4, fp, [sp, #28]
 8008176:	9300      	str	r3, [sp, #0]
 8008178:	2330      	movs	r3, #48	@ 0x30
 800817a:	f7fc ff79 	bl	8005070 <depthwise_kernel3x3_stride1_inplace_CHW>
convolve_1x1_s8_ch48(&buffer0[0],20,20,48,(const q7_t*) weight11,bias11,shift11,multiplier11,-4,128,-128,127,&buffer0[40368],20,20,16,sbuf);
 800817e:	f06f 0303 	mvn.w	r3, #3
 8008182:	2180      	movs	r1, #128	@ 0x80
 8008184:	4632      	mov	r2, r6
 8008186:	9406      	str	r4, [sp, #24]
 8008188:	4628      	mov	r0, r5
 800818a:	e9cd 3104 	strd	r3, r1, [sp, #16]
 800818e:	4b75      	ldr	r3, [pc, #468]	@ (8008364 <invoke+0x384>)
 8008190:	4631      	mov	r1, r6
 8008192:	9303      	str	r3, [sp, #12]
 8008194:	4b74      	ldr	r3, [pc, #464]	@ (8008368 <invoke+0x388>)
 8008196:	9302      	str	r3, [sp, #8]
 8008198:	4b74      	ldr	r3, [pc, #464]	@ (800836c <invoke+0x38c>)
 800819a:	9301      	str	r3, [sp, #4]
 800819c:	4b74      	ldr	r3, [pc, #464]	@ (8008370 <invoke+0x390>)
 800819e:	e9cd 7a0b 	strd	r7, sl, [sp, #44]	@ 0x2c
 80081a2:	e9cd 6609 	strd	r6, r6, [sp, #36]	@ 0x24
 80081a6:	e9cd b807 	strd	fp, r8, [sp, #28]
 80081aa:	9300      	str	r3, [sp, #0]
 80081ac:	2330      	movs	r3, #48	@ 0x30
 80081ae:	f7fc fb57 	bl	8004860 <convolve_1x1_s8_ch48>
add_fpreq(6400, &buffer0[40368],0.024848325178027153,-4,&buffer0[53168],0.10197763890028,-20,0.10464993864297867,-15,&buffer0[46768]);
 80081b2:	eeb0 1a49 	vmov.f32	s2, s18
 80081b6:	eefa 2a0e 	vmov.f32	s5, #174	@ 0xc1700000 -15.0
 80081ba:	ed9f 2a6e 	vldr	s4, [pc, #440]	@ 8008374 <invoke+0x394>
 80081be:	eefb 1a04 	vmov.f32	s3, #180	@ 0xc1a00000 -20.0
 80081c2:	ed9f 0a6d 	vldr	s0, [pc, #436]	@ 8008378 <invoke+0x398>
 80081c6:	eef9 0a00 	vmov.f32	s1, #144	@ 0xc0800000 -4.0
 80081ca:	464b      	mov	r3, r9
 80081cc:	f509 52c8 	add.w	r2, r9, #6400	@ 0x1900
 80081d0:	4641      	mov	r1, r8
 80081d2:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
depthwise_kernel7x7_stride2_inplace_CHW(&buffer0[0],20,20,48,(const q7_t*) CHWweight13,offsetBias13,offsetRBias13,shift13,multiplier13,-128,128,-128,127,&buffer0[0],10,10,48,sbuf,-128);
 80081d6:	f04f 080a 	mov.w	r8, #10
add_fpreq(6400, &buffer0[40368],0.024848325178027153,-4,&buffer0[53168],0.10197763890028,-20,0.10464993864297867,-15,&buffer0[46768]);
 80081da:	f7fb fe07 	bl	8003dec <add_fpreq>
convolve_1x1_s8_ch16(&buffer0[46768],20,20,16,(const q7_t*) weight12,bias12,shift12,multiplier12,-128,15,-128,127,&buffer0[0],20,20,48,sbuf);
 80081de:	2330      	movs	r3, #48	@ 0x30
 80081e0:	4632      	mov	r2, r6
 80081e2:	4631      	mov	r1, r6
 80081e4:	9404      	str	r4, [sp, #16]
 80081e6:	4648      	mov	r0, r9
 80081e8:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
convolve_1x1_s8_ch24(&buffer0[14400],10,10,24,(const q7_t*) weight15,bias15,shift15,multiplier15,-128,16,-128,127,&buffer0[0],10,10,144,sbuf);
 80081ec:	f04f 0990 	mov.w	r9, #144	@ 0x90
convolve_1x1_s8_ch16(&buffer0[46768],20,20,16,(const q7_t*) weight12,bias12,shift12,multiplier12,-128,15,-128,127,&buffer0[0],20,20,48,sbuf);
 80081f0:	e9cd 630a 	strd	r6, r3, [sp, #40]	@ 0x28
 80081f4:	230f      	movs	r3, #15
 80081f6:	9305      	str	r3, [sp, #20]
 80081f8:	4b60      	ldr	r3, [pc, #384]	@ (800837c <invoke+0x39c>)
 80081fa:	9303      	str	r3, [sp, #12]
 80081fc:	4b60      	ldr	r3, [pc, #384]	@ (8008380 <invoke+0x3a0>)
 80081fe:	9302      	str	r3, [sp, #8]
 8008200:	4b60      	ldr	r3, [pc, #384]	@ (8008384 <invoke+0x3a4>)
 8008202:	9301      	str	r3, [sp, #4]
 8008204:	4b60      	ldr	r3, [pc, #384]	@ (8008388 <invoke+0x3a8>)
 8008206:	e9cd 5608 	strd	r5, r6, [sp, #32]
 800820a:	e9cd 4b06 	strd	r4, fp, [sp, #24]
 800820e:	9300      	str	r3, [sp, #0]
 8008210:	463b      	mov	r3, r7
 8008212:	f7fc f955 	bl	80044c0 <convolve_1x1_s8_ch16>
depthwise_kernel7x7_stride2_inplace_CHW(&buffer0[0],20,20,48,(const q7_t*) CHWweight13,offsetBias13,offsetRBias13,shift13,multiplier13,-128,128,-128,127,&buffer0[0],10,10,48,sbuf,-128);
 8008216:	2330      	movs	r3, #48	@ 0x30
 8008218:	4632      	mov	r2, r6
 800821a:	4631      	mov	r1, r6
 800821c:	930c      	str	r3, [sp, #48]	@ 0x30
 800821e:	2380      	movs	r3, #128	@ 0x80
 8008220:	9407      	str	r4, [sp, #28]
 8008222:	4628      	mov	r0, r5
convolve_1x1_s8_ch24(&buffer0[12000],10,10,24,(const q7_t*) weight18,bias18,shift18,multiplier18,-128,3,-128,127,&buffer0[0],10,10,120,sbuf);
 8008224:	2603      	movs	r6, #3
depthwise_kernel7x7_stride2_inplace_CHW(&buffer0[0],20,20,48,(const q7_t*) CHWweight13,offsetBias13,offsetRBias13,shift13,multiplier13,-128,128,-128,127,&buffer0[0],10,10,48,sbuf,-128);
 8008226:	e9cd 4305 	strd	r4, r3, [sp, #20]
 800822a:	4b58      	ldr	r3, [pc, #352]	@ (800838c <invoke+0x3ac>)
 800822c:	9304      	str	r3, [sp, #16]
 800822e:	4b58      	ldr	r3, [pc, #352]	@ (8008390 <invoke+0x3b0>)
 8008230:	9303      	str	r3, [sp, #12]
 8008232:	4b58      	ldr	r3, [pc, #352]	@ (8008394 <invoke+0x3b4>)
 8008234:	9302      	str	r3, [sp, #8]
 8008236:	4b58      	ldr	r3, [pc, #352]	@ (8008398 <invoke+0x3b8>)
 8008238:	9301      	str	r3, [sp, #4]
 800823a:	4b58      	ldr	r3, [pc, #352]	@ (800839c <invoke+0x3bc>)
 800823c:	e9cd a40d 	strd	sl, r4, [sp, #52]	@ 0x34
 8008240:	e9cd 880a 	strd	r8, r8, [sp, #40]	@ 0x28
 8008244:	9300      	str	r3, [sp, #0]
 8008246:	2330      	movs	r3, #48	@ 0x30
 8008248:	e9cd b508 	strd	fp, r5, [sp, #32]
 800824c:	f7ff fcae 	bl	8007bac <depthwise_kernel7x7_stride2_inplace_CHW>
convolve_1x1_s8_ch48(&buffer0[0],10,10,48,(const q7_t*) weight14,bias14,shift14,multiplier14,-16,128,-128,127,&buffer0[14400],10,10,24,sbuf);
 8008250:	2380      	movs	r3, #128	@ 0x80
 8008252:	4642      	mov	r2, r8
 8008254:	4641      	mov	r1, r8
 8008256:	9305      	str	r3, [sp, #20]
 8008258:	2318      	movs	r3, #24
 800825a:	4628      	mov	r0, r5
 800825c:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
 8008260:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008262:	f505 5361 	add.w	r3, r5, #14400	@ 0x3840
 8008266:	9308      	str	r3, [sp, #32]
 8008268:	f06f 030f 	mvn.w	r3, #15
 800826c:	9304      	str	r3, [sp, #16]
 800826e:	4b4c      	ldr	r3, [pc, #304]	@ (80083a0 <invoke+0x3c0>)
 8008270:	9303      	str	r3, [sp, #12]
 8008272:	4b4c      	ldr	r3, [pc, #304]	@ (80083a4 <invoke+0x3c4>)
 8008274:	9302      	str	r3, [sp, #8]
 8008276:	4b4c      	ldr	r3, [pc, #304]	@ (80083a8 <invoke+0x3c8>)
 8008278:	9301      	str	r3, [sp, #4]
 800827a:	4b4c      	ldr	r3, [pc, #304]	@ (80083ac <invoke+0x3cc>)
 800827c:	e9cd 8809 	strd	r8, r8, [sp, #36]	@ 0x24
 8008280:	e9cd 4b06 	strd	r4, fp, [sp, #24]
 8008284:	9300      	str	r3, [sp, #0]
 8008286:	2330      	movs	r3, #48	@ 0x30
 8008288:	f7fc faea 	bl	8004860 <convolve_1x1_s8_ch48>
convolve_1x1_s8_ch24(&buffer0[14400],10,10,24,(const q7_t*) weight15,bias15,shift15,multiplier15,-128,16,-128,127,&buffer0[0],10,10,144,sbuf);
 800828c:	4b48      	ldr	r3, [pc, #288]	@ (80083b0 <invoke+0x3d0>)
 800828e:	4642      	mov	r2, r8
 8008290:	4641      	mov	r1, r8
 8008292:	9303      	str	r3, [sp, #12]
 8008294:	f505 5061 	add.w	r0, r5, #14400	@ 0x3840
 8008298:	4b46      	ldr	r3, [pc, #280]	@ (80083b4 <invoke+0x3d4>)
 800829a:	9705      	str	r7, [sp, #20]
convolve_1x1_s8_ch24(&buffer0[12000],10,10,24,(const q7_t*) weight18,bias18,shift18,multiplier18,-128,3,-128,127,&buffer0[0],10,10,120,sbuf);
 800829c:	2778      	movs	r7, #120	@ 0x78
convolve_1x1_s8_ch24(&buffer0[14400],10,10,24,(const q7_t*) weight15,bias15,shift15,multiplier15,-128,16,-128,127,&buffer0[0],10,10,144,sbuf);
 800829e:	9302      	str	r3, [sp, #8]
 80082a0:	4b45      	ldr	r3, [pc, #276]	@ (80083b8 <invoke+0x3d8>)
 80082a2:	9406      	str	r4, [sp, #24]
 80082a4:	9301      	str	r3, [sp, #4]
 80082a6:	4b45      	ldr	r3, [pc, #276]	@ (80083bc <invoke+0x3dc>)
 80082a8:	9404      	str	r4, [sp, #16]
 80082aa:	f8cd 902c 	str.w	r9, [sp, #44]	@ 0x2c
 80082ae:	9300      	str	r3, [sp, #0]
 80082b0:	2318      	movs	r3, #24
 80082b2:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
 80082b6:	e9cd 8809 	strd	r8, r8, [sp, #36]	@ 0x24
 80082ba:	e9cd b507 	strd	fp, r5, [sp, #28]
 80082be:	f7fc f9e7 	bl	8004690 <convolve_1x1_s8_ch24>
depthwise_kernel3x3_stride1_inplace_CHW(&buffer0[0],10,10,144,(const q7_t*) CHWweight16,offsetBias16,offsetRBias16,shift16,multiplier16,-128,128,-128,127,&buffer0[0],10,10,144,sbuf,-128);
 80082c2:	4b3f      	ldr	r3, [pc, #252]	@ (80083c0 <invoke+0x3e0>)
 80082c4:	2180      	movs	r1, #128	@ 0x80
 80082c6:	4642      	mov	r2, r8
 80082c8:	9304      	str	r3, [sp, #16]
 80082ca:	4628      	mov	r0, r5
 80082cc:	4b3d      	ldr	r3, [pc, #244]	@ (80083c4 <invoke+0x3e4>)
 80082ce:	9303      	str	r3, [sp, #12]
 80082d0:	4b3d      	ldr	r3, [pc, #244]	@ (80083c8 <invoke+0x3e8>)
 80082d2:	9302      	str	r3, [sp, #8]
 80082d4:	4b3d      	ldr	r3, [pc, #244]	@ (80083cc <invoke+0x3ec>)
 80082d6:	9301      	str	r3, [sp, #4]
 80082d8:	4b3d      	ldr	r3, [pc, #244]	@ (80083d0 <invoke+0x3f0>)
 80082da:	e9cd 890b 	strd	r8, r9, [sp, #44]	@ 0x2c
 80082de:	e079      	b.n	80083d4 <invoke+0x3f4>
 80082e0:	20005cbc 	.word	0x20005cbc
 80082e4:	20000a0c 	.word	0x20000a0c
 80082e8:	3dd0d9a7 	.word	0x3dd0d9a7
 80082ec:	3d8fd9c1 	.word	0x3d8fd9c1
 80082f0:	0808c7c4 	.word	0x0808c7c4
 80082f4:	0808c804 	.word	0x0808c804
 80082f8:	0808c844 	.word	0x0808c844
 80082fc:	0808c884 	.word	0x0808c884
 8008300:	3d20b771 	.word	0x3d20b771
 8008304:	0808c284 	.word	0x0808c284
 8008308:	0808c344 	.word	0x0808c344
 800830c:	0808c404 	.word	0x0808c404
 8008310:	0808c4c4 	.word	0x0808c4c4
 8008314:	0808bdd4 	.word	0x0808bdd4
 8008318:	0808be94 	.word	0x0808be94
 800831c:	0808bf54 	.word	0x0808bf54
 8008320:	0808c014 	.word	0x0808c014
 8008324:	0808c0d4 	.word	0x0808c0d4
 8008328:	0808ba14 	.word	0x0808ba14
 800832c:	0808ba54 	.word	0x0808ba54
 8008330:	0808ba94 	.word	0x0808ba94
 8008334:	0808bad4 	.word	0x0808bad4
 8008338:	3db016c1 	.word	0x3db016c1
 800833c:	3d9db030 	.word	0x3d9db030
 8008340:	0808b4d4 	.word	0x0808b4d4
 8008344:	0808b594 	.word	0x0808b594
 8008348:	0808b654 	.word	0x0808b654
 800834c:	0808b714 	.word	0x0808b714
 8008350:	0808b024 	.word	0x0808b024
 8008354:	0808b0e4 	.word	0x0808b0e4
 8008358:	0808b1a4 	.word	0x0808b1a4
 800835c:	0808b264 	.word	0x0808b264
 8008360:	0808b324 	.word	0x0808b324
 8008364:	0808ac64 	.word	0x0808ac64
 8008368:	0808aca4 	.word	0x0808aca4
 800836c:	0808ace4 	.word	0x0808ace4
 8008370:	0808ad24 	.word	0x0808ad24
 8008374:	3dd652b5 	.word	0x3dd652b5
 8008378:	3ccb8eb7 	.word	0x3ccb8eb7
 800837c:	0808a724 	.word	0x0808a724
 8008380:	0808a7e4 	.word	0x0808a7e4
 8008384:	0808a8a4 	.word	0x0808a8a4
 8008388:	0808a964 	.word	0x0808a964
 800838c:	08089af4 	.word	0x08089af4
 8008390:	08089bb4 	.word	0x08089bb4
 8008394:	08089c74 	.word	0x08089c74
 8008398:	08089d34 	.word	0x08089d34
 800839c:	08089df4 	.word	0x08089df4
 80083a0:	08089554 	.word	0x08089554
 80083a4:	080895b4 	.word	0x080895b4
 80083a8:	08089614 	.word	0x08089614
 80083ac:	08089674 	.word	0x08089674
 80083b0:	08088114 	.word	0x08088114
 80083b4:	08088354 	.word	0x08088354
 80083b8:	08088594 	.word	0x08088594
 80083bc:	080887d4 	.word	0x080887d4
 80083c0:	08087304 	.word	0x08087304
 80083c4:	08087544 	.word	0x08087544
 80083c8:	08087784 	.word	0x08087784
 80083cc:	080879c4 	.word	0x080879c4
 80083d0:	08087c04 	.word	0x08087c04
 80083d4:	e9cd 4105 	strd	r4, r1, [sp, #20]
 80083d8:	e9cd a40d 	strd	sl, r4, [sp, #52]	@ 0x34
 80083dc:	4641      	mov	r1, r8
 80083de:	9300      	str	r3, [sp, #0]
 80083e0:	464b      	mov	r3, r9
 80083e2:	e9cd 5809 	strd	r5, r8, [sp, #36]	@ 0x24
 80083e6:	e9cd 4b07 	strd	r4, fp, [sp, #28]
 80083ea:	f7fc fe41 	bl	8005070 <depthwise_kernel3x3_stride1_inplace_CHW>
convolve_1x1_s8(&buffer0[0],10,10,144,(const q7_t*) weight17,bias17,shift17,multiplier17,-14,128,-128,127,&buffer0[16800],10,10,24,sbuf);
 80083ee:	f06f 030d 	mvn.w	r3, #13
 80083f2:	2118      	movs	r1, #24
 80083f4:	4642      	mov	r2, r8
 80083f6:	9304      	str	r3, [sp, #16]
 80083f8:	4628      	mov	r0, r5
 80083fa:	4bbb      	ldr	r3, [pc, #748]	@ (80086e8 <invoke+0x708>)
 80083fc:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 8008400:	9303      	str	r3, [sp, #12]
 8008402:	4bba      	ldr	r3, [pc, #744]	@ (80086ec <invoke+0x70c>)
 8008404:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
 8008408:	9302      	str	r3, [sp, #8]
 800840a:	4bb9      	ldr	r3, [pc, #740]	@ (80086f0 <invoke+0x710>)
 800840c:	e9cd 810a 	strd	r8, r1, [sp, #40]	@ 0x28
 8008410:	2180      	movs	r1, #128	@ 0x80
 8008412:	9301      	str	r3, [sp, #4]
 8008414:	4bb7      	ldr	r3, [pc, #732]	@ (80086f4 <invoke+0x714>)
 8008416:	9105      	str	r1, [sp, #20]
 8008418:	49b7      	ldr	r1, [pc, #732]	@ (80086f8 <invoke+0x718>)
 800841a:	9300      	str	r3, [sp, #0]
 800841c:	464b      	mov	r3, r9
 800841e:	9108      	str	r1, [sp, #32]
 8008420:	4641      	mov	r1, r8
 8008422:	e9cd 4b06 	strd	r4, fp, [sp, #24]
 8008426:	f7fb ff55 	bl	80042d4 <convolve_1x1_s8>
add_fpreq(2400, &buffer0[16800],0.06462342292070389,-14,&buffer0[14400],0.06311018764972687,-16,0.07023955136537552,-3,&buffer0[12000]);
 800842a:	4bb4      	ldr	r3, [pc, #720]	@ (80086fc <invoke+0x71c>)
 800842c:	eeb0 2a68 	vmov.f32	s4, s17
 8008430:	ed9f 1ab3 	vldr	s2, [pc, #716]	@ 8008700 <invoke+0x720>
 8008434:	f503 6216 	add.w	r2, r3, #2400	@ 0x960
 8008438:	eef8 2a08 	vmov.f32	s5, #136	@ 0xc0400000 -3.0
 800843c:	eefb 1a00 	vmov.f32	s3, #176	@ 0xc1800000 -16.0
 8008440:	ed9f 0ab0 	vldr	s0, [pc, #704]	@ 8008704 <invoke+0x724>
 8008444:	eefa 0a0c 	vmov.f32	s1, #172	@ 0xc1600000 -14.0
 8008448:	f502 6116 	add.w	r1, r2, #2400	@ 0x960
 800844c:	f44f 6016 	mov.w	r0, #2400	@ 0x960
 8008450:	f7fb fccc 	bl	8003dec <add_fpreq>
convolve_1x1_s8_ch24(&buffer0[12000],10,10,24,(const q7_t*) weight18,bias18,shift18,multiplier18,-128,3,-128,127,&buffer0[0],10,10,120,sbuf);
 8008454:	4bac      	ldr	r3, [pc, #688]	@ (8008708 <invoke+0x728>)
 8008456:	4642      	mov	r2, r8
 8008458:	4641      	mov	r1, r8
 800845a:	9303      	str	r3, [sp, #12]
 800845c:	4bab      	ldr	r3, [pc, #684]	@ (800870c <invoke+0x72c>)
 800845e:	9406      	str	r4, [sp, #24]
 8008460:	9302      	str	r3, [sp, #8]
 8008462:	4bab      	ldr	r3, [pc, #684]	@ (8008710 <invoke+0x730>)
 8008464:	9404      	str	r4, [sp, #16]
 8008466:	9301      	str	r3, [sp, #4]
 8008468:	4baa      	ldr	r3, [pc, #680]	@ (8008714 <invoke+0x734>)
 800846a:	970b      	str	r7, [sp, #44]	@ 0x2c
 800846c:	9300      	str	r3, [sp, #0]
 800846e:	2318      	movs	r3, #24
 8008470:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
 8008474:	9605      	str	r6, [sp, #20]
 8008476:	48a1      	ldr	r0, [pc, #644]	@ (80086fc <invoke+0x71c>)
 8008478:	e9cd 8809 	strd	r8, r8, [sp, #36]	@ 0x24
 800847c:	e9cd b507 	strd	fp, r5, [sp, #28]
 8008480:	f7fc f906 	bl	8004690 <convolve_1x1_s8_ch24>
depthwise_kernel5x5_stride1_inplace_CHW(&buffer0[0],10,10,120,(const q7_t*) CHWweight19,offsetBias19,offsetRBias19,shift19,multiplier19,-128,128,-128,127,&buffer0[0],10,10,120,sbuf,-128);
 8008484:	4ba4      	ldr	r3, [pc, #656]	@ (8008718 <invoke+0x738>)
 8008486:	2180      	movs	r1, #128	@ 0x80
 8008488:	4642      	mov	r2, r8
 800848a:	9304      	str	r3, [sp, #16]
 800848c:	4628      	mov	r0, r5
 800848e:	4ba3      	ldr	r3, [pc, #652]	@ (800871c <invoke+0x73c>)
 8008490:	9303      	str	r3, [sp, #12]
 8008492:	4ba3      	ldr	r3, [pc, #652]	@ (8008720 <invoke+0x740>)
 8008494:	9302      	str	r3, [sp, #8]
 8008496:	4ba3      	ldr	r3, [pc, #652]	@ (8008724 <invoke+0x744>)
 8008498:	9301      	str	r3, [sp, #4]
 800849a:	4ba3      	ldr	r3, [pc, #652]	@ (8008728 <invoke+0x748>)
 800849c:	e9cd 870b 	strd	r8, r7, [sp, #44]	@ 0x2c
 80084a0:	e9cd 4105 	strd	r4, r1, [sp, #20]
 80084a4:	e9cd a40d 	strd	sl, r4, [sp, #52]	@ 0x34
 80084a8:	4641      	mov	r1, r8
 80084aa:	9300      	str	r3, [sp, #0]
 80084ac:	463b      	mov	r3, r7
 80084ae:	e9cd 5809 	strd	r5, r8, [sp, #36]	@ 0x24
 80084b2:	e9cd 4b07 	strd	r4, fp, [sp, #28]
 80084b6:	f7fd fa73 	bl	80059a0 <depthwise_kernel5x5_stride1_inplace_CHW>
convolve_1x1_s8(&buffer0[0],10,10,120,(const q7_t*) weight20,bias20,shift20,multiplier20,-3,128,-128,127,&buffer0[14400],10,10,24,sbuf);
 80084ba:	f505 5261 	add.w	r2, r5, #14400	@ 0x3840
 80084be:	463b      	mov	r3, r7
 80084c0:	2780      	movs	r7, #128	@ 0x80
 80084c2:	2118      	movs	r1, #24
 80084c4:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 80084c8:	9406      	str	r4, [sp, #24]
 80084ca:	4628      	mov	r0, r5
 80084cc:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
 80084d0:	e9cd b207 	strd	fp, r2, [sp, #28]
 80084d4:	f06f 0202 	mvn.w	r2, #2
 80084d8:	e9cd 2704 	strd	r2, r7, [sp, #16]
 80084dc:	4a93      	ldr	r2, [pc, #588]	@ (800872c <invoke+0x74c>)
depthwise_kernel7x7_stride2_inplace_CHW(&buffer0[0],10,10,144,(const q7_t*) CHWweight22,offsetBias22,offsetRBias22,shift22,multiplier22,-128,128,-128,127,&buffer0[0],5,5,144,sbuf,-128);
 80084de:	2705      	movs	r7, #5
convolve_1x1_s8(&buffer0[0],10,10,120,(const q7_t*) weight20,bias20,shift20,multiplier20,-3,128,-128,127,&buffer0[14400],10,10,24,sbuf);
 80084e0:	9203      	str	r2, [sp, #12]
 80084e2:	4a93      	ldr	r2, [pc, #588]	@ (8008730 <invoke+0x750>)
 80084e4:	9202      	str	r2, [sp, #8]
 80084e6:	4a93      	ldr	r2, [pc, #588]	@ (8008734 <invoke+0x754>)
 80084e8:	9201      	str	r2, [sp, #4]
 80084ea:	4a93      	ldr	r2, [pc, #588]	@ (8008738 <invoke+0x758>)
 80084ec:	e9cd 810a 	strd	r8, r1, [sp, #40]	@ 0x28
 80084f0:	9200      	str	r2, [sp, #0]
 80084f2:	4641      	mov	r1, r8
 80084f4:	4642      	mov	r2, r8
 80084f6:	f7fb feed 	bl	80042d4 <convolve_1x1_s8>
add_fpreq(2400, &buffer0[14400],0.018893597647547722,-3,&buffer0[12000],0.07023955136537552,-3,0.07366174459457397,-1,&buffer0[16800]);
 80084fa:	4b7f      	ldr	r3, [pc, #508]	@ (80086f8 <invoke+0x718>)
 80084fc:	eef8 1a08 	vmov.f32	s3, #136	@ 0xc0400000 -3.0
 8008500:	ed9f 2a8e 	vldr	s4, [pc, #568]	@ 800873c <invoke+0x75c>
 8008504:	f5a3 5296 	sub.w	r2, r3, #4800	@ 0x12c0
 8008508:	eeb0 1a68 	vmov.f32	s2, s17
 800850c:	eeff 2a00 	vmov.f32	s5, #240	@ 0xbf800000 -1.0
 8008510:	ed9f 0a8b 	vldr	s0, [pc, #556]	@ 8008740 <invoke+0x760>
 8008514:	eef0 0a61 	vmov.f32	s1, s3
 8008518:	f502 6116 	add.w	r1, r2, #2400	@ 0x960
 800851c:	f44f 6016 	mov.w	r0, #2400	@ 0x960
 8008520:	f7fb fc64 	bl	8003dec <add_fpreq>
convolve_1x1_s8_ch24(&buffer0[16800],10,10,24,(const q7_t*) weight21,bias21,shift21,multiplier21,-128,1,-128,127,&buffer0[0],10,10,144,sbuf);
 8008524:	2201      	movs	r2, #1
 8008526:	4641      	mov	r1, r8
 8008528:	9406      	str	r4, [sp, #24]
 800852a:	9205      	str	r2, [sp, #20]
 800852c:	2318      	movs	r3, #24
 800852e:	4a85      	ldr	r2, [pc, #532]	@ (8008744 <invoke+0x764>)
 8008530:	9404      	str	r4, [sp, #16]
 8008532:	9203      	str	r2, [sp, #12]
 8008534:	4a84      	ldr	r2, [pc, #528]	@ (8008748 <invoke+0x768>)
 8008536:	4870      	ldr	r0, [pc, #448]	@ (80086f8 <invoke+0x718>)
 8008538:	9202      	str	r2, [sp, #8]
 800853a:	4a84      	ldr	r2, [pc, #528]	@ (800874c <invoke+0x76c>)
 800853c:	9201      	str	r2, [sp, #4]
 800853e:	4a84      	ldr	r2, [pc, #528]	@ (8008750 <invoke+0x770>)
 8008540:	e9cd 9a0b 	strd	r9, sl, [sp, #44]	@ 0x2c
 8008544:	e9cd 8809 	strd	r8, r8, [sp, #36]	@ 0x24
 8008548:	9200      	str	r2, [sp, #0]
 800854a:	4642      	mov	r2, r8
 800854c:	e9cd b507 	strd	fp, r5, [sp, #28]
 8008550:	f7fc f89e 	bl	8004690 <convolve_1x1_s8_ch24>
depthwise_kernel7x7_stride2_inplace_CHW(&buffer0[0],10,10,144,(const q7_t*) CHWweight22,offsetBias22,offsetRBias22,shift22,multiplier22,-128,128,-128,127,&buffer0[0],5,5,144,sbuf,-128);
 8008554:	2380      	movs	r3, #128	@ 0x80
 8008556:	4642      	mov	r2, r8
 8008558:	4641      	mov	r1, r8
 800855a:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 800855e:	4628      	mov	r0, r5
 8008560:	9407      	str	r4, [sp, #28]
convolve_1x1_s8(&buffer0[0],5,5,144,(const q7_t*) weight23,bias23,shift23,multiplier23,-11,128,-128,127,&buffer0[6000],5,5,40,sbuf);
 8008562:	f04f 0828 	mov.w	r8, #40	@ 0x28
depthwise_kernel7x7_stride2_inplace_CHW(&buffer0[0],10,10,144,(const q7_t*) CHWweight22,offsetBias22,offsetRBias22,shift22,multiplier22,-128,128,-128,127,&buffer0[0],5,5,144,sbuf,-128);
 8008566:	e9cd 4305 	strd	r4, r3, [sp, #20]
 800856a:	4b7a      	ldr	r3, [pc, #488]	@ (8008754 <invoke+0x774>)
 800856c:	9304      	str	r3, [sp, #16]
 800856e:	4b7a      	ldr	r3, [pc, #488]	@ (8008758 <invoke+0x778>)
 8008570:	9303      	str	r3, [sp, #12]
 8008572:	4b7a      	ldr	r3, [pc, #488]	@ (800875c <invoke+0x77c>)
 8008574:	9302      	str	r3, [sp, #8]
 8008576:	4b7a      	ldr	r3, [pc, #488]	@ (8008760 <invoke+0x780>)
 8008578:	9301      	str	r3, [sp, #4]
 800857a:	4b7a      	ldr	r3, [pc, #488]	@ (8008764 <invoke+0x784>)
 800857c:	e9cd a40d 	strd	sl, r4, [sp, #52]	@ 0x34
 8008580:	e9cd 770a 	strd	r7, r7, [sp, #40]	@ 0x28
 8008584:	9300      	str	r3, [sp, #0]
 8008586:	464b      	mov	r3, r9
 8008588:	e9cd b508 	strd	fp, r5, [sp, #32]
 800858c:	f7ff fb0e 	bl	8007bac <depthwise_kernel7x7_stride2_inplace_CHW>
convolve_1x1_s8(&buffer0[0],5,5,144,(const q7_t*) weight23,bias23,shift23,multiplier23,-11,128,-128,127,&buffer0[6000],5,5,40,sbuf);
 8008590:	2280      	movs	r2, #128	@ 0x80
 8008592:	f06f 010a 	mvn.w	r1, #10
 8008596:	464b      	mov	r3, r9
 8008598:	9205      	str	r2, [sp, #20]
 800859a:	4628      	mov	r0, r5
 800859c:	4a72      	ldr	r2, [pc, #456]	@ (8008768 <invoke+0x788>)
convolve_1x1_s8(&buffer0[6000],5,5,40,(const q7_t*) weight24,bias24,shift24,multiplier24,-128,11,-128,127,&buffer0[0],5,5,240,sbuf);
 800859e:	f04f 09f0 	mov.w	r9, #240	@ 0xf0
convolve_1x1_s8(&buffer0[0],5,5,144,(const q7_t*) weight23,bias23,shift23,multiplier23,-11,128,-128,127,&buffer0[6000],5,5,40,sbuf);
 80085a2:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 80085a6:	9208      	str	r2, [sp, #32]
 80085a8:	4a70      	ldr	r2, [pc, #448]	@ (800876c <invoke+0x78c>)
 80085aa:	9104      	str	r1, [sp, #16]
 80085ac:	4639      	mov	r1, r7
 80085ae:	9203      	str	r2, [sp, #12]
 80085b0:	4a6f      	ldr	r2, [pc, #444]	@ (8008770 <invoke+0x790>)
 80085b2:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
 80085b6:	9202      	str	r2, [sp, #8]
 80085b8:	4a6e      	ldr	r2, [pc, #440]	@ (8008774 <invoke+0x794>)
 80085ba:	9201      	str	r2, [sp, #4]
 80085bc:	4a6e      	ldr	r2, [pc, #440]	@ (8008778 <invoke+0x798>)
 80085be:	e9cd 7709 	strd	r7, r7, [sp, #36]	@ 0x24
 80085c2:	e9cd 4b06 	strd	r4, fp, [sp, #24]
 80085c6:	9200      	str	r2, [sp, #0]
 80085c8:	463a      	mov	r2, r7
 80085ca:	f7fb fe83 	bl	80042d4 <convolve_1x1_s8>
convolve_1x1_s8(&buffer0[6000],5,5,40,(const q7_t*) weight24,bias24,shift24,multiplier24,-128,11,-128,127,&buffer0[0],5,5,240,sbuf);
 80085ce:	230b      	movs	r3, #11
 80085d0:	463a      	mov	r2, r7
 80085d2:	4639      	mov	r1, r7
 80085d4:	9305      	str	r3, [sp, #20]
 80085d6:	4b69      	ldr	r3, [pc, #420]	@ (800877c <invoke+0x79c>)
 80085d8:	9406      	str	r4, [sp, #24]
 80085da:	9303      	str	r3, [sp, #12]
 80085dc:	4b68      	ldr	r3, [pc, #416]	@ (8008780 <invoke+0x7a0>)
 80085de:	9404      	str	r4, [sp, #16]
 80085e0:	9302      	str	r3, [sp, #8]
 80085e2:	4b68      	ldr	r3, [pc, #416]	@ (8008784 <invoke+0x7a4>)
 80085e4:	f8cd 902c 	str.w	r9, [sp, #44]	@ 0x2c
 80085e8:	9301      	str	r3, [sp, #4]
 80085ea:	4b67      	ldr	r3, [pc, #412]	@ (8008788 <invoke+0x7a8>)
 80085ec:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
 80085f0:	9300      	str	r3, [sp, #0]
 80085f2:	4643      	mov	r3, r8
 80085f4:	485c      	ldr	r0, [pc, #368]	@ (8008768 <invoke+0x788>)
 80085f6:	e9cd 7709 	strd	r7, r7, [sp, #36]	@ 0x24
 80085fa:	e9cd b507 	strd	fp, r5, [sp, #28]
 80085fe:	f7fb fe69 	bl	80042d4 <convolve_1x1_s8>
depthwise_kernel7x7_stride1_inplace_CHW(&buffer0[0],5,5,240,(const q7_t*) CHWweight25,offsetBias25,offsetRBias25,shift25,multiplier25,-128,128,-128,127,&buffer0[0],5,5,240,sbuf,-128);
 8008602:	2380      	movs	r3, #128	@ 0x80
 8008604:	463a      	mov	r2, r7
 8008606:	4639      	mov	r1, r7
 8008608:	4628      	mov	r0, r5
 800860a:	e9cd 4305 	strd	r4, r3, [sp, #20]
 800860e:	4b5f      	ldr	r3, [pc, #380]	@ (800878c <invoke+0x7ac>)
 8008610:	9304      	str	r3, [sp, #16]
 8008612:	4b5f      	ldr	r3, [pc, #380]	@ (8008790 <invoke+0x7b0>)
 8008614:	9303      	str	r3, [sp, #12]
 8008616:	4b5f      	ldr	r3, [pc, #380]	@ (8008794 <invoke+0x7b4>)
 8008618:	9302      	str	r3, [sp, #8]
 800861a:	4b5f      	ldr	r3, [pc, #380]	@ (8008798 <invoke+0x7b8>)
 800861c:	9301      	str	r3, [sp, #4]
 800861e:	4b5f      	ldr	r3, [pc, #380]	@ (800879c <invoke+0x7bc>)
 8008620:	e9cd 790b 	strd	r7, r9, [sp, #44]	@ 0x2c
 8008624:	e9cd a40d 	strd	sl, r4, [sp, #52]	@ 0x34
 8008628:	e9cd 5709 	strd	r5, r7, [sp, #36]	@ 0x24
 800862c:	e9cd 4b07 	strd	r4, fp, [sp, #28]
 8008630:	9300      	str	r3, [sp, #0]
 8008632:	464b      	mov	r3, r9
 8008634:	f7fe fc82 	bl	8006f3c <depthwise_kernel7x7_stride1_inplace_CHW>
convolve_1x1_s8(&buffer0[0],5,5,240,(const q7_t*) weight26,bias26,shift26,multiplier26,1,128,-128,127,&buffer0[7000],5,5,40,sbuf);
 8008638:	2301      	movs	r3, #1
 800863a:	463a      	mov	r2, r7
 800863c:	4639      	mov	r1, r7
 800863e:	9304      	str	r3, [sp, #16]
 8008640:	2380      	movs	r3, #128	@ 0x80
 8008642:	4628      	mov	r0, r5
 8008644:	9305      	str	r3, [sp, #20]
 8008646:	4b56      	ldr	r3, [pc, #344]	@ (80087a0 <invoke+0x7c0>)
 8008648:	9308      	str	r3, [sp, #32]
 800864a:	4b56      	ldr	r3, [pc, #344]	@ (80087a4 <invoke+0x7c4>)
 800864c:	9303      	str	r3, [sp, #12]
 800864e:	4b56      	ldr	r3, [pc, #344]	@ (80087a8 <invoke+0x7c8>)
 8008650:	9302      	str	r3, [sp, #8]
 8008652:	4b56      	ldr	r3, [pc, #344]	@ (80087ac <invoke+0x7cc>)
 8008654:	9301      	str	r3, [sp, #4]
 8008656:	4b56      	ldr	r3, [pc, #344]	@ (80087b0 <invoke+0x7d0>)
 8008658:	e9cd 8a0b 	strd	r8, sl, [sp, #44]	@ 0x2c
 800865c:	e9cd 7709 	strd	r7, r7, [sp, #36]	@ 0x24
 8008660:	e9cd 4b06 	strd	r4, fp, [sp, #24]
 8008664:	9300      	str	r3, [sp, #0]
 8008666:	464b      	mov	r3, r9
 8008668:	f7fb fe34 	bl	80042d4 <convolve_1x1_s8>
add_fpreq(1000, &buffer0[7000],0.04340619966387749,1,&buffer0[6000],0.0489354208111763,-11,0.04974109306931496,-3,&buffer0[8000]);
 800866c:	494c      	ldr	r1, [pc, #304]	@ (80087a0 <invoke+0x7c0>)
 800866e:	eef8 2a08 	vmov.f32	s5, #136	@ 0xc0400000 -3.0
 8008672:	ed9f 2a50 	vldr	s4, [pc, #320]	@ 80087b4 <invoke+0x7d4>
 8008676:	eefa 1a06 	vmov.f32	s3, #166	@ 0xc1300000 -11.0
 800867a:	ed9f 1a4f 	vldr	s2, [pc, #316]	@ 80087b8 <invoke+0x7d8>
 800867e:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8008682:	ed9f 0a4e 	vldr	s0, [pc, #312]	@ 80087bc <invoke+0x7dc>
 8008686:	f501 737a 	add.w	r3, r1, #1000	@ 0x3e8
 800868a:	f5a1 727a 	sub.w	r2, r1, #1000	@ 0x3e8
 800868e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008692:	f7fb fbab 	bl	8003dec <add_fpreq>
convolve_1x1_s8(&buffer0[8000],5,5,40,(const q7_t*) weight27,bias27,shift27,multiplier27,-128,3,-128,127,&buffer0[0],5,5,240,sbuf);
 8008696:	4a4a      	ldr	r2, [pc, #296]	@ (80087c0 <invoke+0x7e0>)
 8008698:	4643      	mov	r3, r8
 800869a:	4639      	mov	r1, r7
 800869c:	9203      	str	r2, [sp, #12]
 800869e:	f505 50fa 	add.w	r0, r5, #8000	@ 0x1f40
 80086a2:	4a48      	ldr	r2, [pc, #288]	@ (80087c4 <invoke+0x7e4>)
convolve_1x1_s8_ch48(&buffer0[6000],5,5,48,(const q7_t*) weight30,bias30,shift30,multiplier30,-128,-15,-128,127,&buffer0[0],5,5,192,sbuf);
 80086a4:	f04f 08c0 	mov.w	r8, #192	@ 0xc0
convolve_1x1_s8(&buffer0[8000],5,5,40,(const q7_t*) weight27,bias27,shift27,multiplier27,-128,3,-128,127,&buffer0[0],5,5,240,sbuf);
 80086a8:	9404      	str	r4, [sp, #16]
 80086aa:	9202      	str	r2, [sp, #8]
 80086ac:	4a46      	ldr	r2, [pc, #280]	@ (80087c8 <invoke+0x7e8>)
 80086ae:	9201      	str	r2, [sp, #4]
 80086b0:	4a46      	ldr	r2, [pc, #280]	@ (80087cc <invoke+0x7ec>)
 80086b2:	e9cd 9a0b 	strd	r9, sl, [sp, #44]	@ 0x2c
 80086b6:	e9cd 7709 	strd	r7, r7, [sp, #36]	@ 0x24
 80086ba:	e9cd 6405 	strd	r6, r4, [sp, #20]
 80086be:	9200      	str	r2, [sp, #0]
 80086c0:	463a      	mov	r2, r7
 80086c2:	e9cd b507 	strd	fp, r5, [sp, #28]
 80086c6:	f7fb fe05 	bl	80042d4 <convolve_1x1_s8>
depthwise_kernel3x3_stride1_inplace_CHW(&buffer0[0],5,5,240,(const q7_t*) CHWweight28,offsetBias28,offsetRBias28,shift28,multiplier28,-128,128,-128,127,&buffer0[0],5,5,240,sbuf,-128);
 80086ca:	2380      	movs	r3, #128	@ 0x80
 80086cc:	463a      	mov	r2, r7
 80086ce:	4639      	mov	r1, r7
 80086d0:	4628      	mov	r0, r5
 80086d2:	e9cd 4305 	strd	r4, r3, [sp, #20]
 80086d6:	4b3e      	ldr	r3, [pc, #248]	@ (80087d0 <invoke+0x7f0>)
 80086d8:	9304      	str	r3, [sp, #16]
 80086da:	4b3e      	ldr	r3, [pc, #248]	@ (80087d4 <invoke+0x7f4>)
 80086dc:	9303      	str	r3, [sp, #12]
 80086de:	4b3e      	ldr	r3, [pc, #248]	@ (80087d8 <invoke+0x7f8>)
 80086e0:	9302      	str	r3, [sp, #8]
 80086e2:	4b3e      	ldr	r3, [pc, #248]	@ (80087dc <invoke+0x7fc>)
 80086e4:	9301      	str	r3, [sp, #4]
 80086e6:	e07b      	b.n	80087e0 <invoke+0x800>
 80086e8:	08086464 	.word	0x08086464
 80086ec:	080864c4 	.word	0x080864c4
 80086f0:	08086524 	.word	0x08086524
 80086f4:	08086584 	.word	0x08086584
 80086f8:	20004bac 	.word	0x20004bac
 80086fc:	200038ec 	.word	0x200038ec
 8008700:	3d813fea 	.word	0x3d813fea
 8008704:	3d845949 	.word	0x3d845949
 8008708:	08085384 	.word	0x08085384
 800870c:	08085564 	.word	0x08085564
 8008710:	08085744 	.word	0x08085744
 8008714:	08085924 	.word	0x08085924
 8008718:	0808404c 	.word	0x0808404c
 800871c:	0808422c 	.word	0x0808422c
 8008720:	0808440c 	.word	0x0808440c
 8008724:	080845ec 	.word	0x080845ec
 8008728:	080847cc 	.word	0x080847cc
 800872c:	080833ec 	.word	0x080833ec
 8008730:	0808344c 	.word	0x0808344c
 8008734:	080834ac 	.word	0x080834ac
 8008738:	0808350c 	.word	0x0808350c
 800873c:	3d96dbf8 	.word	0x3d96dbf8
 8008740:	3c9ac6bf 	.word	0x3c9ac6bf
 8008744:	08081fac 	.word	0x08081fac
 8008748:	080821ec 	.word	0x080821ec
 800874c:	0808242c 	.word	0x0808242c
 8008750:	0808266c 	.word	0x0808266c
 8008754:	0807fb1c 	.word	0x0807fb1c
 8008758:	0807fd5c 	.word	0x0807fd5c
 800875c:	0807ff9c 	.word	0x0807ff9c
 8008760:	080801dc 	.word	0x080801dc
 8008764:	0808041c 	.word	0x0808041c
 8008768:	2000217c 	.word	0x2000217c
 800876c:	0807e2bc 	.word	0x0807e2bc
 8008770:	0807e35c 	.word	0x0807e35c
 8008774:	0807e3fc 	.word	0x0807e3fc
 8008778:	0807e49c 	.word	0x0807e49c
 800877c:	0807b1fc 	.word	0x0807b1fc
 8008780:	0807b5bc 	.word	0x0807b5bc
 8008784:	0807b97c 	.word	0x0807b97c
 8008788:	0807bd3c 	.word	0x0807bd3c
 800878c:	0807750c 	.word	0x0807750c
 8008790:	080778cc 	.word	0x080778cc
 8008794:	08077c8c 	.word	0x08077c8c
 8008798:	0807804c 	.word	0x0807804c
 800879c:	0807840c 	.word	0x0807840c
 80087a0:	20002564 	.word	0x20002564
 80087a4:	08074dac 	.word	0x08074dac
 80087a8:	08074e4c 	.word	0x08074e4c
 80087ac:	08074eec 	.word	0x08074eec
 80087b0:	08074f8c 	.word	0x08074f8c
 80087b4:	3d4bbd51 	.word	0x3d4bbd51
 80087b8:	3d487082 	.word	0x3d487082
 80087bc:	3d31cab3 	.word	0x3d31cab3
 80087c0:	08071cec 	.word	0x08071cec
 80087c4:	080720ac 	.word	0x080720ac
 80087c8:	0807246c 	.word	0x0807246c
 80087cc:	0807282c 	.word	0x0807282c
 80087d0:	0807057c 	.word	0x0807057c
 80087d4:	0807093c 	.word	0x0807093c
 80087d8:	08070cfc 	.word	0x08070cfc
 80087dc:	080710bc 	.word	0x080710bc
 80087e0:	4bbc      	ldr	r3, [pc, #752]	@ (8008ad4 <invoke+0xaf4>)
 80087e2:	e9cd 790b 	strd	r7, r9, [sp, #44]	@ 0x2c
 80087e6:	e9cd a40d 	strd	sl, r4, [sp, #52]	@ 0x34
 80087ea:	e9cd 5709 	strd	r5, r7, [sp, #36]	@ 0x24
 80087ee:	e9cd 4b07 	strd	r4, fp, [sp, #28]
 80087f2:	9300      	str	r3, [sp, #0]
 80087f4:	464b      	mov	r3, r9
 80087f6:	f7fc fc3b 	bl	8005070 <depthwise_kernel3x3_stride1_inplace_CHW>
convolve_1x1_s8(&buffer0[0],5,5,240,(const q7_t*) weight29,bias29,shift29,multiplier29,15,128,-128,127,&buffer0[6000],5,5,48,sbuf);
 80087fa:	230f      	movs	r3, #15
 80087fc:	4ab6      	ldr	r2, [pc, #728]	@ (8008ad8 <invoke+0xaf8>)
 80087fe:	4639      	mov	r1, r7
 8008800:	9304      	str	r3, [sp, #16]
 8008802:	2330      	movs	r3, #48	@ 0x30
 8008804:	9709      	str	r7, [sp, #36]	@ 0x24
 8008806:	4628      	mov	r0, r5
 8008808:	9406      	str	r4, [sp, #24]
 800880a:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
 800880e:	e9cd 730a 	strd	r7, r3, [sp, #40]	@ 0x28
 8008812:	2380      	movs	r3, #128	@ 0x80
 8008814:	9305      	str	r3, [sp, #20]
 8008816:	4bb1      	ldr	r3, [pc, #708]	@ (8008adc <invoke+0xafc>)
 8008818:	9303      	str	r3, [sp, #12]
 800881a:	4bb1      	ldr	r3, [pc, #708]	@ (8008ae0 <invoke+0xb00>)
 800881c:	9302      	str	r3, [sp, #8]
 800881e:	4bb1      	ldr	r3, [pc, #708]	@ (8008ae4 <invoke+0xb04>)
 8008820:	9301      	str	r3, [sp, #4]
 8008822:	4bb1      	ldr	r3, [pc, #708]	@ (8008ae8 <invoke+0xb08>)
 8008824:	e9cd b207 	strd	fp, r2, [sp, #28]
 8008828:	9300      	str	r3, [sp, #0]
 800882a:	463a      	mov	r2, r7
 800882c:	464b      	mov	r3, r9
 800882e:	f7fb fd51 	bl	80042d4 <convolve_1x1_s8>
convolve_1x1_s8_ch48(&buffer0[6000],5,5,48,(const q7_t*) weight30,bias30,shift30,multiplier30,-128,-15,-128,127,&buffer0[0],5,5,192,sbuf);
 8008832:	f06f 030e 	mvn.w	r3, #14
 8008836:	463a      	mov	r2, r7
 8008838:	4639      	mov	r1, r7
 800883a:	9305      	str	r3, [sp, #20]
 800883c:	4bab      	ldr	r3, [pc, #684]	@ (8008aec <invoke+0xb0c>)
 800883e:	9406      	str	r4, [sp, #24]
 8008840:	9303      	str	r3, [sp, #12]
 8008842:	4bab      	ldr	r3, [pc, #684]	@ (8008af0 <invoke+0xb10>)
 8008844:	9404      	str	r4, [sp, #16]
 8008846:	9302      	str	r3, [sp, #8]
 8008848:	4baa      	ldr	r3, [pc, #680]	@ (8008af4 <invoke+0xb14>)
 800884a:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 800884e:	9301      	str	r3, [sp, #4]
 8008850:	4ba9      	ldr	r3, [pc, #676]	@ (8008af8 <invoke+0xb18>)
 8008852:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
 8008856:	9300      	str	r3, [sp, #0]
 8008858:	2330      	movs	r3, #48	@ 0x30
 800885a:	489f      	ldr	r0, [pc, #636]	@ (8008ad8 <invoke+0xaf8>)
 800885c:	e9cd 7709 	strd	r7, r7, [sp, #36]	@ 0x24
 8008860:	e9cd b507 	strd	fp, r5, [sp, #28]
 8008864:	f7fb fffc 	bl	8004860 <convolve_1x1_s8_ch48>
depthwise_kernel3x3_stride1_inplace_CHW(&buffer0[0],5,5,192,(const q7_t*) CHWweight31,offsetBias31,offsetRBias31,shift31,multiplier31,-128,128,-128,127,&buffer0[0],5,5,192,sbuf,-128);
 8008868:	2380      	movs	r3, #128	@ 0x80
 800886a:	463a      	mov	r2, r7
 800886c:	4639      	mov	r1, r7
 800886e:	4628      	mov	r0, r5
 8008870:	e9cd 4305 	strd	r4, r3, [sp, #20]
 8008874:	4ba1      	ldr	r3, [pc, #644]	@ (8008afc <invoke+0xb1c>)
 8008876:	9304      	str	r3, [sp, #16]
 8008878:	4ba1      	ldr	r3, [pc, #644]	@ (8008b00 <invoke+0xb20>)
 800887a:	9303      	str	r3, [sp, #12]
 800887c:	4ba1      	ldr	r3, [pc, #644]	@ (8008b04 <invoke+0xb24>)
 800887e:	9302      	str	r3, [sp, #8]
 8008880:	4ba1      	ldr	r3, [pc, #644]	@ (8008b08 <invoke+0xb28>)
 8008882:	9301      	str	r3, [sp, #4]
 8008884:	4ba1      	ldr	r3, [pc, #644]	@ (8008b0c <invoke+0xb2c>)
 8008886:	e9cd 780b 	strd	r7, r8, [sp, #44]	@ 0x2c
 800888a:	e9cd a40d 	strd	sl, r4, [sp, #52]	@ 0x34
 800888e:	e9cd 5709 	strd	r5, r7, [sp, #36]	@ 0x24
 8008892:	e9cd 4b07 	strd	r4, fp, [sp, #28]
 8008896:	9300      	str	r3, [sp, #0]
 8008898:	4643      	mov	r3, r8
 800889a:	f7fc fbe9 	bl	8005070 <depthwise_kernel3x3_stride1_inplace_CHW>
convolve_1x1_s8(&buffer0[0],5,5,192,(const q7_t*) weight32,bias32,shift32,multiplier32,-11,128,-128,127,&buffer0[4800],5,5,48,sbuf);
 800889e:	2230      	movs	r2, #48	@ 0x30
 80088a0:	f06f 030a 	mvn.w	r3, #10
 80088a4:	4639      	mov	r1, r7
 80088a6:	9709      	str	r7, [sp, #36]	@ 0x24
 80088a8:	4628      	mov	r0, r5
 80088aa:	9304      	str	r3, [sp, #16]
 80088ac:	4643      	mov	r3, r8
add_fpreq(1200, &buffer0[4800],0.04923376813530922,-11,&buffer0[6000],0.04425579309463501,15,0.05336926504969597,5,&buffer0[7200]);
 80088ae:	f505 58e1 	add.w	r8, r5, #7200	@ 0x1c20
convolve_1x1_s8(&buffer0[0],5,5,192,(const q7_t*) weight32,bias32,shift32,multiplier32,-11,128,-128,127,&buffer0[4800],5,5,48,sbuf);
 80088b2:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
 80088b6:	e9cd 720a 	strd	r7, r2, [sp, #40]	@ 0x28
 80088ba:	2280      	movs	r2, #128	@ 0x80
 80088bc:	9205      	str	r2, [sp, #20]
 80088be:	f505 5296 	add.w	r2, r5, #4800	@ 0x12c0
 80088c2:	9208      	str	r2, [sp, #32]
 80088c4:	4a92      	ldr	r2, [pc, #584]	@ (8008b10 <invoke+0xb30>)
 80088c6:	9203      	str	r2, [sp, #12]
 80088c8:	4a92      	ldr	r2, [pc, #584]	@ (8008b14 <invoke+0xb34>)
 80088ca:	9202      	str	r2, [sp, #8]
 80088cc:	4a92      	ldr	r2, [pc, #584]	@ (8008b18 <invoke+0xb38>)
 80088ce:	9201      	str	r2, [sp, #4]
 80088d0:	4a92      	ldr	r2, [pc, #584]	@ (8008b1c <invoke+0xb3c>)
 80088d2:	e9cd 4b06 	strd	r4, fp, [sp, #24]
 80088d6:	9200      	str	r2, [sp, #0]
 80088d8:	463a      	mov	r2, r7
 80088da:	f7fb fcfb 	bl	80042d4 <convolve_1x1_s8>
add_fpreq(1200, &buffer0[4800],0.04923376813530922,-11,&buffer0[6000],0.04425579309463501,15,0.05336926504969597,5,&buffer0[7200]);
 80088de:	f5a8 6296 	sub.w	r2, r8, #1200	@ 0x4b0
 80088e2:	eef1 2a04 	vmov.f32	s5, #20	@ 0x40a00000  5.0
 80088e6:	ed9f 2a8e 	vldr	s4, [pc, #568]	@ 8008b20 <invoke+0xb40>
 80088ea:	eef2 1a0e 	vmov.f32	s3, #46	@ 0x41700000  15.0
 80088ee:	ed9f 1a8d 	vldr	s2, [pc, #564]	@ 8008b24 <invoke+0xb44>
 80088f2:	eefa 0a06 	vmov.f32	s1, #166	@ 0xc1300000 -11.0
 80088f6:	ed9f 0a8c 	vldr	s0, [pc, #560]	@ 8008b28 <invoke+0xb48>
 80088fa:	f5a2 6196 	sub.w	r1, r2, #1200	@ 0x4b0
 80088fe:	4643      	mov	r3, r8
 8008900:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8008904:	f7fb fa72 	bl	8003dec <add_fpreq>
convolve_1x1_s8_ch48(&buffer0[7200],5,5,48,(const q7_t*) weight33,bias33,shift33,multiplier33,-128,-5,-128,127,&buffer0[0],5,5,240,sbuf);
 8008908:	f06f 0204 	mvn.w	r2, #4
 800890c:	4639      	mov	r1, r7
 800890e:	9406      	str	r4, [sp, #24]
 8008910:	9205      	str	r2, [sp, #20]
 8008912:	2330      	movs	r3, #48	@ 0x30
 8008914:	4a85      	ldr	r2, [pc, #532]	@ (8008b2c <invoke+0xb4c>)
 8008916:	4640      	mov	r0, r8
 8008918:	9404      	str	r4, [sp, #16]
convolve_1x1_s8(&buffer0[0],3,3,240,(const q7_t*) weight35,bias35,shift35,multiplier35,-7,128,-128,127,&buffer0[4320],3,3,96,sbuf);
 800891a:	f505 5887 	add.w	r8, r5, #4320	@ 0x10e0
convolve_1x1_s8_ch48(&buffer0[7200],5,5,48,(const q7_t*) weight33,bias33,shift33,multiplier33,-128,-5,-128,127,&buffer0[0],5,5,240,sbuf);
 800891e:	9203      	str	r2, [sp, #12]
 8008920:	4a83      	ldr	r2, [pc, #524]	@ (8008b30 <invoke+0xb50>)
 8008922:	9202      	str	r2, [sp, #8]
 8008924:	4a83      	ldr	r2, [pc, #524]	@ (8008b34 <invoke+0xb54>)
 8008926:	9201      	str	r2, [sp, #4]
 8008928:	4a83      	ldr	r2, [pc, #524]	@ (8008b38 <invoke+0xb58>)
 800892a:	e9cd 9a0b 	strd	r9, sl, [sp, #44]	@ 0x2c
 800892e:	e9cd 7709 	strd	r7, r7, [sp, #36]	@ 0x24
 8008932:	9200      	str	r2, [sp, #0]
 8008934:	463a      	mov	r2, r7
 8008936:	e9cd b507 	strd	fp, r5, [sp, #28]
 800893a:	f7fb ff91 	bl	8004860 <convolve_1x1_s8_ch48>
depthwise_kernel5x5_stride2_inplace_CHW(&buffer0[0],5,5,240,(const q7_t*) CHWweight34,offsetBias34,offsetRBias34,shift34,multiplier34,-128,128,-128,127,&buffer0[0],3,3,240,sbuf,-128);
 800893e:	2380      	movs	r3, #128	@ 0x80
 8008940:	463a      	mov	r2, r7
 8008942:	4639      	mov	r1, r7
 8008944:	4628      	mov	r0, r5
convolve_1x1_s8(&buffer0[0],3,3,240,(const q7_t*) weight35,bias35,shift35,multiplier35,-7,128,-128,127,&buffer0[4320],3,3,96,sbuf);
 8008946:	2760      	movs	r7, #96	@ 0x60
depthwise_kernel5x5_stride2_inplace_CHW(&buffer0[0],5,5,240,(const q7_t*) CHWweight34,offsetBias34,offsetRBias34,shift34,multiplier34,-128,128,-128,127,&buffer0[0],3,3,240,sbuf,-128);
 8008948:	e9cd 4305 	strd	r4, r3, [sp, #20]
 800894c:	4b7b      	ldr	r3, [pc, #492]	@ (8008b3c <invoke+0xb5c>)
 800894e:	9304      	str	r3, [sp, #16]
 8008950:	4b7b      	ldr	r3, [pc, #492]	@ (8008b40 <invoke+0xb60>)
 8008952:	9303      	str	r3, [sp, #12]
 8008954:	4b7b      	ldr	r3, [pc, #492]	@ (8008b44 <invoke+0xb64>)
 8008956:	9302      	str	r3, [sp, #8]
 8008958:	4b7b      	ldr	r3, [pc, #492]	@ (8008b48 <invoke+0xb68>)
 800895a:	9301      	str	r3, [sp, #4]
 800895c:	4b7b      	ldr	r3, [pc, #492]	@ (8008b4c <invoke+0xb6c>)
 800895e:	e9cd a40d 	strd	sl, r4, [sp, #52]	@ 0x34
 8008962:	e9cd 690b 	strd	r6, r9, [sp, #44]	@ 0x2c
 8008966:	e9cd 4b07 	strd	r4, fp, [sp, #28]
 800896a:	9300      	str	r3, [sp, #0]
 800896c:	464b      	mov	r3, r9
 800896e:	e9cd 5609 	strd	r5, r6, [sp, #36]	@ 0x24
 8008972:	f7fd fcc7 	bl	8006304 <depthwise_kernel5x5_stride2_inplace_CHW>
convolve_1x1_s8(&buffer0[0],3,3,240,(const q7_t*) weight35,bias35,shift35,multiplier35,-7,128,-128,127,&buffer0[4320],3,3,96,sbuf);
 8008976:	2280      	movs	r2, #128	@ 0x80
 8008978:	464b      	mov	r3, r9
 800897a:	4631      	mov	r1, r6
 800897c:	9205      	str	r2, [sp, #20]
 800897e:	f06f 0206 	mvn.w	r2, #6
 8008982:	970b      	str	r7, [sp, #44]	@ 0x2c
 8008984:	4628      	mov	r0, r5
 8008986:	9204      	str	r2, [sp, #16]
convolve_1x1_s8(&buffer0[4320],3,3,96,(const q7_t*) weight36,bias36,shift36,multiplier36,-128,7,-128,127,&buffer0[0],3,3,480,sbuf);
 8008988:	f44f 79f0 	mov.w	r9, #480	@ 0x1e0
convolve_1x1_s8(&buffer0[0],3,3,240,(const q7_t*) weight35,bias35,shift35,multiplier35,-7,128,-128,127,&buffer0[4320],3,3,96,sbuf);
 800898c:	4a70      	ldr	r2, [pc, #448]	@ (8008b50 <invoke+0xb70>)
 800898e:	f8cd 8020 	str.w	r8, [sp, #32]
 8008992:	9203      	str	r2, [sp, #12]
 8008994:	4a6f      	ldr	r2, [pc, #444]	@ (8008b54 <invoke+0xb74>)
 8008996:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
 800899a:	9202      	str	r2, [sp, #8]
 800899c:	4a6e      	ldr	r2, [pc, #440]	@ (8008b58 <invoke+0xb78>)
 800899e:	9201      	str	r2, [sp, #4]
 80089a0:	4a6e      	ldr	r2, [pc, #440]	@ (8008b5c <invoke+0xb7c>)
 80089a2:	e9cd 4b06 	strd	r4, fp, [sp, #24]
 80089a6:	9200      	str	r2, [sp, #0]
 80089a8:	4632      	mov	r2, r6
 80089aa:	e9cd 6609 	strd	r6, r6, [sp, #36]	@ 0x24
 80089ae:	f7fb fc91 	bl	80042d4 <convolve_1x1_s8>
convolve_1x1_s8(&buffer0[4320],3,3,96,(const q7_t*) weight36,bias36,shift36,multiplier36,-128,7,-128,127,&buffer0[0],3,3,480,sbuf);
 80089b2:	2307      	movs	r3, #7
 80089b4:	4632      	mov	r2, r6
 80089b6:	4631      	mov	r1, r6
 80089b8:	9305      	str	r3, [sp, #20]
 80089ba:	4640      	mov	r0, r8
 80089bc:	4b68      	ldr	r3, [pc, #416]	@ (8008b60 <invoke+0xb80>)
 80089be:	9406      	str	r4, [sp, #24]
 80089c0:	9303      	str	r3, [sp, #12]
 80089c2:	4b68      	ldr	r3, [pc, #416]	@ (8008b64 <invoke+0xb84>)
 80089c4:	9404      	str	r4, [sp, #16]
 80089c6:	9302      	str	r3, [sp, #8]
 80089c8:	4b67      	ldr	r3, [pc, #412]	@ (8008b68 <invoke+0xb88>)
 80089ca:	f8cd 902c 	str.w	r9, [sp, #44]	@ 0x2c
 80089ce:	9301      	str	r3, [sp, #4]
 80089d0:	4b66      	ldr	r3, [pc, #408]	@ (8008b6c <invoke+0xb8c>)
 80089d2:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
 80089d6:	9300      	str	r3, [sp, #0]
 80089d8:	463b      	mov	r3, r7
 80089da:	e9cd 6609 	strd	r6, r6, [sp, #36]	@ 0x24
 80089de:	e9cd b507 	strd	fp, r5, [sp, #28]
 80089e2:	f7fb fc77 	bl	80042d4 <convolve_1x1_s8>
depthwise_kernel3x3_stride1_inplace_CHW(&buffer0[0],3,3,480,(const q7_t*) CHWweight37,offsetBias37,offsetRBias37,shift37,multiplier37,-128,128,-128,127,&buffer0[0],3,3,480,sbuf,-128);
 80089e6:	2380      	movs	r3, #128	@ 0x80
 80089e8:	4632      	mov	r2, r6
 80089ea:	4631      	mov	r1, r6
 80089ec:	4628      	mov	r0, r5
 80089ee:	e9cd 4305 	strd	r4, r3, [sp, #20]
 80089f2:	4b5f      	ldr	r3, [pc, #380]	@ (8008b70 <invoke+0xb90>)
 80089f4:	9304      	str	r3, [sp, #16]
 80089f6:	4b5f      	ldr	r3, [pc, #380]	@ (8008b74 <invoke+0xb94>)
 80089f8:	9303      	str	r3, [sp, #12]
 80089fa:	4b5f      	ldr	r3, [pc, #380]	@ (8008b78 <invoke+0xb98>)
 80089fc:	9302      	str	r3, [sp, #8]
 80089fe:	4b5f      	ldr	r3, [pc, #380]	@ (8008b7c <invoke+0xb9c>)
 8008a00:	9301      	str	r3, [sp, #4]
 8008a02:	4b5f      	ldr	r3, [pc, #380]	@ (8008b80 <invoke+0xba0>)
 8008a04:	e9cd a40d 	strd	sl, r4, [sp, #52]	@ 0x34
 8008a08:	e9cd 690b 	strd	r6, r9, [sp, #44]	@ 0x2c
 8008a0c:	e9cd 4b07 	strd	r4, fp, [sp, #28]
 8008a10:	9300      	str	r3, [sp, #0]
 8008a12:	464b      	mov	r3, r9
 8008a14:	e9cd 5609 	strd	r5, r6, [sp, #36]	@ 0x24
 8008a18:	f7fc fb2a 	bl	8005070 <depthwise_kernel3x3_stride1_inplace_CHW>
convolve_1x1_s8(&buffer0[0],3,3,480,(const q7_t*) weight38,bias38,shift38,multiplier38,-2,128,-128,127,&buffer0[5184],3,3,96,sbuf);
 8008a1c:	2280      	movs	r2, #128	@ 0x80
 8008a1e:	464b      	mov	r3, r9
 8008a20:	f505 59a2 	add.w	r9, r5, #5184	@ 0x1440
 8008a24:	9205      	str	r2, [sp, #20]
 8008a26:	f06f 0201 	mvn.w	r2, #1
 8008a2a:	4631      	mov	r1, r6
 8008a2c:	f8cd 9020 	str.w	r9, [sp, #32]
 8008a30:	9204      	str	r2, [sp, #16]
 8008a32:	4628      	mov	r0, r5
 8008a34:	4a53      	ldr	r2, [pc, #332]	@ (8008b84 <invoke+0xba4>)
 8008a36:	9203      	str	r2, [sp, #12]
 8008a38:	4a53      	ldr	r2, [pc, #332]	@ (8008b88 <invoke+0xba8>)
 8008a3a:	9202      	str	r2, [sp, #8]
 8008a3c:	4a53      	ldr	r2, [pc, #332]	@ (8008b8c <invoke+0xbac>)
 8008a3e:	9201      	str	r2, [sp, #4]
 8008a40:	4a53      	ldr	r2, [pc, #332]	@ (8008b90 <invoke+0xbb0>)
 8008a42:	e9cd 7a0b 	strd	r7, sl, [sp, #44]	@ 0x2c
 8008a46:	e9cd 4b06 	strd	r4, fp, [sp, #24]
 8008a4a:	9200      	str	r2, [sp, #0]
 8008a4c:	4632      	mov	r2, r6
 8008a4e:	e9cd 6609 	strd	r6, r6, [sp, #36]	@ 0x24
 8008a52:	f7fb fc3f 	bl	80042d4 <convolve_1x1_s8>
add_fpreq(864, &buffer0[5184],0.04011229798197746,-2,&buffer0[4320],0.042191825807094574,-7,0.03923744335770607,-9,&buffer0[3456]);
 8008a56:	eeb0 2a48 	vmov.f32	s4, s16
 8008a5a:	eefa 2a02 	vmov.f32	s5, #162	@ 0xc1100000 -9.0
 8008a5e:	ed9f 1a4d 	vldr	s2, [pc, #308]	@ 8008b94 <invoke+0xbb4>
 8008a62:	eef9 1a0c 	vmov.f32	s3, #156	@ 0xc0e00000 -7.0
 8008a66:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 8008b98 <invoke+0xbb8>
 8008a6a:	eef8 0a00 	vmov.f32	s1, #128	@ 0xc0000000 -2.0
 8008a6e:	4649      	mov	r1, r9
 8008a70:	f5a9 63d8 	sub.w	r3, r9, #1728	@ 0x6c0
 8008a74:	4642      	mov	r2, r8
 8008a76:	f44f 7058 	mov.w	r0, #864	@ 0x360
/* layer 41:CONV_2D */
convolve_1x1_s8(&buffer0[3456],3,3,96,(const q7_t*) weight39,bias39,shift39,multiplier39,-128,9,-128,127,&buffer0[0],3,3,384,sbuf);
 8008a7a:	f44f 79c0 	mov.w	r9, #384	@ 0x180
add_fpreq(864, &buffer0[5184],0.04011229798197746,-2,&buffer0[4320],0.042191825807094574,-7,0.03923744335770607,-9,&buffer0[3456]);
 8008a7e:	f7fb f9b5 	bl	8003dec <add_fpreq>
convolve_1x1_s8(&buffer0[3456],3,3,96,(const q7_t*) weight39,bias39,shift39,multiplier39,-128,9,-128,127,&buffer0[0],3,3,384,sbuf);
 8008a82:	2309      	movs	r3, #9
 8008a84:	4632      	mov	r2, r6
 8008a86:	4631      	mov	r1, r6
 8008a88:	9305      	str	r3, [sp, #20]
 8008a8a:	f505 6058 	add.w	r0, r5, #3456	@ 0xd80
 8008a8e:	4b43      	ldr	r3, [pc, #268]	@ (8008b9c <invoke+0xbbc>)
 8008a90:	9406      	str	r4, [sp, #24]
 8008a92:	9303      	str	r3, [sp, #12]
 8008a94:	4b42      	ldr	r3, [pc, #264]	@ (8008ba0 <invoke+0xbc0>)
 8008a96:	9404      	str	r4, [sp, #16]
 8008a98:	9302      	str	r3, [sp, #8]
 8008a9a:	4b42      	ldr	r3, [pc, #264]	@ (8008ba4 <invoke+0xbc4>)
 8008a9c:	f8cd 902c 	str.w	r9, [sp, #44]	@ 0x2c
 8008aa0:	9301      	str	r3, [sp, #4]
 8008aa2:	4b41      	ldr	r3, [pc, #260]	@ (8008ba8 <invoke+0xbc8>)
 8008aa4:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
 8008aa8:	9300      	str	r3, [sp, #0]
 8008aaa:	463b      	mov	r3, r7
 8008aac:	e9cd 6609 	strd	r6, r6, [sp, #36]	@ 0x24
 8008ab0:	e9cd b507 	strd	fp, r5, [sp, #28]
 8008ab4:	f7fb fc0e 	bl	80042d4 <convolve_1x1_s8>
/* layer 42:DEPTHWISE_CONV_2D */
depthwise_kernel3x3_stride1_inplace_CHW(&buffer0[0],3,3,384,(const q7_t*) CHWweight40,offsetBias40,offsetRBias40,shift40,multiplier40,-128,128,-128,127,&buffer0[0],3,3,384,sbuf,-128);
 8008ab8:	2380      	movs	r3, #128	@ 0x80
 8008aba:	4632      	mov	r2, r6
 8008abc:	4631      	mov	r1, r6
 8008abe:	4628      	mov	r0, r5
 8008ac0:	e9cd 4305 	strd	r4, r3, [sp, #20]
 8008ac4:	4b39      	ldr	r3, [pc, #228]	@ (8008bac <invoke+0xbcc>)
 8008ac6:	9304      	str	r3, [sp, #16]
 8008ac8:	4b39      	ldr	r3, [pc, #228]	@ (8008bb0 <invoke+0xbd0>)
 8008aca:	9303      	str	r3, [sp, #12]
 8008acc:	4b39      	ldr	r3, [pc, #228]	@ (8008bb4 <invoke+0xbd4>)
 8008ace:	9302      	str	r3, [sp, #8]
 8008ad0:	e072      	b.n	8008bb8 <invoke+0xbd8>
 8008ad2:	bf00      	nop
 8008ad4:	0807147c 	.word	0x0807147c
 8008ad8:	2000217c 	.word	0x2000217c
 8008adc:	0806d63c 	.word	0x0806d63c
 8008ae0:	0806d6fc 	.word	0x0806d6fc
 8008ae4:	0806d7bc 	.word	0x0806d7bc
 8008ae8:	0806d87c 	.word	0x0806d87c
 8008aec:	0806a93c 	.word	0x0806a93c
 8008af0:	0806ac3c 	.word	0x0806ac3c
 8008af4:	0806af3c 	.word	0x0806af3c
 8008af8:	0806b23c 	.word	0x0806b23c
 8008afc:	0806967c 	.word	0x0806967c
 8008b00:	0806997c 	.word	0x0806997c
 8008b04:	08069c7c 	.word	0x08069c7c
 8008b08:	08069f7c 	.word	0x08069f7c
 8008b0c:	0806a27c 	.word	0x0806a27c
 8008b10:	0806703c 	.word	0x0806703c
 8008b14:	080670fc 	.word	0x080670fc
 8008b18:	080671bc 	.word	0x080671bc
 8008b1c:	0806727c 	.word	0x0806727c
 8008b20:	3d5a99bb 	.word	0x3d5a99bb
 8008b24:	3d354590 	.word	0x3d354590
 8008b28:	3d49a959 	.word	0x3d49a959
 8008b2c:	080637fc 	.word	0x080637fc
 8008b30:	08063bbc 	.word	0x08063bbc
 8008b34:	08063f7c 	.word	0x08063f7c
 8008b38:	0806433c 	.word	0x0806433c
 8008b3c:	0806118c 	.word	0x0806118c
 8008b40:	0806154c 	.word	0x0806154c
 8008b44:	0806190c 	.word	0x0806190c
 8008b48:	08061ccc 	.word	0x08061ccc
 8008b4c:	0806208c 	.word	0x0806208c
 8008b50:	0805b30c 	.word	0x0805b30c
 8008b54:	0805b48c 	.word	0x0805b48c
 8008b58:	0805b60c 	.word	0x0805b60c
 8008b5c:	0805b78c 	.word	0x0805b78c
 8008b60:	0804e88c 	.word	0x0804e88c
 8008b64:	0804f00c 	.word	0x0804f00c
 8008b68:	0804f78c 	.word	0x0804f78c
 8008b6c:	0804ff0c 	.word	0x0804ff0c
 8008b70:	0804b9ac 	.word	0x0804b9ac
 8008b74:	0804c12c 	.word	0x0804c12c
 8008b78:	0804c8ac 	.word	0x0804c8ac
 8008b7c:	0804d02c 	.word	0x0804d02c
 8008b80:	0804d7ac 	.word	0x0804d7ac
 8008b84:	0804012c 	.word	0x0804012c
 8008b88:	080402ac 	.word	0x080402ac
 8008b8c:	0804042c 	.word	0x0804042c
 8008b90:	080405ac 	.word	0x080405ac
 8008b94:	3d2cd156 	.word	0x3d2cd156
 8008b98:	3d244ccb 	.word	0x3d244ccb
 8008b9c:	08035f2c 	.word	0x08035f2c
 8008ba0:	0803652c 	.word	0x0803652c
 8008ba4:	08036b2c 	.word	0x08036b2c
 8008ba8:	0803712c 	.word	0x0803712c
 8008bac:	080339ac 	.word	0x080339ac
 8008bb0:	08033fac 	.word	0x08033fac
 8008bb4:	080345ac 	.word	0x080345ac
 8008bb8:	4b62      	ldr	r3, [pc, #392]	@ (8008d44 <invoke+0xd64>)
 8008bba:	9301      	str	r3, [sp, #4]
 8008bbc:	4b62      	ldr	r3, [pc, #392]	@ (8008d48 <invoke+0xd68>)
 8008bbe:	e9cd a40d 	strd	sl, r4, [sp, #52]	@ 0x34
 8008bc2:	e9cd 690b 	strd	r6, r9, [sp, #44]	@ 0x2c
 8008bc6:	e9cd 4b07 	strd	r4, fp, [sp, #28]
 8008bca:	9300      	str	r3, [sp, #0]
 8008bcc:	464b      	mov	r3, r9
 8008bce:	e9cd 5609 	strd	r5, r6, [sp, #36]	@ 0x24
 8008bd2:	f7fc fa4d 	bl	8005070 <depthwise_kernel3x3_stride1_inplace_CHW>
/* layer 43:CONV_2D */
convolve_1x1_s8(&buffer0[0],3,3,384,(const q7_t*) weight41,bias41,shift41,multiplier41,-6,128,-128,127,&buffer0[4320],3,3,96,sbuf);
 8008bd6:	f04f 0c80 	mov.w	ip, #128	@ 0x80
 8008bda:	f06f 0205 	mvn.w	r2, #5
 8008bde:	464b      	mov	r3, r9
/* layer 44:ADD */
add_fpreq(864, &buffer0[4320],0.019318707287311554,-6,&buffer0[3456],0.03923744335770607,-9,0.0419764444231987,-12,&buffer0[2592]);
 8008be0:	f505 6922 	add.w	r9, r5, #2592	@ 0xa20
convolve_1x1_s8(&buffer0[0],3,3,384,(const q7_t*) weight41,bias41,shift41,multiplier41,-6,128,-128,127,&buffer0[4320],3,3,96,sbuf);
 8008be4:	4631      	mov	r1, r6
 8008be6:	9406      	str	r4, [sp, #24]
 8008be8:	4628      	mov	r0, r5
 8008bea:	e9cd 2c04 	strd	r2, ip, [sp, #16]
 8008bee:	4a57      	ldr	r2, [pc, #348]	@ (8008d4c <invoke+0xd6c>)
 8008bf0:	9203      	str	r2, [sp, #12]
 8008bf2:	4a57      	ldr	r2, [pc, #348]	@ (8008d50 <invoke+0xd70>)
 8008bf4:	9202      	str	r2, [sp, #8]
 8008bf6:	4a57      	ldr	r2, [pc, #348]	@ (8008d54 <invoke+0xd74>)
 8008bf8:	9201      	str	r2, [sp, #4]
 8008bfa:	4a57      	ldr	r2, [pc, #348]	@ (8008d58 <invoke+0xd78>)
 8008bfc:	e9cd 7a0b 	strd	r7, sl, [sp, #44]	@ 0x2c
 8008c00:	e9cd b807 	strd	fp, r8, [sp, #28]
 8008c04:	9200      	str	r2, [sp, #0]
 8008c06:	4632      	mov	r2, r6
 8008c08:	e9cd 6609 	strd	r6, r6, [sp, #36]	@ 0x24
 8008c0c:	f7fb fb62 	bl	80042d4 <convolve_1x1_s8>
add_fpreq(864, &buffer0[4320],0.019318707287311554,-6,&buffer0[3456],0.03923744335770607,-9,0.0419764444231987,-12,&buffer0[2592]);
 8008c10:	eefa 2a08 	vmov.f32	s5, #168	@ 0xc1400000 -12.0
 8008c14:	eefa 1a02 	vmov.f32	s3, #162	@ 0xc1100000 -9.0
 8008c18:	ed9f 2a50 	vldr	s4, [pc, #320]	@ 8008d5c <invoke+0xd7c>
 8008c1c:	eef9 0a08 	vmov.f32	s1, #152	@ 0xc0c00000 -6.0
 8008c20:	ed9f 0a4f 	vldr	s0, [pc, #316]	@ 8008d60 <invoke+0xd80>
 8008c24:	eeb0 1a48 	vmov.f32	s2, s16
 8008c28:	f505 6258 	add.w	r2, r5, #3456	@ 0xd80
 8008c2c:	4641      	mov	r1, r8
 8008c2e:	464b      	mov	r3, r9
 8008c30:	f44f 7058 	mov.w	r0, #864	@ 0x360
/* layer 45:CONV_2D */
convolve_1x1_s8(&buffer0[2592],3,3,96,(const q7_t*) weight42,bias42,shift42,multiplier42,-128,12,-128,127,&buffer0[0],3,3,288,sbuf);
/* layer 46:DEPTHWISE_CONV_2D */
depthwise_kernel7x7_stride1_inplace_CHW(&buffer0[0],3,3,288,(const q7_t*) CHWweight43,offsetBias43,offsetRBias43,shift43,multiplier43,-128,128,-128,127,&buffer0[0],3,3,288,sbuf,-128);
/* layer 47:CONV_2D */
convolve_1x1_s8(&buffer0[0],3,3,288,(const q7_t*) weight44,bias44,shift44,multiplier44,9,128,-128,127,&buffer0[2592],3,3,160,sbuf);
 8008c34:	f04f 08a0 	mov.w	r8, #160	@ 0xa0
add_fpreq(864, &buffer0[4320],0.019318707287311554,-6,&buffer0[3456],0.03923744335770607,-9,0.0419764444231987,-12,&buffer0[2592]);
 8008c38:	f7fb f8d8 	bl	8003dec <add_fpreq>
convolve_1x1_s8(&buffer0[2592],3,3,96,(const q7_t*) weight42,bias42,shift42,multiplier42,-128,12,-128,127,&buffer0[0],3,3,288,sbuf);
 8008c3c:	220c      	movs	r2, #12
 8008c3e:	463b      	mov	r3, r7
 8008c40:	f44f 7790 	mov.w	r7, #288	@ 0x120
 8008c44:	9205      	str	r2, [sp, #20]
 8008c46:	4631      	mov	r1, r6
 8008c48:	4a46      	ldr	r2, [pc, #280]	@ (8008d64 <invoke+0xd84>)
 8008c4a:	4648      	mov	r0, r9
 8008c4c:	9406      	str	r4, [sp, #24]
 8008c4e:	9203      	str	r2, [sp, #12]
 8008c50:	4a45      	ldr	r2, [pc, #276]	@ (8008d68 <invoke+0xd88>)
 8008c52:	9404      	str	r4, [sp, #16]
 8008c54:	9202      	str	r2, [sp, #8]
 8008c56:	4a45      	ldr	r2, [pc, #276]	@ (8008d6c <invoke+0xd8c>)
 8008c58:	970b      	str	r7, [sp, #44]	@ 0x2c
 8008c5a:	9201      	str	r2, [sp, #4]
 8008c5c:	4a44      	ldr	r2, [pc, #272]	@ (8008d70 <invoke+0xd90>)
 8008c5e:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
 8008c62:	9200      	str	r2, [sp, #0]
 8008c64:	4632      	mov	r2, r6
 8008c66:	e9cd 6609 	strd	r6, r6, [sp, #36]	@ 0x24
 8008c6a:	e9cd b507 	strd	fp, r5, [sp, #28]
 8008c6e:	f7fb fb31 	bl	80042d4 <convolve_1x1_s8>
depthwise_kernel7x7_stride1_inplace_CHW(&buffer0[0],3,3,288,(const q7_t*) CHWweight43,offsetBias43,offsetRBias43,shift43,multiplier43,-128,128,-128,127,&buffer0[0],3,3,288,sbuf,-128);
 8008c72:	2380      	movs	r3, #128	@ 0x80
 8008c74:	4632      	mov	r2, r6
 8008c76:	4631      	mov	r1, r6
 8008c78:	4628      	mov	r0, r5
 8008c7a:	e9cd 4305 	strd	r4, r3, [sp, #20]
 8008c7e:	4b3d      	ldr	r3, [pc, #244]	@ (8008d74 <invoke+0xd94>)
 8008c80:	9304      	str	r3, [sp, #16]
 8008c82:	4b3d      	ldr	r3, [pc, #244]	@ (8008d78 <invoke+0xd98>)
 8008c84:	9303      	str	r3, [sp, #12]
 8008c86:	4b3d      	ldr	r3, [pc, #244]	@ (8008d7c <invoke+0xd9c>)
 8008c88:	9302      	str	r3, [sp, #8]
 8008c8a:	4b3d      	ldr	r3, [pc, #244]	@ (8008d80 <invoke+0xda0>)
 8008c8c:	9301      	str	r3, [sp, #4]
 8008c8e:	4b3d      	ldr	r3, [pc, #244]	@ (8008d84 <invoke+0xda4>)
 8008c90:	e9cd a40d 	strd	sl, r4, [sp, #52]	@ 0x34
 8008c94:	e9cd 670b 	strd	r6, r7, [sp, #44]	@ 0x2c
 8008c98:	e9cd 4b07 	strd	r4, fp, [sp, #28]
 8008c9c:	9300      	str	r3, [sp, #0]
 8008c9e:	463b      	mov	r3, r7
 8008ca0:	e9cd 5609 	strd	r5, r6, [sp, #36]	@ 0x24
 8008ca4:	f7fe f94a 	bl	8006f3c <depthwise_kernel7x7_stride1_inplace_CHW>
convolve_1x1_s8(&buffer0[0],3,3,288,(const q7_t*) weight44,bias44,shift44,multiplier44,9,128,-128,127,&buffer0[2592],3,3,160,sbuf);
 8008ca8:	4a37      	ldr	r2, [pc, #220]	@ (8008d88 <invoke+0xda8>)
 8008caa:	f04f 0e80 	mov.w	lr, #128	@ 0x80
 8008cae:	2309      	movs	r3, #9
 8008cb0:	9203      	str	r2, [sp, #12]
 8008cb2:	4631      	mov	r1, r6
 8008cb4:	4a35      	ldr	r2, [pc, #212]	@ (8008d8c <invoke+0xdac>)
 8008cb6:	4628      	mov	r0, r5
 8008cb8:	9406      	str	r4, [sp, #24]
 8008cba:	9202      	str	r2, [sp, #8]
 8008cbc:	4a34      	ldr	r2, [pc, #208]	@ (8008d90 <invoke+0xdb0>)
 8008cbe:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
 8008cc2:	9201      	str	r2, [sp, #4]
 8008cc4:	4a33      	ldr	r2, [pc, #204]	@ (8008d94 <invoke+0xdb4>)
 8008cc6:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 8008cca:	9200      	str	r2, [sp, #0]
 8008ccc:	4632      	mov	r2, r6
 8008cce:	e9cd 3e04 	strd	r3, lr, [sp, #16]
 8008cd2:	463b      	mov	r3, r7
/* layer 48:AVERAGE_POOL_2D */
avg_pooling(&buffer0[2592],3,3,160,3,3,1,1,-128,127,&buffer0[0]);
 8008cd4:	2701      	movs	r7, #1
convolve_1x1_s8(&buffer0[0],3,3,288,(const q7_t*) weight44,bias44,shift44,multiplier44,9,128,-128,127,&buffer0[2592],3,3,160,sbuf);
 8008cd6:	e9cd 6609 	strd	r6, r6, [sp, #36]	@ 0x24
 8008cda:	e9cd b907 	strd	fp, r9, [sp, #28]
 8008cde:	f7fb faf9 	bl	80042d4 <convolve_1x1_s8>
avg_pooling(&buffer0[2592],3,3,160,3,3,1,1,-128,127,&buffer0[0]);
 8008ce2:	4643      	mov	r3, r8
 8008ce4:	4632      	mov	r2, r6
 8008ce6:	4631      	mov	r1, r6
 8008ce8:	4648      	mov	r0, r9
 8008cea:	9600      	str	r6, [sp, #0]
 8008cec:	e9cd 7403 	strd	r7, r4, [sp, #12]
 8008cf0:	e9cd b505 	strd	fp, r5, [sp, #20]
 8008cf4:	e9cd 6701 	strd	r6, r7, [sp, #4]
 8008cf8:	f7fb fa74 	bl	80041e4 <avg_pooling>
/* layer 49:CONV_2D */
convolve_1x1_s8(&buffer0[0],1,1,160,(const q7_t*) weight45,bias45,shift45,multiplier45,-1,-9,-128,127,&buffer0[160],1,1,2,sbuf);
 8008cfc:	f06f 0208 	mvn.w	r2, #8
 8008d00:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8008d04:	4643      	mov	r3, r8
 8008d06:	4824      	ldr	r0, [pc, #144]	@ (8008d98 <invoke+0xdb8>)
 8008d08:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
 8008d0c:	9000      	str	r0, [sp, #0]
 8008d0e:	2002      	movs	r0, #2
 8008d10:	f8cd b01c 	str.w	fp, [sp, #28]
 8008d14:	900b      	str	r0, [sp, #44]	@ 0x2c
 8008d16:	4628      	mov	r0, r5
 8008d18:	e9cd 2405 	strd	r2, r4, [sp, #20]
 8008d1c:	4a1f      	ldr	r2, [pc, #124]	@ (8008d9c <invoke+0xdbc>)
 8008d1e:	18ec      	adds	r4, r5, r3
 8008d20:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8008d24:	491e      	ldr	r1, [pc, #120]	@ (8008da0 <invoke+0xdc0>)
 8008d26:	4a1f      	ldr	r2, [pc, #124]	@ (8008da4 <invoke+0xdc4>)
 8008d28:	9408      	str	r4, [sp, #32]
 8008d2a:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8008d2e:	463a      	mov	r2, r7
 8008d30:	4639      	mov	r1, r7
 8008d32:	e9cd 7709 	strd	r7, r7, [sp, #36]	@ 0x24
 8008d36:	f7fb facd 	bl	80042d4 <convolve_1x1_s8>
}
 8008d3a:	b011      	add	sp, #68	@ 0x44
 8008d3c:	ecbd 8b04 	vpop	{d8-d9}
 8008d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d44:	08034bac 	.word	0x08034bac
 8008d48:	080351ac 	.word	0x080351ac
 8008d4c:	0802a52c 	.word	0x0802a52c
 8008d50:	0802a6ac 	.word	0x0802a6ac
 8008d54:	0802a82c 	.word	0x0802a82c
 8008d58:	0802a9ac 	.word	0x0802a9ac
 8008d5c:	3d2bef7e 	.word	0x3d2bef7e
 8008d60:	3c9e4244 	.word	0x3c9e4244
 8008d64:	08022bac 	.word	0x08022bac
 8008d68:	0802302c 	.word	0x0802302c
 8008d6c:	080234ac 	.word	0x080234ac
 8008d70:	0802392c 	.word	0x0802392c
 8008d74:	0801e28c 	.word	0x0801e28c
 8008d78:	0801e70c 	.word	0x0801e70c
 8008d7c:	0801eb8c 	.word	0x0801eb8c
 8008d80:	0801f00c 	.word	0x0801f00c
 8008d84:	0801f48c 	.word	0x0801f48c
 8008d88:	0801270c 	.word	0x0801270c
 8008d8c:	0801298c 	.word	0x0801298c
 8008d90:	08012c0c 	.word	0x08012c0c
 8008d94:	08012e8c 	.word	0x08012e8c
 8008d98:	080125cc 	.word	0x080125cc
 8008d9c:	080125b4 	.word	0x080125b4
 8008da0:	080125bc 	.word	0x080125bc
 8008da4:	080125c4 	.word	0x080125c4

08008da8 <__io_putchar>:
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8008da8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8008dac:	f8d3 2e80 	ldr.w	r2, [r3, #3712]	@ 0xe80
 8008db0:	07d1      	lsls	r1, r2, #31
 8008db2:	d503      	bpl.n	8008dbc <__io_putchar+0x14>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8008db4:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	@ 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8008db8:	07d2      	lsls	r2, r2, #31
 8008dba:	d401      	bmi.n	8008dc0 <__io_putchar+0x18>
  
#include "stm32746g_discovery.h"

volatile int32_t ITM_RxBuffer;

int __io_putchar(int ch) { return ITM_SendChar(ch); }
 8008dbc:	4770      	bx	lr
  {
    while (ITM->PORT[0U].u32 == 0UL)
    {
      __NOP();
 8008dbe:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8008dc0:	681a      	ldr	r2, [r3, #0]
 8008dc2:	2a00      	cmp	r2, #0
 8008dc4:	d0fb      	beq.n	8008dbe <__io_putchar+0x16>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8008dc6:	b2c3      	uxtb	r3, r0
 8008dc8:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8008dcc:	7013      	strb	r3, [r2, #0]
 8008dce:	4770      	bx	lr

08008dd0 <__io_getchar>:
 */
__STATIC_INLINE int32_t ITM_ReceiveChar (void)
{
  int32_t ch = -1;                           /* no character available */

  if (ITM_RxBuffer != ITM_RXBUFFER_EMPTY)
 8008dd0:	4b05      	ldr	r3, [pc, #20]	@ (8008de8 <__io_getchar+0x18>)
 8008dd2:	4a06      	ldr	r2, [pc, #24]	@ (8008dec <__io_getchar+0x1c>)
 8008dd4:	6819      	ldr	r1, [r3, #0]
 8008dd6:	4291      	cmp	r1, r2
 8008dd8:	d002      	beq.n	8008de0 <__io_getchar+0x10>
  {
    ch = ITM_RxBuffer;
 8008dda:	6818      	ldr	r0, [r3, #0]
    ITM_RxBuffer = ITM_RXBUFFER_EMPTY;       /* ready for next character */
 8008ddc:	601a      	str	r2, [r3, #0]
 8008dde:	4770      	bx	lr
  int32_t ch = -1;                           /* no character available */
 8008de0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff

int __io_getchar(void) { return ITM_ReceiveChar(); }
 8008de4:	4770      	bx	lr
 8008de6:	bf00      	nop
 8008de8:	2000fd9c 	.word	0x2000fd9c
 8008dec:	5aa55aa5 	.word	0x5aa55aa5

08008df0 <_write>:

extern int errno;
extern int __io_putchar(int ch) __attribute__((weak));
extern int __io_getchar(void) __attribute__((weak));

int _write(int fd, const void *buffer, unsigned int count) {
 8008df0:	b570      	push	{r4, r5, r6, lr}
  unsigned int i;

  for (i = 0; i < count; i++) {
 8008df2:	4616      	mov	r6, r2
 8008df4:	b142      	cbz	r2, 8008e08 <_write+0x18>
 8008df6:	188d      	adds	r5, r1, r2
 8008df8:	1e4c      	subs	r4, r1, #1
 8008dfa:	3d01      	subs	r5, #1
    __io_putchar(((char *)buffer)[i]);
 8008dfc:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8008e00:	f7ff ffd2 	bl	8008da8 <__io_putchar>
  for (i = 0; i < count; i++) {
 8008e04:	42ac      	cmp	r4, r5
 8008e06:	d1f9      	bne.n	8008dfc <_write+0xc>
  }

  return count;
}
 8008e08:	4630      	mov	r0, r6
 8008e0a:	bd70      	pop	{r4, r5, r6, pc}

08008e0c <_read>:

int _read(int fd, void *buffer, unsigned int count) {
 8008e0c:	b570      	push	{r4, r5, r6, lr}
  unsigned int i;

  for (i = 0; i < count; i++) {
 8008e0e:	4616      	mov	r6, r2
 8008e10:	b142      	cbz	r2, 8008e24 <_read+0x18>
 8008e12:	188d      	adds	r5, r1, r2
 8008e14:	1e4c      	subs	r4, r1, #1
 8008e16:	3d01      	subs	r5, #1
    ((char *)buffer)[i] = __io_getchar();
 8008e18:	f7ff ffda 	bl	8008dd0 <__io_getchar>
 8008e1c:	f804 0f01 	strb.w	r0, [r4, #1]!
  for (i = 0; i < count; i++) {
 8008e20:	42ac      	cmp	r4, r5
 8008e22:	d1f9      	bne.n	8008e18 <_read+0xc>
  }

  return count;
}
 8008e24:	4630      	mov	r0, r6
 8008e26:	bd70      	pop	{r4, r5, r6, pc}

08008e28 <_close>:

int _close(int fd) { return -1; }
 8008e28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008e2c:	4770      	bx	lr
 8008e2e:	bf00      	nop

08008e30 <_fstat>:

int _fstat(int fd, void *buffer) { return -1; }
 8008e30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008e34:	4770      	bx	lr
 8008e36:	bf00      	nop

08008e38 <_isatty>:

int _isatty(int fd) { return -1; }
 8008e38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008e3c:	4770      	bx	lr
 8008e3e:	bf00      	nop

08008e40 <_lseek>:

long _lseek(int fd, long offset, int origin) { return -1; }
 8008e40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008e44:	4770      	bx	lr
 8008e46:	bf00      	nop

08008e48 <_exit>:

void _exit(int status) {}
 8008e48:	4770      	bx	lr
 8008e4a:	bf00      	nop

08008e4c <_ZdaPv>:
 8008e4c:	f000 b800 	b.w	8008e50 <_ZdlPv>

08008e50 <_ZdlPv>:
 8008e50:	f000 b87e 	b.w	8008f50 <free>

08008e54 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
 8008e54:	b538      	push	{r3, r4, r5, lr}
 8008e56:	4c08      	ldr	r4, [pc, #32]	@ (8008e78 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
 8008e58:	f44f 651e 	mov.w	r5, #2528	@ 0x9e0
 8008e5c:	4628      	mov	r0, r5
 8008e5e:	60e5      	str	r5, [r4, #12]
 8008e60:	f000 f86e 	bl	8008f40 <malloc>
 8008e64:	60a0      	str	r0, [r4, #8]
 8008e66:	b120      	cbz	r0, 8008e72 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1e>
 8008e68:	2300      	movs	r3, #0
 8008e6a:	e9c0 5300 	strd	r5, r3, [r0]
 8008e6e:	6060      	str	r0, [r4, #4]
 8008e70:	bd38      	pop	{r3, r4, r5, pc}
 8008e72:	60e0      	str	r0, [r4, #12]
 8008e74:	e7fb      	b.n	8008e6e <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1a>
 8008e76:	bf00      	nop
 8008e78:	2000fda0 	.word	0x2000fda0

08008e7c <_ZN12_GLOBAL__N_113constant_initD1Ev>:
 8008e7c:	4770      	bx	lr
 8008e7e:	bf00      	nop

08008e80 <_GLOBAL__sub_I___cxa_get_globals_fast>:
 8008e80:	4a02      	ldr	r2, [pc, #8]	@ (8008e8c <_GLOBAL__sub_I___cxa_get_globals_fast+0xc>)
 8008e82:	4903      	ldr	r1, [pc, #12]	@ (8008e90 <_GLOBAL__sub_I___cxa_get_globals_fast+0x10>)
 8008e84:	4803      	ldr	r0, [pc, #12]	@ (8008e94 <_GLOBAL__sub_I___cxa_get_globals_fast+0x14>)
 8008e86:	f000 b807 	b.w	8008e98 <__aeabi_atexit>
 8008e8a:	bf00      	nop
 8008e8c:	20000000 	.word	0x20000000
 8008e90:	08008e7d 	.word	0x08008e7d
 8008e94:	2000fdb0 	.word	0x2000fdb0

08008e98 <__aeabi_atexit>:
 8008e98:	4603      	mov	r3, r0
 8008e9a:	4608      	mov	r0, r1
 8008e9c:	4619      	mov	r1, r3
 8008e9e:	f000 bf25 	b.w	8009cec <__cxa_atexit>
 8008ea2:	bf00      	nop

08008ea4 <round>:
 8008ea4:	ec51 0b10 	vmov	r0, r1, d0
 8008ea8:	b570      	push	{r4, r5, r6, lr}
 8008eaa:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8008eae:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 8008eb2:	2a13      	cmp	r2, #19
 8008eb4:	460b      	mov	r3, r1
 8008eb6:	4605      	mov	r5, r0
 8008eb8:	dc1b      	bgt.n	8008ef2 <round+0x4e>
 8008eba:	2a00      	cmp	r2, #0
 8008ebc:	da0b      	bge.n	8008ed6 <round+0x32>
 8008ebe:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8008ec2:	3201      	adds	r2, #1
 8008ec4:	bf04      	itt	eq
 8008ec6:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 8008eca:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 8008ece:	2200      	movs	r2, #0
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	4610      	mov	r0, r2
 8008ed4:	e015      	b.n	8008f02 <round+0x5e>
 8008ed6:	4c15      	ldr	r4, [pc, #84]	@ (8008f2c <round+0x88>)
 8008ed8:	4114      	asrs	r4, r2
 8008eda:	ea04 0601 	and.w	r6, r4, r1
 8008ede:	4306      	orrs	r6, r0
 8008ee0:	d00f      	beq.n	8008f02 <round+0x5e>
 8008ee2:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8008ee6:	fa41 f202 	asr.w	r2, r1, r2
 8008eea:	4413      	add	r3, r2
 8008eec:	ea23 0304 	bic.w	r3, r3, r4
 8008ef0:	e7ed      	b.n	8008ece <round+0x2a>
 8008ef2:	2a33      	cmp	r2, #51	@ 0x33
 8008ef4:	dd08      	ble.n	8008f08 <round+0x64>
 8008ef6:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8008efa:	d102      	bne.n	8008f02 <round+0x5e>
 8008efc:	4602      	mov	r2, r0
 8008efe:	f7f7 f9e5 	bl	80002cc <__adddf3>
 8008f02:	ec41 0b10 	vmov	d0, r0, r1
 8008f06:	bd70      	pop	{r4, r5, r6, pc}
 8008f08:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 8008f0c:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008f10:	40f4      	lsrs	r4, r6
 8008f12:	4204      	tst	r4, r0
 8008f14:	d0f5      	beq.n	8008f02 <round+0x5e>
 8008f16:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	408a      	lsls	r2, r1
 8008f1e:	1952      	adds	r2, r2, r5
 8008f20:	bf28      	it	cs
 8008f22:	3301      	addcs	r3, #1
 8008f24:	ea22 0204 	bic.w	r2, r2, r4
 8008f28:	e7d2      	b.n	8008ed0 <round+0x2c>
 8008f2a:	bf00      	nop
 8008f2c:	000fffff 	.word	0x000fffff

08008f30 <abort>:
 8008f30:	b508      	push	{r3, lr}
 8008f32:	2006      	movs	r0, #6
 8008f34:	f000 fed2 	bl	8009cdc <raise>
 8008f38:	2001      	movs	r0, #1
 8008f3a:	f7ff ff85 	bl	8008e48 <_exit>
	...

08008f40 <malloc>:
 8008f40:	4b02      	ldr	r3, [pc, #8]	@ (8008f4c <malloc+0xc>)
 8008f42:	4601      	mov	r1, r0
 8008f44:	6818      	ldr	r0, [r3, #0]
 8008f46:	f000 b80b 	b.w	8008f60 <_malloc_r>
 8008f4a:	bf00      	nop
 8008f4c:	20000440 	.word	0x20000440

08008f50 <free>:
 8008f50:	4b02      	ldr	r3, [pc, #8]	@ (8008f5c <free+0xc>)
 8008f52:	4601      	mov	r1, r0
 8008f54:	6818      	ldr	r0, [r3, #0]
 8008f56:	f000 bfdb 	b.w	8009f10 <_free_r>
 8008f5a:	bf00      	nop
 8008f5c:	20000440 	.word	0x20000440

08008f60 <_malloc_r>:
 8008f60:	f101 030b 	add.w	r3, r1, #11
 8008f64:	2b16      	cmp	r3, #22
 8008f66:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f6a:	4605      	mov	r5, r0
 8008f6c:	d906      	bls.n	8008f7c <_malloc_r+0x1c>
 8008f6e:	f033 0707 	bics.w	r7, r3, #7
 8008f72:	d504      	bpl.n	8008f7e <_malloc_r+0x1e>
 8008f74:	230c      	movs	r3, #12
 8008f76:	602b      	str	r3, [r5, #0]
 8008f78:	2400      	movs	r4, #0
 8008f7a:	e1a3      	b.n	80092c4 <_malloc_r+0x364>
 8008f7c:	2710      	movs	r7, #16
 8008f7e:	42b9      	cmp	r1, r7
 8008f80:	d8f8      	bhi.n	8008f74 <_malloc_r+0x14>
 8008f82:	4628      	mov	r0, r5
 8008f84:	f000 fa26 	bl	80093d4 <__malloc_lock>
 8008f88:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 8008f8c:	4eaf      	ldr	r6, [pc, #700]	@ (800924c <_malloc_r+0x2ec>)
 8008f8e:	d237      	bcs.n	8009000 <_malloc_r+0xa0>
 8008f90:	f107 0208 	add.w	r2, r7, #8
 8008f94:	4432      	add	r2, r6
 8008f96:	f1a2 0108 	sub.w	r1, r2, #8
 8008f9a:	6854      	ldr	r4, [r2, #4]
 8008f9c:	428c      	cmp	r4, r1
 8008f9e:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 8008fa2:	d102      	bne.n	8008faa <_malloc_r+0x4a>
 8008fa4:	68d4      	ldr	r4, [r2, #12]
 8008fa6:	42a2      	cmp	r2, r4
 8008fa8:	d010      	beq.n	8008fcc <_malloc_r+0x6c>
 8008faa:	6863      	ldr	r3, [r4, #4]
 8008fac:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8008fb0:	f023 0303 	bic.w	r3, r3, #3
 8008fb4:	60ca      	str	r2, [r1, #12]
 8008fb6:	4423      	add	r3, r4
 8008fb8:	6091      	str	r1, [r2, #8]
 8008fba:	685a      	ldr	r2, [r3, #4]
 8008fbc:	f042 0201 	orr.w	r2, r2, #1
 8008fc0:	605a      	str	r2, [r3, #4]
 8008fc2:	4628      	mov	r0, r5
 8008fc4:	f000 fa0c 	bl	80093e0 <__malloc_unlock>
 8008fc8:	3408      	adds	r4, #8
 8008fca:	e17b      	b.n	80092c4 <_malloc_r+0x364>
 8008fcc:	3302      	adds	r3, #2
 8008fce:	6934      	ldr	r4, [r6, #16]
 8008fd0:	499f      	ldr	r1, [pc, #636]	@ (8009250 <_malloc_r+0x2f0>)
 8008fd2:	428c      	cmp	r4, r1
 8008fd4:	d077      	beq.n	80090c6 <_malloc_r+0x166>
 8008fd6:	6862      	ldr	r2, [r4, #4]
 8008fd8:	f022 0c03 	bic.w	ip, r2, #3
 8008fdc:	ebac 0007 	sub.w	r0, ip, r7
 8008fe0:	280f      	cmp	r0, #15
 8008fe2:	dd48      	ble.n	8009076 <_malloc_r+0x116>
 8008fe4:	19e2      	adds	r2, r4, r7
 8008fe6:	f040 0301 	orr.w	r3, r0, #1
 8008fea:	f047 0701 	orr.w	r7, r7, #1
 8008fee:	6067      	str	r7, [r4, #4]
 8008ff0:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8008ff4:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8008ff8:	6053      	str	r3, [r2, #4]
 8008ffa:	f844 000c 	str.w	r0, [r4, ip]
 8008ffe:	e7e0      	b.n	8008fc2 <_malloc_r+0x62>
 8009000:	0a7b      	lsrs	r3, r7, #9
 8009002:	d02a      	beq.n	800905a <_malloc_r+0xfa>
 8009004:	2b04      	cmp	r3, #4
 8009006:	d812      	bhi.n	800902e <_malloc_r+0xce>
 8009008:	09bb      	lsrs	r3, r7, #6
 800900a:	3338      	adds	r3, #56	@ 0x38
 800900c:	1c5a      	adds	r2, r3, #1
 800900e:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8009012:	f1a2 0c08 	sub.w	ip, r2, #8
 8009016:	6854      	ldr	r4, [r2, #4]
 8009018:	4564      	cmp	r4, ip
 800901a:	d006      	beq.n	800902a <_malloc_r+0xca>
 800901c:	6862      	ldr	r2, [r4, #4]
 800901e:	f022 0203 	bic.w	r2, r2, #3
 8009022:	1bd0      	subs	r0, r2, r7
 8009024:	280f      	cmp	r0, #15
 8009026:	dd1c      	ble.n	8009062 <_malloc_r+0x102>
 8009028:	3b01      	subs	r3, #1
 800902a:	3301      	adds	r3, #1
 800902c:	e7cf      	b.n	8008fce <_malloc_r+0x6e>
 800902e:	2b14      	cmp	r3, #20
 8009030:	d801      	bhi.n	8009036 <_malloc_r+0xd6>
 8009032:	335b      	adds	r3, #91	@ 0x5b
 8009034:	e7ea      	b.n	800900c <_malloc_r+0xac>
 8009036:	2b54      	cmp	r3, #84	@ 0x54
 8009038:	d802      	bhi.n	8009040 <_malloc_r+0xe0>
 800903a:	0b3b      	lsrs	r3, r7, #12
 800903c:	336e      	adds	r3, #110	@ 0x6e
 800903e:	e7e5      	b.n	800900c <_malloc_r+0xac>
 8009040:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 8009044:	d802      	bhi.n	800904c <_malloc_r+0xec>
 8009046:	0bfb      	lsrs	r3, r7, #15
 8009048:	3377      	adds	r3, #119	@ 0x77
 800904a:	e7df      	b.n	800900c <_malloc_r+0xac>
 800904c:	f240 5254 	movw	r2, #1364	@ 0x554
 8009050:	4293      	cmp	r3, r2
 8009052:	d804      	bhi.n	800905e <_malloc_r+0xfe>
 8009054:	0cbb      	lsrs	r3, r7, #18
 8009056:	337c      	adds	r3, #124	@ 0x7c
 8009058:	e7d8      	b.n	800900c <_malloc_r+0xac>
 800905a:	233f      	movs	r3, #63	@ 0x3f
 800905c:	e7d6      	b.n	800900c <_malloc_r+0xac>
 800905e:	237e      	movs	r3, #126	@ 0x7e
 8009060:	e7d4      	b.n	800900c <_malloc_r+0xac>
 8009062:	2800      	cmp	r0, #0
 8009064:	68e1      	ldr	r1, [r4, #12]
 8009066:	db04      	blt.n	8009072 <_malloc_r+0x112>
 8009068:	68a3      	ldr	r3, [r4, #8]
 800906a:	60d9      	str	r1, [r3, #12]
 800906c:	608b      	str	r3, [r1, #8]
 800906e:	18a3      	adds	r3, r4, r2
 8009070:	e7a3      	b.n	8008fba <_malloc_r+0x5a>
 8009072:	460c      	mov	r4, r1
 8009074:	e7d0      	b.n	8009018 <_malloc_r+0xb8>
 8009076:	2800      	cmp	r0, #0
 8009078:	e9c6 1104 	strd	r1, r1, [r6, #16]
 800907c:	db07      	blt.n	800908e <_malloc_r+0x12e>
 800907e:	44a4      	add	ip, r4
 8009080:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8009084:	f043 0301 	orr.w	r3, r3, #1
 8009088:	f8cc 3004 	str.w	r3, [ip, #4]
 800908c:	e799      	b.n	8008fc2 <_malloc_r+0x62>
 800908e:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 8009092:	6870      	ldr	r0, [r6, #4]
 8009094:	f080 8095 	bcs.w	80091c2 <_malloc_r+0x262>
 8009098:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 800909c:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 80090a0:	f04f 0c01 	mov.w	ip, #1
 80090a4:	3201      	adds	r2, #1
 80090a6:	fa0c fc0e 	lsl.w	ip, ip, lr
 80090aa:	ea4c 0000 	orr.w	r0, ip, r0
 80090ae:	6070      	str	r0, [r6, #4]
 80090b0:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 80090b4:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 80090b8:	3808      	subs	r0, #8
 80090ba:	e9c4 c002 	strd	ip, r0, [r4, #8]
 80090be:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 80090c2:	f8cc 400c 	str.w	r4, [ip, #12]
 80090c6:	1098      	asrs	r0, r3, #2
 80090c8:	2201      	movs	r2, #1
 80090ca:	4082      	lsls	r2, r0
 80090cc:	6870      	ldr	r0, [r6, #4]
 80090ce:	4290      	cmp	r0, r2
 80090d0:	d326      	bcc.n	8009120 <_malloc_r+0x1c0>
 80090d2:	4210      	tst	r0, r2
 80090d4:	d106      	bne.n	80090e4 <_malloc_r+0x184>
 80090d6:	f023 0303 	bic.w	r3, r3, #3
 80090da:	0052      	lsls	r2, r2, #1
 80090dc:	4210      	tst	r0, r2
 80090de:	f103 0304 	add.w	r3, r3, #4
 80090e2:	d0fa      	beq.n	80090da <_malloc_r+0x17a>
 80090e4:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 80090e8:	46c1      	mov	r9, r8
 80090ea:	469e      	mov	lr, r3
 80090ec:	f8d9 400c 	ldr.w	r4, [r9, #12]
 80090f0:	454c      	cmp	r4, r9
 80090f2:	f040 80b9 	bne.w	8009268 <_malloc_r+0x308>
 80090f6:	f10e 0e01 	add.w	lr, lr, #1
 80090fa:	f01e 0f03 	tst.w	lr, #3
 80090fe:	f109 0908 	add.w	r9, r9, #8
 8009102:	d1f3      	bne.n	80090ec <_malloc_r+0x18c>
 8009104:	0798      	lsls	r0, r3, #30
 8009106:	f040 80e3 	bne.w	80092d0 <_malloc_r+0x370>
 800910a:	6873      	ldr	r3, [r6, #4]
 800910c:	ea23 0302 	bic.w	r3, r3, r2
 8009110:	6073      	str	r3, [r6, #4]
 8009112:	6870      	ldr	r0, [r6, #4]
 8009114:	0052      	lsls	r2, r2, #1
 8009116:	4290      	cmp	r0, r2
 8009118:	d302      	bcc.n	8009120 <_malloc_r+0x1c0>
 800911a:	2a00      	cmp	r2, #0
 800911c:	f040 80e5 	bne.w	80092ea <_malloc_r+0x38a>
 8009120:	f8d6 a008 	ldr.w	sl, [r6, #8]
 8009124:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009128:	f023 0903 	bic.w	r9, r3, #3
 800912c:	45b9      	cmp	r9, r7
 800912e:	d304      	bcc.n	800913a <_malloc_r+0x1da>
 8009130:	eba9 0207 	sub.w	r2, r9, r7
 8009134:	2a0f      	cmp	r2, #15
 8009136:	f300 8141 	bgt.w	80093bc <_malloc_r+0x45c>
 800913a:	4b46      	ldr	r3, [pc, #280]	@ (8009254 <_malloc_r+0x2f4>)
 800913c:	6819      	ldr	r1, [r3, #0]
 800913e:	3110      	adds	r1, #16
 8009140:	4439      	add	r1, r7
 8009142:	2008      	movs	r0, #8
 8009144:	9101      	str	r1, [sp, #4]
 8009146:	f000 fdfb 	bl	8009d40 <sysconf>
 800914a:	4a43      	ldr	r2, [pc, #268]	@ (8009258 <_malloc_r+0x2f8>)
 800914c:	9901      	ldr	r1, [sp, #4]
 800914e:	6813      	ldr	r3, [r2, #0]
 8009150:	3301      	adds	r3, #1
 8009152:	bf1f      	itttt	ne
 8009154:	f101 31ff 	addne.w	r1, r1, #4294967295	@ 0xffffffff
 8009158:	1809      	addne	r1, r1, r0
 800915a:	4243      	negne	r3, r0
 800915c:	4019      	andne	r1, r3
 800915e:	4680      	mov	r8, r0
 8009160:	4628      	mov	r0, r5
 8009162:	9101      	str	r1, [sp, #4]
 8009164:	f000 fddc 	bl	8009d20 <_sbrk_r>
 8009168:	1c42      	adds	r2, r0, #1
 800916a:	eb0a 0b09 	add.w	fp, sl, r9
 800916e:	4604      	mov	r4, r0
 8009170:	f000 80f7 	beq.w	8009362 <_malloc_r+0x402>
 8009174:	4583      	cmp	fp, r0
 8009176:	9901      	ldr	r1, [sp, #4]
 8009178:	4a37      	ldr	r2, [pc, #220]	@ (8009258 <_malloc_r+0x2f8>)
 800917a:	d902      	bls.n	8009182 <_malloc_r+0x222>
 800917c:	45b2      	cmp	sl, r6
 800917e:	f040 80f0 	bne.w	8009362 <_malloc_r+0x402>
 8009182:	4b36      	ldr	r3, [pc, #216]	@ (800925c <_malloc_r+0x2fc>)
 8009184:	6818      	ldr	r0, [r3, #0]
 8009186:	45a3      	cmp	fp, r4
 8009188:	eb00 0e01 	add.w	lr, r0, r1
 800918c:	f8c3 e000 	str.w	lr, [r3]
 8009190:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8009194:	f040 80ab 	bne.w	80092ee <_malloc_r+0x38e>
 8009198:	ea1b 0f0c 	tst.w	fp, ip
 800919c:	f040 80a7 	bne.w	80092ee <_malloc_r+0x38e>
 80091a0:	68b2      	ldr	r2, [r6, #8]
 80091a2:	4449      	add	r1, r9
 80091a4:	f041 0101 	orr.w	r1, r1, #1
 80091a8:	6051      	str	r1, [r2, #4]
 80091aa:	4a2d      	ldr	r2, [pc, #180]	@ (8009260 <_malloc_r+0x300>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	6811      	ldr	r1, [r2, #0]
 80091b0:	428b      	cmp	r3, r1
 80091b2:	bf88      	it	hi
 80091b4:	6013      	strhi	r3, [r2, #0]
 80091b6:	4a2b      	ldr	r2, [pc, #172]	@ (8009264 <_malloc_r+0x304>)
 80091b8:	6811      	ldr	r1, [r2, #0]
 80091ba:	428b      	cmp	r3, r1
 80091bc:	bf88      	it	hi
 80091be:	6013      	strhi	r3, [r2, #0]
 80091c0:	e0cf      	b.n	8009362 <_malloc_r+0x402>
 80091c2:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 80091c6:	ea4f 225c 	mov.w	r2, ip, lsr #9
 80091ca:	d218      	bcs.n	80091fe <_malloc_r+0x29e>
 80091cc:	ea4f 129c 	mov.w	r2, ip, lsr #6
 80091d0:	3238      	adds	r2, #56	@ 0x38
 80091d2:	f102 0e01 	add.w	lr, r2, #1
 80091d6:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 80091da:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 80091de:	45f0      	cmp	r8, lr
 80091e0:	d12b      	bne.n	800923a <_malloc_r+0x2da>
 80091e2:	1092      	asrs	r2, r2, #2
 80091e4:	f04f 0c01 	mov.w	ip, #1
 80091e8:	fa0c f202 	lsl.w	r2, ip, r2
 80091ec:	4302      	orrs	r2, r0
 80091ee:	6072      	str	r2, [r6, #4]
 80091f0:	e9c4 e802 	strd	lr, r8, [r4, #8]
 80091f4:	f8c8 4008 	str.w	r4, [r8, #8]
 80091f8:	f8ce 400c 	str.w	r4, [lr, #12]
 80091fc:	e763      	b.n	80090c6 <_malloc_r+0x166>
 80091fe:	2a14      	cmp	r2, #20
 8009200:	d801      	bhi.n	8009206 <_malloc_r+0x2a6>
 8009202:	325b      	adds	r2, #91	@ 0x5b
 8009204:	e7e5      	b.n	80091d2 <_malloc_r+0x272>
 8009206:	2a54      	cmp	r2, #84	@ 0x54
 8009208:	d803      	bhi.n	8009212 <_malloc_r+0x2b2>
 800920a:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800920e:	326e      	adds	r2, #110	@ 0x6e
 8009210:	e7df      	b.n	80091d2 <_malloc_r+0x272>
 8009212:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 8009216:	d803      	bhi.n	8009220 <_malloc_r+0x2c0>
 8009218:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 800921c:	3277      	adds	r2, #119	@ 0x77
 800921e:	e7d8      	b.n	80091d2 <_malloc_r+0x272>
 8009220:	f240 5e54 	movw	lr, #1364	@ 0x554
 8009224:	4572      	cmp	r2, lr
 8009226:	bf9a      	itte	ls
 8009228:	ea4f 429c 	movls.w	r2, ip, lsr #18
 800922c:	327c      	addls	r2, #124	@ 0x7c
 800922e:	227e      	movhi	r2, #126	@ 0x7e
 8009230:	e7cf      	b.n	80091d2 <_malloc_r+0x272>
 8009232:	f8de e008 	ldr.w	lr, [lr, #8]
 8009236:	45f0      	cmp	r8, lr
 8009238:	d005      	beq.n	8009246 <_malloc_r+0x2e6>
 800923a:	f8de 2004 	ldr.w	r2, [lr, #4]
 800923e:	f022 0203 	bic.w	r2, r2, #3
 8009242:	4562      	cmp	r2, ip
 8009244:	d8f5      	bhi.n	8009232 <_malloc_r+0x2d2>
 8009246:	f8de 800c 	ldr.w	r8, [lr, #12]
 800924a:	e7d1      	b.n	80091f0 <_malloc_r+0x290>
 800924c:	2000002c 	.word	0x2000002c
 8009250:	20000034 	.word	0x20000034
 8009254:	2000fdec 	.word	0x2000fdec
 8009258:	20000024 	.word	0x20000024
 800925c:	2000fdbc 	.word	0x2000fdbc
 8009260:	2000fde8 	.word	0x2000fde8
 8009264:	2000fde4 	.word	0x2000fde4
 8009268:	6860      	ldr	r0, [r4, #4]
 800926a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800926e:	f020 0003 	bic.w	r0, r0, #3
 8009272:	eba0 0a07 	sub.w	sl, r0, r7
 8009276:	f1ba 0f0f 	cmp.w	sl, #15
 800927a:	dd12      	ble.n	80092a2 <_malloc_r+0x342>
 800927c:	68a3      	ldr	r3, [r4, #8]
 800927e:	19e2      	adds	r2, r4, r7
 8009280:	f047 0701 	orr.w	r7, r7, #1
 8009284:	6067      	str	r7, [r4, #4]
 8009286:	f8c3 c00c 	str.w	ip, [r3, #12]
 800928a:	f8cc 3008 	str.w	r3, [ip, #8]
 800928e:	f04a 0301 	orr.w	r3, sl, #1
 8009292:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8009296:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800929a:	6053      	str	r3, [r2, #4]
 800929c:	f844 a000 	str.w	sl, [r4, r0]
 80092a0:	e68f      	b.n	8008fc2 <_malloc_r+0x62>
 80092a2:	f1ba 0f00 	cmp.w	sl, #0
 80092a6:	db11      	blt.n	80092cc <_malloc_r+0x36c>
 80092a8:	4420      	add	r0, r4
 80092aa:	6843      	ldr	r3, [r0, #4]
 80092ac:	f043 0301 	orr.w	r3, r3, #1
 80092b0:	6043      	str	r3, [r0, #4]
 80092b2:	f854 3f08 	ldr.w	r3, [r4, #8]!
 80092b6:	4628      	mov	r0, r5
 80092b8:	f8c3 c00c 	str.w	ip, [r3, #12]
 80092bc:	f8cc 3008 	str.w	r3, [ip, #8]
 80092c0:	f000 f88e 	bl	80093e0 <__malloc_unlock>
 80092c4:	4620      	mov	r0, r4
 80092c6:	b003      	add	sp, #12
 80092c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092cc:	4664      	mov	r4, ip
 80092ce:	e70f      	b.n	80090f0 <_malloc_r+0x190>
 80092d0:	f858 0908 	ldr.w	r0, [r8], #-8
 80092d4:	4540      	cmp	r0, r8
 80092d6:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80092da:	f43f af13 	beq.w	8009104 <_malloc_r+0x1a4>
 80092de:	e718      	b.n	8009112 <_malloc_r+0x1b2>
 80092e0:	3304      	adds	r3, #4
 80092e2:	0052      	lsls	r2, r2, #1
 80092e4:	4210      	tst	r0, r2
 80092e6:	d0fb      	beq.n	80092e0 <_malloc_r+0x380>
 80092e8:	e6fc      	b.n	80090e4 <_malloc_r+0x184>
 80092ea:	4673      	mov	r3, lr
 80092ec:	e7fa      	b.n	80092e4 <_malloc_r+0x384>
 80092ee:	6810      	ldr	r0, [r2, #0]
 80092f0:	3001      	adds	r0, #1
 80092f2:	bf1b      	ittet	ne
 80092f4:	eba4 0b0b 	subne.w	fp, r4, fp
 80092f8:	eb0b 020e 	addne.w	r2, fp, lr
 80092fc:	6014      	streq	r4, [r2, #0]
 80092fe:	601a      	strne	r2, [r3, #0]
 8009300:	f014 0b07 	ands.w	fp, r4, #7
 8009304:	bf1a      	itte	ne
 8009306:	f1cb 0008 	rsbne	r0, fp, #8
 800930a:	1824      	addne	r4, r4, r0
 800930c:	4658      	moveq	r0, fp
 800930e:	1862      	adds	r2, r4, r1
 8009310:	ea02 010c 	and.w	r1, r2, ip
 8009314:	4480      	add	r8, r0
 8009316:	eba8 0801 	sub.w	r8, r8, r1
 800931a:	ea08 080c 	and.w	r8, r8, ip
 800931e:	4641      	mov	r1, r8
 8009320:	4628      	mov	r0, r5
 8009322:	9201      	str	r2, [sp, #4]
 8009324:	f000 fcfc 	bl	8009d20 <_sbrk_r>
 8009328:	1c43      	adds	r3, r0, #1
 800932a:	9a01      	ldr	r2, [sp, #4]
 800932c:	4b28      	ldr	r3, [pc, #160]	@ (80093d0 <_malloc_r+0x470>)
 800932e:	d107      	bne.n	8009340 <_malloc_r+0x3e0>
 8009330:	f1bb 0f00 	cmp.w	fp, #0
 8009334:	d023      	beq.n	800937e <_malloc_r+0x41e>
 8009336:	f1ab 0008 	sub.w	r0, fp, #8
 800933a:	4410      	add	r0, r2
 800933c:	f04f 0800 	mov.w	r8, #0
 8009340:	681a      	ldr	r2, [r3, #0]
 8009342:	60b4      	str	r4, [r6, #8]
 8009344:	1b00      	subs	r0, r0, r4
 8009346:	4440      	add	r0, r8
 8009348:	4442      	add	r2, r8
 800934a:	f040 0001 	orr.w	r0, r0, #1
 800934e:	45b2      	cmp	sl, r6
 8009350:	601a      	str	r2, [r3, #0]
 8009352:	6060      	str	r0, [r4, #4]
 8009354:	f43f af29 	beq.w	80091aa <_malloc_r+0x24a>
 8009358:	f1b9 0f0f 	cmp.w	r9, #15
 800935c:	d812      	bhi.n	8009384 <_malloc_r+0x424>
 800935e:	2301      	movs	r3, #1
 8009360:	6063      	str	r3, [r4, #4]
 8009362:	68b3      	ldr	r3, [r6, #8]
 8009364:	685b      	ldr	r3, [r3, #4]
 8009366:	f023 0303 	bic.w	r3, r3, #3
 800936a:	42bb      	cmp	r3, r7
 800936c:	eba3 0207 	sub.w	r2, r3, r7
 8009370:	d301      	bcc.n	8009376 <_malloc_r+0x416>
 8009372:	2a0f      	cmp	r2, #15
 8009374:	dc22      	bgt.n	80093bc <_malloc_r+0x45c>
 8009376:	4628      	mov	r0, r5
 8009378:	f000 f832 	bl	80093e0 <__malloc_unlock>
 800937c:	e5fc      	b.n	8008f78 <_malloc_r+0x18>
 800937e:	4610      	mov	r0, r2
 8009380:	46d8      	mov	r8, fp
 8009382:	e7dd      	b.n	8009340 <_malloc_r+0x3e0>
 8009384:	f8da 2004 	ldr.w	r2, [sl, #4]
 8009388:	f1a9 090c 	sub.w	r9, r9, #12
 800938c:	f029 0907 	bic.w	r9, r9, #7
 8009390:	f002 0201 	and.w	r2, r2, #1
 8009394:	ea42 0209 	orr.w	r2, r2, r9
 8009398:	f8ca 2004 	str.w	r2, [sl, #4]
 800939c:	2105      	movs	r1, #5
 800939e:	eb0a 0209 	add.w	r2, sl, r9
 80093a2:	f1b9 0f0f 	cmp.w	r9, #15
 80093a6:	e9c2 1101 	strd	r1, r1, [r2, #4]
 80093aa:	f67f aefe 	bls.w	80091aa <_malloc_r+0x24a>
 80093ae:	f10a 0108 	add.w	r1, sl, #8
 80093b2:	4628      	mov	r0, r5
 80093b4:	f000 fdac 	bl	8009f10 <_free_r>
 80093b8:	4b05      	ldr	r3, [pc, #20]	@ (80093d0 <_malloc_r+0x470>)
 80093ba:	e6f6      	b.n	80091aa <_malloc_r+0x24a>
 80093bc:	68b4      	ldr	r4, [r6, #8]
 80093be:	f047 0301 	orr.w	r3, r7, #1
 80093c2:	4427      	add	r7, r4
 80093c4:	f042 0201 	orr.w	r2, r2, #1
 80093c8:	6063      	str	r3, [r4, #4]
 80093ca:	60b7      	str	r7, [r6, #8]
 80093cc:	607a      	str	r2, [r7, #4]
 80093ce:	e5f8      	b.n	8008fc2 <_malloc_r+0x62>
 80093d0:	2000fdbc 	.word	0x2000fdbc

080093d4 <__malloc_lock>:
 80093d4:	4801      	ldr	r0, [pc, #4]	@ (80093dc <__malloc_lock+0x8>)
 80093d6:	f000 bce5 	b.w	8009da4 <__retarget_lock_acquire_recursive>
 80093da:	bf00      	nop
 80093dc:	2000ff2c 	.word	0x2000ff2c

080093e0 <__malloc_unlock>:
 80093e0:	4801      	ldr	r0, [pc, #4]	@ (80093e8 <__malloc_unlock+0x8>)
 80093e2:	f000 bce0 	b.w	8009da6 <__retarget_lock_release_recursive>
 80093e6:	bf00      	nop
 80093e8:	2000ff2c 	.word	0x2000ff2c

080093ec <_realloc_r>:
 80093ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093f0:	4682      	mov	sl, r0
 80093f2:	4693      	mov	fp, r2
 80093f4:	460c      	mov	r4, r1
 80093f6:	b929      	cbnz	r1, 8009404 <_realloc_r+0x18>
 80093f8:	4611      	mov	r1, r2
 80093fa:	b003      	add	sp, #12
 80093fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009400:	f7ff bdae 	b.w	8008f60 <_malloc_r>
 8009404:	f7ff ffe6 	bl	80093d4 <__malloc_lock>
 8009408:	f10b 080b 	add.w	r8, fp, #11
 800940c:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8009410:	f1b8 0f16 	cmp.w	r8, #22
 8009414:	f1a4 0908 	sub.w	r9, r4, #8
 8009418:	f025 0603 	bic.w	r6, r5, #3
 800941c:	d908      	bls.n	8009430 <_realloc_r+0x44>
 800941e:	f038 0807 	bics.w	r8, r8, #7
 8009422:	d507      	bpl.n	8009434 <_realloc_r+0x48>
 8009424:	230c      	movs	r3, #12
 8009426:	f8ca 3000 	str.w	r3, [sl]
 800942a:	f04f 0b00 	mov.w	fp, #0
 800942e:	e032      	b.n	8009496 <_realloc_r+0xaa>
 8009430:	f04f 0810 	mov.w	r8, #16
 8009434:	45c3      	cmp	fp, r8
 8009436:	d8f5      	bhi.n	8009424 <_realloc_r+0x38>
 8009438:	4546      	cmp	r6, r8
 800943a:	f280 8174 	bge.w	8009726 <_realloc_r+0x33a>
 800943e:	4b9e      	ldr	r3, [pc, #632]	@ (80096b8 <_realloc_r+0x2cc>)
 8009440:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8009444:	eb09 0106 	add.w	r1, r9, r6
 8009448:	458c      	cmp	ip, r1
 800944a:	6848      	ldr	r0, [r1, #4]
 800944c:	d005      	beq.n	800945a <_realloc_r+0x6e>
 800944e:	f020 0201 	bic.w	r2, r0, #1
 8009452:	440a      	add	r2, r1
 8009454:	6852      	ldr	r2, [r2, #4]
 8009456:	07d7      	lsls	r7, r2, #31
 8009458:	d449      	bmi.n	80094ee <_realloc_r+0x102>
 800945a:	f020 0003 	bic.w	r0, r0, #3
 800945e:	458c      	cmp	ip, r1
 8009460:	eb06 0700 	add.w	r7, r6, r0
 8009464:	d11b      	bne.n	800949e <_realloc_r+0xb2>
 8009466:	f108 0210 	add.w	r2, r8, #16
 800946a:	42ba      	cmp	r2, r7
 800946c:	dc41      	bgt.n	80094f2 <_realloc_r+0x106>
 800946e:	eb09 0208 	add.w	r2, r9, r8
 8009472:	eba7 0708 	sub.w	r7, r7, r8
 8009476:	f047 0701 	orr.w	r7, r7, #1
 800947a:	609a      	str	r2, [r3, #8]
 800947c:	6057      	str	r7, [r2, #4]
 800947e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8009482:	f003 0301 	and.w	r3, r3, #1
 8009486:	ea43 0308 	orr.w	r3, r3, r8
 800948a:	f844 3c04 	str.w	r3, [r4, #-4]
 800948e:	4650      	mov	r0, sl
 8009490:	f7ff ffa6 	bl	80093e0 <__malloc_unlock>
 8009494:	46a3      	mov	fp, r4
 8009496:	4658      	mov	r0, fp
 8009498:	b003      	add	sp, #12
 800949a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800949e:	45b8      	cmp	r8, r7
 80094a0:	dc27      	bgt.n	80094f2 <_realloc_r+0x106>
 80094a2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 80094a6:	60d3      	str	r3, [r2, #12]
 80094a8:	609a      	str	r2, [r3, #8]
 80094aa:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80094ae:	eba7 0008 	sub.w	r0, r7, r8
 80094b2:	280f      	cmp	r0, #15
 80094b4:	f003 0301 	and.w	r3, r3, #1
 80094b8:	eb09 0207 	add.w	r2, r9, r7
 80094bc:	f240 8135 	bls.w	800972a <_realloc_r+0x33e>
 80094c0:	eb09 0108 	add.w	r1, r9, r8
 80094c4:	ea48 0303 	orr.w	r3, r8, r3
 80094c8:	f040 0001 	orr.w	r0, r0, #1
 80094cc:	f8c9 3004 	str.w	r3, [r9, #4]
 80094d0:	6048      	str	r0, [r1, #4]
 80094d2:	6853      	ldr	r3, [r2, #4]
 80094d4:	f043 0301 	orr.w	r3, r3, #1
 80094d8:	6053      	str	r3, [r2, #4]
 80094da:	3108      	adds	r1, #8
 80094dc:	4650      	mov	r0, sl
 80094de:	f000 fd17 	bl	8009f10 <_free_r>
 80094e2:	4650      	mov	r0, sl
 80094e4:	f7ff ff7c 	bl	80093e0 <__malloc_unlock>
 80094e8:	f109 0b08 	add.w	fp, r9, #8
 80094ec:	e7d3      	b.n	8009496 <_realloc_r+0xaa>
 80094ee:	2000      	movs	r0, #0
 80094f0:	4601      	mov	r1, r0
 80094f2:	07ea      	lsls	r2, r5, #31
 80094f4:	f100 80c7 	bmi.w	8009686 <_realloc_r+0x29a>
 80094f8:	f854 5c08 	ldr.w	r5, [r4, #-8]
 80094fc:	eba9 0505 	sub.w	r5, r9, r5
 8009500:	686a      	ldr	r2, [r5, #4]
 8009502:	f022 0203 	bic.w	r2, r2, #3
 8009506:	4432      	add	r2, r6
 8009508:	9201      	str	r2, [sp, #4]
 800950a:	2900      	cmp	r1, #0
 800950c:	f000 8086 	beq.w	800961c <_realloc_r+0x230>
 8009510:	458c      	cmp	ip, r1
 8009512:	eb00 0702 	add.w	r7, r0, r2
 8009516:	d149      	bne.n	80095ac <_realloc_r+0x1c0>
 8009518:	f108 0210 	add.w	r2, r8, #16
 800951c:	42ba      	cmp	r2, r7
 800951e:	dc7d      	bgt.n	800961c <_realloc_r+0x230>
 8009520:	46ab      	mov	fp, r5
 8009522:	68ea      	ldr	r2, [r5, #12]
 8009524:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 8009528:	60ca      	str	r2, [r1, #12]
 800952a:	6091      	str	r1, [r2, #8]
 800952c:	1f32      	subs	r2, r6, #4
 800952e:	2a24      	cmp	r2, #36	@ 0x24
 8009530:	d836      	bhi.n	80095a0 <_realloc_r+0x1b4>
 8009532:	2a13      	cmp	r2, #19
 8009534:	d932      	bls.n	800959c <_realloc_r+0x1b0>
 8009536:	6821      	ldr	r1, [r4, #0]
 8009538:	60a9      	str	r1, [r5, #8]
 800953a:	6861      	ldr	r1, [r4, #4]
 800953c:	60e9      	str	r1, [r5, #12]
 800953e:	2a1b      	cmp	r2, #27
 8009540:	d81a      	bhi.n	8009578 <_realloc_r+0x18c>
 8009542:	3408      	adds	r4, #8
 8009544:	f105 0210 	add.w	r2, r5, #16
 8009548:	6821      	ldr	r1, [r4, #0]
 800954a:	6011      	str	r1, [r2, #0]
 800954c:	6861      	ldr	r1, [r4, #4]
 800954e:	6051      	str	r1, [r2, #4]
 8009550:	68a1      	ldr	r1, [r4, #8]
 8009552:	6091      	str	r1, [r2, #8]
 8009554:	eb05 0208 	add.w	r2, r5, r8
 8009558:	eba7 0708 	sub.w	r7, r7, r8
 800955c:	f047 0701 	orr.w	r7, r7, #1
 8009560:	609a      	str	r2, [r3, #8]
 8009562:	6057      	str	r7, [r2, #4]
 8009564:	686b      	ldr	r3, [r5, #4]
 8009566:	f003 0301 	and.w	r3, r3, #1
 800956a:	ea43 0308 	orr.w	r3, r3, r8
 800956e:	606b      	str	r3, [r5, #4]
 8009570:	4650      	mov	r0, sl
 8009572:	f7ff ff35 	bl	80093e0 <__malloc_unlock>
 8009576:	e78e      	b.n	8009496 <_realloc_r+0xaa>
 8009578:	68a1      	ldr	r1, [r4, #8]
 800957a:	6129      	str	r1, [r5, #16]
 800957c:	68e1      	ldr	r1, [r4, #12]
 800957e:	6169      	str	r1, [r5, #20]
 8009580:	2a24      	cmp	r2, #36	@ 0x24
 8009582:	bf01      	itttt	eq
 8009584:	6922      	ldreq	r2, [r4, #16]
 8009586:	61aa      	streq	r2, [r5, #24]
 8009588:	6961      	ldreq	r1, [r4, #20]
 800958a:	61e9      	streq	r1, [r5, #28]
 800958c:	bf19      	ittee	ne
 800958e:	3410      	addne	r4, #16
 8009590:	f105 0218 	addne.w	r2, r5, #24
 8009594:	f105 0220 	addeq.w	r2, r5, #32
 8009598:	3418      	addeq	r4, #24
 800959a:	e7d5      	b.n	8009548 <_realloc_r+0x15c>
 800959c:	465a      	mov	r2, fp
 800959e:	e7d3      	b.n	8009548 <_realloc_r+0x15c>
 80095a0:	4621      	mov	r1, r4
 80095a2:	4658      	mov	r0, fp
 80095a4:	f000 fb4e 	bl	8009c44 <memmove>
 80095a8:	4b43      	ldr	r3, [pc, #268]	@ (80096b8 <_realloc_r+0x2cc>)
 80095aa:	e7d3      	b.n	8009554 <_realloc_r+0x168>
 80095ac:	45b8      	cmp	r8, r7
 80095ae:	dc35      	bgt.n	800961c <_realloc_r+0x230>
 80095b0:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 80095b4:	4628      	mov	r0, r5
 80095b6:	60d3      	str	r3, [r2, #12]
 80095b8:	609a      	str	r2, [r3, #8]
 80095ba:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80095be:	68eb      	ldr	r3, [r5, #12]
 80095c0:	60d3      	str	r3, [r2, #12]
 80095c2:	609a      	str	r2, [r3, #8]
 80095c4:	1f32      	subs	r2, r6, #4
 80095c6:	2a24      	cmp	r2, #36	@ 0x24
 80095c8:	d824      	bhi.n	8009614 <_realloc_r+0x228>
 80095ca:	2a13      	cmp	r2, #19
 80095cc:	d908      	bls.n	80095e0 <_realloc_r+0x1f4>
 80095ce:	6823      	ldr	r3, [r4, #0]
 80095d0:	60ab      	str	r3, [r5, #8]
 80095d2:	6863      	ldr	r3, [r4, #4]
 80095d4:	60eb      	str	r3, [r5, #12]
 80095d6:	2a1b      	cmp	r2, #27
 80095d8:	d80a      	bhi.n	80095f0 <_realloc_r+0x204>
 80095da:	3408      	adds	r4, #8
 80095dc:	f105 0010 	add.w	r0, r5, #16
 80095e0:	6823      	ldr	r3, [r4, #0]
 80095e2:	6003      	str	r3, [r0, #0]
 80095e4:	6863      	ldr	r3, [r4, #4]
 80095e6:	6043      	str	r3, [r0, #4]
 80095e8:	68a3      	ldr	r3, [r4, #8]
 80095ea:	6083      	str	r3, [r0, #8]
 80095ec:	46a9      	mov	r9, r5
 80095ee:	e75c      	b.n	80094aa <_realloc_r+0xbe>
 80095f0:	68a3      	ldr	r3, [r4, #8]
 80095f2:	612b      	str	r3, [r5, #16]
 80095f4:	68e3      	ldr	r3, [r4, #12]
 80095f6:	616b      	str	r3, [r5, #20]
 80095f8:	2a24      	cmp	r2, #36	@ 0x24
 80095fa:	bf01      	itttt	eq
 80095fc:	6923      	ldreq	r3, [r4, #16]
 80095fe:	61ab      	streq	r3, [r5, #24]
 8009600:	6963      	ldreq	r3, [r4, #20]
 8009602:	61eb      	streq	r3, [r5, #28]
 8009604:	bf19      	ittee	ne
 8009606:	3410      	addne	r4, #16
 8009608:	f105 0018 	addne.w	r0, r5, #24
 800960c:	f105 0020 	addeq.w	r0, r5, #32
 8009610:	3418      	addeq	r4, #24
 8009612:	e7e5      	b.n	80095e0 <_realloc_r+0x1f4>
 8009614:	4621      	mov	r1, r4
 8009616:	f000 fb15 	bl	8009c44 <memmove>
 800961a:	e7e7      	b.n	80095ec <_realloc_r+0x200>
 800961c:	9b01      	ldr	r3, [sp, #4]
 800961e:	4598      	cmp	r8, r3
 8009620:	dc31      	bgt.n	8009686 <_realloc_r+0x29a>
 8009622:	4628      	mov	r0, r5
 8009624:	68eb      	ldr	r3, [r5, #12]
 8009626:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800962a:	60d3      	str	r3, [r2, #12]
 800962c:	609a      	str	r2, [r3, #8]
 800962e:	1f32      	subs	r2, r6, #4
 8009630:	2a24      	cmp	r2, #36	@ 0x24
 8009632:	d824      	bhi.n	800967e <_realloc_r+0x292>
 8009634:	2a13      	cmp	r2, #19
 8009636:	d908      	bls.n	800964a <_realloc_r+0x25e>
 8009638:	6823      	ldr	r3, [r4, #0]
 800963a:	60ab      	str	r3, [r5, #8]
 800963c:	6863      	ldr	r3, [r4, #4]
 800963e:	60eb      	str	r3, [r5, #12]
 8009640:	2a1b      	cmp	r2, #27
 8009642:	d80a      	bhi.n	800965a <_realloc_r+0x26e>
 8009644:	3408      	adds	r4, #8
 8009646:	f105 0010 	add.w	r0, r5, #16
 800964a:	6823      	ldr	r3, [r4, #0]
 800964c:	6003      	str	r3, [r0, #0]
 800964e:	6863      	ldr	r3, [r4, #4]
 8009650:	6043      	str	r3, [r0, #4]
 8009652:	68a3      	ldr	r3, [r4, #8]
 8009654:	6083      	str	r3, [r0, #8]
 8009656:	9f01      	ldr	r7, [sp, #4]
 8009658:	e7c8      	b.n	80095ec <_realloc_r+0x200>
 800965a:	68a3      	ldr	r3, [r4, #8]
 800965c:	612b      	str	r3, [r5, #16]
 800965e:	68e3      	ldr	r3, [r4, #12]
 8009660:	616b      	str	r3, [r5, #20]
 8009662:	2a24      	cmp	r2, #36	@ 0x24
 8009664:	bf01      	itttt	eq
 8009666:	6923      	ldreq	r3, [r4, #16]
 8009668:	61ab      	streq	r3, [r5, #24]
 800966a:	6963      	ldreq	r3, [r4, #20]
 800966c:	61eb      	streq	r3, [r5, #28]
 800966e:	bf19      	ittee	ne
 8009670:	3410      	addne	r4, #16
 8009672:	f105 0018 	addne.w	r0, r5, #24
 8009676:	f105 0020 	addeq.w	r0, r5, #32
 800967a:	3418      	addeq	r4, #24
 800967c:	e7e5      	b.n	800964a <_realloc_r+0x25e>
 800967e:	4621      	mov	r1, r4
 8009680:	f000 fae0 	bl	8009c44 <memmove>
 8009684:	e7e7      	b.n	8009656 <_realloc_r+0x26a>
 8009686:	4659      	mov	r1, fp
 8009688:	4650      	mov	r0, sl
 800968a:	f7ff fc69 	bl	8008f60 <_malloc_r>
 800968e:	4683      	mov	fp, r0
 8009690:	b918      	cbnz	r0, 800969a <_realloc_r+0x2ae>
 8009692:	4650      	mov	r0, sl
 8009694:	f7ff fea4 	bl	80093e0 <__malloc_unlock>
 8009698:	e6c7      	b.n	800942a <_realloc_r+0x3e>
 800969a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800969e:	f023 0301 	bic.w	r3, r3, #1
 80096a2:	444b      	add	r3, r9
 80096a4:	f1a0 0208 	sub.w	r2, r0, #8
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d107      	bne.n	80096bc <_realloc_r+0x2d0>
 80096ac:	f850 7c04 	ldr.w	r7, [r0, #-4]
 80096b0:	f027 0703 	bic.w	r7, r7, #3
 80096b4:	4437      	add	r7, r6
 80096b6:	e6f8      	b.n	80094aa <_realloc_r+0xbe>
 80096b8:	2000002c 	.word	0x2000002c
 80096bc:	1f32      	subs	r2, r6, #4
 80096be:	2a24      	cmp	r2, #36	@ 0x24
 80096c0:	d82d      	bhi.n	800971e <_realloc_r+0x332>
 80096c2:	2a13      	cmp	r2, #19
 80096c4:	d928      	bls.n	8009718 <_realloc_r+0x32c>
 80096c6:	6823      	ldr	r3, [r4, #0]
 80096c8:	6003      	str	r3, [r0, #0]
 80096ca:	6863      	ldr	r3, [r4, #4]
 80096cc:	6043      	str	r3, [r0, #4]
 80096ce:	2a1b      	cmp	r2, #27
 80096d0:	d80e      	bhi.n	80096f0 <_realloc_r+0x304>
 80096d2:	f104 0208 	add.w	r2, r4, #8
 80096d6:	f100 0308 	add.w	r3, r0, #8
 80096da:	6811      	ldr	r1, [r2, #0]
 80096dc:	6019      	str	r1, [r3, #0]
 80096de:	6851      	ldr	r1, [r2, #4]
 80096e0:	6059      	str	r1, [r3, #4]
 80096e2:	6892      	ldr	r2, [r2, #8]
 80096e4:	609a      	str	r2, [r3, #8]
 80096e6:	4621      	mov	r1, r4
 80096e8:	4650      	mov	r0, sl
 80096ea:	f000 fc11 	bl	8009f10 <_free_r>
 80096ee:	e73f      	b.n	8009570 <_realloc_r+0x184>
 80096f0:	68a3      	ldr	r3, [r4, #8]
 80096f2:	6083      	str	r3, [r0, #8]
 80096f4:	68e3      	ldr	r3, [r4, #12]
 80096f6:	60c3      	str	r3, [r0, #12]
 80096f8:	2a24      	cmp	r2, #36	@ 0x24
 80096fa:	bf01      	itttt	eq
 80096fc:	6923      	ldreq	r3, [r4, #16]
 80096fe:	6103      	streq	r3, [r0, #16]
 8009700:	6961      	ldreq	r1, [r4, #20]
 8009702:	6141      	streq	r1, [r0, #20]
 8009704:	bf19      	ittee	ne
 8009706:	f104 0210 	addne.w	r2, r4, #16
 800970a:	f100 0310 	addne.w	r3, r0, #16
 800970e:	f104 0218 	addeq.w	r2, r4, #24
 8009712:	f100 0318 	addeq.w	r3, r0, #24
 8009716:	e7e0      	b.n	80096da <_realloc_r+0x2ee>
 8009718:	4603      	mov	r3, r0
 800971a:	4622      	mov	r2, r4
 800971c:	e7dd      	b.n	80096da <_realloc_r+0x2ee>
 800971e:	4621      	mov	r1, r4
 8009720:	f000 fa90 	bl	8009c44 <memmove>
 8009724:	e7df      	b.n	80096e6 <_realloc_r+0x2fa>
 8009726:	4637      	mov	r7, r6
 8009728:	e6bf      	b.n	80094aa <_realloc_r+0xbe>
 800972a:	431f      	orrs	r7, r3
 800972c:	f8c9 7004 	str.w	r7, [r9, #4]
 8009730:	6853      	ldr	r3, [r2, #4]
 8009732:	f043 0301 	orr.w	r3, r3, #1
 8009736:	6053      	str	r3, [r2, #4]
 8009738:	e6d3      	b.n	80094e2 <_realloc_r+0xf6>
 800973a:	bf00      	nop

0800973c <sprintf>:
 800973c:	b40e      	push	{r1, r2, r3}
 800973e:	b500      	push	{lr}
 8009740:	b09c      	sub	sp, #112	@ 0x70
 8009742:	ab1d      	add	r3, sp, #116	@ 0x74
 8009744:	9002      	str	r0, [sp, #8]
 8009746:	9006      	str	r0, [sp, #24]
 8009748:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800974c:	4809      	ldr	r0, [pc, #36]	@ (8009774 <sprintf+0x38>)
 800974e:	9107      	str	r1, [sp, #28]
 8009750:	9104      	str	r1, [sp, #16]
 8009752:	4909      	ldr	r1, [pc, #36]	@ (8009778 <sprintf+0x3c>)
 8009754:	f853 2b04 	ldr.w	r2, [r3], #4
 8009758:	9105      	str	r1, [sp, #20]
 800975a:	6800      	ldr	r0, [r0, #0]
 800975c:	9301      	str	r3, [sp, #4]
 800975e:	a902      	add	r1, sp, #8
 8009760:	f000 fc96 	bl	800a090 <_svfprintf_r>
 8009764:	9b02      	ldr	r3, [sp, #8]
 8009766:	2200      	movs	r2, #0
 8009768:	701a      	strb	r2, [r3, #0]
 800976a:	b01c      	add	sp, #112	@ 0x70
 800976c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009770:	b003      	add	sp, #12
 8009772:	4770      	bx	lr
 8009774:	20000440 	.word	0x20000440
 8009778:	ffff0208 	.word	0xffff0208

0800977c <std>:
 800977c:	2300      	movs	r3, #0
 800977e:	b510      	push	{r4, lr}
 8009780:	4604      	mov	r4, r0
 8009782:	e9c0 3300 	strd	r3, r3, [r0]
 8009786:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800978a:	6083      	str	r3, [r0, #8]
 800978c:	8181      	strh	r1, [r0, #12]
 800978e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009790:	81c2      	strh	r2, [r0, #14]
 8009792:	6183      	str	r3, [r0, #24]
 8009794:	4619      	mov	r1, r3
 8009796:	2208      	movs	r2, #8
 8009798:	305c      	adds	r0, #92	@ 0x5c
 800979a:	f000 fa6d 	bl	8009c78 <memset>
 800979e:	4b0d      	ldr	r3, [pc, #52]	@ (80097d4 <std+0x58>)
 80097a0:	6223      	str	r3, [r4, #32]
 80097a2:	4b0d      	ldr	r3, [pc, #52]	@ (80097d8 <std+0x5c>)
 80097a4:	6263      	str	r3, [r4, #36]	@ 0x24
 80097a6:	4b0d      	ldr	r3, [pc, #52]	@ (80097dc <std+0x60>)
 80097a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80097aa:	4b0d      	ldr	r3, [pc, #52]	@ (80097e0 <std+0x64>)
 80097ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80097ae:	4b0d      	ldr	r3, [pc, #52]	@ (80097e4 <std+0x68>)
 80097b0:	61e4      	str	r4, [r4, #28]
 80097b2:	429c      	cmp	r4, r3
 80097b4:	d006      	beq.n	80097c4 <std+0x48>
 80097b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80097ba:	4294      	cmp	r4, r2
 80097bc:	d002      	beq.n	80097c4 <std+0x48>
 80097be:	33d0      	adds	r3, #208	@ 0xd0
 80097c0:	429c      	cmp	r4, r3
 80097c2:	d105      	bne.n	80097d0 <std+0x54>
 80097c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80097c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097cc:	f000 bae8 	b.w	8009da0 <__retarget_lock_init_recursive>
 80097d0:	bd10      	pop	{r4, pc}
 80097d2:	bf00      	nop
 80097d4:	0800b71b 	.word	0x0800b71b
 80097d8:	0800b73d 	.word	0x0800b73d
 80097dc:	0800b775 	.word	0x0800b775
 80097e0:	0800b799 	.word	0x0800b799
 80097e4:	2000fdf0 	.word	0x2000fdf0

080097e8 <stdio_exit_handler>:
 80097e8:	4a02      	ldr	r2, [pc, #8]	@ (80097f4 <stdio_exit_handler+0xc>)
 80097ea:	4903      	ldr	r1, [pc, #12]	@ (80097f8 <stdio_exit_handler+0x10>)
 80097ec:	4803      	ldr	r0, [pc, #12]	@ (80097fc <stdio_exit_handler+0x14>)
 80097ee:	f000 b9b5 	b.w	8009b5c <_fwalk_sglue>
 80097f2:	bf00      	nop
 80097f4:	20000434 	.word	0x20000434
 80097f8:	0800b515 	.word	0x0800b515
 80097fc:	20000448 	.word	0x20000448

08009800 <cleanup_stdio>:
 8009800:	6841      	ldr	r1, [r0, #4]
 8009802:	4b0c      	ldr	r3, [pc, #48]	@ (8009834 <cleanup_stdio+0x34>)
 8009804:	4299      	cmp	r1, r3
 8009806:	b510      	push	{r4, lr}
 8009808:	4604      	mov	r4, r0
 800980a:	d001      	beq.n	8009810 <cleanup_stdio+0x10>
 800980c:	f001 fe82 	bl	800b514 <_fclose_r>
 8009810:	68a1      	ldr	r1, [r4, #8]
 8009812:	4b09      	ldr	r3, [pc, #36]	@ (8009838 <cleanup_stdio+0x38>)
 8009814:	4299      	cmp	r1, r3
 8009816:	d002      	beq.n	800981e <cleanup_stdio+0x1e>
 8009818:	4620      	mov	r0, r4
 800981a:	f001 fe7b 	bl	800b514 <_fclose_r>
 800981e:	68e1      	ldr	r1, [r4, #12]
 8009820:	4b06      	ldr	r3, [pc, #24]	@ (800983c <cleanup_stdio+0x3c>)
 8009822:	4299      	cmp	r1, r3
 8009824:	d004      	beq.n	8009830 <cleanup_stdio+0x30>
 8009826:	4620      	mov	r0, r4
 8009828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800982c:	f001 be72 	b.w	800b514 <_fclose_r>
 8009830:	bd10      	pop	{r4, pc}
 8009832:	bf00      	nop
 8009834:	2000fdf0 	.word	0x2000fdf0
 8009838:	2000fe58 	.word	0x2000fe58
 800983c:	2000fec0 	.word	0x2000fec0

08009840 <global_stdio_init.part.0>:
 8009840:	b510      	push	{r4, lr}
 8009842:	4b0b      	ldr	r3, [pc, #44]	@ (8009870 <global_stdio_init.part.0+0x30>)
 8009844:	4c0b      	ldr	r4, [pc, #44]	@ (8009874 <global_stdio_init.part.0+0x34>)
 8009846:	4a0c      	ldr	r2, [pc, #48]	@ (8009878 <global_stdio_init.part.0+0x38>)
 8009848:	601a      	str	r2, [r3, #0]
 800984a:	4620      	mov	r0, r4
 800984c:	2200      	movs	r2, #0
 800984e:	2104      	movs	r1, #4
 8009850:	f7ff ff94 	bl	800977c <std>
 8009854:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009858:	2201      	movs	r2, #1
 800985a:	2109      	movs	r1, #9
 800985c:	f7ff ff8e 	bl	800977c <std>
 8009860:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009864:	2202      	movs	r2, #2
 8009866:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800986a:	2112      	movs	r1, #18
 800986c:	f7ff bf86 	b.w	800977c <std>
 8009870:	2000ff28 	.word	0x2000ff28
 8009874:	2000fdf0 	.word	0x2000fdf0
 8009878:	080097e9 	.word	0x080097e9

0800987c <__sfp_lock_acquire>:
 800987c:	4801      	ldr	r0, [pc, #4]	@ (8009884 <__sfp_lock_acquire+0x8>)
 800987e:	f000 ba91 	b.w	8009da4 <__retarget_lock_acquire_recursive>
 8009882:	bf00      	nop
 8009884:	2000ff2e 	.word	0x2000ff2e

08009888 <__sfp_lock_release>:
 8009888:	4801      	ldr	r0, [pc, #4]	@ (8009890 <__sfp_lock_release+0x8>)
 800988a:	f000 ba8c 	b.w	8009da6 <__retarget_lock_release_recursive>
 800988e:	bf00      	nop
 8009890:	2000ff2e 	.word	0x2000ff2e

08009894 <__sinit>:
 8009894:	b510      	push	{r4, lr}
 8009896:	4604      	mov	r4, r0
 8009898:	f7ff fff0 	bl	800987c <__sfp_lock_acquire>
 800989c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800989e:	b11b      	cbz	r3, 80098a8 <__sinit+0x14>
 80098a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098a4:	f7ff bff0 	b.w	8009888 <__sfp_lock_release>
 80098a8:	4b04      	ldr	r3, [pc, #16]	@ (80098bc <__sinit+0x28>)
 80098aa:	6363      	str	r3, [r4, #52]	@ 0x34
 80098ac:	4b04      	ldr	r3, [pc, #16]	@ (80098c0 <__sinit+0x2c>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d1f5      	bne.n	80098a0 <__sinit+0xc>
 80098b4:	f7ff ffc4 	bl	8009840 <global_stdio_init.part.0>
 80098b8:	e7f2      	b.n	80098a0 <__sinit+0xc>
 80098ba:	bf00      	nop
 80098bc:	08009801 	.word	0x08009801
 80098c0:	2000ff28 	.word	0x2000ff28

080098c4 <__sfvwrite_r>:
 80098c4:	6893      	ldr	r3, [r2, #8]
 80098c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ca:	4606      	mov	r6, r0
 80098cc:	460c      	mov	r4, r1
 80098ce:	4691      	mov	r9, r2
 80098d0:	b91b      	cbnz	r3, 80098da <__sfvwrite_r+0x16>
 80098d2:	2000      	movs	r0, #0
 80098d4:	b003      	add	sp, #12
 80098d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098da:	898b      	ldrh	r3, [r1, #12]
 80098dc:	0718      	lsls	r0, r3, #28
 80098de:	d550      	bpl.n	8009982 <__sfvwrite_r+0xbe>
 80098e0:	690b      	ldr	r3, [r1, #16]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d04d      	beq.n	8009982 <__sfvwrite_r+0xbe>
 80098e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098ea:	f8d9 8000 	ldr.w	r8, [r9]
 80098ee:	f013 0702 	ands.w	r7, r3, #2
 80098f2:	d16b      	bne.n	80099cc <__sfvwrite_r+0x108>
 80098f4:	f013 0301 	ands.w	r3, r3, #1
 80098f8:	f000 809c 	beq.w	8009a34 <__sfvwrite_r+0x170>
 80098fc:	4638      	mov	r0, r7
 80098fe:	46ba      	mov	sl, r7
 8009900:	46bb      	mov	fp, r7
 8009902:	f1bb 0f00 	cmp.w	fp, #0
 8009906:	f000 8103 	beq.w	8009b10 <__sfvwrite_r+0x24c>
 800990a:	b950      	cbnz	r0, 8009922 <__sfvwrite_r+0x5e>
 800990c:	465a      	mov	r2, fp
 800990e:	210a      	movs	r1, #10
 8009910:	4650      	mov	r0, sl
 8009912:	f7f6 fc7d 	bl	8000210 <memchr>
 8009916:	2800      	cmp	r0, #0
 8009918:	f000 8100 	beq.w	8009b1c <__sfvwrite_r+0x258>
 800991c:	3001      	adds	r0, #1
 800991e:	eba0 070a 	sub.w	r7, r0, sl
 8009922:	6820      	ldr	r0, [r4, #0]
 8009924:	6921      	ldr	r1, [r4, #16]
 8009926:	68a5      	ldr	r5, [r4, #8]
 8009928:	6963      	ldr	r3, [r4, #20]
 800992a:	455f      	cmp	r7, fp
 800992c:	463a      	mov	r2, r7
 800992e:	bf28      	it	cs
 8009930:	465a      	movcs	r2, fp
 8009932:	4288      	cmp	r0, r1
 8009934:	f240 80f5 	bls.w	8009b22 <__sfvwrite_r+0x25e>
 8009938:	441d      	add	r5, r3
 800993a:	42aa      	cmp	r2, r5
 800993c:	f340 80f1 	ble.w	8009b22 <__sfvwrite_r+0x25e>
 8009940:	4651      	mov	r1, sl
 8009942:	462a      	mov	r2, r5
 8009944:	f000 f97e 	bl	8009c44 <memmove>
 8009948:	6823      	ldr	r3, [r4, #0]
 800994a:	442b      	add	r3, r5
 800994c:	6023      	str	r3, [r4, #0]
 800994e:	4621      	mov	r1, r4
 8009950:	4630      	mov	r0, r6
 8009952:	f001 febd 	bl	800b6d0 <_fflush_r>
 8009956:	2800      	cmp	r0, #0
 8009958:	d167      	bne.n	8009a2a <__sfvwrite_r+0x166>
 800995a:	1b7f      	subs	r7, r7, r5
 800995c:	f040 80f9 	bne.w	8009b52 <__sfvwrite_r+0x28e>
 8009960:	4621      	mov	r1, r4
 8009962:	4630      	mov	r0, r6
 8009964:	f001 feb4 	bl	800b6d0 <_fflush_r>
 8009968:	2800      	cmp	r0, #0
 800996a:	d15e      	bne.n	8009a2a <__sfvwrite_r+0x166>
 800996c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8009970:	1b5b      	subs	r3, r3, r5
 8009972:	44aa      	add	sl, r5
 8009974:	ebab 0b05 	sub.w	fp, fp, r5
 8009978:	f8c9 3008 	str.w	r3, [r9, #8]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d1c0      	bne.n	8009902 <__sfvwrite_r+0x3e>
 8009980:	e7a7      	b.n	80098d2 <__sfvwrite_r+0xe>
 8009982:	4621      	mov	r1, r4
 8009984:	4630      	mov	r0, r6
 8009986:	f000 f907 	bl	8009b98 <__swsetup_r>
 800998a:	2800      	cmp	r0, #0
 800998c:	d0ab      	beq.n	80098e6 <__sfvwrite_r+0x22>
 800998e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009992:	e79f      	b.n	80098d4 <__sfvwrite_r+0x10>
 8009994:	e9d8 a500 	ldrd	sl, r5, [r8]
 8009998:	f108 0808 	add.w	r8, r8, #8
 800999c:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 80099a0:	69e1      	ldr	r1, [r4, #28]
 80099a2:	2d00      	cmp	r5, #0
 80099a4:	d0f6      	beq.n	8009994 <__sfvwrite_r+0xd0>
 80099a6:	42bd      	cmp	r5, r7
 80099a8:	462b      	mov	r3, r5
 80099aa:	4652      	mov	r2, sl
 80099ac:	bf28      	it	cs
 80099ae:	463b      	movcs	r3, r7
 80099b0:	4630      	mov	r0, r6
 80099b2:	47d8      	blx	fp
 80099b4:	2800      	cmp	r0, #0
 80099b6:	dd38      	ble.n	8009a2a <__sfvwrite_r+0x166>
 80099b8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80099bc:	1a1b      	subs	r3, r3, r0
 80099be:	4482      	add	sl, r0
 80099c0:	1a2d      	subs	r5, r5, r0
 80099c2:	f8c9 3008 	str.w	r3, [r9, #8]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d1e8      	bne.n	800999c <__sfvwrite_r+0xd8>
 80099ca:	e782      	b.n	80098d2 <__sfvwrite_r+0xe>
 80099cc:	f04f 0a00 	mov.w	sl, #0
 80099d0:	4f61      	ldr	r7, [pc, #388]	@ (8009b58 <__sfvwrite_r+0x294>)
 80099d2:	4655      	mov	r5, sl
 80099d4:	e7e2      	b.n	800999c <__sfvwrite_r+0xd8>
 80099d6:	e9d8 7a00 	ldrd	r7, sl, [r8]
 80099da:	f108 0808 	add.w	r8, r8, #8
 80099de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099e2:	6820      	ldr	r0, [r4, #0]
 80099e4:	68a2      	ldr	r2, [r4, #8]
 80099e6:	f1ba 0f00 	cmp.w	sl, #0
 80099ea:	d0f4      	beq.n	80099d6 <__sfvwrite_r+0x112>
 80099ec:	0599      	lsls	r1, r3, #22
 80099ee:	d563      	bpl.n	8009ab8 <__sfvwrite_r+0x1f4>
 80099f0:	4552      	cmp	r2, sl
 80099f2:	d836      	bhi.n	8009a62 <__sfvwrite_r+0x19e>
 80099f4:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 80099f8:	d033      	beq.n	8009a62 <__sfvwrite_r+0x19e>
 80099fa:	6921      	ldr	r1, [r4, #16]
 80099fc:	6965      	ldr	r5, [r4, #20]
 80099fe:	eba0 0b01 	sub.w	fp, r0, r1
 8009a02:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009a06:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009a0a:	f10b 0201 	add.w	r2, fp, #1
 8009a0e:	106d      	asrs	r5, r5, #1
 8009a10:	4452      	add	r2, sl
 8009a12:	4295      	cmp	r5, r2
 8009a14:	bf38      	it	cc
 8009a16:	4615      	movcc	r5, r2
 8009a18:	055b      	lsls	r3, r3, #21
 8009a1a:	d53d      	bpl.n	8009a98 <__sfvwrite_r+0x1d4>
 8009a1c:	4629      	mov	r1, r5
 8009a1e:	4630      	mov	r0, r6
 8009a20:	f7ff fa9e 	bl	8008f60 <_malloc_r>
 8009a24:	b948      	cbnz	r0, 8009a3a <__sfvwrite_r+0x176>
 8009a26:	230c      	movs	r3, #12
 8009a28:	6033      	str	r3, [r6, #0]
 8009a2a:	89a3      	ldrh	r3, [r4, #12]
 8009a2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a30:	81a3      	strh	r3, [r4, #12]
 8009a32:	e7ac      	b.n	800998e <__sfvwrite_r+0xca>
 8009a34:	461f      	mov	r7, r3
 8009a36:	469a      	mov	sl, r3
 8009a38:	e7d1      	b.n	80099de <__sfvwrite_r+0x11a>
 8009a3a:	465a      	mov	r2, fp
 8009a3c:	6921      	ldr	r1, [r4, #16]
 8009a3e:	9001      	str	r0, [sp, #4]
 8009a40:	f000 f9b2 	bl	8009da8 <memcpy>
 8009a44:	89a2      	ldrh	r2, [r4, #12]
 8009a46:	9b01      	ldr	r3, [sp, #4]
 8009a48:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 8009a4c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009a50:	81a2      	strh	r2, [r4, #12]
 8009a52:	6123      	str	r3, [r4, #16]
 8009a54:	6165      	str	r5, [r4, #20]
 8009a56:	445b      	add	r3, fp
 8009a58:	eba5 050b 	sub.w	r5, r5, fp
 8009a5c:	6023      	str	r3, [r4, #0]
 8009a5e:	4652      	mov	r2, sl
 8009a60:	60a5      	str	r5, [r4, #8]
 8009a62:	4552      	cmp	r2, sl
 8009a64:	bf28      	it	cs
 8009a66:	4652      	movcs	r2, sl
 8009a68:	6820      	ldr	r0, [r4, #0]
 8009a6a:	9201      	str	r2, [sp, #4]
 8009a6c:	4639      	mov	r1, r7
 8009a6e:	f000 f8e9 	bl	8009c44 <memmove>
 8009a72:	68a3      	ldr	r3, [r4, #8]
 8009a74:	9a01      	ldr	r2, [sp, #4]
 8009a76:	1a9b      	subs	r3, r3, r2
 8009a78:	60a3      	str	r3, [r4, #8]
 8009a7a:	6823      	ldr	r3, [r4, #0]
 8009a7c:	4413      	add	r3, r2
 8009a7e:	4655      	mov	r5, sl
 8009a80:	6023      	str	r3, [r4, #0]
 8009a82:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8009a86:	1b5b      	subs	r3, r3, r5
 8009a88:	442f      	add	r7, r5
 8009a8a:	ebaa 0a05 	sub.w	sl, sl, r5
 8009a8e:	f8c9 3008 	str.w	r3, [r9, #8]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d1a3      	bne.n	80099de <__sfvwrite_r+0x11a>
 8009a96:	e71c      	b.n	80098d2 <__sfvwrite_r+0xe>
 8009a98:	462a      	mov	r2, r5
 8009a9a:	4630      	mov	r0, r6
 8009a9c:	f7ff fca6 	bl	80093ec <_realloc_r>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	2800      	cmp	r0, #0
 8009aa4:	d1d5      	bne.n	8009a52 <__sfvwrite_r+0x18e>
 8009aa6:	6921      	ldr	r1, [r4, #16]
 8009aa8:	4630      	mov	r0, r6
 8009aaa:	f000 fa31 	bl	8009f10 <_free_r>
 8009aae:	89a3      	ldrh	r3, [r4, #12]
 8009ab0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009ab4:	81a3      	strh	r3, [r4, #12]
 8009ab6:	e7b6      	b.n	8009a26 <__sfvwrite_r+0x162>
 8009ab8:	6923      	ldr	r3, [r4, #16]
 8009aba:	4283      	cmp	r3, r0
 8009abc:	d302      	bcc.n	8009ac4 <__sfvwrite_r+0x200>
 8009abe:	6961      	ldr	r1, [r4, #20]
 8009ac0:	4551      	cmp	r1, sl
 8009ac2:	d915      	bls.n	8009af0 <__sfvwrite_r+0x22c>
 8009ac4:	4552      	cmp	r2, sl
 8009ac6:	bf28      	it	cs
 8009ac8:	4652      	movcs	r2, sl
 8009aca:	4639      	mov	r1, r7
 8009acc:	4615      	mov	r5, r2
 8009ace:	f000 f8b9 	bl	8009c44 <memmove>
 8009ad2:	68a3      	ldr	r3, [r4, #8]
 8009ad4:	6822      	ldr	r2, [r4, #0]
 8009ad6:	1b5b      	subs	r3, r3, r5
 8009ad8:	442a      	add	r2, r5
 8009ada:	60a3      	str	r3, [r4, #8]
 8009adc:	6022      	str	r2, [r4, #0]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d1cf      	bne.n	8009a82 <__sfvwrite_r+0x1be>
 8009ae2:	4621      	mov	r1, r4
 8009ae4:	4630      	mov	r0, r6
 8009ae6:	f001 fdf3 	bl	800b6d0 <_fflush_r>
 8009aea:	2800      	cmp	r0, #0
 8009aec:	d0c9      	beq.n	8009a82 <__sfvwrite_r+0x1be>
 8009aee:	e79c      	b.n	8009a2a <__sfvwrite_r+0x166>
 8009af0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8009af4:	4553      	cmp	r3, sl
 8009af6:	bf28      	it	cs
 8009af8:	4653      	movcs	r3, sl
 8009afa:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8009afc:	fb93 f3f1 	sdiv	r3, r3, r1
 8009b00:	463a      	mov	r2, r7
 8009b02:	434b      	muls	r3, r1
 8009b04:	4630      	mov	r0, r6
 8009b06:	69e1      	ldr	r1, [r4, #28]
 8009b08:	47a8      	blx	r5
 8009b0a:	1e05      	subs	r5, r0, #0
 8009b0c:	dcb9      	bgt.n	8009a82 <__sfvwrite_r+0x1be>
 8009b0e:	e78c      	b.n	8009a2a <__sfvwrite_r+0x166>
 8009b10:	e9d8 ab00 	ldrd	sl, fp, [r8]
 8009b14:	2000      	movs	r0, #0
 8009b16:	f108 0808 	add.w	r8, r8, #8
 8009b1a:	e6f2      	b.n	8009902 <__sfvwrite_r+0x3e>
 8009b1c:	f10b 0701 	add.w	r7, fp, #1
 8009b20:	e6ff      	b.n	8009922 <__sfvwrite_r+0x5e>
 8009b22:	4293      	cmp	r3, r2
 8009b24:	dc08      	bgt.n	8009b38 <__sfvwrite_r+0x274>
 8009b26:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8009b28:	69e1      	ldr	r1, [r4, #28]
 8009b2a:	4652      	mov	r2, sl
 8009b2c:	4630      	mov	r0, r6
 8009b2e:	47a8      	blx	r5
 8009b30:	1e05      	subs	r5, r0, #0
 8009b32:	f73f af12 	bgt.w	800995a <__sfvwrite_r+0x96>
 8009b36:	e778      	b.n	8009a2a <__sfvwrite_r+0x166>
 8009b38:	4651      	mov	r1, sl
 8009b3a:	9201      	str	r2, [sp, #4]
 8009b3c:	f000 f882 	bl	8009c44 <memmove>
 8009b40:	9a01      	ldr	r2, [sp, #4]
 8009b42:	68a3      	ldr	r3, [r4, #8]
 8009b44:	1a9b      	subs	r3, r3, r2
 8009b46:	60a3      	str	r3, [r4, #8]
 8009b48:	6823      	ldr	r3, [r4, #0]
 8009b4a:	4413      	add	r3, r2
 8009b4c:	6023      	str	r3, [r4, #0]
 8009b4e:	4615      	mov	r5, r2
 8009b50:	e703      	b.n	800995a <__sfvwrite_r+0x96>
 8009b52:	2001      	movs	r0, #1
 8009b54:	e70a      	b.n	800996c <__sfvwrite_r+0xa8>
 8009b56:	bf00      	nop
 8009b58:	7ffffc00 	.word	0x7ffffc00

08009b5c <_fwalk_sglue>:
 8009b5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b60:	4607      	mov	r7, r0
 8009b62:	4688      	mov	r8, r1
 8009b64:	4614      	mov	r4, r2
 8009b66:	2600      	movs	r6, #0
 8009b68:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b6c:	f1b9 0901 	subs.w	r9, r9, #1
 8009b70:	d505      	bpl.n	8009b7e <_fwalk_sglue+0x22>
 8009b72:	6824      	ldr	r4, [r4, #0]
 8009b74:	2c00      	cmp	r4, #0
 8009b76:	d1f7      	bne.n	8009b68 <_fwalk_sglue+0xc>
 8009b78:	4630      	mov	r0, r6
 8009b7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b7e:	89ab      	ldrh	r3, [r5, #12]
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	d907      	bls.n	8009b94 <_fwalk_sglue+0x38>
 8009b84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b88:	3301      	adds	r3, #1
 8009b8a:	d003      	beq.n	8009b94 <_fwalk_sglue+0x38>
 8009b8c:	4629      	mov	r1, r5
 8009b8e:	4638      	mov	r0, r7
 8009b90:	47c0      	blx	r8
 8009b92:	4306      	orrs	r6, r0
 8009b94:	3568      	adds	r5, #104	@ 0x68
 8009b96:	e7e9      	b.n	8009b6c <_fwalk_sglue+0x10>

08009b98 <__swsetup_r>:
 8009b98:	b538      	push	{r3, r4, r5, lr}
 8009b9a:	4b29      	ldr	r3, [pc, #164]	@ (8009c40 <__swsetup_r+0xa8>)
 8009b9c:	4605      	mov	r5, r0
 8009b9e:	6818      	ldr	r0, [r3, #0]
 8009ba0:	460c      	mov	r4, r1
 8009ba2:	b118      	cbz	r0, 8009bac <__swsetup_r+0x14>
 8009ba4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8009ba6:	b90b      	cbnz	r3, 8009bac <__swsetup_r+0x14>
 8009ba8:	f7ff fe74 	bl	8009894 <__sinit>
 8009bac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bb0:	0719      	lsls	r1, r3, #28
 8009bb2:	d422      	bmi.n	8009bfa <__swsetup_r+0x62>
 8009bb4:	06da      	lsls	r2, r3, #27
 8009bb6:	d407      	bmi.n	8009bc8 <__swsetup_r+0x30>
 8009bb8:	2209      	movs	r2, #9
 8009bba:	602a      	str	r2, [r5, #0]
 8009bbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009bc0:	81a3      	strh	r3, [r4, #12]
 8009bc2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009bc6:	e033      	b.n	8009c30 <__swsetup_r+0x98>
 8009bc8:	0758      	lsls	r0, r3, #29
 8009bca:	d512      	bpl.n	8009bf2 <__swsetup_r+0x5a>
 8009bcc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009bce:	b141      	cbz	r1, 8009be2 <__swsetup_r+0x4a>
 8009bd0:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8009bd4:	4299      	cmp	r1, r3
 8009bd6:	d002      	beq.n	8009bde <__swsetup_r+0x46>
 8009bd8:	4628      	mov	r0, r5
 8009bda:	f000 f999 	bl	8009f10 <_free_r>
 8009bde:	2300      	movs	r3, #0
 8009be0:	6323      	str	r3, [r4, #48]	@ 0x30
 8009be2:	89a3      	ldrh	r3, [r4, #12]
 8009be4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009be8:	81a3      	strh	r3, [r4, #12]
 8009bea:	2300      	movs	r3, #0
 8009bec:	6063      	str	r3, [r4, #4]
 8009bee:	6923      	ldr	r3, [r4, #16]
 8009bf0:	6023      	str	r3, [r4, #0]
 8009bf2:	89a3      	ldrh	r3, [r4, #12]
 8009bf4:	f043 0308 	orr.w	r3, r3, #8
 8009bf8:	81a3      	strh	r3, [r4, #12]
 8009bfa:	6923      	ldr	r3, [r4, #16]
 8009bfc:	b94b      	cbnz	r3, 8009c12 <__swsetup_r+0x7a>
 8009bfe:	89a3      	ldrh	r3, [r4, #12]
 8009c00:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009c04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c08:	d003      	beq.n	8009c12 <__swsetup_r+0x7a>
 8009c0a:	4621      	mov	r1, r4
 8009c0c:	4628      	mov	r0, r5
 8009c0e:	f001 fc45 	bl	800b49c <__smakebuf_r>
 8009c12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c16:	f013 0201 	ands.w	r2, r3, #1
 8009c1a:	d00a      	beq.n	8009c32 <__swsetup_r+0x9a>
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	60a2      	str	r2, [r4, #8]
 8009c20:	6962      	ldr	r2, [r4, #20]
 8009c22:	4252      	negs	r2, r2
 8009c24:	61a2      	str	r2, [r4, #24]
 8009c26:	6922      	ldr	r2, [r4, #16]
 8009c28:	b942      	cbnz	r2, 8009c3c <__swsetup_r+0xa4>
 8009c2a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009c2e:	d1c5      	bne.n	8009bbc <__swsetup_r+0x24>
 8009c30:	bd38      	pop	{r3, r4, r5, pc}
 8009c32:	0799      	lsls	r1, r3, #30
 8009c34:	bf58      	it	pl
 8009c36:	6962      	ldrpl	r2, [r4, #20]
 8009c38:	60a2      	str	r2, [r4, #8]
 8009c3a:	e7f4      	b.n	8009c26 <__swsetup_r+0x8e>
 8009c3c:	2000      	movs	r0, #0
 8009c3e:	e7f7      	b.n	8009c30 <__swsetup_r+0x98>
 8009c40:	20000440 	.word	0x20000440

08009c44 <memmove>:
 8009c44:	4288      	cmp	r0, r1
 8009c46:	b510      	push	{r4, lr}
 8009c48:	eb01 0402 	add.w	r4, r1, r2
 8009c4c:	d902      	bls.n	8009c54 <memmove+0x10>
 8009c4e:	4284      	cmp	r4, r0
 8009c50:	4623      	mov	r3, r4
 8009c52:	d807      	bhi.n	8009c64 <memmove+0x20>
 8009c54:	1e43      	subs	r3, r0, #1
 8009c56:	42a1      	cmp	r1, r4
 8009c58:	d008      	beq.n	8009c6c <memmove+0x28>
 8009c5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c62:	e7f8      	b.n	8009c56 <memmove+0x12>
 8009c64:	4402      	add	r2, r0
 8009c66:	4601      	mov	r1, r0
 8009c68:	428a      	cmp	r2, r1
 8009c6a:	d100      	bne.n	8009c6e <memmove+0x2a>
 8009c6c:	bd10      	pop	{r4, pc}
 8009c6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c76:	e7f7      	b.n	8009c68 <memmove+0x24>

08009c78 <memset>:
 8009c78:	4402      	add	r2, r0
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d100      	bne.n	8009c82 <memset+0xa>
 8009c80:	4770      	bx	lr
 8009c82:	f803 1b01 	strb.w	r1, [r3], #1
 8009c86:	e7f9      	b.n	8009c7c <memset+0x4>

08009c88 <_raise_r>:
 8009c88:	291f      	cmp	r1, #31
 8009c8a:	b538      	push	{r3, r4, r5, lr}
 8009c8c:	4605      	mov	r5, r0
 8009c8e:	460c      	mov	r4, r1
 8009c90:	d904      	bls.n	8009c9c <_raise_r+0x14>
 8009c92:	2316      	movs	r3, #22
 8009c94:	6003      	str	r3, [r0, #0]
 8009c96:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009c9a:	bd38      	pop	{r3, r4, r5, pc}
 8009c9c:	f8d0 2118 	ldr.w	r2, [r0, #280]	@ 0x118
 8009ca0:	b112      	cbz	r2, 8009ca8 <_raise_r+0x20>
 8009ca2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ca6:	b94b      	cbnz	r3, 8009cbc <_raise_r+0x34>
 8009ca8:	4628      	mov	r0, r5
 8009caa:	f000 f837 	bl	8009d1c <_getpid_r>
 8009cae:	4622      	mov	r2, r4
 8009cb0:	4601      	mov	r1, r0
 8009cb2:	4628      	mov	r0, r5
 8009cb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009cb8:	f000 b81e 	b.w	8009cf8 <_kill_r>
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	d00a      	beq.n	8009cd6 <_raise_r+0x4e>
 8009cc0:	1c59      	adds	r1, r3, #1
 8009cc2:	d103      	bne.n	8009ccc <_raise_r+0x44>
 8009cc4:	2316      	movs	r3, #22
 8009cc6:	6003      	str	r3, [r0, #0]
 8009cc8:	2001      	movs	r0, #1
 8009cca:	e7e6      	b.n	8009c9a <_raise_r+0x12>
 8009ccc:	2100      	movs	r1, #0
 8009cce:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009cd2:	4620      	mov	r0, r4
 8009cd4:	4798      	blx	r3
 8009cd6:	2000      	movs	r0, #0
 8009cd8:	e7df      	b.n	8009c9a <_raise_r+0x12>
	...

08009cdc <raise>:
 8009cdc:	4b02      	ldr	r3, [pc, #8]	@ (8009ce8 <raise+0xc>)
 8009cde:	4601      	mov	r1, r0
 8009ce0:	6818      	ldr	r0, [r3, #0]
 8009ce2:	f7ff bfd1 	b.w	8009c88 <_raise_r>
 8009ce6:	bf00      	nop
 8009ce8:	20000440 	.word	0x20000440

08009cec <__cxa_atexit>:
 8009cec:	4613      	mov	r3, r2
 8009cee:	460a      	mov	r2, r1
 8009cf0:	4601      	mov	r1, r0
 8009cf2:	2002      	movs	r0, #2
 8009cf4:	f000 b866 	b.w	8009dc4 <__register_exitproc>

08009cf8 <_kill_r>:
 8009cf8:	b538      	push	{r3, r4, r5, lr}
 8009cfa:	4d07      	ldr	r5, [pc, #28]	@ (8009d18 <_kill_r+0x20>)
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	4604      	mov	r4, r0
 8009d00:	4608      	mov	r0, r1
 8009d02:	4611      	mov	r1, r2
 8009d04:	602b      	str	r3, [r5, #0]
 8009d06:	f003 fe57 	bl	800d9b8 <_kill>
 8009d0a:	1c43      	adds	r3, r0, #1
 8009d0c:	d102      	bne.n	8009d14 <_kill_r+0x1c>
 8009d0e:	682b      	ldr	r3, [r5, #0]
 8009d10:	b103      	cbz	r3, 8009d14 <_kill_r+0x1c>
 8009d12:	6023      	str	r3, [r4, #0]
 8009d14:	bd38      	pop	{r3, r4, r5, pc}
 8009d16:	bf00      	nop
 8009d18:	200100c4 	.word	0x200100c4

08009d1c <_getpid_r>:
 8009d1c:	f003 be44 	b.w	800d9a8 <_getpid>

08009d20 <_sbrk_r>:
 8009d20:	b538      	push	{r3, r4, r5, lr}
 8009d22:	4d06      	ldr	r5, [pc, #24]	@ (8009d3c <_sbrk_r+0x1c>)
 8009d24:	2300      	movs	r3, #0
 8009d26:	4604      	mov	r4, r0
 8009d28:	4608      	mov	r0, r1
 8009d2a:	602b      	str	r3, [r5, #0]
 8009d2c:	f003 fe4c 	bl	800d9c8 <_sbrk>
 8009d30:	1c43      	adds	r3, r0, #1
 8009d32:	d102      	bne.n	8009d3a <_sbrk_r+0x1a>
 8009d34:	682b      	ldr	r3, [r5, #0]
 8009d36:	b103      	cbz	r3, 8009d3a <_sbrk_r+0x1a>
 8009d38:	6023      	str	r3, [r4, #0]
 8009d3a:	bd38      	pop	{r3, r4, r5, pc}
 8009d3c:	200100c4 	.word	0x200100c4

08009d40 <sysconf>:
 8009d40:	2808      	cmp	r0, #8
 8009d42:	b508      	push	{r3, lr}
 8009d44:	d006      	beq.n	8009d54 <sysconf+0x14>
 8009d46:	f001 fdf3 	bl	800b930 <__errno>
 8009d4a:	2316      	movs	r3, #22
 8009d4c:	6003      	str	r3, [r0, #0]
 8009d4e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009d52:	bd08      	pop	{r3, pc}
 8009d54:	2080      	movs	r0, #128	@ 0x80
 8009d56:	e7fc      	b.n	8009d52 <sysconf+0x12>

08009d58 <__libc_init_array>:
 8009d58:	b570      	push	{r4, r5, r6, lr}
 8009d5a:	4d0d      	ldr	r5, [pc, #52]	@ (8009d90 <__libc_init_array+0x38>)
 8009d5c:	4c0d      	ldr	r4, [pc, #52]	@ (8009d94 <__libc_init_array+0x3c>)
 8009d5e:	1b64      	subs	r4, r4, r5
 8009d60:	10a4      	asrs	r4, r4, #2
 8009d62:	2600      	movs	r6, #0
 8009d64:	42a6      	cmp	r6, r4
 8009d66:	d109      	bne.n	8009d7c <__libc_init_array+0x24>
 8009d68:	4d0b      	ldr	r5, [pc, #44]	@ (8009d98 <__libc_init_array+0x40>)
 8009d6a:	4c0c      	ldr	r4, [pc, #48]	@ (8009d9c <__libc_init_array+0x44>)
 8009d6c:	f003 fe3a 	bl	800d9e4 <_init>
 8009d70:	1b64      	subs	r4, r4, r5
 8009d72:	10a4      	asrs	r4, r4, #2
 8009d74:	2600      	movs	r6, #0
 8009d76:	42a6      	cmp	r6, r4
 8009d78:	d105      	bne.n	8009d86 <__libc_init_array+0x2e>
 8009d7a:	bd70      	pop	{r4, r5, r6, pc}
 8009d7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d80:	4798      	blx	r3
 8009d82:	3601      	adds	r6, #1
 8009d84:	e7ee      	b.n	8009d64 <__libc_init_array+0xc>
 8009d86:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d8a:	4798      	blx	r3
 8009d8c:	3601      	adds	r6, #1
 8009d8e:	e7f2      	b.n	8009d76 <__libc_init_array+0x1e>
 8009d90:	0808e9d0 	.word	0x0808e9d0
 8009d94:	0808e9d0 	.word	0x0808e9d0
 8009d98:	0808e9d0 	.word	0x0808e9d0
 8009d9c:	0808e9e4 	.word	0x0808e9e4

08009da0 <__retarget_lock_init_recursive>:
 8009da0:	4770      	bx	lr

08009da2 <__retarget_lock_close_recursive>:
 8009da2:	4770      	bx	lr

08009da4 <__retarget_lock_acquire_recursive>:
 8009da4:	4770      	bx	lr

08009da6 <__retarget_lock_release_recursive>:
 8009da6:	4770      	bx	lr

08009da8 <memcpy>:
 8009da8:	440a      	add	r2, r1
 8009daa:	4291      	cmp	r1, r2
 8009dac:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009db0:	d100      	bne.n	8009db4 <memcpy+0xc>
 8009db2:	4770      	bx	lr
 8009db4:	b510      	push	{r4, lr}
 8009db6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009dba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009dbe:	4291      	cmp	r1, r2
 8009dc0:	d1f9      	bne.n	8009db6 <memcpy+0xe>
 8009dc2:	bd10      	pop	{r4, pc}

08009dc4 <__register_exitproc>:
 8009dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dc8:	f8df a074 	ldr.w	sl, [pc, #116]	@ 8009e40 <__register_exitproc+0x7c>
 8009dcc:	4606      	mov	r6, r0
 8009dce:	f8da 0000 	ldr.w	r0, [sl]
 8009dd2:	4698      	mov	r8, r3
 8009dd4:	460f      	mov	r7, r1
 8009dd6:	4691      	mov	r9, r2
 8009dd8:	f7ff ffe4 	bl	8009da4 <__retarget_lock_acquire_recursive>
 8009ddc:	4b16      	ldr	r3, [pc, #88]	@ (8009e38 <__register_exitproc+0x74>)
 8009dde:	681c      	ldr	r4, [r3, #0]
 8009de0:	b90c      	cbnz	r4, 8009de6 <__register_exitproc+0x22>
 8009de2:	4c16      	ldr	r4, [pc, #88]	@ (8009e3c <__register_exitproc+0x78>)
 8009de4:	601c      	str	r4, [r3, #0]
 8009de6:	6865      	ldr	r5, [r4, #4]
 8009de8:	f8da 0000 	ldr.w	r0, [sl]
 8009dec:	2d1f      	cmp	r5, #31
 8009dee:	dd05      	ble.n	8009dfc <__register_exitproc+0x38>
 8009df0:	f7ff ffd9 	bl	8009da6 <__retarget_lock_release_recursive>
 8009df4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dfc:	b19e      	cbz	r6, 8009e26 <__register_exitproc+0x62>
 8009dfe:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8009e02:	2201      	movs	r2, #1
 8009e04:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 8009e08:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 8009e0c:	40aa      	lsls	r2, r5
 8009e0e:	4313      	orrs	r3, r2
 8009e10:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 8009e14:	2e02      	cmp	r6, #2
 8009e16:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 8009e1a:	bf02      	ittt	eq
 8009e1c:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 8009e20:	4313      	orreq	r3, r2
 8009e22:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 8009e26:	1c6b      	adds	r3, r5, #1
 8009e28:	3502      	adds	r5, #2
 8009e2a:	6063      	str	r3, [r4, #4]
 8009e2c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8009e30:	f7ff ffb9 	bl	8009da6 <__retarget_lock_release_recursive>
 8009e34:	2000      	movs	r0, #0
 8009e36:	e7df      	b.n	8009df8 <__register_exitproc+0x34>
 8009e38:	200100c0 	.word	0x200100c0
 8009e3c:	2000ff30 	.word	0x2000ff30
 8009e40:	20000568 	.word	0x20000568

08009e44 <register_fini>:
 8009e44:	4b02      	ldr	r3, [pc, #8]	@ (8009e50 <register_fini+0xc>)
 8009e46:	b113      	cbz	r3, 8009e4e <register_fini+0xa>
 8009e48:	4802      	ldr	r0, [pc, #8]	@ (8009e54 <register_fini+0x10>)
 8009e4a:	f000 b805 	b.w	8009e58 <atexit>
 8009e4e:	4770      	bx	lr
 8009e50:	00000000 	.word	0x00000000
 8009e54:	0800b93d 	.word	0x0800b93d

08009e58 <atexit>:
 8009e58:	2300      	movs	r3, #0
 8009e5a:	4601      	mov	r1, r0
 8009e5c:	461a      	mov	r2, r3
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f7ff bfb0 	b.w	8009dc4 <__register_exitproc>

08009e64 <_malloc_trim_r>:
 8009e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e68:	4606      	mov	r6, r0
 8009e6a:	2008      	movs	r0, #8
 8009e6c:	4689      	mov	r9, r1
 8009e6e:	f7ff ff67 	bl	8009d40 <sysconf>
 8009e72:	4f24      	ldr	r7, [pc, #144]	@ (8009f04 <_malloc_trim_r+0xa0>)
 8009e74:	4680      	mov	r8, r0
 8009e76:	4630      	mov	r0, r6
 8009e78:	f7ff faac 	bl	80093d4 <__malloc_lock>
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	685d      	ldr	r5, [r3, #4]
 8009e80:	f025 0503 	bic.w	r5, r5, #3
 8009e84:	f1a5 0411 	sub.w	r4, r5, #17
 8009e88:	eba4 0409 	sub.w	r4, r4, r9
 8009e8c:	4444      	add	r4, r8
 8009e8e:	fbb4 f4f8 	udiv	r4, r4, r8
 8009e92:	3c01      	subs	r4, #1
 8009e94:	fb08 f404 	mul.w	r4, r8, r4
 8009e98:	45a0      	cmp	r8, r4
 8009e9a:	dd05      	ble.n	8009ea8 <_malloc_trim_r+0x44>
 8009e9c:	4630      	mov	r0, r6
 8009e9e:	f7ff fa9f 	bl	80093e0 <__malloc_unlock>
 8009ea2:	2000      	movs	r0, #0
 8009ea4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ea8:	2100      	movs	r1, #0
 8009eaa:	4630      	mov	r0, r6
 8009eac:	f7ff ff38 	bl	8009d20 <_sbrk_r>
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	442b      	add	r3, r5
 8009eb4:	4298      	cmp	r0, r3
 8009eb6:	d1f1      	bne.n	8009e9c <_malloc_trim_r+0x38>
 8009eb8:	4261      	negs	r1, r4
 8009eba:	4630      	mov	r0, r6
 8009ebc:	f7ff ff30 	bl	8009d20 <_sbrk_r>
 8009ec0:	3001      	adds	r0, #1
 8009ec2:	d110      	bne.n	8009ee6 <_malloc_trim_r+0x82>
 8009ec4:	2100      	movs	r1, #0
 8009ec6:	4630      	mov	r0, r6
 8009ec8:	f7ff ff2a 	bl	8009d20 <_sbrk_r>
 8009ecc:	68ba      	ldr	r2, [r7, #8]
 8009ece:	1a83      	subs	r3, r0, r2
 8009ed0:	2b0f      	cmp	r3, #15
 8009ed2:	dde3      	ble.n	8009e9c <_malloc_trim_r+0x38>
 8009ed4:	490c      	ldr	r1, [pc, #48]	@ (8009f08 <_malloc_trim_r+0xa4>)
 8009ed6:	6809      	ldr	r1, [r1, #0]
 8009ed8:	1a40      	subs	r0, r0, r1
 8009eda:	490c      	ldr	r1, [pc, #48]	@ (8009f0c <_malloc_trim_r+0xa8>)
 8009edc:	f043 0301 	orr.w	r3, r3, #1
 8009ee0:	6008      	str	r0, [r1, #0]
 8009ee2:	6053      	str	r3, [r2, #4]
 8009ee4:	e7da      	b.n	8009e9c <_malloc_trim_r+0x38>
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	4a08      	ldr	r2, [pc, #32]	@ (8009f0c <_malloc_trim_r+0xa8>)
 8009eea:	1b2d      	subs	r5, r5, r4
 8009eec:	f045 0501 	orr.w	r5, r5, #1
 8009ef0:	605d      	str	r5, [r3, #4]
 8009ef2:	6813      	ldr	r3, [r2, #0]
 8009ef4:	4630      	mov	r0, r6
 8009ef6:	1b1b      	subs	r3, r3, r4
 8009ef8:	6013      	str	r3, [r2, #0]
 8009efa:	f7ff fa71 	bl	80093e0 <__malloc_unlock>
 8009efe:	2001      	movs	r0, #1
 8009f00:	e7d0      	b.n	8009ea4 <_malloc_trim_r+0x40>
 8009f02:	bf00      	nop
 8009f04:	2000002c 	.word	0x2000002c
 8009f08:	20000024 	.word	0x20000024
 8009f0c:	2000fdbc 	.word	0x2000fdbc

08009f10 <_free_r>:
 8009f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f12:	4604      	mov	r4, r0
 8009f14:	460f      	mov	r7, r1
 8009f16:	2900      	cmp	r1, #0
 8009f18:	f000 80b1 	beq.w	800a07e <_free_r+0x16e>
 8009f1c:	f7ff fa5a 	bl	80093d4 <__malloc_lock>
 8009f20:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8009f24:	4d56      	ldr	r5, [pc, #344]	@ (800a080 <_free_r+0x170>)
 8009f26:	f022 0001 	bic.w	r0, r2, #1
 8009f2a:	f1a7 0308 	sub.w	r3, r7, #8
 8009f2e:	eb03 0c00 	add.w	ip, r3, r0
 8009f32:	68a9      	ldr	r1, [r5, #8]
 8009f34:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8009f38:	4561      	cmp	r1, ip
 8009f3a:	f026 0603 	bic.w	r6, r6, #3
 8009f3e:	f002 0201 	and.w	r2, r2, #1
 8009f42:	d11b      	bne.n	8009f7c <_free_r+0x6c>
 8009f44:	4406      	add	r6, r0
 8009f46:	b93a      	cbnz	r2, 8009f58 <_free_r+0x48>
 8009f48:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8009f4c:	1a9b      	subs	r3, r3, r2
 8009f4e:	4416      	add	r6, r2
 8009f50:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8009f54:	60ca      	str	r2, [r1, #12]
 8009f56:	6091      	str	r1, [r2, #8]
 8009f58:	f046 0201 	orr.w	r2, r6, #1
 8009f5c:	605a      	str	r2, [r3, #4]
 8009f5e:	60ab      	str	r3, [r5, #8]
 8009f60:	4b48      	ldr	r3, [pc, #288]	@ (800a084 <_free_r+0x174>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	42b3      	cmp	r3, r6
 8009f66:	d804      	bhi.n	8009f72 <_free_r+0x62>
 8009f68:	4b47      	ldr	r3, [pc, #284]	@ (800a088 <_free_r+0x178>)
 8009f6a:	4620      	mov	r0, r4
 8009f6c:	6819      	ldr	r1, [r3, #0]
 8009f6e:	f7ff ff79 	bl	8009e64 <_malloc_trim_r>
 8009f72:	4620      	mov	r0, r4
 8009f74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009f78:	f7ff ba32 	b.w	80093e0 <__malloc_unlock>
 8009f7c:	f8cc 6004 	str.w	r6, [ip, #4]
 8009f80:	2a00      	cmp	r2, #0
 8009f82:	d138      	bne.n	8009ff6 <_free_r+0xe6>
 8009f84:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8009f88:	1a5b      	subs	r3, r3, r1
 8009f8a:	4408      	add	r0, r1
 8009f8c:	6899      	ldr	r1, [r3, #8]
 8009f8e:	f105 0708 	add.w	r7, r5, #8
 8009f92:	42b9      	cmp	r1, r7
 8009f94:	d031      	beq.n	8009ffa <_free_r+0xea>
 8009f96:	68df      	ldr	r7, [r3, #12]
 8009f98:	60cf      	str	r7, [r1, #12]
 8009f9a:	60b9      	str	r1, [r7, #8]
 8009f9c:	eb0c 0106 	add.w	r1, ip, r6
 8009fa0:	6849      	ldr	r1, [r1, #4]
 8009fa2:	07c9      	lsls	r1, r1, #31
 8009fa4:	d40b      	bmi.n	8009fbe <_free_r+0xae>
 8009fa6:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8009faa:	4430      	add	r0, r6
 8009fac:	bb3a      	cbnz	r2, 8009ffe <_free_r+0xee>
 8009fae:	4e37      	ldr	r6, [pc, #220]	@ (800a08c <_free_r+0x17c>)
 8009fb0:	42b1      	cmp	r1, r6
 8009fb2:	d124      	bne.n	8009ffe <_free_r+0xee>
 8009fb4:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8009fb8:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8009fbc:	2201      	movs	r2, #1
 8009fbe:	f040 0101 	orr.w	r1, r0, #1
 8009fc2:	6059      	str	r1, [r3, #4]
 8009fc4:	5018      	str	r0, [r3, r0]
 8009fc6:	2a00      	cmp	r2, #0
 8009fc8:	d1d3      	bne.n	8009f72 <_free_r+0x62>
 8009fca:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8009fce:	d21b      	bcs.n	800a008 <_free_r+0xf8>
 8009fd0:	08c2      	lsrs	r2, r0, #3
 8009fd2:	2101      	movs	r1, #1
 8009fd4:	0940      	lsrs	r0, r0, #5
 8009fd6:	4081      	lsls	r1, r0
 8009fd8:	6868      	ldr	r0, [r5, #4]
 8009fda:	3201      	adds	r2, #1
 8009fdc:	4301      	orrs	r1, r0
 8009fde:	6069      	str	r1, [r5, #4]
 8009fe0:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 8009fe4:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 8009fe8:	3908      	subs	r1, #8
 8009fea:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009fee:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 8009ff2:	60c3      	str	r3, [r0, #12]
 8009ff4:	e7bd      	b.n	8009f72 <_free_r+0x62>
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	e7d0      	b.n	8009f9c <_free_r+0x8c>
 8009ffa:	2201      	movs	r2, #1
 8009ffc:	e7ce      	b.n	8009f9c <_free_r+0x8c>
 8009ffe:	f8dc 600c 	ldr.w	r6, [ip, #12]
 800a002:	60ce      	str	r6, [r1, #12]
 800a004:	60b1      	str	r1, [r6, #8]
 800a006:	e7da      	b.n	8009fbe <_free_r+0xae>
 800a008:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 800a00c:	ea4f 2250 	mov.w	r2, r0, lsr #9
 800a010:	d214      	bcs.n	800a03c <_free_r+0x12c>
 800a012:	0982      	lsrs	r2, r0, #6
 800a014:	3238      	adds	r2, #56	@ 0x38
 800a016:	1c51      	adds	r1, r2, #1
 800a018:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800a01c:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800a020:	428e      	cmp	r6, r1
 800a022:	d125      	bne.n	800a070 <_free_r+0x160>
 800a024:	2001      	movs	r0, #1
 800a026:	1092      	asrs	r2, r2, #2
 800a028:	fa00 f202 	lsl.w	r2, r0, r2
 800a02c:	6868      	ldr	r0, [r5, #4]
 800a02e:	4302      	orrs	r2, r0
 800a030:	606a      	str	r2, [r5, #4]
 800a032:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800a036:	60b3      	str	r3, [r6, #8]
 800a038:	60cb      	str	r3, [r1, #12]
 800a03a:	e79a      	b.n	8009f72 <_free_r+0x62>
 800a03c:	2a14      	cmp	r2, #20
 800a03e:	d801      	bhi.n	800a044 <_free_r+0x134>
 800a040:	325b      	adds	r2, #91	@ 0x5b
 800a042:	e7e8      	b.n	800a016 <_free_r+0x106>
 800a044:	2a54      	cmp	r2, #84	@ 0x54
 800a046:	d802      	bhi.n	800a04e <_free_r+0x13e>
 800a048:	0b02      	lsrs	r2, r0, #12
 800a04a:	326e      	adds	r2, #110	@ 0x6e
 800a04c:	e7e3      	b.n	800a016 <_free_r+0x106>
 800a04e:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 800a052:	d802      	bhi.n	800a05a <_free_r+0x14a>
 800a054:	0bc2      	lsrs	r2, r0, #15
 800a056:	3277      	adds	r2, #119	@ 0x77
 800a058:	e7dd      	b.n	800a016 <_free_r+0x106>
 800a05a:	f240 5154 	movw	r1, #1364	@ 0x554
 800a05e:	428a      	cmp	r2, r1
 800a060:	bf9a      	itte	ls
 800a062:	0c82      	lsrls	r2, r0, #18
 800a064:	327c      	addls	r2, #124	@ 0x7c
 800a066:	227e      	movhi	r2, #126	@ 0x7e
 800a068:	e7d5      	b.n	800a016 <_free_r+0x106>
 800a06a:	6889      	ldr	r1, [r1, #8]
 800a06c:	428e      	cmp	r6, r1
 800a06e:	d004      	beq.n	800a07a <_free_r+0x16a>
 800a070:	684a      	ldr	r2, [r1, #4]
 800a072:	f022 0203 	bic.w	r2, r2, #3
 800a076:	4282      	cmp	r2, r0
 800a078:	d8f7      	bhi.n	800a06a <_free_r+0x15a>
 800a07a:	68ce      	ldr	r6, [r1, #12]
 800a07c:	e7d9      	b.n	800a032 <_free_r+0x122>
 800a07e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a080:	2000002c 	.word	0x2000002c
 800a084:	20000028 	.word	0x20000028
 800a088:	2000fdec 	.word	0x2000fdec
 800a08c:	20000034 	.word	0x20000034

0800a090 <_svfprintf_r>:
 800a090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a094:	b0d3      	sub	sp, #332	@ 0x14c
 800a096:	468b      	mov	fp, r1
 800a098:	4691      	mov	r9, r2
 800a09a:	461e      	mov	r6, r3
 800a09c:	9003      	str	r0, [sp, #12]
 800a09e:	f001 fbdb 	bl	800b858 <_localeconv_r>
 800a0a2:	6803      	ldr	r3, [r0, #0]
 800a0a4:	9316      	str	r3, [sp, #88]	@ 0x58
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f7f6 f902 	bl	80002b0 <strlen>
 800a0ac:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800a0b0:	900d      	str	r0, [sp, #52]	@ 0x34
 800a0b2:	061b      	lsls	r3, r3, #24
 800a0b4:	d515      	bpl.n	800a0e2 <_svfprintf_r+0x52>
 800a0b6:	f8db 3010 	ldr.w	r3, [fp, #16]
 800a0ba:	b993      	cbnz	r3, 800a0e2 <_svfprintf_r+0x52>
 800a0bc:	9803      	ldr	r0, [sp, #12]
 800a0be:	2140      	movs	r1, #64	@ 0x40
 800a0c0:	f7fe ff4e 	bl	8008f60 <_malloc_r>
 800a0c4:	f8cb 0000 	str.w	r0, [fp]
 800a0c8:	f8cb 0010 	str.w	r0, [fp, #16]
 800a0cc:	b930      	cbnz	r0, 800a0dc <_svfprintf_r+0x4c>
 800a0ce:	9a03      	ldr	r2, [sp, #12]
 800a0d0:	230c      	movs	r3, #12
 800a0d2:	6013      	str	r3, [r2, #0]
 800a0d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a0d8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a0da:	e1f7      	b.n	800a4cc <_svfprintf_r+0x43c>
 800a0dc:	2340      	movs	r3, #64	@ 0x40
 800a0de:	f8cb 3014 	str.w	r3, [fp, #20]
 800a0e2:	ed9f 7b93 	vldr	d7, [pc, #588]	@ 800a330 <_svfprintf_r+0x2a0>
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 800a0ec:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800a0f0:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 800a0f4:	ac29      	add	r4, sp, #164	@ 0xa4
 800a0f6:	9426      	str	r4, [sp, #152]	@ 0x98
 800a0f8:	9304      	str	r3, [sp, #16]
 800a0fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0fc:	9312      	str	r3, [sp, #72]	@ 0x48
 800a0fe:	9317      	str	r3, [sp, #92]	@ 0x5c
 800a100:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a102:	464b      	mov	r3, r9
 800a104:	461d      	mov	r5, r3
 800a106:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a10a:	b10a      	cbz	r2, 800a110 <_svfprintf_r+0x80>
 800a10c:	2a25      	cmp	r2, #37	@ 0x25
 800a10e:	d1f9      	bne.n	800a104 <_svfprintf_r+0x74>
 800a110:	ebb5 0709 	subs.w	r7, r5, r9
 800a114:	d00d      	beq.n	800a132 <_svfprintf_r+0xa2>
 800a116:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800a118:	443b      	add	r3, r7
 800a11a:	9328      	str	r3, [sp, #160]	@ 0xa0
 800a11c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800a11e:	3301      	adds	r3, #1
 800a120:	2b07      	cmp	r3, #7
 800a122:	e9c4 9700 	strd	r9, r7, [r4]
 800a126:	9327      	str	r3, [sp, #156]	@ 0x9c
 800a128:	dc75      	bgt.n	800a216 <_svfprintf_r+0x186>
 800a12a:	3408      	adds	r4, #8
 800a12c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a12e:	443b      	add	r3, r7
 800a130:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a132:	782b      	ldrb	r3, [r5, #0]
 800a134:	2b00      	cmp	r3, #0
 800a136:	f001 8148 	beq.w	800b3ca <_svfprintf_r+0x133a>
 800a13a:	2200      	movs	r2, #0
 800a13c:	1c6b      	adds	r3, r5, #1
 800a13e:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 800a142:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800a146:	920e      	str	r2, [sp, #56]	@ 0x38
 800a148:	4615      	mov	r5, r2
 800a14a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a14e:	9206      	str	r2, [sp, #24]
 800a150:	930c      	str	r3, [sp, #48]	@ 0x30
 800a152:	9b06      	ldr	r3, [sp, #24]
 800a154:	3b20      	subs	r3, #32
 800a156:	2b5a      	cmp	r3, #90	@ 0x5a
 800a158:	f200 85a4 	bhi.w	800aca4 <_svfprintf_r+0xc14>
 800a15c:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a160:	05a2009d 	.word	0x05a2009d
 800a164:	00a505a2 	.word	0x00a505a2
 800a168:	05a205a2 	.word	0x05a205a2
 800a16c:	008505a2 	.word	0x008505a2
 800a170:	05a205a2 	.word	0x05a205a2
 800a174:	00b200a8 	.word	0x00b200a8
 800a178:	00af05a2 	.word	0x00af05a2
 800a17c:	05a200b4 	.word	0x05a200b4
 800a180:	00d100ce 	.word	0x00d100ce
 800a184:	00d100d1 	.word	0x00d100d1
 800a188:	00d100d1 	.word	0x00d100d1
 800a18c:	00d100d1 	.word	0x00d100d1
 800a190:	00d100d1 	.word	0x00d100d1
 800a194:	05a205a2 	.word	0x05a205a2
 800a198:	05a205a2 	.word	0x05a205a2
 800a19c:	05a205a2 	.word	0x05a205a2
 800a1a0:	014705a2 	.word	0x014705a2
 800a1a4:	010805a2 	.word	0x010805a2
 800a1a8:	0147011b 	.word	0x0147011b
 800a1ac:	01470147 	.word	0x01470147
 800a1b0:	05a205a2 	.word	0x05a205a2
 800a1b4:	05a205a2 	.word	0x05a205a2
 800a1b8:	05a200e2 	.word	0x05a200e2
 800a1bc:	049d05a2 	.word	0x049d05a2
 800a1c0:	05a205a2 	.word	0x05a205a2
 800a1c4:	04e705a2 	.word	0x04e705a2
 800a1c8:	050805a2 	.word	0x050805a2
 800a1cc:	05a205a2 	.word	0x05a205a2
 800a1d0:	05a2052a 	.word	0x05a2052a
 800a1d4:	05a205a2 	.word	0x05a205a2
 800a1d8:	05a205a2 	.word	0x05a205a2
 800a1dc:	05a205a2 	.word	0x05a205a2
 800a1e0:	014705a2 	.word	0x014705a2
 800a1e4:	010805a2 	.word	0x010805a2
 800a1e8:	0147011d 	.word	0x0147011d
 800a1ec:	01470147 	.word	0x01470147
 800a1f0:	011d00ee 	.word	0x011d00ee
 800a1f4:	05a20102 	.word	0x05a20102
 800a1f8:	05a200fb 	.word	0x05a200fb
 800a1fc:	049f047e 	.word	0x049f047e
 800a200:	010204d6 	.word	0x010204d6
 800a204:	04e705a2 	.word	0x04e705a2
 800a208:	050a009b 	.word	0x050a009b
 800a20c:	05a205a2 	.word	0x05a205a2
 800a210:	05a20065 	.word	0x05a20065
 800a214:	009b      	.short	0x009b
 800a216:	9803      	ldr	r0, [sp, #12]
 800a218:	aa26      	add	r2, sp, #152	@ 0x98
 800a21a:	4659      	mov	r1, fp
 800a21c:	f002 fa0c 	bl	800c638 <__ssprint_r>
 800a220:	2800      	cmp	r0, #0
 800a222:	f040 814e 	bne.w	800a4c2 <_svfprintf_r+0x432>
 800a226:	ac29      	add	r4, sp, #164	@ 0xa4
 800a228:	e780      	b.n	800a12c <_svfprintf_r+0x9c>
 800a22a:	4b43      	ldr	r3, [pc, #268]	@ (800a338 <_svfprintf_r+0x2a8>)
 800a22c:	9319      	str	r3, [sp, #100]	@ 0x64
 800a22e:	f015 0320 	ands.w	r3, r5, #32
 800a232:	f000 84c2 	beq.w	800abba <_svfprintf_r+0xb2a>
 800a236:	3607      	adds	r6, #7
 800a238:	f026 0307 	bic.w	r3, r6, #7
 800a23c:	461a      	mov	r2, r3
 800a23e:	685f      	ldr	r7, [r3, #4]
 800a240:	f852 6b08 	ldr.w	r6, [r2], #8
 800a244:	9207      	str	r2, [sp, #28]
 800a246:	07eb      	lsls	r3, r5, #31
 800a248:	d50a      	bpl.n	800a260 <_svfprintf_r+0x1d0>
 800a24a:	ea56 0307 	orrs.w	r3, r6, r7
 800a24e:	d007      	beq.n	800a260 <_svfprintf_r+0x1d0>
 800a250:	2330      	movs	r3, #48	@ 0x30
 800a252:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 800a256:	9b06      	ldr	r3, [sp, #24]
 800a258:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 800a25c:	f045 0502 	orr.w	r5, r5, #2
 800a260:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 800a264:	2302      	movs	r3, #2
 800a266:	f000 bc28 	b.w	800aaba <_svfprintf_r+0xa2a>
 800a26a:	9803      	ldr	r0, [sp, #12]
 800a26c:	f001 faf4 	bl	800b858 <_localeconv_r>
 800a270:	6843      	ldr	r3, [r0, #4]
 800a272:	9317      	str	r3, [sp, #92]	@ 0x5c
 800a274:	4618      	mov	r0, r3
 800a276:	f7f6 f81b 	bl	80002b0 <strlen>
 800a27a:	9012      	str	r0, [sp, #72]	@ 0x48
 800a27c:	9803      	ldr	r0, [sp, #12]
 800a27e:	f001 faeb 	bl	800b858 <_localeconv_r>
 800a282:	6883      	ldr	r3, [r0, #8]
 800a284:	9309      	str	r3, [sp, #36]	@ 0x24
 800a286:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a288:	b12b      	cbz	r3, 800a296 <_svfprintf_r+0x206>
 800a28a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a28c:	b11b      	cbz	r3, 800a296 <_svfprintf_r+0x206>
 800a28e:	781b      	ldrb	r3, [r3, #0]
 800a290:	b10b      	cbz	r3, 800a296 <_svfprintf_r+0x206>
 800a292:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 800a296:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a298:	e757      	b.n	800a14a <_svfprintf_r+0xba>
 800a29a:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d1f9      	bne.n	800a296 <_svfprintf_r+0x206>
 800a2a2:	2320      	movs	r3, #32
 800a2a4:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800a2a8:	e7f5      	b.n	800a296 <_svfprintf_r+0x206>
 800a2aa:	f045 0501 	orr.w	r5, r5, #1
 800a2ae:	e7f2      	b.n	800a296 <_svfprintf_r+0x206>
 800a2b0:	f856 3b04 	ldr.w	r3, [r6], #4
 800a2b4:	930e      	str	r3, [sp, #56]	@ 0x38
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	daed      	bge.n	800a296 <_svfprintf_r+0x206>
 800a2ba:	425b      	negs	r3, r3
 800a2bc:	930e      	str	r3, [sp, #56]	@ 0x38
 800a2be:	f045 0504 	orr.w	r5, r5, #4
 800a2c2:	e7e8      	b.n	800a296 <_svfprintf_r+0x206>
 800a2c4:	232b      	movs	r3, #43	@ 0x2b
 800a2c6:	e7ed      	b.n	800a2a4 <_svfprintf_r+0x214>
 800a2c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a2ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2ce:	9206      	str	r2, [sp, #24]
 800a2d0:	2a2a      	cmp	r2, #42	@ 0x2a
 800a2d2:	d10f      	bne.n	800a2f4 <_svfprintf_r+0x264>
 800a2d4:	f856 2b04 	ldr.w	r2, [r6], #4
 800a2d8:	930c      	str	r3, [sp, #48]	@ 0x30
 800a2da:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 800a2de:	e7da      	b.n	800a296 <_svfprintf_r+0x206>
 800a2e0:	fb01 2808 	mla	r8, r1, r8, r2
 800a2e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2e8:	9206      	str	r2, [sp, #24]
 800a2ea:	9a06      	ldr	r2, [sp, #24]
 800a2ec:	3a30      	subs	r2, #48	@ 0x30
 800a2ee:	2a09      	cmp	r2, #9
 800a2f0:	d9f6      	bls.n	800a2e0 <_svfprintf_r+0x250>
 800a2f2:	e72d      	b.n	800a150 <_svfprintf_r+0xc0>
 800a2f4:	f04f 0800 	mov.w	r8, #0
 800a2f8:	210a      	movs	r1, #10
 800a2fa:	e7f6      	b.n	800a2ea <_svfprintf_r+0x25a>
 800a2fc:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 800a300:	e7c9      	b.n	800a296 <_svfprintf_r+0x206>
 800a302:	2200      	movs	r2, #0
 800a304:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a306:	920e      	str	r2, [sp, #56]	@ 0x38
 800a308:	210a      	movs	r1, #10
 800a30a:	9a06      	ldr	r2, [sp, #24]
 800a30c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800a30e:	3a30      	subs	r2, #48	@ 0x30
 800a310:	fb01 2200 	mla	r2, r1, r0, r2
 800a314:	920e      	str	r2, [sp, #56]	@ 0x38
 800a316:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a31a:	9206      	str	r2, [sp, #24]
 800a31c:	3a30      	subs	r2, #48	@ 0x30
 800a31e:	2a09      	cmp	r2, #9
 800a320:	d9f3      	bls.n	800a30a <_svfprintf_r+0x27a>
 800a322:	e715      	b.n	800a150 <_svfprintf_r+0xc0>
 800a324:	f045 0508 	orr.w	r5, r5, #8
 800a328:	e7b5      	b.n	800a296 <_svfprintf_r+0x206>
 800a32a:	bf00      	nop
 800a32c:	f3af 8000 	nop.w
	...
 800a338:	0808e64c 	.word	0x0808e64c
 800a33c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a33e:	781b      	ldrb	r3, [r3, #0]
 800a340:	2b68      	cmp	r3, #104	@ 0x68
 800a342:	bf01      	itttt	eq
 800a344:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 800a346:	3301      	addeq	r3, #1
 800a348:	930c      	streq	r3, [sp, #48]	@ 0x30
 800a34a:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 800a34e:	bf18      	it	ne
 800a350:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 800a354:	e79f      	b.n	800a296 <_svfprintf_r+0x206>
 800a356:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a358:	781b      	ldrb	r3, [r3, #0]
 800a35a:	2b6c      	cmp	r3, #108	@ 0x6c
 800a35c:	d105      	bne.n	800a36a <_svfprintf_r+0x2da>
 800a35e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a360:	3301      	adds	r3, #1
 800a362:	930c      	str	r3, [sp, #48]	@ 0x30
 800a364:	f045 0520 	orr.w	r5, r5, #32
 800a368:	e795      	b.n	800a296 <_svfprintf_r+0x206>
 800a36a:	f045 0510 	orr.w	r5, r5, #16
 800a36e:	e792      	b.n	800a296 <_svfprintf_r+0x206>
 800a370:	4632      	mov	r2, r6
 800a372:	f852 3b04 	ldr.w	r3, [r2], #4
 800a376:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 800a37a:	2300      	movs	r3, #0
 800a37c:	9207      	str	r2, [sp, #28]
 800a37e:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800a382:	469a      	mov	sl, r3
 800a384:	f04f 0801 	mov.w	r8, #1
 800a388:	9310      	str	r3, [sp, #64]	@ 0x40
 800a38a:	461f      	mov	r7, r3
 800a38c:	9308      	str	r3, [sp, #32]
 800a38e:	461e      	mov	r6, r3
 800a390:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 800a394:	e1d2      	b.n	800a73c <_svfprintf_r+0x6ac>
 800a396:	f045 0510 	orr.w	r5, r5, #16
 800a39a:	06af      	lsls	r7, r5, #26
 800a39c:	d512      	bpl.n	800a3c4 <_svfprintf_r+0x334>
 800a39e:	3607      	adds	r6, #7
 800a3a0:	f026 0307 	bic.w	r3, r6, #7
 800a3a4:	461a      	mov	r2, r3
 800a3a6:	685f      	ldr	r7, [r3, #4]
 800a3a8:	f852 6b08 	ldr.w	r6, [r2], #8
 800a3ac:	9207      	str	r2, [sp, #28]
 800a3ae:	2f00      	cmp	r7, #0
 800a3b0:	da06      	bge.n	800a3c0 <_svfprintf_r+0x330>
 800a3b2:	4276      	negs	r6, r6
 800a3b4:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 800a3b8:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800a3bc:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	e37d      	b.n	800aac0 <_svfprintf_r+0xa30>
 800a3c4:	4633      	mov	r3, r6
 800a3c6:	06ee      	lsls	r6, r5, #27
 800a3c8:	f853 7b04 	ldr.w	r7, [r3], #4
 800a3cc:	9307      	str	r3, [sp, #28]
 800a3ce:	d502      	bpl.n	800a3d6 <_svfprintf_r+0x346>
 800a3d0:	463e      	mov	r6, r7
 800a3d2:	17ff      	asrs	r7, r7, #31
 800a3d4:	e7eb      	b.n	800a3ae <_svfprintf_r+0x31e>
 800a3d6:	0668      	lsls	r0, r5, #25
 800a3d8:	d503      	bpl.n	800a3e2 <_svfprintf_r+0x352>
 800a3da:	b23e      	sxth	r6, r7
 800a3dc:	f347 37c0 	sbfx	r7, r7, #15, #1
 800a3e0:	e7e5      	b.n	800a3ae <_svfprintf_r+0x31e>
 800a3e2:	05a9      	lsls	r1, r5, #22
 800a3e4:	d5f4      	bpl.n	800a3d0 <_svfprintf_r+0x340>
 800a3e6:	b27e      	sxtb	r6, r7
 800a3e8:	f347 17c0 	sbfx	r7, r7, #7, #1
 800a3ec:	e7df      	b.n	800a3ae <_svfprintf_r+0x31e>
 800a3ee:	3607      	adds	r6, #7
 800a3f0:	f026 0307 	bic.w	r3, r6, #7
 800a3f4:	ecb3 7b02 	vldmia	r3!, {d7}
 800a3f8:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800a3fc:	9307      	str	r3, [sp, #28]
 800a3fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a400:	931a      	str	r3, [sp, #104]	@ 0x68
 800a402:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a404:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a408:	931b      	str	r3, [sp, #108]	@ 0x6c
 800a40a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 800a40e:	4b81      	ldr	r3, [pc, #516]	@ (800a614 <_svfprintf_r+0x584>)
 800a410:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a414:	f7f6 fbaa 	bl	8000b6c <__aeabi_dcmpun>
 800a418:	bb10      	cbnz	r0, 800a460 <_svfprintf_r+0x3d0>
 800a41a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 800a41e:	4b7d      	ldr	r3, [pc, #500]	@ (800a614 <_svfprintf_r+0x584>)
 800a420:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a424:	f7f6 fb84 	bl	8000b30 <__aeabi_dcmple>
 800a428:	b9d0      	cbnz	r0, 800a460 <_svfprintf_r+0x3d0>
 800a42a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a42e:	2200      	movs	r2, #0
 800a430:	2300      	movs	r3, #0
 800a432:	f7f6 fb73 	bl	8000b1c <__aeabi_dcmplt>
 800a436:	b110      	cbz	r0, 800a43e <_svfprintf_r+0x3ae>
 800a438:	232d      	movs	r3, #45	@ 0x2d
 800a43a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800a43e:	4a76      	ldr	r2, [pc, #472]	@ (800a618 <_svfprintf_r+0x588>)
 800a440:	4b76      	ldr	r3, [pc, #472]	@ (800a61c <_svfprintf_r+0x58c>)
 800a442:	9906      	ldr	r1, [sp, #24]
 800a444:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 800a448:	2947      	cmp	r1, #71	@ 0x47
 800a44a:	bfd4      	ite	le
 800a44c:	4691      	movle	r9, r2
 800a44e:	4699      	movgt	r9, r3
 800a450:	f04f 0a00 	mov.w	sl, #0
 800a454:	f04f 0803 	mov.w	r8, #3
 800a458:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 800a45c:	f000 bfec 	b.w	800b438 <_svfprintf_r+0x13a8>
 800a460:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800a464:	4610      	mov	r0, r2
 800a466:	4619      	mov	r1, r3
 800a468:	f7f6 fb80 	bl	8000b6c <__aeabi_dcmpun>
 800a46c:	4682      	mov	sl, r0
 800a46e:	b140      	cbz	r0, 800a482 <_svfprintf_r+0x3f2>
 800a470:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a472:	4a6b      	ldr	r2, [pc, #428]	@ (800a620 <_svfprintf_r+0x590>)
 800a474:	2b00      	cmp	r3, #0
 800a476:	bfbc      	itt	lt
 800a478:	232d      	movlt	r3, #45	@ 0x2d
 800a47a:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 800a47e:	4b69      	ldr	r3, [pc, #420]	@ (800a624 <_svfprintf_r+0x594>)
 800a480:	e7df      	b.n	800a442 <_svfprintf_r+0x3b2>
 800a482:	9b06      	ldr	r3, [sp, #24]
 800a484:	2b61      	cmp	r3, #97	@ 0x61
 800a486:	d025      	beq.n	800a4d4 <_svfprintf_r+0x444>
 800a488:	2b41      	cmp	r3, #65	@ 0x41
 800a48a:	d125      	bne.n	800a4d8 <_svfprintf_r+0x448>
 800a48c:	2358      	movs	r3, #88	@ 0x58
 800a48e:	2230      	movs	r2, #48	@ 0x30
 800a490:	f1b8 0f63 	cmp.w	r8, #99	@ 0x63
 800a494:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 800a498:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 800a49c:	f045 0502 	orr.w	r5, r5, #2
 800a4a0:	f340 80a5 	ble.w	800a5ee <_svfprintf_r+0x55e>
 800a4a4:	9803      	ldr	r0, [sp, #12]
 800a4a6:	f108 0101 	add.w	r1, r8, #1
 800a4aa:	f7fe fd59 	bl	8008f60 <_malloc_r>
 800a4ae:	4681      	mov	r9, r0
 800a4b0:	2800      	cmp	r0, #0
 800a4b2:	f040 80a1 	bne.w	800a5f8 <_svfprintf_r+0x568>
 800a4b6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800a4ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4be:	f8ab 300c 	strh.w	r3, [fp, #12]
 800a4c2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800a4c6:	065b      	lsls	r3, r3, #25
 800a4c8:	f53f ae04 	bmi.w	800a0d4 <_svfprintf_r+0x44>
 800a4cc:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800a4ce:	b053      	add	sp, #332	@ 0x14c
 800a4d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4d4:	2378      	movs	r3, #120	@ 0x78
 800a4d6:	e7da      	b.n	800a48e <_svfprintf_r+0x3fe>
 800a4d8:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 800a4dc:	f000 808e 	beq.w	800a5fc <_svfprintf_r+0x56c>
 800a4e0:	9b06      	ldr	r3, [sp, #24]
 800a4e2:	f023 0320 	bic.w	r3, r3, #32
 800a4e6:	2b47      	cmp	r3, #71	@ 0x47
 800a4e8:	d105      	bne.n	800a4f6 <_svfprintf_r+0x466>
 800a4ea:	f1b8 0f00 	cmp.w	r8, #0
 800a4ee:	d102      	bne.n	800a4f6 <_svfprintf_r+0x466>
 800a4f0:	46c2      	mov	sl, r8
 800a4f2:	f04f 0801 	mov.w	r8, #1
 800a4f6:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 800a4fa:	9311      	str	r3, [sp, #68]	@ 0x44
 800a4fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	da7f      	bge.n	800a602 <_svfprintf_r+0x572>
 800a502:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a504:	9314      	str	r3, [sp, #80]	@ 0x50
 800a506:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a508:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800a50c:	9315      	str	r3, [sp, #84]	@ 0x54
 800a50e:	232d      	movs	r3, #45	@ 0x2d
 800a510:	931c      	str	r3, [sp, #112]	@ 0x70
 800a512:	9b06      	ldr	r3, [sp, #24]
 800a514:	f023 0320 	bic.w	r3, r3, #32
 800a518:	2b41      	cmp	r3, #65	@ 0x41
 800a51a:	9308      	str	r3, [sp, #32]
 800a51c:	f040 81e6 	bne.w	800a8ec <_svfprintf_r+0x85c>
 800a520:	a820      	add	r0, sp, #128	@ 0x80
 800a522:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 800a526:	f001 fa1d 	bl	800b964 <frexp>
 800a52a:	2200      	movs	r2, #0
 800a52c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800a530:	ec51 0b10 	vmov	r0, r1, d0
 800a534:	f7f6 f880 	bl	8000638 <__aeabi_dmul>
 800a538:	4602      	mov	r2, r0
 800a53a:	460b      	mov	r3, r1
 800a53c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a540:	2200      	movs	r2, #0
 800a542:	2300      	movs	r3, #0
 800a544:	f7f6 fae0 	bl	8000b08 <__aeabi_dcmpeq>
 800a548:	b108      	cbz	r0, 800a54e <_svfprintf_r+0x4be>
 800a54a:	2301      	movs	r3, #1
 800a54c:	9320      	str	r3, [sp, #128]	@ 0x80
 800a54e:	4a36      	ldr	r2, [pc, #216]	@ (800a628 <_svfprintf_r+0x598>)
 800a550:	4b36      	ldr	r3, [pc, #216]	@ (800a62c <_svfprintf_r+0x59c>)
 800a552:	9906      	ldr	r1, [sp, #24]
 800a554:	2961      	cmp	r1, #97	@ 0x61
 800a556:	bf18      	it	ne
 800a558:	461a      	movne	r2, r3
 800a55a:	9210      	str	r2, [sp, #64]	@ 0x40
 800a55c:	f108 37ff 	add.w	r7, r8, #4294967295	@ 0xffffffff
 800a560:	464e      	mov	r6, r9
 800a562:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a566:	4b32      	ldr	r3, [pc, #200]	@ (800a630 <_svfprintf_r+0x5a0>)
 800a568:	2200      	movs	r2, #0
 800a56a:	f7f6 f865 	bl	8000638 <__aeabi_dmul>
 800a56e:	4602      	mov	r2, r0
 800a570:	460b      	mov	r3, r1
 800a572:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a576:	f7f6 fb0f 	bl	8000b98 <__aeabi_d2iz>
 800a57a:	9013      	str	r0, [sp, #76]	@ 0x4c
 800a57c:	f7f5 fff2 	bl	8000564 <__aeabi_i2d>
 800a580:	4602      	mov	r2, r0
 800a582:	460b      	mov	r3, r1
 800a584:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a588:	f7f5 fe9e 	bl	80002c8 <__aeabi_dsub>
 800a58c:	4602      	mov	r2, r0
 800a58e:	460b      	mov	r3, r1
 800a590:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a594:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a596:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a598:	5c9b      	ldrb	r3, [r3, r2]
 800a59a:	f806 3b01 	strb.w	r3, [r6], #1
 800a59e:	1c7a      	adds	r2, r7, #1
 800a5a0:	d006      	beq.n	800a5b0 <_svfprintf_r+0x520>
 800a5a2:	1e7b      	subs	r3, r7, #1
 800a5a4:	931d      	str	r3, [sp, #116]	@ 0x74
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	f7f6 faad 	bl	8000b08 <__aeabi_dcmpeq>
 800a5ae:	b370      	cbz	r0, 800a60e <_svfprintf_r+0x57e>
 800a5b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a5b4:	4b1f      	ldr	r3, [pc, #124]	@ (800a634 <_svfprintf_r+0x5a4>)
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	f7f6 face 	bl	8000b58 <__aeabi_dcmpgt>
 800a5bc:	2800      	cmp	r0, #0
 800a5be:	d13b      	bne.n	800a638 <_svfprintf_r+0x5a8>
 800a5c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a5c4:	4b1b      	ldr	r3, [pc, #108]	@ (800a634 <_svfprintf_r+0x5a4>)
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	f7f6 fa9e 	bl	8000b08 <__aeabi_dcmpeq>
 800a5cc:	b110      	cbz	r0, 800a5d4 <_svfprintf_r+0x544>
 800a5ce:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a5d0:	07db      	lsls	r3, r3, #31
 800a5d2:	d431      	bmi.n	800a638 <_svfprintf_r+0x5a8>
 800a5d4:	4633      	mov	r3, r6
 800a5d6:	19f1      	adds	r1, r6, r7
 800a5d8:	2030      	movs	r0, #48	@ 0x30
 800a5da:	1aca      	subs	r2, r1, r3
 800a5dc:	2a00      	cmp	r2, #0
 800a5de:	f280 8182 	bge.w	800a8e6 <_svfprintf_r+0x856>
 800a5e2:	1c7b      	adds	r3, r7, #1
 800a5e4:	3701      	adds	r7, #1
 800a5e6:	bfb8      	it	lt
 800a5e8:	2300      	movlt	r3, #0
 800a5ea:	441e      	add	r6, r3
 800a5ec:	e038      	b.n	800a660 <_svfprintf_r+0x5d0>
 800a5ee:	f04f 0a00 	mov.w	sl, #0
 800a5f2:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 800a5f6:	e77e      	b.n	800a4f6 <_svfprintf_r+0x466>
 800a5f8:	4682      	mov	sl, r0
 800a5fa:	e77c      	b.n	800a4f6 <_svfprintf_r+0x466>
 800a5fc:	f04f 0806 	mov.w	r8, #6
 800a600:	e779      	b.n	800a4f6 <_svfprintf_r+0x466>
 800a602:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 800a606:	2300      	movs	r3, #0
 800a608:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 800a60c:	e780      	b.n	800a510 <_svfprintf_r+0x480>
 800a60e:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 800a610:	e7a7      	b.n	800a562 <_svfprintf_r+0x4d2>
 800a612:	bf00      	nop
 800a614:	7fefffff 	.word	0x7fefffff
 800a618:	0808e63c 	.word	0x0808e63c
 800a61c:	0808e640 	.word	0x0808e640
 800a620:	0808e644 	.word	0x0808e644
 800a624:	0808e648 	.word	0x0808e648
 800a628:	0808e64c 	.word	0x0808e64c
 800a62c:	0808e65d 	.word	0x0808e65d
 800a630:	40300000 	.word	0x40300000
 800a634:	3fe00000 	.word	0x3fe00000
 800a638:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a63a:	9624      	str	r6, [sp, #144]	@ 0x90
 800a63c:	7bd9      	ldrb	r1, [r3, #15]
 800a63e:	2030      	movs	r0, #48	@ 0x30
 800a640:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a642:	1e53      	subs	r3, r2, #1
 800a644:	9324      	str	r3, [sp, #144]	@ 0x90
 800a646:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 800a64a:	428b      	cmp	r3, r1
 800a64c:	f000 8148 	beq.w	800a8e0 <_svfprintf_r+0x850>
 800a650:	2b39      	cmp	r3, #57	@ 0x39
 800a652:	bf0b      	itete	eq
 800a654:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 800a656:	3301      	addne	r3, #1
 800a658:	7a9b      	ldrbeq	r3, [r3, #10]
 800a65a:	b2db      	uxtbne	r3, r3
 800a65c:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a660:	eba6 0309 	sub.w	r3, r6, r9
 800a664:	9304      	str	r3, [sp, #16]
 800a666:	9b08      	ldr	r3, [sp, #32]
 800a668:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800a66a:	2b47      	cmp	r3, #71	@ 0x47
 800a66c:	f040 8187 	bne.w	800a97e <_svfprintf_r+0x8ee>
 800a670:	1cf1      	adds	r1, r6, #3
 800a672:	db02      	blt.n	800a67a <_svfprintf_r+0x5ea>
 800a674:	4546      	cmp	r6, r8
 800a676:	f340 81a5 	ble.w	800a9c4 <_svfprintf_r+0x934>
 800a67a:	9b06      	ldr	r3, [sp, #24]
 800a67c:	3b02      	subs	r3, #2
 800a67e:	9306      	str	r3, [sp, #24]
 800a680:	9906      	ldr	r1, [sp, #24]
 800a682:	f89d 2018 	ldrb.w	r2, [sp, #24]
 800a686:	f021 0120 	bic.w	r1, r1, #32
 800a68a:	2941      	cmp	r1, #65	@ 0x41
 800a68c:	bf08      	it	eq
 800a68e:	320f      	addeq	r2, #15
 800a690:	f106 33ff 	add.w	r3, r6, #4294967295	@ 0xffffffff
 800a694:	bf06      	itte	eq
 800a696:	b2d2      	uxtbeq	r2, r2
 800a698:	2101      	moveq	r1, #1
 800a69a:	2100      	movne	r1, #0
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	9320      	str	r3, [sp, #128]	@ 0x80
 800a6a0:	bfb8      	it	lt
 800a6a2:	f1c6 0301 	rsblt	r3, r6, #1
 800a6a6:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 800a6aa:	bfb4      	ite	lt
 800a6ac:	222d      	movlt	r2, #45	@ 0x2d
 800a6ae:	222b      	movge	r2, #43	@ 0x2b
 800a6b0:	2b09      	cmp	r3, #9
 800a6b2:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 800a6b6:	f340 8178 	ble.w	800a9aa <_svfprintf_r+0x91a>
 800a6ba:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 800a6be:	270a      	movs	r7, #10
 800a6c0:	4602      	mov	r2, r0
 800a6c2:	fbb3 f6f7 	udiv	r6, r3, r7
 800a6c6:	fb07 3116 	mls	r1, r7, r6, r3
 800a6ca:	3130      	adds	r1, #48	@ 0x30
 800a6cc:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a6d0:	4619      	mov	r1, r3
 800a6d2:	2963      	cmp	r1, #99	@ 0x63
 800a6d4:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
 800a6d8:	4633      	mov	r3, r6
 800a6da:	dcf1      	bgt.n	800a6c0 <_svfprintf_r+0x630>
 800a6dc:	3330      	adds	r3, #48	@ 0x30
 800a6de:	1e91      	subs	r1, r2, #2
 800a6e0:	f800 3c01 	strb.w	r3, [r0, #-1]
 800a6e4:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 800a6e8:	460b      	mov	r3, r1
 800a6ea:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 800a6ee:	4283      	cmp	r3, r0
 800a6f0:	f0c0 8156 	bcc.w	800a9a0 <_svfprintf_r+0x910>
 800a6f4:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 800a6f8:	1a9b      	subs	r3, r3, r2
 800a6fa:	4281      	cmp	r1, r0
 800a6fc:	bf88      	it	hi
 800a6fe:	2300      	movhi	r3, #0
 800a700:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 800a704:	441a      	add	r2, r3
 800a706:	ab22      	add	r3, sp, #136	@ 0x88
 800a708:	1ad3      	subs	r3, r2, r3
 800a70a:	9a04      	ldr	r2, [sp, #16]
 800a70c:	9318      	str	r3, [sp, #96]	@ 0x60
 800a70e:	2a01      	cmp	r2, #1
 800a710:	eb03 0802 	add.w	r8, r3, r2
 800a714:	dc01      	bgt.n	800a71a <_svfprintf_r+0x68a>
 800a716:	07ea      	lsls	r2, r5, #31
 800a718:	d501      	bpl.n	800a71e <_svfprintf_r+0x68e>
 800a71a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a71c:	4498      	add	r8, r3
 800a71e:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 800a722:	2700      	movs	r7, #0
 800a724:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 800a728:	9311      	str	r3, [sp, #68]	@ 0x44
 800a72a:	9708      	str	r7, [sp, #32]
 800a72c:	463e      	mov	r6, r7
 800a72e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800a730:	2b00      	cmp	r3, #0
 800a732:	f040 818f 	bne.w	800aa54 <_svfprintf_r+0x9c4>
 800a736:	2300      	movs	r3, #0
 800a738:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800a73a:	9310      	str	r3, [sp, #64]	@ 0x40
 800a73c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a73e:	4543      	cmp	r3, r8
 800a740:	bfb8      	it	lt
 800a742:	4643      	movlt	r3, r8
 800a744:	9311      	str	r3, [sp, #68]	@ 0x44
 800a746:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 800a74a:	b113      	cbz	r3, 800a752 <_svfprintf_r+0x6c2>
 800a74c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a74e:	3301      	adds	r3, #1
 800a750:	9311      	str	r3, [sp, #68]	@ 0x44
 800a752:	f015 0302 	ands.w	r3, r5, #2
 800a756:	931c      	str	r3, [sp, #112]	@ 0x70
 800a758:	bf1e      	ittt	ne
 800a75a:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 800a75c:	3302      	addne	r3, #2
 800a75e:	9311      	strne	r3, [sp, #68]	@ 0x44
 800a760:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 800a764:	931d      	str	r3, [sp, #116]	@ 0x74
 800a766:	d122      	bne.n	800a7ae <_svfprintf_r+0x71e>
 800a768:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a76a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a76c:	1a9b      	subs	r3, r3, r2
 800a76e:	2b00      	cmp	r3, #0
 800a770:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a772:	dd1c      	ble.n	800a7ae <_svfprintf_r+0x71e>
 800a774:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800a776:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 800a77a:	2810      	cmp	r0, #16
 800a77c:	489e      	ldr	r0, [pc, #632]	@ (800a9f8 <_svfprintf_r+0x968>)
 800a77e:	6020      	str	r0, [r4, #0]
 800a780:	f102 0201 	add.w	r2, r2, #1
 800a784:	f104 0108 	add.w	r1, r4, #8
 800a788:	f300 8298 	bgt.w	800acbc <_svfprintf_r+0xc2c>
 800a78c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800a78e:	6060      	str	r0, [r4, #4]
 800a790:	4403      	add	r3, r0
 800a792:	2a07      	cmp	r2, #7
 800a794:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800a798:	f340 82a5 	ble.w	800ace6 <_svfprintf_r+0xc56>
 800a79c:	9803      	ldr	r0, [sp, #12]
 800a79e:	aa26      	add	r2, sp, #152	@ 0x98
 800a7a0:	4659      	mov	r1, fp
 800a7a2:	f001 ff49 	bl	800c638 <__ssprint_r>
 800a7a6:	2800      	cmp	r0, #0
 800a7a8:	f040 85ed 	bne.w	800b386 <_svfprintf_r+0x12f6>
 800a7ac:	ac29      	add	r4, sp, #164	@ 0xa4
 800a7ae:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 800a7b2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800a7b4:	b16a      	cbz	r2, 800a7d2 <_svfprintf_r+0x742>
 800a7b6:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 800a7ba:	6022      	str	r2, [r4, #0]
 800a7bc:	2201      	movs	r2, #1
 800a7be:	4413      	add	r3, r2
 800a7c0:	9328      	str	r3, [sp, #160]	@ 0xa0
 800a7c2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800a7c4:	6062      	str	r2, [r4, #4]
 800a7c6:	4413      	add	r3, r2
 800a7c8:	2b07      	cmp	r3, #7
 800a7ca:	9327      	str	r3, [sp, #156]	@ 0x9c
 800a7cc:	f300 828d 	bgt.w	800acea <_svfprintf_r+0xc5a>
 800a7d0:	3408      	adds	r4, #8
 800a7d2:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a7d4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800a7d6:	b162      	cbz	r2, 800a7f2 <_svfprintf_r+0x762>
 800a7d8:	aa1f      	add	r2, sp, #124	@ 0x7c
 800a7da:	6022      	str	r2, [r4, #0]
 800a7dc:	2202      	movs	r2, #2
 800a7de:	4413      	add	r3, r2
 800a7e0:	9328      	str	r3, [sp, #160]	@ 0xa0
 800a7e2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800a7e4:	6062      	str	r2, [r4, #4]
 800a7e6:	3301      	adds	r3, #1
 800a7e8:	2b07      	cmp	r3, #7
 800a7ea:	9327      	str	r3, [sp, #156]	@ 0x9c
 800a7ec:	f300 8287 	bgt.w	800acfe <_svfprintf_r+0xc6e>
 800a7f0:	3408      	adds	r4, #8
 800a7f2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a7f4:	2b80      	cmp	r3, #128	@ 0x80
 800a7f6:	d122      	bne.n	800a83e <_svfprintf_r+0x7ae>
 800a7f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a7fa:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a7fc:	1a9b      	subs	r3, r3, r2
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a802:	dd1c      	ble.n	800a83e <_svfprintf_r+0x7ae>
 800a804:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800a806:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 800a80a:	2810      	cmp	r0, #16
 800a80c:	487b      	ldr	r0, [pc, #492]	@ (800a9fc <_svfprintf_r+0x96c>)
 800a80e:	6020      	str	r0, [r4, #0]
 800a810:	f102 0201 	add.w	r2, r2, #1
 800a814:	f104 0108 	add.w	r1, r4, #8
 800a818:	f300 827b 	bgt.w	800ad12 <_svfprintf_r+0xc82>
 800a81c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800a81e:	6060      	str	r0, [r4, #4]
 800a820:	4403      	add	r3, r0
 800a822:	2a07      	cmp	r2, #7
 800a824:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800a828:	f340 8288 	ble.w	800ad3c <_svfprintf_r+0xcac>
 800a82c:	9803      	ldr	r0, [sp, #12]
 800a82e:	aa26      	add	r2, sp, #152	@ 0x98
 800a830:	4659      	mov	r1, fp
 800a832:	f001 ff01 	bl	800c638 <__ssprint_r>
 800a836:	2800      	cmp	r0, #0
 800a838:	f040 85a5 	bne.w	800b386 <_svfprintf_r+0x12f6>
 800a83c:	ac29      	add	r4, sp, #164	@ 0xa4
 800a83e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a840:	eba3 0308 	sub.w	r3, r3, r8
 800a844:	2b00      	cmp	r3, #0
 800a846:	9310      	str	r3, [sp, #64]	@ 0x40
 800a848:	dd1c      	ble.n	800a884 <_svfprintf_r+0x7f4>
 800a84a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800a84c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 800a850:	2810      	cmp	r0, #16
 800a852:	486a      	ldr	r0, [pc, #424]	@ (800a9fc <_svfprintf_r+0x96c>)
 800a854:	6020      	str	r0, [r4, #0]
 800a856:	f102 0201 	add.w	r2, r2, #1
 800a85a:	f104 0108 	add.w	r1, r4, #8
 800a85e:	f300 826f 	bgt.w	800ad40 <_svfprintf_r+0xcb0>
 800a862:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800a864:	6060      	str	r0, [r4, #4]
 800a866:	4403      	add	r3, r0
 800a868:	2a07      	cmp	r2, #7
 800a86a:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800a86e:	f340 827c 	ble.w	800ad6a <_svfprintf_r+0xcda>
 800a872:	9803      	ldr	r0, [sp, #12]
 800a874:	aa26      	add	r2, sp, #152	@ 0x98
 800a876:	4659      	mov	r1, fp
 800a878:	f001 fede 	bl	800c638 <__ssprint_r>
 800a87c:	2800      	cmp	r0, #0
 800a87e:	f040 8582 	bne.w	800b386 <_svfprintf_r+0x12f6>
 800a882:	ac29      	add	r4, sp, #164	@ 0xa4
 800a884:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800a886:	9310      	str	r3, [sp, #64]	@ 0x40
 800a888:	05ea      	lsls	r2, r5, #23
 800a88a:	f100 8275 	bmi.w	800ad78 <_svfprintf_r+0xce8>
 800a88e:	4443      	add	r3, r8
 800a890:	9328      	str	r3, [sp, #160]	@ 0xa0
 800a892:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800a894:	3301      	adds	r3, #1
 800a896:	2b07      	cmp	r3, #7
 800a898:	e9c4 9800 	strd	r9, r8, [r4]
 800a89c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800a89e:	f300 82b1 	bgt.w	800ae04 <_svfprintf_r+0xd74>
 800a8a2:	3408      	adds	r4, #8
 800a8a4:	076a      	lsls	r2, r5, #29
 800a8a6:	f100 8550 	bmi.w	800b34a <_svfprintf_r+0x12ba>
 800a8aa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a8ae:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800a8b0:	428a      	cmp	r2, r1
 800a8b2:	bfac      	ite	ge
 800a8b4:	189b      	addge	r3, r3, r2
 800a8b6:	185b      	addlt	r3, r3, r1
 800a8b8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a8ba:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800a8bc:	b13b      	cbz	r3, 800a8ce <_svfprintf_r+0x83e>
 800a8be:	9803      	ldr	r0, [sp, #12]
 800a8c0:	aa26      	add	r2, sp, #152	@ 0x98
 800a8c2:	4659      	mov	r1, fp
 800a8c4:	f001 feb8 	bl	800c638 <__ssprint_r>
 800a8c8:	2800      	cmp	r0, #0
 800a8ca:	f040 855c 	bne.w	800b386 <_svfprintf_r+0x12f6>
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	9327      	str	r3, [sp, #156]	@ 0x9c
 800a8d2:	f1ba 0f00 	cmp.w	sl, #0
 800a8d6:	f040 8572 	bne.w	800b3be <_svfprintf_r+0x132e>
 800a8da:	9e07      	ldr	r6, [sp, #28]
 800a8dc:	ac29      	add	r4, sp, #164	@ 0xa4
 800a8de:	e0c6      	b.n	800aa6e <_svfprintf_r+0x9de>
 800a8e0:	f802 0c01 	strb.w	r0, [r2, #-1]
 800a8e4:	e6ac      	b.n	800a640 <_svfprintf_r+0x5b0>
 800a8e6:	f803 0b01 	strb.w	r0, [r3], #1
 800a8ea:	e676      	b.n	800a5da <_svfprintf_r+0x54a>
 800a8ec:	9b08      	ldr	r3, [sp, #32]
 800a8ee:	2b46      	cmp	r3, #70	@ 0x46
 800a8f0:	d005      	beq.n	800a8fe <_svfprintf_r+0x86e>
 800a8f2:	2b45      	cmp	r3, #69	@ 0x45
 800a8f4:	d11a      	bne.n	800a92c <_svfprintf_r+0x89c>
 800a8f6:	f108 0601 	add.w	r6, r8, #1
 800a8fa:	2102      	movs	r1, #2
 800a8fc:	e001      	b.n	800a902 <_svfprintf_r+0x872>
 800a8fe:	4646      	mov	r6, r8
 800a900:	2103      	movs	r1, #3
 800a902:	ab24      	add	r3, sp, #144	@ 0x90
 800a904:	9301      	str	r3, [sp, #4]
 800a906:	ab21      	add	r3, sp, #132	@ 0x84
 800a908:	9300      	str	r3, [sp, #0]
 800a90a:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 800a90e:	ab20      	add	r3, sp, #128	@ 0x80
 800a910:	9803      	ldr	r0, [sp, #12]
 800a912:	4632      	mov	r2, r6
 800a914:	f001 f8e4 	bl	800bae0 <_dtoa_r>
 800a918:	9b08      	ldr	r3, [sp, #32]
 800a91a:	2b47      	cmp	r3, #71	@ 0x47
 800a91c:	4681      	mov	r9, r0
 800a91e:	d119      	bne.n	800a954 <_svfprintf_r+0x8c4>
 800a920:	07e8      	lsls	r0, r5, #31
 800a922:	d405      	bmi.n	800a930 <_svfprintf_r+0x8a0>
 800a924:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a926:	eba3 0309 	sub.w	r3, r3, r9
 800a92a:	e69b      	b.n	800a664 <_svfprintf_r+0x5d4>
 800a92c:	4646      	mov	r6, r8
 800a92e:	e7e4      	b.n	800a8fa <_svfprintf_r+0x86a>
 800a930:	eb09 0706 	add.w	r7, r9, r6
 800a934:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 800a938:	2200      	movs	r2, #0
 800a93a:	2300      	movs	r3, #0
 800a93c:	f7f6 f8e4 	bl	8000b08 <__aeabi_dcmpeq>
 800a940:	b100      	cbz	r0, 800a944 <_svfprintf_r+0x8b4>
 800a942:	9724      	str	r7, [sp, #144]	@ 0x90
 800a944:	2230      	movs	r2, #48	@ 0x30
 800a946:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a948:	429f      	cmp	r7, r3
 800a94a:	d9eb      	bls.n	800a924 <_svfprintf_r+0x894>
 800a94c:	1c59      	adds	r1, r3, #1
 800a94e:	9124      	str	r1, [sp, #144]	@ 0x90
 800a950:	701a      	strb	r2, [r3, #0]
 800a952:	e7f8      	b.n	800a946 <_svfprintf_r+0x8b6>
 800a954:	9b08      	ldr	r3, [sp, #32]
 800a956:	2b46      	cmp	r3, #70	@ 0x46
 800a958:	eb00 0706 	add.w	r7, r0, r6
 800a95c:	d1ea      	bne.n	800a934 <_svfprintf_r+0x8a4>
 800a95e:	7803      	ldrb	r3, [r0, #0]
 800a960:	2b30      	cmp	r3, #48	@ 0x30
 800a962:	d109      	bne.n	800a978 <_svfprintf_r+0x8e8>
 800a964:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 800a968:	2200      	movs	r2, #0
 800a96a:	2300      	movs	r3, #0
 800a96c:	f7f6 f8cc 	bl	8000b08 <__aeabi_dcmpeq>
 800a970:	b910      	cbnz	r0, 800a978 <_svfprintf_r+0x8e8>
 800a972:	f1c6 0601 	rsb	r6, r6, #1
 800a976:	9620      	str	r6, [sp, #128]	@ 0x80
 800a978:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a97a:	441f      	add	r7, r3
 800a97c:	e7da      	b.n	800a934 <_svfprintf_r+0x8a4>
 800a97e:	9b08      	ldr	r3, [sp, #32]
 800a980:	2b46      	cmp	r3, #70	@ 0x46
 800a982:	f47f ae7d 	bne.w	800a680 <_svfprintf_r+0x5f0>
 800a986:	f005 0301 	and.w	r3, r5, #1
 800a98a:	2e00      	cmp	r6, #0
 800a98c:	ea43 0308 	orr.w	r3, r3, r8
 800a990:	dd25      	ble.n	800a9de <_svfprintf_r+0x94e>
 800a992:	b37b      	cbz	r3, 800a9f4 <_svfprintf_r+0x964>
 800a994:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a996:	18f3      	adds	r3, r6, r3
 800a998:	4498      	add	r8, r3
 800a99a:	2366      	movs	r3, #102	@ 0x66
 800a99c:	9306      	str	r3, [sp, #24]
 800a99e:	e033      	b.n	800aa08 <_svfprintf_r+0x978>
 800a9a0:	f813 7b01 	ldrb.w	r7, [r3], #1
 800a9a4:	f806 7f01 	strb.w	r7, [r6, #1]!
 800a9a8:	e6a1      	b.n	800a6ee <_svfprintf_r+0x65e>
 800a9aa:	b941      	cbnz	r1, 800a9be <_svfprintf_r+0x92e>
 800a9ac:	2230      	movs	r2, #48	@ 0x30
 800a9ae:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 800a9b2:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 800a9b6:	3330      	adds	r3, #48	@ 0x30
 800a9b8:	f802 3b01 	strb.w	r3, [r2], #1
 800a9bc:	e6a3      	b.n	800a706 <_svfprintf_r+0x676>
 800a9be:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 800a9c2:	e7f8      	b.n	800a9b6 <_svfprintf_r+0x926>
 800a9c4:	9b04      	ldr	r3, [sp, #16]
 800a9c6:	429e      	cmp	r6, r3
 800a9c8:	da0d      	bge.n	800a9e6 <_svfprintf_r+0x956>
 800a9ca:	9b04      	ldr	r3, [sp, #16]
 800a9cc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a9ce:	2e00      	cmp	r6, #0
 800a9d0:	eb03 0802 	add.w	r8, r3, r2
 800a9d4:	dc0c      	bgt.n	800a9f0 <_svfprintf_r+0x960>
 800a9d6:	f1c6 0301 	rsb	r3, r6, #1
 800a9da:	4498      	add	r8, r3
 800a9dc:	e008      	b.n	800a9f0 <_svfprintf_r+0x960>
 800a9de:	b17b      	cbz	r3, 800aa00 <_svfprintf_r+0x970>
 800a9e0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a9e2:	3301      	adds	r3, #1
 800a9e4:	e7d8      	b.n	800a998 <_svfprintf_r+0x908>
 800a9e6:	07eb      	lsls	r3, r5, #31
 800a9e8:	d521      	bpl.n	800aa2e <_svfprintf_r+0x99e>
 800a9ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a9ec:	eb06 0803 	add.w	r8, r6, r3
 800a9f0:	2367      	movs	r3, #103	@ 0x67
 800a9f2:	e7d3      	b.n	800a99c <_svfprintf_r+0x90c>
 800a9f4:	46b0      	mov	r8, r6
 800a9f6:	e7d0      	b.n	800a99a <_svfprintf_r+0x90a>
 800a9f8:	0808e680 	.word	0x0808e680
 800a9fc:	0808e670 	.word	0x0808e670
 800aa00:	2366      	movs	r3, #102	@ 0x66
 800aa02:	9306      	str	r3, [sp, #24]
 800aa04:	f04f 0801 	mov.w	r8, #1
 800aa08:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 800aa0c:	9308      	str	r3, [sp, #32]
 800aa0e:	d01f      	beq.n	800aa50 <_svfprintf_r+0x9c0>
 800aa10:	2700      	movs	r7, #0
 800aa12:	2e00      	cmp	r6, #0
 800aa14:	9708      	str	r7, [sp, #32]
 800aa16:	f77f ae8a 	ble.w	800a72e <_svfprintf_r+0x69e>
 800aa1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa1c:	781b      	ldrb	r3, [r3, #0]
 800aa1e:	2bff      	cmp	r3, #255	@ 0xff
 800aa20:	d107      	bne.n	800aa32 <_svfprintf_r+0x9a2>
 800aa22:	9b08      	ldr	r3, [sp, #32]
 800aa24:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800aa26:	443b      	add	r3, r7
 800aa28:	fb02 8803 	mla	r8, r2, r3, r8
 800aa2c:	e67f      	b.n	800a72e <_svfprintf_r+0x69e>
 800aa2e:	46b0      	mov	r8, r6
 800aa30:	e7de      	b.n	800a9f0 <_svfprintf_r+0x960>
 800aa32:	42b3      	cmp	r3, r6
 800aa34:	daf5      	bge.n	800aa22 <_svfprintf_r+0x992>
 800aa36:	1af6      	subs	r6, r6, r3
 800aa38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa3a:	785b      	ldrb	r3, [r3, #1]
 800aa3c:	b133      	cbz	r3, 800aa4c <_svfprintf_r+0x9bc>
 800aa3e:	9b08      	ldr	r3, [sp, #32]
 800aa40:	3301      	adds	r3, #1
 800aa42:	9308      	str	r3, [sp, #32]
 800aa44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa46:	3301      	adds	r3, #1
 800aa48:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa4a:	e7e6      	b.n	800aa1a <_svfprintf_r+0x98a>
 800aa4c:	3701      	adds	r7, #1
 800aa4e:	e7e4      	b.n	800aa1a <_svfprintf_r+0x98a>
 800aa50:	9f08      	ldr	r7, [sp, #32]
 800aa52:	e66c      	b.n	800a72e <_svfprintf_r+0x69e>
 800aa54:	232d      	movs	r3, #45	@ 0x2d
 800aa56:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800aa5a:	e66c      	b.n	800a736 <_svfprintf_r+0x6a6>
 800aa5c:	06af      	lsls	r7, r5, #26
 800aa5e:	d50a      	bpl.n	800aa76 <_svfprintf_r+0x9e6>
 800aa60:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800aa62:	6833      	ldr	r3, [r6, #0]
 800aa64:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800aa66:	17d2      	asrs	r2, r2, #31
 800aa68:	e9c3 1200 	strd	r1, r2, [r3]
 800aa6c:	3604      	adds	r6, #4
 800aa6e:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 800aa72:	f7ff bb46 	b.w	800a102 <_svfprintf_r+0x72>
 800aa76:	06e8      	lsls	r0, r5, #27
 800aa78:	d503      	bpl.n	800aa82 <_svfprintf_r+0x9f2>
 800aa7a:	6833      	ldr	r3, [r6, #0]
 800aa7c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800aa7e:	601a      	str	r2, [r3, #0]
 800aa80:	e7f4      	b.n	800aa6c <_svfprintf_r+0x9dc>
 800aa82:	0669      	lsls	r1, r5, #25
 800aa84:	d503      	bpl.n	800aa8e <_svfprintf_r+0x9fe>
 800aa86:	6833      	ldr	r3, [r6, #0]
 800aa88:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800aa8a:	801a      	strh	r2, [r3, #0]
 800aa8c:	e7ee      	b.n	800aa6c <_svfprintf_r+0x9dc>
 800aa8e:	05aa      	lsls	r2, r5, #22
 800aa90:	d5f3      	bpl.n	800aa7a <_svfprintf_r+0x9ea>
 800aa92:	6833      	ldr	r3, [r6, #0]
 800aa94:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800aa96:	701a      	strb	r2, [r3, #0]
 800aa98:	e7e8      	b.n	800aa6c <_svfprintf_r+0x9dc>
 800aa9a:	f045 0510 	orr.w	r5, r5, #16
 800aa9e:	f015 0320 	ands.w	r3, r5, #32
 800aaa2:	d020      	beq.n	800aae6 <_svfprintf_r+0xa56>
 800aaa4:	3607      	adds	r6, #7
 800aaa6:	f026 0307 	bic.w	r3, r6, #7
 800aaaa:	461a      	mov	r2, r3
 800aaac:	685f      	ldr	r7, [r3, #4]
 800aaae:	f852 6b08 	ldr.w	r6, [r2], #8
 800aab2:	9207      	str	r2, [sp, #28]
 800aab4:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 800aab8:	2300      	movs	r3, #0
 800aaba:	2200      	movs	r2, #0
 800aabc:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 800aac0:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 800aac4:	f000 848c 	beq.w	800b3e0 <_svfprintf_r+0x1350>
 800aac8:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 800aacc:	9208      	str	r2, [sp, #32]
 800aace:	ea56 0207 	orrs.w	r2, r6, r7
 800aad2:	f040 848a 	bne.w	800b3ea <_svfprintf_r+0x135a>
 800aad6:	f1b8 0f00 	cmp.w	r8, #0
 800aada:	f000 80db 	beq.w	800ac94 <_svfprintf_r+0xc04>
 800aade:	2b01      	cmp	r3, #1
 800aae0:	f040 8486 	bne.w	800b3f0 <_svfprintf_r+0x1360>
 800aae4:	e083      	b.n	800abee <_svfprintf_r+0xb5e>
 800aae6:	4632      	mov	r2, r6
 800aae8:	f015 0710 	ands.w	r7, r5, #16
 800aaec:	f852 6b04 	ldr.w	r6, [r2], #4
 800aaf0:	9207      	str	r2, [sp, #28]
 800aaf2:	d001      	beq.n	800aaf8 <_svfprintf_r+0xa68>
 800aaf4:	461f      	mov	r7, r3
 800aaf6:	e7dd      	b.n	800aab4 <_svfprintf_r+0xa24>
 800aaf8:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 800aafc:	d001      	beq.n	800ab02 <_svfprintf_r+0xa72>
 800aafe:	b2b6      	uxth	r6, r6
 800ab00:	e7d8      	b.n	800aab4 <_svfprintf_r+0xa24>
 800ab02:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 800ab06:	d0d5      	beq.n	800aab4 <_svfprintf_r+0xa24>
 800ab08:	b2f6      	uxtb	r6, r6
 800ab0a:	e7f3      	b.n	800aaf4 <_svfprintf_r+0xa64>
 800ab0c:	4633      	mov	r3, r6
 800ab0e:	2278      	movs	r2, #120	@ 0x78
 800ab10:	f853 6b04 	ldr.w	r6, [r3], #4
 800ab14:	9307      	str	r3, [sp, #28]
 800ab16:	f647 0330 	movw	r3, #30768	@ 0x7830
 800ab1a:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 800ab1e:	4b94      	ldr	r3, [pc, #592]	@ (800ad70 <_svfprintf_r+0xce0>)
 800ab20:	9319      	str	r3, [sp, #100]	@ 0x64
 800ab22:	2700      	movs	r7, #0
 800ab24:	f045 0502 	orr.w	r5, r5, #2
 800ab28:	2302      	movs	r3, #2
 800ab2a:	9206      	str	r2, [sp, #24]
 800ab2c:	e7c5      	b.n	800aaba <_svfprintf_r+0xa2a>
 800ab2e:	4633      	mov	r3, r6
 800ab30:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 800ab34:	f853 9b04 	ldr.w	r9, [r3], #4
 800ab38:	9307      	str	r3, [sp, #28]
 800ab3a:	f04f 0600 	mov.w	r6, #0
 800ab3e:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 800ab42:	d00f      	beq.n	800ab64 <_svfprintf_r+0xad4>
 800ab44:	4642      	mov	r2, r8
 800ab46:	4631      	mov	r1, r6
 800ab48:	4648      	mov	r0, r9
 800ab4a:	f7f5 fb61 	bl	8000210 <memchr>
 800ab4e:	4682      	mov	sl, r0
 800ab50:	2800      	cmp	r0, #0
 800ab52:	f43f ac81 	beq.w	800a458 <_svfprintf_r+0x3c8>
 800ab56:	eba0 0809 	sub.w	r8, r0, r9
 800ab5a:	46b2      	mov	sl, r6
 800ab5c:	9610      	str	r6, [sp, #64]	@ 0x40
 800ab5e:	4637      	mov	r7, r6
 800ab60:	9608      	str	r6, [sp, #32]
 800ab62:	e5eb      	b.n	800a73c <_svfprintf_r+0x6ac>
 800ab64:	4648      	mov	r0, r9
 800ab66:	f7f5 fba3 	bl	80002b0 <strlen>
 800ab6a:	46b2      	mov	sl, r6
 800ab6c:	4680      	mov	r8, r0
 800ab6e:	e473      	b.n	800a458 <_svfprintf_r+0x3c8>
 800ab70:	f045 0510 	orr.w	r5, r5, #16
 800ab74:	f015 0320 	ands.w	r3, r5, #32
 800ab78:	d009      	beq.n	800ab8e <_svfprintf_r+0xafe>
 800ab7a:	3607      	adds	r6, #7
 800ab7c:	f026 0307 	bic.w	r3, r6, #7
 800ab80:	461a      	mov	r2, r3
 800ab82:	685f      	ldr	r7, [r3, #4]
 800ab84:	f852 6b08 	ldr.w	r6, [r2], #8
 800ab88:	9207      	str	r2, [sp, #28]
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	e795      	b.n	800aaba <_svfprintf_r+0xa2a>
 800ab8e:	4632      	mov	r2, r6
 800ab90:	f015 0710 	ands.w	r7, r5, #16
 800ab94:	f852 6b04 	ldr.w	r6, [r2], #4
 800ab98:	9207      	str	r2, [sp, #28]
 800ab9a:	d001      	beq.n	800aba0 <_svfprintf_r+0xb10>
 800ab9c:	461f      	mov	r7, r3
 800ab9e:	e7f4      	b.n	800ab8a <_svfprintf_r+0xafa>
 800aba0:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 800aba4:	d001      	beq.n	800abaa <_svfprintf_r+0xb1a>
 800aba6:	b2b6      	uxth	r6, r6
 800aba8:	e7ef      	b.n	800ab8a <_svfprintf_r+0xafa>
 800abaa:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 800abae:	d0ec      	beq.n	800ab8a <_svfprintf_r+0xafa>
 800abb0:	b2f6      	uxtb	r6, r6
 800abb2:	e7f3      	b.n	800ab9c <_svfprintf_r+0xb0c>
 800abb4:	4b6f      	ldr	r3, [pc, #444]	@ (800ad74 <_svfprintf_r+0xce4>)
 800abb6:	f7ff bb39 	b.w	800a22c <_svfprintf_r+0x19c>
 800abba:	4632      	mov	r2, r6
 800abbc:	f015 0710 	ands.w	r7, r5, #16
 800abc0:	f852 6b04 	ldr.w	r6, [r2], #4
 800abc4:	9207      	str	r2, [sp, #28]
 800abc6:	d002      	beq.n	800abce <_svfprintf_r+0xb3e>
 800abc8:	461f      	mov	r7, r3
 800abca:	f7ff bb3c 	b.w	800a246 <_svfprintf_r+0x1b6>
 800abce:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 800abd2:	d002      	beq.n	800abda <_svfprintf_r+0xb4a>
 800abd4:	b2b6      	uxth	r6, r6
 800abd6:	f7ff bb36 	b.w	800a246 <_svfprintf_r+0x1b6>
 800abda:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 800abde:	f43f ab32 	beq.w	800a246 <_svfprintf_r+0x1b6>
 800abe2:	b2f6      	uxtb	r6, r6
 800abe4:	e7f0      	b.n	800abc8 <_svfprintf_r+0xb38>
 800abe6:	2e0a      	cmp	r6, #10
 800abe8:	f177 0300 	sbcs.w	r3, r7, #0
 800abec:	d207      	bcs.n	800abfe <_svfprintf_r+0xb6e>
 800abee:	3630      	adds	r6, #48	@ 0x30
 800abf0:	b2f6      	uxtb	r6, r6
 800abf2:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 800abf6:	f20d 1947 	addw	r9, sp, #327	@ 0x147
 800abfa:	f000 bc15 	b.w	800b428 <_svfprintf_r+0x1398>
 800abfe:	2300      	movs	r3, #0
 800ac00:	9304      	str	r3, [sp, #16]
 800ac02:	9b08      	ldr	r3, [sp, #32]
 800ac04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ac08:	ad52      	add	r5, sp, #328	@ 0x148
 800ac0a:	9310      	str	r3, [sp, #64]	@ 0x40
 800ac0c:	220a      	movs	r2, #10
 800ac0e:	2300      	movs	r3, #0
 800ac10:	4630      	mov	r0, r6
 800ac12:	4639      	mov	r1, r7
 800ac14:	f7f5 ffe8 	bl	8000be8 <__aeabi_uldivmod>
 800ac18:	9b04      	ldr	r3, [sp, #16]
 800ac1a:	9011      	str	r0, [sp, #68]	@ 0x44
 800ac1c:	3301      	adds	r3, #1
 800ac1e:	9304      	str	r3, [sp, #16]
 800ac20:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ac22:	3230      	adds	r2, #48	@ 0x30
 800ac24:	468a      	mov	sl, r1
 800ac26:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 800ac2a:	f805 2c01 	strb.w	r2, [r5, #-1]
 800ac2e:	b1d3      	cbz	r3, 800ac66 <_svfprintf_r+0xbd6>
 800ac30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac32:	9a04      	ldr	r2, [sp, #16]
 800ac34:	781b      	ldrb	r3, [r3, #0]
 800ac36:	429a      	cmp	r2, r3
 800ac38:	d115      	bne.n	800ac66 <_svfprintf_r+0xbd6>
 800ac3a:	2aff      	cmp	r2, #255	@ 0xff
 800ac3c:	d013      	beq.n	800ac66 <_svfprintf_r+0xbd6>
 800ac3e:	2e0a      	cmp	r6, #10
 800ac40:	f177 0300 	sbcs.w	r3, r7, #0
 800ac44:	d30f      	bcc.n	800ac66 <_svfprintf_r+0xbd6>
 800ac46:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ac48:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800ac4a:	eba9 0903 	sub.w	r9, r9, r3
 800ac4e:	461a      	mov	r2, r3
 800ac50:	4648      	mov	r0, r9
 800ac52:	f000 fdee 	bl	800b832 <strncpy>
 800ac56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac58:	785b      	ldrb	r3, [r3, #1]
 800ac5a:	b11b      	cbz	r3, 800ac64 <_svfprintf_r+0xbd4>
 800ac5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac5e:	3301      	adds	r3, #1
 800ac60:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac62:	2300      	movs	r3, #0
 800ac64:	9304      	str	r3, [sp, #16]
 800ac66:	2e0a      	cmp	r6, #10
 800ac68:	f177 0700 	sbcs.w	r7, r7, #0
 800ac6c:	f0c0 83dc 	bcc.w	800b428 <_svfprintf_r+0x1398>
 800ac70:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800ac72:	4657      	mov	r7, sl
 800ac74:	464d      	mov	r5, r9
 800ac76:	e7c9      	b.n	800ac0c <_svfprintf_r+0xb7c>
 800ac78:	f006 030f 	and.w	r3, r6, #15
 800ac7c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ac7e:	0936      	lsrs	r6, r6, #4
 800ac80:	5cd3      	ldrb	r3, [r2, r3]
 800ac82:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800ac86:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 800ac8a:	093f      	lsrs	r7, r7, #4
 800ac8c:	ea56 0307 	orrs.w	r3, r6, r7
 800ac90:	d1f2      	bne.n	800ac78 <_svfprintf_r+0xbe8>
 800ac92:	e3c9      	b.n	800b428 <_svfprintf_r+0x1398>
 800ac94:	b91b      	cbnz	r3, 800ac9e <_svfprintf_r+0xc0e>
 800ac96:	07e9      	lsls	r1, r5, #31
 800ac98:	d501      	bpl.n	800ac9e <_svfprintf_r+0xc0e>
 800ac9a:	2630      	movs	r6, #48	@ 0x30
 800ac9c:	e7a9      	b.n	800abf2 <_svfprintf_r+0xb62>
 800ac9e:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 800aca2:	e3c1      	b.n	800b428 <_svfprintf_r+0x1398>
 800aca4:	9b06      	ldr	r3, [sp, #24]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	f000 838f 	beq.w	800b3ca <_svfprintf_r+0x133a>
 800acac:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 800acb0:	2300      	movs	r3, #0
 800acb2:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800acb6:	9607      	str	r6, [sp, #28]
 800acb8:	f7ff bb63 	b.w	800a382 <_svfprintf_r+0x2f2>
 800acbc:	2010      	movs	r0, #16
 800acbe:	4403      	add	r3, r0
 800acc0:	2a07      	cmp	r2, #7
 800acc2:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800acc6:	6060      	str	r0, [r4, #4]
 800acc8:	dd08      	ble.n	800acdc <_svfprintf_r+0xc4c>
 800acca:	9803      	ldr	r0, [sp, #12]
 800accc:	aa26      	add	r2, sp, #152	@ 0x98
 800acce:	4659      	mov	r1, fp
 800acd0:	f001 fcb2 	bl	800c638 <__ssprint_r>
 800acd4:	2800      	cmp	r0, #0
 800acd6:	f040 8356 	bne.w	800b386 <_svfprintf_r+0x12f6>
 800acda:	a929      	add	r1, sp, #164	@ 0xa4
 800acdc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800acde:	3b10      	subs	r3, #16
 800ace0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ace2:	460c      	mov	r4, r1
 800ace4:	e546      	b.n	800a774 <_svfprintf_r+0x6e4>
 800ace6:	460c      	mov	r4, r1
 800ace8:	e561      	b.n	800a7ae <_svfprintf_r+0x71e>
 800acea:	9803      	ldr	r0, [sp, #12]
 800acec:	aa26      	add	r2, sp, #152	@ 0x98
 800acee:	4659      	mov	r1, fp
 800acf0:	f001 fca2 	bl	800c638 <__ssprint_r>
 800acf4:	2800      	cmp	r0, #0
 800acf6:	f040 8346 	bne.w	800b386 <_svfprintf_r+0x12f6>
 800acfa:	ac29      	add	r4, sp, #164	@ 0xa4
 800acfc:	e569      	b.n	800a7d2 <_svfprintf_r+0x742>
 800acfe:	9803      	ldr	r0, [sp, #12]
 800ad00:	aa26      	add	r2, sp, #152	@ 0x98
 800ad02:	4659      	mov	r1, fp
 800ad04:	f001 fc98 	bl	800c638 <__ssprint_r>
 800ad08:	2800      	cmp	r0, #0
 800ad0a:	f040 833c 	bne.w	800b386 <_svfprintf_r+0x12f6>
 800ad0e:	ac29      	add	r4, sp, #164	@ 0xa4
 800ad10:	e56f      	b.n	800a7f2 <_svfprintf_r+0x762>
 800ad12:	2010      	movs	r0, #16
 800ad14:	4403      	add	r3, r0
 800ad16:	2a07      	cmp	r2, #7
 800ad18:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800ad1c:	6060      	str	r0, [r4, #4]
 800ad1e:	dd08      	ble.n	800ad32 <_svfprintf_r+0xca2>
 800ad20:	9803      	ldr	r0, [sp, #12]
 800ad22:	aa26      	add	r2, sp, #152	@ 0x98
 800ad24:	4659      	mov	r1, fp
 800ad26:	f001 fc87 	bl	800c638 <__ssprint_r>
 800ad2a:	2800      	cmp	r0, #0
 800ad2c:	f040 832b 	bne.w	800b386 <_svfprintf_r+0x12f6>
 800ad30:	a929      	add	r1, sp, #164	@ 0xa4
 800ad32:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ad34:	3b10      	subs	r3, #16
 800ad36:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ad38:	460c      	mov	r4, r1
 800ad3a:	e563      	b.n	800a804 <_svfprintf_r+0x774>
 800ad3c:	460c      	mov	r4, r1
 800ad3e:	e57e      	b.n	800a83e <_svfprintf_r+0x7ae>
 800ad40:	2010      	movs	r0, #16
 800ad42:	4403      	add	r3, r0
 800ad44:	2a07      	cmp	r2, #7
 800ad46:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800ad4a:	6060      	str	r0, [r4, #4]
 800ad4c:	dd08      	ble.n	800ad60 <_svfprintf_r+0xcd0>
 800ad4e:	9803      	ldr	r0, [sp, #12]
 800ad50:	aa26      	add	r2, sp, #152	@ 0x98
 800ad52:	4659      	mov	r1, fp
 800ad54:	f001 fc70 	bl	800c638 <__ssprint_r>
 800ad58:	2800      	cmp	r0, #0
 800ad5a:	f040 8314 	bne.w	800b386 <_svfprintf_r+0x12f6>
 800ad5e:	a929      	add	r1, sp, #164	@ 0xa4
 800ad60:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ad62:	3b10      	subs	r3, #16
 800ad64:	9310      	str	r3, [sp, #64]	@ 0x40
 800ad66:	460c      	mov	r4, r1
 800ad68:	e56f      	b.n	800a84a <_svfprintf_r+0x7ba>
 800ad6a:	460c      	mov	r4, r1
 800ad6c:	e58a      	b.n	800a884 <_svfprintf_r+0x7f4>
 800ad6e:	bf00      	nop
 800ad70:	0808e64c 	.word	0x0808e64c
 800ad74:	0808e65d 	.word	0x0808e65d
 800ad78:	9b06      	ldr	r3, [sp, #24]
 800ad7a:	2b65      	cmp	r3, #101	@ 0x65
 800ad7c:	f340 8246 	ble.w	800b20c <_svfprintf_r+0x117c>
 800ad80:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ad84:	2200      	movs	r2, #0
 800ad86:	2300      	movs	r3, #0
 800ad88:	f7f5 febe 	bl	8000b08 <__aeabi_dcmpeq>
 800ad8c:	2800      	cmp	r0, #0
 800ad8e:	d06a      	beq.n	800ae66 <_svfprintf_r+0xdd6>
 800ad90:	4b73      	ldr	r3, [pc, #460]	@ (800af60 <_svfprintf_r+0xed0>)
 800ad92:	6023      	str	r3, [r4, #0]
 800ad94:	2301      	movs	r3, #1
 800ad96:	6063      	str	r3, [r4, #4]
 800ad98:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ad9a:	3301      	adds	r3, #1
 800ad9c:	9328      	str	r3, [sp, #160]	@ 0xa0
 800ad9e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800ada0:	3301      	adds	r3, #1
 800ada2:	2b07      	cmp	r3, #7
 800ada4:	9327      	str	r3, [sp, #156]	@ 0x9c
 800ada6:	dc37      	bgt.n	800ae18 <_svfprintf_r+0xd88>
 800ada8:	3408      	adds	r4, #8
 800adaa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800adac:	9a04      	ldr	r2, [sp, #16]
 800adae:	4293      	cmp	r3, r2
 800adb0:	db02      	blt.n	800adb8 <_svfprintf_r+0xd28>
 800adb2:	07ef      	lsls	r7, r5, #31
 800adb4:	f57f ad76 	bpl.w	800a8a4 <_svfprintf_r+0x814>
 800adb8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800adba:	6023      	str	r3, [r4, #0]
 800adbc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800adbe:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800adc0:	6063      	str	r3, [r4, #4]
 800adc2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800adc4:	4413      	add	r3, r2
 800adc6:	9328      	str	r3, [sp, #160]	@ 0xa0
 800adc8:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800adca:	3301      	adds	r3, #1
 800adcc:	2b07      	cmp	r3, #7
 800adce:	9327      	str	r3, [sp, #156]	@ 0x9c
 800add0:	dc2c      	bgt.n	800ae2c <_svfprintf_r+0xd9c>
 800add2:	3408      	adds	r4, #8
 800add4:	9b04      	ldr	r3, [sp, #16]
 800add6:	1e5e      	subs	r6, r3, #1
 800add8:	2e00      	cmp	r6, #0
 800adda:	f77f ad63 	ble.w	800a8a4 <_svfprintf_r+0x814>
 800adde:	4f61      	ldr	r7, [pc, #388]	@ (800af64 <_svfprintf_r+0xed4>)
 800ade0:	f04f 0810 	mov.w	r8, #16
 800ade4:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800ade8:	2e10      	cmp	r6, #16
 800adea:	f103 0301 	add.w	r3, r3, #1
 800adee:	f104 0108 	add.w	r1, r4, #8
 800adf2:	6027      	str	r7, [r4, #0]
 800adf4:	dc24      	bgt.n	800ae40 <_svfprintf_r+0xdb0>
 800adf6:	6066      	str	r6, [r4, #4]
 800adf8:	2b07      	cmp	r3, #7
 800adfa:	4416      	add	r6, r2
 800adfc:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 800ae00:	f340 82a0 	ble.w	800b344 <_svfprintf_r+0x12b4>
 800ae04:	9803      	ldr	r0, [sp, #12]
 800ae06:	aa26      	add	r2, sp, #152	@ 0x98
 800ae08:	4659      	mov	r1, fp
 800ae0a:	f001 fc15 	bl	800c638 <__ssprint_r>
 800ae0e:	2800      	cmp	r0, #0
 800ae10:	f040 82b9 	bne.w	800b386 <_svfprintf_r+0x12f6>
 800ae14:	ac29      	add	r4, sp, #164	@ 0xa4
 800ae16:	e545      	b.n	800a8a4 <_svfprintf_r+0x814>
 800ae18:	9803      	ldr	r0, [sp, #12]
 800ae1a:	aa26      	add	r2, sp, #152	@ 0x98
 800ae1c:	4659      	mov	r1, fp
 800ae1e:	f001 fc0b 	bl	800c638 <__ssprint_r>
 800ae22:	2800      	cmp	r0, #0
 800ae24:	f040 82af 	bne.w	800b386 <_svfprintf_r+0x12f6>
 800ae28:	ac29      	add	r4, sp, #164	@ 0xa4
 800ae2a:	e7be      	b.n	800adaa <_svfprintf_r+0xd1a>
 800ae2c:	9803      	ldr	r0, [sp, #12]
 800ae2e:	aa26      	add	r2, sp, #152	@ 0x98
 800ae30:	4659      	mov	r1, fp
 800ae32:	f001 fc01 	bl	800c638 <__ssprint_r>
 800ae36:	2800      	cmp	r0, #0
 800ae38:	f040 82a5 	bne.w	800b386 <_svfprintf_r+0x12f6>
 800ae3c:	ac29      	add	r4, sp, #164	@ 0xa4
 800ae3e:	e7c9      	b.n	800add4 <_svfprintf_r+0xd44>
 800ae40:	3210      	adds	r2, #16
 800ae42:	2b07      	cmp	r3, #7
 800ae44:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800ae48:	f8c4 8004 	str.w	r8, [r4, #4]
 800ae4c:	dd08      	ble.n	800ae60 <_svfprintf_r+0xdd0>
 800ae4e:	9803      	ldr	r0, [sp, #12]
 800ae50:	aa26      	add	r2, sp, #152	@ 0x98
 800ae52:	4659      	mov	r1, fp
 800ae54:	f001 fbf0 	bl	800c638 <__ssprint_r>
 800ae58:	2800      	cmp	r0, #0
 800ae5a:	f040 8294 	bne.w	800b386 <_svfprintf_r+0x12f6>
 800ae5e:	a929      	add	r1, sp, #164	@ 0xa4
 800ae60:	3e10      	subs	r6, #16
 800ae62:	460c      	mov	r4, r1
 800ae64:	e7be      	b.n	800ade4 <_svfprintf_r+0xd54>
 800ae66:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	dc7d      	bgt.n	800af68 <_svfprintf_r+0xed8>
 800ae6c:	4b3c      	ldr	r3, [pc, #240]	@ (800af60 <_svfprintf_r+0xed0>)
 800ae6e:	6023      	str	r3, [r4, #0]
 800ae70:	2301      	movs	r3, #1
 800ae72:	6063      	str	r3, [r4, #4]
 800ae74:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ae76:	3301      	adds	r3, #1
 800ae78:	9328      	str	r3, [sp, #160]	@ 0xa0
 800ae7a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800ae7c:	3301      	adds	r3, #1
 800ae7e:	2b07      	cmp	r3, #7
 800ae80:	9327      	str	r3, [sp, #156]	@ 0x9c
 800ae82:	dc46      	bgt.n	800af12 <_svfprintf_r+0xe82>
 800ae84:	3408      	adds	r4, #8
 800ae86:	9904      	ldr	r1, [sp, #16]
 800ae88:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ae8a:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 800ae8c:	430b      	orrs	r3, r1
 800ae8e:	f005 0101 	and.w	r1, r5, #1
 800ae92:	430b      	orrs	r3, r1
 800ae94:	f43f ad06 	beq.w	800a8a4 <_svfprintf_r+0x814>
 800ae98:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ae9a:	6023      	str	r3, [r4, #0]
 800ae9c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ae9e:	6063      	str	r3, [r4, #4]
 800aea0:	441a      	add	r2, r3
 800aea2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800aea4:	9228      	str	r2, [sp, #160]	@ 0xa0
 800aea6:	3301      	adds	r3, #1
 800aea8:	2b07      	cmp	r3, #7
 800aeaa:	9327      	str	r3, [sp, #156]	@ 0x9c
 800aeac:	dc3b      	bgt.n	800af26 <_svfprintf_r+0xe96>
 800aeae:	f104 0308 	add.w	r3, r4, #8
 800aeb2:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800aeb4:	2e00      	cmp	r6, #0
 800aeb6:	da1b      	bge.n	800aef0 <_svfprintf_r+0xe60>
 800aeb8:	4f2a      	ldr	r7, [pc, #168]	@ (800af64 <_svfprintf_r+0xed4>)
 800aeba:	4276      	negs	r6, r6
 800aebc:	461a      	mov	r2, r3
 800aebe:	2410      	movs	r4, #16
 800aec0:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 800aec4:	2e10      	cmp	r6, #16
 800aec6:	f101 0101 	add.w	r1, r1, #1
 800aeca:	f103 0308 	add.w	r3, r3, #8
 800aece:	6017      	str	r7, [r2, #0]
 800aed0:	dc33      	bgt.n	800af3a <_svfprintf_r+0xeaa>
 800aed2:	6056      	str	r6, [r2, #4]
 800aed4:	2907      	cmp	r1, #7
 800aed6:	4406      	add	r6, r0
 800aed8:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 800aedc:	dd08      	ble.n	800aef0 <_svfprintf_r+0xe60>
 800aede:	9803      	ldr	r0, [sp, #12]
 800aee0:	aa26      	add	r2, sp, #152	@ 0x98
 800aee2:	4659      	mov	r1, fp
 800aee4:	f001 fba8 	bl	800c638 <__ssprint_r>
 800aee8:	2800      	cmp	r0, #0
 800aeea:	f040 824c 	bne.w	800b386 <_svfprintf_r+0x12f6>
 800aeee:	ab29      	add	r3, sp, #164	@ 0xa4
 800aef0:	9a04      	ldr	r2, [sp, #16]
 800aef2:	9904      	ldr	r1, [sp, #16]
 800aef4:	605a      	str	r2, [r3, #4]
 800aef6:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 800aef8:	f8c3 9000 	str.w	r9, [r3]
 800aefc:	440a      	add	r2, r1
 800aefe:	9228      	str	r2, [sp, #160]	@ 0xa0
 800af00:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 800af02:	3201      	adds	r2, #1
 800af04:	2a07      	cmp	r2, #7
 800af06:	9227      	str	r2, [sp, #156]	@ 0x9c
 800af08:	f73f af7c 	bgt.w	800ae04 <_svfprintf_r+0xd74>
 800af0c:	f103 0408 	add.w	r4, r3, #8
 800af10:	e4c8      	b.n	800a8a4 <_svfprintf_r+0x814>
 800af12:	9803      	ldr	r0, [sp, #12]
 800af14:	aa26      	add	r2, sp, #152	@ 0x98
 800af16:	4659      	mov	r1, fp
 800af18:	f001 fb8e 	bl	800c638 <__ssprint_r>
 800af1c:	2800      	cmp	r0, #0
 800af1e:	f040 8232 	bne.w	800b386 <_svfprintf_r+0x12f6>
 800af22:	ac29      	add	r4, sp, #164	@ 0xa4
 800af24:	e7af      	b.n	800ae86 <_svfprintf_r+0xdf6>
 800af26:	9803      	ldr	r0, [sp, #12]
 800af28:	aa26      	add	r2, sp, #152	@ 0x98
 800af2a:	4659      	mov	r1, fp
 800af2c:	f001 fb84 	bl	800c638 <__ssprint_r>
 800af30:	2800      	cmp	r0, #0
 800af32:	f040 8228 	bne.w	800b386 <_svfprintf_r+0x12f6>
 800af36:	ab29      	add	r3, sp, #164	@ 0xa4
 800af38:	e7bb      	b.n	800aeb2 <_svfprintf_r+0xe22>
 800af3a:	3010      	adds	r0, #16
 800af3c:	2907      	cmp	r1, #7
 800af3e:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 800af42:	6054      	str	r4, [r2, #4]
 800af44:	dd08      	ble.n	800af58 <_svfprintf_r+0xec8>
 800af46:	9803      	ldr	r0, [sp, #12]
 800af48:	aa26      	add	r2, sp, #152	@ 0x98
 800af4a:	4659      	mov	r1, fp
 800af4c:	f001 fb74 	bl	800c638 <__ssprint_r>
 800af50:	2800      	cmp	r0, #0
 800af52:	f040 8218 	bne.w	800b386 <_svfprintf_r+0x12f6>
 800af56:	ab29      	add	r3, sp, #164	@ 0xa4
 800af58:	3e10      	subs	r6, #16
 800af5a:	461a      	mov	r2, r3
 800af5c:	e7b0      	b.n	800aec0 <_svfprintf_r+0xe30>
 800af5e:	bf00      	nop
 800af60:	0808e66e 	.word	0x0808e66e
 800af64:	0808e670 	.word	0x0808e670
 800af68:	9b04      	ldr	r3, [sp, #16]
 800af6a:	444b      	add	r3, r9
 800af6c:	9306      	str	r3, [sp, #24]
 800af6e:	9b04      	ldr	r3, [sp, #16]
 800af70:	42b3      	cmp	r3, r6
 800af72:	bfa8      	it	ge
 800af74:	4633      	movge	r3, r6
 800af76:	2b00      	cmp	r3, #0
 800af78:	4698      	mov	r8, r3
 800af7a:	dd0b      	ble.n	800af94 <_svfprintf_r+0xf04>
 800af7c:	e9c4 9300 	strd	r9, r3, [r4]
 800af80:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800af82:	4443      	add	r3, r8
 800af84:	9328      	str	r3, [sp, #160]	@ 0xa0
 800af86:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800af88:	3301      	adds	r3, #1
 800af8a:	2b07      	cmp	r3, #7
 800af8c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800af8e:	f300 8089 	bgt.w	800b0a4 <_svfprintf_r+0x1014>
 800af92:	3408      	adds	r4, #8
 800af94:	4643      	mov	r3, r8
 800af96:	2b00      	cmp	r3, #0
 800af98:	bfac      	ite	ge
 800af9a:	eba6 0808 	subge.w	r8, r6, r8
 800af9e:	46b0      	movlt	r8, r6
 800afa0:	f1b8 0f00 	cmp.w	r8, #0
 800afa4:	dd1b      	ble.n	800afde <_svfprintf_r+0xf4e>
 800afa6:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 800afaa:	4897      	ldr	r0, [pc, #604]	@ (800b208 <_svfprintf_r+0x1178>)
 800afac:	6020      	str	r0, [r4, #0]
 800afae:	f1b8 0f10 	cmp.w	r8, #16
 800afb2:	f102 0201 	add.w	r2, r2, #1
 800afb6:	f104 0108 	add.w	r1, r4, #8
 800afba:	dc7d      	bgt.n	800b0b8 <_svfprintf_r+0x1028>
 800afbc:	4443      	add	r3, r8
 800afbe:	2a07      	cmp	r2, #7
 800afc0:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800afc4:	f8c4 8004 	str.w	r8, [r4, #4]
 800afc8:	f340 808a 	ble.w	800b0e0 <_svfprintf_r+0x1050>
 800afcc:	9803      	ldr	r0, [sp, #12]
 800afce:	aa26      	add	r2, sp, #152	@ 0x98
 800afd0:	4659      	mov	r1, fp
 800afd2:	f001 fb31 	bl	800c638 <__ssprint_r>
 800afd6:	2800      	cmp	r0, #0
 800afd8:	f040 81d5 	bne.w	800b386 <_svfprintf_r+0x12f6>
 800afdc:	ac29      	add	r4, sp, #164	@ 0xa4
 800afde:	eb09 0806 	add.w	r8, r9, r6
 800afe2:	056e      	lsls	r6, r5, #21
 800afe4:	d508      	bpl.n	800aff8 <_svfprintf_r+0xf68>
 800afe6:	9b08      	ldr	r3, [sp, #32]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d17b      	bne.n	800b0e4 <_svfprintf_r+0x1054>
 800afec:	2f00      	cmp	r7, #0
 800afee:	d17b      	bne.n	800b0e8 <_svfprintf_r+0x1058>
 800aff0:	9b06      	ldr	r3, [sp, #24]
 800aff2:	4598      	cmp	r8, r3
 800aff4:	bf28      	it	cs
 800aff6:	4698      	movcs	r8, r3
 800aff8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800affa:	9a04      	ldr	r2, [sp, #16]
 800affc:	4293      	cmp	r3, r2
 800affe:	db01      	blt.n	800b004 <_svfprintf_r+0xf74>
 800b000:	07e8      	lsls	r0, r5, #31
 800b002:	d50e      	bpl.n	800b022 <_svfprintf_r+0xf92>
 800b004:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b006:	6023      	str	r3, [r4, #0]
 800b008:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b00a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b00c:	6063      	str	r3, [r4, #4]
 800b00e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800b010:	4413      	add	r3, r2
 800b012:	9328      	str	r3, [sp, #160]	@ 0xa0
 800b014:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800b016:	3301      	adds	r3, #1
 800b018:	2b07      	cmp	r3, #7
 800b01a:	9327      	str	r3, [sp, #156]	@ 0x9c
 800b01c:	f300 80df 	bgt.w	800b1de <_svfprintf_r+0x114e>
 800b020:	3408      	adds	r4, #8
 800b022:	9b04      	ldr	r3, [sp, #16]
 800b024:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 800b026:	1bdf      	subs	r7, r3, r7
 800b028:	9b06      	ldr	r3, [sp, #24]
 800b02a:	eba3 0308 	sub.w	r3, r3, r8
 800b02e:	429f      	cmp	r7, r3
 800b030:	bfa8      	it	ge
 800b032:	461f      	movge	r7, r3
 800b034:	2f00      	cmp	r7, #0
 800b036:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800b038:	dd0a      	ble.n	800b050 <_svfprintf_r+0xfc0>
 800b03a:	443b      	add	r3, r7
 800b03c:	9328      	str	r3, [sp, #160]	@ 0xa0
 800b03e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800b040:	3301      	adds	r3, #1
 800b042:	2b07      	cmp	r3, #7
 800b044:	e9c4 8700 	strd	r8, r7, [r4]
 800b048:	9327      	str	r3, [sp, #156]	@ 0x9c
 800b04a:	f300 80d2 	bgt.w	800b1f2 <_svfprintf_r+0x1162>
 800b04e:	3408      	adds	r4, #8
 800b050:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800b052:	9b04      	ldr	r3, [sp, #16]
 800b054:	2f00      	cmp	r7, #0
 800b056:	eba3 0606 	sub.w	r6, r3, r6
 800b05a:	bfa8      	it	ge
 800b05c:	1bf6      	subge	r6, r6, r7
 800b05e:	2e00      	cmp	r6, #0
 800b060:	f77f ac20 	ble.w	800a8a4 <_svfprintf_r+0x814>
 800b064:	4f68      	ldr	r7, [pc, #416]	@ (800b208 <_svfprintf_r+0x1178>)
 800b066:	f04f 0810 	mov.w	r8, #16
 800b06a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800b06e:	2e10      	cmp	r6, #16
 800b070:	f103 0301 	add.w	r3, r3, #1
 800b074:	f104 0108 	add.w	r1, r4, #8
 800b078:	6027      	str	r7, [r4, #0]
 800b07a:	f77f aebc 	ble.w	800adf6 <_svfprintf_r+0xd66>
 800b07e:	3210      	adds	r2, #16
 800b080:	2b07      	cmp	r3, #7
 800b082:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800b086:	f8c4 8004 	str.w	r8, [r4, #4]
 800b08a:	dd08      	ble.n	800b09e <_svfprintf_r+0x100e>
 800b08c:	9803      	ldr	r0, [sp, #12]
 800b08e:	aa26      	add	r2, sp, #152	@ 0x98
 800b090:	4659      	mov	r1, fp
 800b092:	f001 fad1 	bl	800c638 <__ssprint_r>
 800b096:	2800      	cmp	r0, #0
 800b098:	f040 8175 	bne.w	800b386 <_svfprintf_r+0x12f6>
 800b09c:	a929      	add	r1, sp, #164	@ 0xa4
 800b09e:	3e10      	subs	r6, #16
 800b0a0:	460c      	mov	r4, r1
 800b0a2:	e7e2      	b.n	800b06a <_svfprintf_r+0xfda>
 800b0a4:	9803      	ldr	r0, [sp, #12]
 800b0a6:	aa26      	add	r2, sp, #152	@ 0x98
 800b0a8:	4659      	mov	r1, fp
 800b0aa:	f001 fac5 	bl	800c638 <__ssprint_r>
 800b0ae:	2800      	cmp	r0, #0
 800b0b0:	f040 8169 	bne.w	800b386 <_svfprintf_r+0x12f6>
 800b0b4:	ac29      	add	r4, sp, #164	@ 0xa4
 800b0b6:	e76d      	b.n	800af94 <_svfprintf_r+0xf04>
 800b0b8:	2010      	movs	r0, #16
 800b0ba:	4403      	add	r3, r0
 800b0bc:	2a07      	cmp	r2, #7
 800b0be:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800b0c2:	6060      	str	r0, [r4, #4]
 800b0c4:	dd08      	ble.n	800b0d8 <_svfprintf_r+0x1048>
 800b0c6:	9803      	ldr	r0, [sp, #12]
 800b0c8:	aa26      	add	r2, sp, #152	@ 0x98
 800b0ca:	4659      	mov	r1, fp
 800b0cc:	f001 fab4 	bl	800c638 <__ssprint_r>
 800b0d0:	2800      	cmp	r0, #0
 800b0d2:	f040 8158 	bne.w	800b386 <_svfprintf_r+0x12f6>
 800b0d6:	a929      	add	r1, sp, #164	@ 0xa4
 800b0d8:	f1a8 0810 	sub.w	r8, r8, #16
 800b0dc:	460c      	mov	r4, r1
 800b0de:	e762      	b.n	800afa6 <_svfprintf_r+0xf16>
 800b0e0:	460c      	mov	r4, r1
 800b0e2:	e77c      	b.n	800afde <_svfprintf_r+0xf4e>
 800b0e4:	2f00      	cmp	r7, #0
 800b0e6:	d04a      	beq.n	800b17e <_svfprintf_r+0x10ee>
 800b0e8:	3f01      	subs	r7, #1
 800b0ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b0ec:	6023      	str	r3, [r4, #0]
 800b0ee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b0f0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b0f2:	6063      	str	r3, [r4, #4]
 800b0f4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800b0f6:	4413      	add	r3, r2
 800b0f8:	9328      	str	r3, [sp, #160]	@ 0xa0
 800b0fa:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800b0fc:	3301      	adds	r3, #1
 800b0fe:	2b07      	cmp	r3, #7
 800b100:	9327      	str	r3, [sp, #156]	@ 0x9c
 800b102:	dc43      	bgt.n	800b18c <_svfprintf_r+0x10fc>
 800b104:	3408      	adds	r4, #8
 800b106:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b108:	781a      	ldrb	r2, [r3, #0]
 800b10a:	9b06      	ldr	r3, [sp, #24]
 800b10c:	eba3 0308 	sub.w	r3, r3, r8
 800b110:	429a      	cmp	r2, r3
 800b112:	bfa8      	it	ge
 800b114:	461a      	movge	r2, r3
 800b116:	2a00      	cmp	r2, #0
 800b118:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800b11a:	4691      	mov	r9, r2
 800b11c:	dd09      	ble.n	800b132 <_svfprintf_r+0x10a2>
 800b11e:	4413      	add	r3, r2
 800b120:	9328      	str	r3, [sp, #160]	@ 0xa0
 800b122:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800b124:	3301      	adds	r3, #1
 800b126:	2b07      	cmp	r3, #7
 800b128:	e9c4 8200 	strd	r8, r2, [r4]
 800b12c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800b12e:	dc37      	bgt.n	800b1a0 <_svfprintf_r+0x1110>
 800b130:	3408      	adds	r4, #8
 800b132:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b134:	781e      	ldrb	r6, [r3, #0]
 800b136:	f1b9 0f00 	cmp.w	r9, #0
 800b13a:	bfa8      	it	ge
 800b13c:	eba6 0609 	subge.w	r6, r6, r9
 800b140:	2e00      	cmp	r6, #0
 800b142:	dd18      	ble.n	800b176 <_svfprintf_r+0x10e6>
 800b144:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800b148:	482f      	ldr	r0, [pc, #188]	@ (800b208 <_svfprintf_r+0x1178>)
 800b14a:	6020      	str	r0, [r4, #0]
 800b14c:	2e10      	cmp	r6, #16
 800b14e:	f103 0301 	add.w	r3, r3, #1
 800b152:	f104 0108 	add.w	r1, r4, #8
 800b156:	dc2d      	bgt.n	800b1b4 <_svfprintf_r+0x1124>
 800b158:	6066      	str	r6, [r4, #4]
 800b15a:	2b07      	cmp	r3, #7
 800b15c:	4416      	add	r6, r2
 800b15e:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 800b162:	dd3a      	ble.n	800b1da <_svfprintf_r+0x114a>
 800b164:	9803      	ldr	r0, [sp, #12]
 800b166:	aa26      	add	r2, sp, #152	@ 0x98
 800b168:	4659      	mov	r1, fp
 800b16a:	f001 fa65 	bl	800c638 <__ssprint_r>
 800b16e:	2800      	cmp	r0, #0
 800b170:	f040 8109 	bne.w	800b386 <_svfprintf_r+0x12f6>
 800b174:	ac29      	add	r4, sp, #164	@ 0xa4
 800b176:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b178:	781b      	ldrb	r3, [r3, #0]
 800b17a:	4498      	add	r8, r3
 800b17c:	e733      	b.n	800afe6 <_svfprintf_r+0xf56>
 800b17e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b180:	3b01      	subs	r3, #1
 800b182:	9309      	str	r3, [sp, #36]	@ 0x24
 800b184:	9b08      	ldr	r3, [sp, #32]
 800b186:	3b01      	subs	r3, #1
 800b188:	9308      	str	r3, [sp, #32]
 800b18a:	e7ae      	b.n	800b0ea <_svfprintf_r+0x105a>
 800b18c:	9803      	ldr	r0, [sp, #12]
 800b18e:	aa26      	add	r2, sp, #152	@ 0x98
 800b190:	4659      	mov	r1, fp
 800b192:	f001 fa51 	bl	800c638 <__ssprint_r>
 800b196:	2800      	cmp	r0, #0
 800b198:	f040 80f5 	bne.w	800b386 <_svfprintf_r+0x12f6>
 800b19c:	ac29      	add	r4, sp, #164	@ 0xa4
 800b19e:	e7b2      	b.n	800b106 <_svfprintf_r+0x1076>
 800b1a0:	9803      	ldr	r0, [sp, #12]
 800b1a2:	aa26      	add	r2, sp, #152	@ 0x98
 800b1a4:	4659      	mov	r1, fp
 800b1a6:	f001 fa47 	bl	800c638 <__ssprint_r>
 800b1aa:	2800      	cmp	r0, #0
 800b1ac:	f040 80eb 	bne.w	800b386 <_svfprintf_r+0x12f6>
 800b1b0:	ac29      	add	r4, sp, #164	@ 0xa4
 800b1b2:	e7be      	b.n	800b132 <_svfprintf_r+0x10a2>
 800b1b4:	2010      	movs	r0, #16
 800b1b6:	4402      	add	r2, r0
 800b1b8:	2b07      	cmp	r3, #7
 800b1ba:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800b1be:	6060      	str	r0, [r4, #4]
 800b1c0:	dd08      	ble.n	800b1d4 <_svfprintf_r+0x1144>
 800b1c2:	9803      	ldr	r0, [sp, #12]
 800b1c4:	aa26      	add	r2, sp, #152	@ 0x98
 800b1c6:	4659      	mov	r1, fp
 800b1c8:	f001 fa36 	bl	800c638 <__ssprint_r>
 800b1cc:	2800      	cmp	r0, #0
 800b1ce:	f040 80da 	bne.w	800b386 <_svfprintf_r+0x12f6>
 800b1d2:	a929      	add	r1, sp, #164	@ 0xa4
 800b1d4:	3e10      	subs	r6, #16
 800b1d6:	460c      	mov	r4, r1
 800b1d8:	e7b4      	b.n	800b144 <_svfprintf_r+0x10b4>
 800b1da:	460c      	mov	r4, r1
 800b1dc:	e7cb      	b.n	800b176 <_svfprintf_r+0x10e6>
 800b1de:	9803      	ldr	r0, [sp, #12]
 800b1e0:	aa26      	add	r2, sp, #152	@ 0x98
 800b1e2:	4659      	mov	r1, fp
 800b1e4:	f001 fa28 	bl	800c638 <__ssprint_r>
 800b1e8:	2800      	cmp	r0, #0
 800b1ea:	f040 80cc 	bne.w	800b386 <_svfprintf_r+0x12f6>
 800b1ee:	ac29      	add	r4, sp, #164	@ 0xa4
 800b1f0:	e717      	b.n	800b022 <_svfprintf_r+0xf92>
 800b1f2:	9803      	ldr	r0, [sp, #12]
 800b1f4:	aa26      	add	r2, sp, #152	@ 0x98
 800b1f6:	4659      	mov	r1, fp
 800b1f8:	f001 fa1e 	bl	800c638 <__ssprint_r>
 800b1fc:	2800      	cmp	r0, #0
 800b1fe:	f040 80c2 	bne.w	800b386 <_svfprintf_r+0x12f6>
 800b202:	ac29      	add	r4, sp, #164	@ 0xa4
 800b204:	e724      	b.n	800b050 <_svfprintf_r+0xfc0>
 800b206:	bf00      	nop
 800b208:	0808e670 	.word	0x0808e670
 800b20c:	9904      	ldr	r1, [sp, #16]
 800b20e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b210:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 800b212:	2901      	cmp	r1, #1
 800b214:	f103 0301 	add.w	r3, r3, #1
 800b218:	f102 0201 	add.w	r2, r2, #1
 800b21c:	f104 0608 	add.w	r6, r4, #8
 800b220:	dc02      	bgt.n	800b228 <_svfprintf_r+0x1198>
 800b222:	07e9      	lsls	r1, r5, #31
 800b224:	f140 8083 	bpl.w	800b32e <_svfprintf_r+0x129e>
 800b228:	2101      	movs	r1, #1
 800b22a:	2a07      	cmp	r2, #7
 800b22c:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800b230:	f8c4 9000 	str.w	r9, [r4]
 800b234:	6061      	str	r1, [r4, #4]
 800b236:	dd08      	ble.n	800b24a <_svfprintf_r+0x11ba>
 800b238:	9803      	ldr	r0, [sp, #12]
 800b23a:	aa26      	add	r2, sp, #152	@ 0x98
 800b23c:	4659      	mov	r1, fp
 800b23e:	f001 f9fb 	bl	800c638 <__ssprint_r>
 800b242:	2800      	cmp	r0, #0
 800b244:	f040 809f 	bne.w	800b386 <_svfprintf_r+0x12f6>
 800b248:	ae29      	add	r6, sp, #164	@ 0xa4
 800b24a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b24c:	6033      	str	r3, [r6, #0]
 800b24e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b250:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b252:	6073      	str	r3, [r6, #4]
 800b254:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800b256:	4413      	add	r3, r2
 800b258:	9328      	str	r3, [sp, #160]	@ 0xa0
 800b25a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800b25c:	3301      	adds	r3, #1
 800b25e:	2b07      	cmp	r3, #7
 800b260:	9327      	str	r3, [sp, #156]	@ 0x9c
 800b262:	dc33      	bgt.n	800b2cc <_svfprintf_r+0x123c>
 800b264:	3608      	adds	r6, #8
 800b266:	9b04      	ldr	r3, [sp, #16]
 800b268:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b26c:	1e5c      	subs	r4, r3, #1
 800b26e:	2200      	movs	r2, #0
 800b270:	2300      	movs	r3, #0
 800b272:	e9dd 8727 	ldrd	r8, r7, [sp, #156]	@ 0x9c
 800b276:	f7f5 fc47 	bl	8000b08 <__aeabi_dcmpeq>
 800b27a:	2800      	cmp	r0, #0
 800b27c:	d12f      	bne.n	800b2de <_svfprintf_r+0x124e>
 800b27e:	f109 0201 	add.w	r2, r9, #1
 800b282:	e9c6 2400 	strd	r2, r4, [r6]
 800b286:	9a04      	ldr	r2, [sp, #16]
 800b288:	f108 0301 	add.w	r3, r8, #1
 800b28c:	3f01      	subs	r7, #1
 800b28e:	4417      	add	r7, r2
 800b290:	2b07      	cmp	r3, #7
 800b292:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 800b296:	dd53      	ble.n	800b340 <_svfprintf_r+0x12b0>
 800b298:	9803      	ldr	r0, [sp, #12]
 800b29a:	aa26      	add	r2, sp, #152	@ 0x98
 800b29c:	4659      	mov	r1, fp
 800b29e:	f001 f9cb 	bl	800c638 <__ssprint_r>
 800b2a2:	2800      	cmp	r0, #0
 800b2a4:	d16f      	bne.n	800b386 <_svfprintf_r+0x12f6>
 800b2a6:	ae29      	add	r6, sp, #164	@ 0xa4
 800b2a8:	ab22      	add	r3, sp, #136	@ 0x88
 800b2aa:	6033      	str	r3, [r6, #0]
 800b2ac:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800b2ae:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800b2b0:	6073      	str	r3, [r6, #4]
 800b2b2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800b2b4:	4413      	add	r3, r2
 800b2b6:	9328      	str	r3, [sp, #160]	@ 0xa0
 800b2b8:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800b2ba:	3301      	adds	r3, #1
 800b2bc:	2b07      	cmp	r3, #7
 800b2be:	9327      	str	r3, [sp, #156]	@ 0x9c
 800b2c0:	f73f ada0 	bgt.w	800ae04 <_svfprintf_r+0xd74>
 800b2c4:	f106 0408 	add.w	r4, r6, #8
 800b2c8:	f7ff baec 	b.w	800a8a4 <_svfprintf_r+0x814>
 800b2cc:	9803      	ldr	r0, [sp, #12]
 800b2ce:	aa26      	add	r2, sp, #152	@ 0x98
 800b2d0:	4659      	mov	r1, fp
 800b2d2:	f001 f9b1 	bl	800c638 <__ssprint_r>
 800b2d6:	2800      	cmp	r0, #0
 800b2d8:	d155      	bne.n	800b386 <_svfprintf_r+0x12f6>
 800b2da:	ae29      	add	r6, sp, #164	@ 0xa4
 800b2dc:	e7c3      	b.n	800b266 <_svfprintf_r+0x11d6>
 800b2de:	9b04      	ldr	r3, [sp, #16]
 800b2e0:	2b01      	cmp	r3, #1
 800b2e2:	dde1      	ble.n	800b2a8 <_svfprintf_r+0x1218>
 800b2e4:	4f57      	ldr	r7, [pc, #348]	@ (800b444 <_svfprintf_r+0x13b4>)
 800b2e6:	f04f 0810 	mov.w	r8, #16
 800b2ea:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800b2ee:	2c10      	cmp	r4, #16
 800b2f0:	f103 0301 	add.w	r3, r3, #1
 800b2f4:	f106 0108 	add.w	r1, r6, #8
 800b2f8:	6037      	str	r7, [r6, #0]
 800b2fa:	dc07      	bgt.n	800b30c <_svfprintf_r+0x127c>
 800b2fc:	6074      	str	r4, [r6, #4]
 800b2fe:	2b07      	cmp	r3, #7
 800b300:	4414      	add	r4, r2
 800b302:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 800b306:	dcc7      	bgt.n	800b298 <_svfprintf_r+0x1208>
 800b308:	460e      	mov	r6, r1
 800b30a:	e7cd      	b.n	800b2a8 <_svfprintf_r+0x1218>
 800b30c:	3210      	adds	r2, #16
 800b30e:	2b07      	cmp	r3, #7
 800b310:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800b314:	f8c6 8004 	str.w	r8, [r6, #4]
 800b318:	dd06      	ble.n	800b328 <_svfprintf_r+0x1298>
 800b31a:	9803      	ldr	r0, [sp, #12]
 800b31c:	aa26      	add	r2, sp, #152	@ 0x98
 800b31e:	4659      	mov	r1, fp
 800b320:	f001 f98a 	bl	800c638 <__ssprint_r>
 800b324:	bb78      	cbnz	r0, 800b386 <_svfprintf_r+0x12f6>
 800b326:	a929      	add	r1, sp, #164	@ 0xa4
 800b328:	3c10      	subs	r4, #16
 800b32a:	460e      	mov	r6, r1
 800b32c:	e7dd      	b.n	800b2ea <_svfprintf_r+0x125a>
 800b32e:	2101      	movs	r1, #1
 800b330:	2a07      	cmp	r2, #7
 800b332:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800b336:	f8c4 9000 	str.w	r9, [r4]
 800b33a:	6061      	str	r1, [r4, #4]
 800b33c:	ddb4      	ble.n	800b2a8 <_svfprintf_r+0x1218>
 800b33e:	e7ab      	b.n	800b298 <_svfprintf_r+0x1208>
 800b340:	3608      	adds	r6, #8
 800b342:	e7b1      	b.n	800b2a8 <_svfprintf_r+0x1218>
 800b344:	460c      	mov	r4, r1
 800b346:	f7ff baad 	b.w	800a8a4 <_svfprintf_r+0x814>
 800b34a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b34c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b34e:	1a9d      	subs	r5, r3, r2
 800b350:	2d00      	cmp	r5, #0
 800b352:	f77f aaaa 	ble.w	800a8aa <_svfprintf_r+0x81a>
 800b356:	4e3c      	ldr	r6, [pc, #240]	@ (800b448 <_svfprintf_r+0x13b8>)
 800b358:	2710      	movs	r7, #16
 800b35a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800b35e:	2d10      	cmp	r5, #16
 800b360:	f103 0301 	add.w	r3, r3, #1
 800b364:	6026      	str	r6, [r4, #0]
 800b366:	dc18      	bgt.n	800b39a <_svfprintf_r+0x130a>
 800b368:	442a      	add	r2, r5
 800b36a:	2b07      	cmp	r3, #7
 800b36c:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800b370:	6065      	str	r5, [r4, #4]
 800b372:	f77f aa9a 	ble.w	800a8aa <_svfprintf_r+0x81a>
 800b376:	9803      	ldr	r0, [sp, #12]
 800b378:	aa26      	add	r2, sp, #152	@ 0x98
 800b37a:	4659      	mov	r1, fp
 800b37c:	f001 f95c 	bl	800c638 <__ssprint_r>
 800b380:	2800      	cmp	r0, #0
 800b382:	f43f aa92 	beq.w	800a8aa <_svfprintf_r+0x81a>
 800b386:	f1ba 0f00 	cmp.w	sl, #0
 800b38a:	f43f a89a 	beq.w	800a4c2 <_svfprintf_r+0x432>
 800b38e:	9803      	ldr	r0, [sp, #12]
 800b390:	4651      	mov	r1, sl
 800b392:	f7fe fdbd 	bl	8009f10 <_free_r>
 800b396:	f7ff b894 	b.w	800a4c2 <_svfprintf_r+0x432>
 800b39a:	3210      	adds	r2, #16
 800b39c:	2b07      	cmp	r3, #7
 800b39e:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800b3a2:	6067      	str	r7, [r4, #4]
 800b3a4:	dc02      	bgt.n	800b3ac <_svfprintf_r+0x131c>
 800b3a6:	3408      	adds	r4, #8
 800b3a8:	3d10      	subs	r5, #16
 800b3aa:	e7d6      	b.n	800b35a <_svfprintf_r+0x12ca>
 800b3ac:	9803      	ldr	r0, [sp, #12]
 800b3ae:	aa26      	add	r2, sp, #152	@ 0x98
 800b3b0:	4659      	mov	r1, fp
 800b3b2:	f001 f941 	bl	800c638 <__ssprint_r>
 800b3b6:	2800      	cmp	r0, #0
 800b3b8:	d1e5      	bne.n	800b386 <_svfprintf_r+0x12f6>
 800b3ba:	ac29      	add	r4, sp, #164	@ 0xa4
 800b3bc:	e7f4      	b.n	800b3a8 <_svfprintf_r+0x1318>
 800b3be:	9803      	ldr	r0, [sp, #12]
 800b3c0:	4651      	mov	r1, sl
 800b3c2:	f7fe fda5 	bl	8009f10 <_free_r>
 800b3c6:	f7ff ba88 	b.w	800a8da <_svfprintf_r+0x84a>
 800b3ca:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	f43f a878 	beq.w	800a4c2 <_svfprintf_r+0x432>
 800b3d2:	9803      	ldr	r0, [sp, #12]
 800b3d4:	aa26      	add	r2, sp, #152	@ 0x98
 800b3d6:	4659      	mov	r1, fp
 800b3d8:	f001 f92e 	bl	800c638 <__ssprint_r>
 800b3dc:	f7ff b871 	b.w	800a4c2 <_svfprintf_r+0x432>
 800b3e0:	ea56 0207 	orrs.w	r2, r6, r7
 800b3e4:	9508      	str	r5, [sp, #32]
 800b3e6:	f43f ab7a 	beq.w	800aade <_svfprintf_r+0xa4e>
 800b3ea:	2b01      	cmp	r3, #1
 800b3ec:	f43f abfb 	beq.w	800abe6 <_svfprintf_r+0xb56>
 800b3f0:	2b02      	cmp	r3, #2
 800b3f2:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 800b3f6:	f43f ac3f 	beq.w	800ac78 <_svfprintf_r+0xbe8>
 800b3fa:	f006 0307 	and.w	r3, r6, #7
 800b3fe:	08f6      	lsrs	r6, r6, #3
 800b400:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 800b404:	08ff      	lsrs	r7, r7, #3
 800b406:	3330      	adds	r3, #48	@ 0x30
 800b408:	ea56 0107 	orrs.w	r1, r6, r7
 800b40c:	464a      	mov	r2, r9
 800b40e:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800b412:	d1f2      	bne.n	800b3fa <_svfprintf_r+0x136a>
 800b414:	9908      	ldr	r1, [sp, #32]
 800b416:	07c8      	lsls	r0, r1, #31
 800b418:	d506      	bpl.n	800b428 <_svfprintf_r+0x1398>
 800b41a:	2b30      	cmp	r3, #48	@ 0x30
 800b41c:	d004      	beq.n	800b428 <_svfprintf_r+0x1398>
 800b41e:	2330      	movs	r3, #48	@ 0x30
 800b420:	f809 3c01 	strb.w	r3, [r9, #-1]
 800b424:	f1a2 0902 	sub.w	r9, r2, #2
 800b428:	ab52      	add	r3, sp, #328	@ 0x148
 800b42a:	9d08      	ldr	r5, [sp, #32]
 800b42c:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 800b430:	f04f 0a00 	mov.w	sl, #0
 800b434:	eba3 0809 	sub.w	r8, r3, r9
 800b438:	4657      	mov	r7, sl
 800b43a:	f8cd a020 	str.w	sl, [sp, #32]
 800b43e:	4656      	mov	r6, sl
 800b440:	f7ff b97c 	b.w	800a73c <_svfprintf_r+0x6ac>
 800b444:	0808e670 	.word	0x0808e670
 800b448:	0808e680 	.word	0x0808e680

0800b44c <__swhatbuf_r>:
 800b44c:	b570      	push	{r4, r5, r6, lr}
 800b44e:	460c      	mov	r4, r1
 800b450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b454:	2900      	cmp	r1, #0
 800b456:	b096      	sub	sp, #88	@ 0x58
 800b458:	4615      	mov	r5, r2
 800b45a:	461e      	mov	r6, r3
 800b45c:	da07      	bge.n	800b46e <__swhatbuf_r+0x22>
 800b45e:	89a1      	ldrh	r1, [r4, #12]
 800b460:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 800b464:	d117      	bne.n	800b496 <__swhatbuf_r+0x4a>
 800b466:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b46a:	4608      	mov	r0, r1
 800b46c:	e00f      	b.n	800b48e <__swhatbuf_r+0x42>
 800b46e:	466a      	mov	r2, sp
 800b470:	f000 fa06 	bl	800b880 <_fstat_r>
 800b474:	2800      	cmp	r0, #0
 800b476:	dbf2      	blt.n	800b45e <__swhatbuf_r+0x12>
 800b478:	9901      	ldr	r1, [sp, #4]
 800b47a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b47e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b482:	4259      	negs	r1, r3
 800b484:	4159      	adcs	r1, r3
 800b486:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800b48a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b48e:	6031      	str	r1, [r6, #0]
 800b490:	602b      	str	r3, [r5, #0]
 800b492:	b016      	add	sp, #88	@ 0x58
 800b494:	bd70      	pop	{r4, r5, r6, pc}
 800b496:	2100      	movs	r1, #0
 800b498:	2340      	movs	r3, #64	@ 0x40
 800b49a:	e7e6      	b.n	800b46a <__swhatbuf_r+0x1e>

0800b49c <__smakebuf_r>:
 800b49c:	898b      	ldrh	r3, [r1, #12]
 800b49e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b4a0:	079d      	lsls	r5, r3, #30
 800b4a2:	4606      	mov	r6, r0
 800b4a4:	460c      	mov	r4, r1
 800b4a6:	d507      	bpl.n	800b4b8 <__smakebuf_r+0x1c>
 800b4a8:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 800b4ac:	6023      	str	r3, [r4, #0]
 800b4ae:	6123      	str	r3, [r4, #16]
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	6163      	str	r3, [r4, #20]
 800b4b4:	b003      	add	sp, #12
 800b4b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4b8:	ab01      	add	r3, sp, #4
 800b4ba:	466a      	mov	r2, sp
 800b4bc:	f7ff ffc6 	bl	800b44c <__swhatbuf_r>
 800b4c0:	9f00      	ldr	r7, [sp, #0]
 800b4c2:	4605      	mov	r5, r0
 800b4c4:	4639      	mov	r1, r7
 800b4c6:	4630      	mov	r0, r6
 800b4c8:	f7fd fd4a 	bl	8008f60 <_malloc_r>
 800b4cc:	b948      	cbnz	r0, 800b4e2 <__smakebuf_r+0x46>
 800b4ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4d2:	059a      	lsls	r2, r3, #22
 800b4d4:	d4ee      	bmi.n	800b4b4 <__smakebuf_r+0x18>
 800b4d6:	f023 0303 	bic.w	r3, r3, #3
 800b4da:	f043 0302 	orr.w	r3, r3, #2
 800b4de:	81a3      	strh	r3, [r4, #12]
 800b4e0:	e7e2      	b.n	800b4a8 <__smakebuf_r+0xc>
 800b4e2:	89a3      	ldrh	r3, [r4, #12]
 800b4e4:	6020      	str	r0, [r4, #0]
 800b4e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b4ea:	81a3      	strh	r3, [r4, #12]
 800b4ec:	9b01      	ldr	r3, [sp, #4]
 800b4ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b4f2:	b15b      	cbz	r3, 800b50c <__smakebuf_r+0x70>
 800b4f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4f8:	4630      	mov	r0, r6
 800b4fa:	f000 f9d3 	bl	800b8a4 <_isatty_r>
 800b4fe:	b128      	cbz	r0, 800b50c <__smakebuf_r+0x70>
 800b500:	89a3      	ldrh	r3, [r4, #12]
 800b502:	f023 0303 	bic.w	r3, r3, #3
 800b506:	f043 0301 	orr.w	r3, r3, #1
 800b50a:	81a3      	strh	r3, [r4, #12]
 800b50c:	89a3      	ldrh	r3, [r4, #12]
 800b50e:	431d      	orrs	r5, r3
 800b510:	81a5      	strh	r5, [r4, #12]
 800b512:	e7cf      	b.n	800b4b4 <__smakebuf_r+0x18>

0800b514 <_fclose_r>:
 800b514:	b570      	push	{r4, r5, r6, lr}
 800b516:	4605      	mov	r5, r0
 800b518:	460c      	mov	r4, r1
 800b51a:	b1b1      	cbz	r1, 800b54a <_fclose_r+0x36>
 800b51c:	b118      	cbz	r0, 800b526 <_fclose_r+0x12>
 800b51e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b520:	b90b      	cbnz	r3, 800b526 <_fclose_r+0x12>
 800b522:	f7fe f9b7 	bl	8009894 <__sinit>
 800b526:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b528:	07de      	lsls	r6, r3, #31
 800b52a:	d405      	bmi.n	800b538 <_fclose_r+0x24>
 800b52c:	89a3      	ldrh	r3, [r4, #12]
 800b52e:	0598      	lsls	r0, r3, #22
 800b530:	d402      	bmi.n	800b538 <_fclose_r+0x24>
 800b532:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b534:	f7fe fc36 	bl	8009da4 <__retarget_lock_acquire_recursive>
 800b538:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b53c:	b943      	cbnz	r3, 800b550 <_fclose_r+0x3c>
 800b53e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b540:	07d9      	lsls	r1, r3, #31
 800b542:	d402      	bmi.n	800b54a <_fclose_r+0x36>
 800b544:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b546:	f7fe fc2e 	bl	8009da6 <__retarget_lock_release_recursive>
 800b54a:	2600      	movs	r6, #0
 800b54c:	4630      	mov	r0, r6
 800b54e:	bd70      	pop	{r4, r5, r6, pc}
 800b550:	4621      	mov	r1, r4
 800b552:	4628      	mov	r0, r5
 800b554:	f000 f834 	bl	800b5c0 <__sflush_r>
 800b558:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b55a:	4606      	mov	r6, r0
 800b55c:	b133      	cbz	r3, 800b56c <_fclose_r+0x58>
 800b55e:	69e1      	ldr	r1, [r4, #28]
 800b560:	4628      	mov	r0, r5
 800b562:	4798      	blx	r3
 800b564:	2800      	cmp	r0, #0
 800b566:	bfb8      	it	lt
 800b568:	f04f 36ff 	movlt.w	r6, #4294967295	@ 0xffffffff
 800b56c:	89a3      	ldrh	r3, [r4, #12]
 800b56e:	061a      	lsls	r2, r3, #24
 800b570:	d503      	bpl.n	800b57a <_fclose_r+0x66>
 800b572:	6921      	ldr	r1, [r4, #16]
 800b574:	4628      	mov	r0, r5
 800b576:	f7fe fccb 	bl	8009f10 <_free_r>
 800b57a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b57c:	b141      	cbz	r1, 800b590 <_fclose_r+0x7c>
 800b57e:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800b582:	4299      	cmp	r1, r3
 800b584:	d002      	beq.n	800b58c <_fclose_r+0x78>
 800b586:	4628      	mov	r0, r5
 800b588:	f7fe fcc2 	bl	8009f10 <_free_r>
 800b58c:	2300      	movs	r3, #0
 800b58e:	6323      	str	r3, [r4, #48]	@ 0x30
 800b590:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800b592:	b121      	cbz	r1, 800b59e <_fclose_r+0x8a>
 800b594:	4628      	mov	r0, r5
 800b596:	f7fe fcbb 	bl	8009f10 <_free_r>
 800b59a:	2300      	movs	r3, #0
 800b59c:	6463      	str	r3, [r4, #68]	@ 0x44
 800b59e:	f7fe f96d 	bl	800987c <__sfp_lock_acquire>
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	81a3      	strh	r3, [r4, #12]
 800b5a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b5a8:	07db      	lsls	r3, r3, #31
 800b5aa:	d402      	bmi.n	800b5b2 <_fclose_r+0x9e>
 800b5ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b5ae:	f7fe fbfa 	bl	8009da6 <__retarget_lock_release_recursive>
 800b5b2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b5b4:	f7fe fbf5 	bl	8009da2 <__retarget_lock_close_recursive>
 800b5b8:	f7fe f966 	bl	8009888 <__sfp_lock_release>
 800b5bc:	e7c6      	b.n	800b54c <_fclose_r+0x38>
	...

0800b5c0 <__sflush_r>:
 800b5c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5c4:	4605      	mov	r5, r0
 800b5c6:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 800b5ca:	0706      	lsls	r6, r0, #28
 800b5cc:	460c      	mov	r4, r1
 800b5ce:	d457      	bmi.n	800b680 <__sflush_r+0xc0>
 800b5d0:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 800b5d4:	818b      	strh	r3, [r1, #12]
 800b5d6:	684b      	ldr	r3, [r1, #4]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	dc02      	bgt.n	800b5e2 <__sflush_r+0x22>
 800b5dc:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	dd4c      	ble.n	800b67c <__sflush_r+0xbc>
 800b5e2:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b5e4:	2e00      	cmp	r6, #0
 800b5e6:	d049      	beq.n	800b67c <__sflush_r+0xbc>
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 800b5ee:	682f      	ldr	r7, [r5, #0]
 800b5f0:	69e1      	ldr	r1, [r4, #28]
 800b5f2:	602b      	str	r3, [r5, #0]
 800b5f4:	d034      	beq.n	800b660 <__sflush_r+0xa0>
 800b5f6:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800b5f8:	89a3      	ldrh	r3, [r4, #12]
 800b5fa:	0759      	lsls	r1, r3, #29
 800b5fc:	d505      	bpl.n	800b60a <__sflush_r+0x4a>
 800b5fe:	6863      	ldr	r3, [r4, #4]
 800b600:	1ad2      	subs	r2, r2, r3
 800b602:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800b604:	b10b      	cbz	r3, 800b60a <__sflush_r+0x4a>
 800b606:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800b608:	1ad2      	subs	r2, r2, r3
 800b60a:	2300      	movs	r3, #0
 800b60c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b60e:	69e1      	ldr	r1, [r4, #28]
 800b610:	4628      	mov	r0, r5
 800b612:	47b0      	blx	r6
 800b614:	1c43      	adds	r3, r0, #1
 800b616:	d106      	bne.n	800b626 <__sflush_r+0x66>
 800b618:	682a      	ldr	r2, [r5, #0]
 800b61a:	2a1d      	cmp	r2, #29
 800b61c:	d848      	bhi.n	800b6b0 <__sflush_r+0xf0>
 800b61e:	4b2b      	ldr	r3, [pc, #172]	@ (800b6cc <__sflush_r+0x10c>)
 800b620:	4113      	asrs	r3, r2
 800b622:	07de      	lsls	r6, r3, #31
 800b624:	d444      	bmi.n	800b6b0 <__sflush_r+0xf0>
 800b626:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b62a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b62e:	81a2      	strh	r2, [r4, #12]
 800b630:	2200      	movs	r2, #0
 800b632:	6062      	str	r2, [r4, #4]
 800b634:	04d9      	lsls	r1, r3, #19
 800b636:	6922      	ldr	r2, [r4, #16]
 800b638:	6022      	str	r2, [r4, #0]
 800b63a:	d504      	bpl.n	800b646 <__sflush_r+0x86>
 800b63c:	1c42      	adds	r2, r0, #1
 800b63e:	d101      	bne.n	800b644 <__sflush_r+0x84>
 800b640:	682b      	ldr	r3, [r5, #0]
 800b642:	b903      	cbnz	r3, 800b646 <__sflush_r+0x86>
 800b644:	6520      	str	r0, [r4, #80]	@ 0x50
 800b646:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b648:	602f      	str	r7, [r5, #0]
 800b64a:	b1b9      	cbz	r1, 800b67c <__sflush_r+0xbc>
 800b64c:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800b650:	4299      	cmp	r1, r3
 800b652:	d002      	beq.n	800b65a <__sflush_r+0x9a>
 800b654:	4628      	mov	r0, r5
 800b656:	f7fe fc5b 	bl	8009f10 <_free_r>
 800b65a:	2300      	movs	r3, #0
 800b65c:	6323      	str	r3, [r4, #48]	@ 0x30
 800b65e:	e00d      	b.n	800b67c <__sflush_r+0xbc>
 800b660:	2301      	movs	r3, #1
 800b662:	4628      	mov	r0, r5
 800b664:	47b0      	blx	r6
 800b666:	4602      	mov	r2, r0
 800b668:	1c50      	adds	r0, r2, #1
 800b66a:	d1c5      	bne.n	800b5f8 <__sflush_r+0x38>
 800b66c:	682b      	ldr	r3, [r5, #0]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d0c2      	beq.n	800b5f8 <__sflush_r+0x38>
 800b672:	2b1d      	cmp	r3, #29
 800b674:	d001      	beq.n	800b67a <__sflush_r+0xba>
 800b676:	2b16      	cmp	r3, #22
 800b678:	d11a      	bne.n	800b6b0 <__sflush_r+0xf0>
 800b67a:	602f      	str	r7, [r5, #0]
 800b67c:	2000      	movs	r0, #0
 800b67e:	e01e      	b.n	800b6be <__sflush_r+0xfe>
 800b680:	690f      	ldr	r7, [r1, #16]
 800b682:	2f00      	cmp	r7, #0
 800b684:	d0fa      	beq.n	800b67c <__sflush_r+0xbc>
 800b686:	0783      	lsls	r3, r0, #30
 800b688:	680e      	ldr	r6, [r1, #0]
 800b68a:	bf08      	it	eq
 800b68c:	694b      	ldreq	r3, [r1, #20]
 800b68e:	600f      	str	r7, [r1, #0]
 800b690:	bf18      	it	ne
 800b692:	2300      	movne	r3, #0
 800b694:	eba6 0807 	sub.w	r8, r6, r7
 800b698:	608b      	str	r3, [r1, #8]
 800b69a:	f1b8 0f00 	cmp.w	r8, #0
 800b69e:	dded      	ble.n	800b67c <__sflush_r+0xbc>
 800b6a0:	69e1      	ldr	r1, [r4, #28]
 800b6a2:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 800b6a4:	4643      	mov	r3, r8
 800b6a6:	463a      	mov	r2, r7
 800b6a8:	4628      	mov	r0, r5
 800b6aa:	47b0      	blx	r6
 800b6ac:	2800      	cmp	r0, #0
 800b6ae:	dc08      	bgt.n	800b6c2 <__sflush_r+0x102>
 800b6b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6b8:	81a3      	strh	r3, [r4, #12]
 800b6ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b6be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6c2:	4407      	add	r7, r0
 800b6c4:	eba8 0800 	sub.w	r8, r8, r0
 800b6c8:	e7e7      	b.n	800b69a <__sflush_r+0xda>
 800b6ca:	bf00      	nop
 800b6cc:	dfbffffe 	.word	0xdfbffffe

0800b6d0 <_fflush_r>:
 800b6d0:	b538      	push	{r3, r4, r5, lr}
 800b6d2:	460c      	mov	r4, r1
 800b6d4:	4605      	mov	r5, r0
 800b6d6:	b118      	cbz	r0, 800b6e0 <_fflush_r+0x10>
 800b6d8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b6da:	b90b      	cbnz	r3, 800b6e0 <_fflush_r+0x10>
 800b6dc:	f7fe f8da 	bl	8009894 <__sinit>
 800b6e0:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 800b6e4:	b1b8      	cbz	r0, 800b716 <_fflush_r+0x46>
 800b6e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b6e8:	07db      	lsls	r3, r3, #31
 800b6ea:	d404      	bmi.n	800b6f6 <_fflush_r+0x26>
 800b6ec:	0581      	lsls	r1, r0, #22
 800b6ee:	d402      	bmi.n	800b6f6 <_fflush_r+0x26>
 800b6f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b6f2:	f7fe fb57 	bl	8009da4 <__retarget_lock_acquire_recursive>
 800b6f6:	4628      	mov	r0, r5
 800b6f8:	4621      	mov	r1, r4
 800b6fa:	f7ff ff61 	bl	800b5c0 <__sflush_r>
 800b6fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b700:	07da      	lsls	r2, r3, #31
 800b702:	4605      	mov	r5, r0
 800b704:	d405      	bmi.n	800b712 <_fflush_r+0x42>
 800b706:	89a3      	ldrh	r3, [r4, #12]
 800b708:	059b      	lsls	r3, r3, #22
 800b70a:	d402      	bmi.n	800b712 <_fflush_r+0x42>
 800b70c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b70e:	f7fe fb4a 	bl	8009da6 <__retarget_lock_release_recursive>
 800b712:	4628      	mov	r0, r5
 800b714:	bd38      	pop	{r3, r4, r5, pc}
 800b716:	4605      	mov	r5, r0
 800b718:	e7fb      	b.n	800b712 <_fflush_r+0x42>

0800b71a <__sread>:
 800b71a:	b510      	push	{r4, lr}
 800b71c:	460c      	mov	r4, r1
 800b71e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b722:	f000 f8e1 	bl	800b8e8 <_read_r>
 800b726:	2800      	cmp	r0, #0
 800b728:	bfab      	itete	ge
 800b72a:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 800b72c:	89a3      	ldrhlt	r3, [r4, #12]
 800b72e:	181b      	addge	r3, r3, r0
 800b730:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b734:	bfac      	ite	ge
 800b736:	6523      	strge	r3, [r4, #80]	@ 0x50
 800b738:	81a3      	strhlt	r3, [r4, #12]
 800b73a:	bd10      	pop	{r4, pc}

0800b73c <__swrite>:
 800b73c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b740:	461f      	mov	r7, r3
 800b742:	898b      	ldrh	r3, [r1, #12]
 800b744:	05db      	lsls	r3, r3, #23
 800b746:	4605      	mov	r5, r0
 800b748:	460c      	mov	r4, r1
 800b74a:	4616      	mov	r6, r2
 800b74c:	d505      	bpl.n	800b75a <__swrite+0x1e>
 800b74e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b752:	2302      	movs	r3, #2
 800b754:	2200      	movs	r2, #0
 800b756:	f000 f8b5 	bl	800b8c4 <_lseek_r>
 800b75a:	89a3      	ldrh	r3, [r4, #12]
 800b75c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b760:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b764:	81a3      	strh	r3, [r4, #12]
 800b766:	4632      	mov	r2, r6
 800b768:	463b      	mov	r3, r7
 800b76a:	4628      	mov	r0, r5
 800b76c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b770:	f000 b8cc 	b.w	800b90c <_write_r>

0800b774 <__sseek>:
 800b774:	b510      	push	{r4, lr}
 800b776:	460c      	mov	r4, r1
 800b778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b77c:	f000 f8a2 	bl	800b8c4 <_lseek_r>
 800b780:	1c43      	adds	r3, r0, #1
 800b782:	89a3      	ldrh	r3, [r4, #12]
 800b784:	bf15      	itete	ne
 800b786:	6520      	strne	r0, [r4, #80]	@ 0x50
 800b788:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b78c:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b790:	81a3      	strheq	r3, [r4, #12]
 800b792:	bf18      	it	ne
 800b794:	81a3      	strhne	r3, [r4, #12]
 800b796:	bd10      	pop	{r4, pc}

0800b798 <__sclose>:
 800b798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b79c:	f000 b860 	b.w	800b860 <_close_r>

0800b7a0 <__swbuf_r>:
 800b7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7a2:	460e      	mov	r6, r1
 800b7a4:	4614      	mov	r4, r2
 800b7a6:	4605      	mov	r5, r0
 800b7a8:	b118      	cbz	r0, 800b7b2 <__swbuf_r+0x12>
 800b7aa:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b7ac:	b90b      	cbnz	r3, 800b7b2 <__swbuf_r+0x12>
 800b7ae:	f7fe f871 	bl	8009894 <__sinit>
 800b7b2:	69a3      	ldr	r3, [r4, #24]
 800b7b4:	60a3      	str	r3, [r4, #8]
 800b7b6:	89a3      	ldrh	r3, [r4, #12]
 800b7b8:	0719      	lsls	r1, r3, #28
 800b7ba:	d501      	bpl.n	800b7c0 <__swbuf_r+0x20>
 800b7bc:	6923      	ldr	r3, [r4, #16]
 800b7be:	b943      	cbnz	r3, 800b7d2 <__swbuf_r+0x32>
 800b7c0:	4621      	mov	r1, r4
 800b7c2:	4628      	mov	r0, r5
 800b7c4:	f7fe f9e8 	bl	8009b98 <__swsetup_r>
 800b7c8:	b118      	cbz	r0, 800b7d2 <__swbuf_r+0x32>
 800b7ca:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b7ce:	4638      	mov	r0, r7
 800b7d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7d6:	b2f6      	uxtb	r6, r6
 800b7d8:	049a      	lsls	r2, r3, #18
 800b7da:	4637      	mov	r7, r6
 800b7dc:	d406      	bmi.n	800b7ec <__swbuf_r+0x4c>
 800b7de:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800b7e2:	81a3      	strh	r3, [r4, #12]
 800b7e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b7e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b7ea:	6663      	str	r3, [r4, #100]	@ 0x64
 800b7ec:	6823      	ldr	r3, [r4, #0]
 800b7ee:	6922      	ldr	r2, [r4, #16]
 800b7f0:	1a98      	subs	r0, r3, r2
 800b7f2:	6963      	ldr	r3, [r4, #20]
 800b7f4:	4283      	cmp	r3, r0
 800b7f6:	dc05      	bgt.n	800b804 <__swbuf_r+0x64>
 800b7f8:	4621      	mov	r1, r4
 800b7fa:	4628      	mov	r0, r5
 800b7fc:	f7ff ff68 	bl	800b6d0 <_fflush_r>
 800b800:	2800      	cmp	r0, #0
 800b802:	d1e2      	bne.n	800b7ca <__swbuf_r+0x2a>
 800b804:	68a3      	ldr	r3, [r4, #8]
 800b806:	3b01      	subs	r3, #1
 800b808:	60a3      	str	r3, [r4, #8]
 800b80a:	6823      	ldr	r3, [r4, #0]
 800b80c:	1c5a      	adds	r2, r3, #1
 800b80e:	6022      	str	r2, [r4, #0]
 800b810:	701e      	strb	r6, [r3, #0]
 800b812:	6962      	ldr	r2, [r4, #20]
 800b814:	1c43      	adds	r3, r0, #1
 800b816:	429a      	cmp	r2, r3
 800b818:	d004      	beq.n	800b824 <__swbuf_r+0x84>
 800b81a:	89a3      	ldrh	r3, [r4, #12]
 800b81c:	07db      	lsls	r3, r3, #31
 800b81e:	d5d6      	bpl.n	800b7ce <__swbuf_r+0x2e>
 800b820:	2e0a      	cmp	r6, #10
 800b822:	d1d4      	bne.n	800b7ce <__swbuf_r+0x2e>
 800b824:	4621      	mov	r1, r4
 800b826:	4628      	mov	r0, r5
 800b828:	f7ff ff52 	bl	800b6d0 <_fflush_r>
 800b82c:	2800      	cmp	r0, #0
 800b82e:	d0ce      	beq.n	800b7ce <__swbuf_r+0x2e>
 800b830:	e7cb      	b.n	800b7ca <__swbuf_r+0x2a>

0800b832 <strncpy>:
 800b832:	b510      	push	{r4, lr}
 800b834:	3901      	subs	r1, #1
 800b836:	4603      	mov	r3, r0
 800b838:	b132      	cbz	r2, 800b848 <strncpy+0x16>
 800b83a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b83e:	f803 4b01 	strb.w	r4, [r3], #1
 800b842:	3a01      	subs	r2, #1
 800b844:	2c00      	cmp	r4, #0
 800b846:	d1f7      	bne.n	800b838 <strncpy+0x6>
 800b848:	441a      	add	r2, r3
 800b84a:	2100      	movs	r1, #0
 800b84c:	4293      	cmp	r3, r2
 800b84e:	d100      	bne.n	800b852 <strncpy+0x20>
 800b850:	bd10      	pop	{r4, pc}
 800b852:	f803 1b01 	strb.w	r1, [r3], #1
 800b856:	e7f9      	b.n	800b84c <strncpy+0x1a>

0800b858 <_localeconv_r>:
 800b858:	4800      	ldr	r0, [pc, #0]	@ (800b85c <_localeconv_r+0x4>)
 800b85a:	4770      	bx	lr
 800b85c:	2000065c 	.word	0x2000065c

0800b860 <_close_r>:
 800b860:	b538      	push	{r3, r4, r5, lr}
 800b862:	4d06      	ldr	r5, [pc, #24]	@ (800b87c <_close_r+0x1c>)
 800b864:	2300      	movs	r3, #0
 800b866:	4604      	mov	r4, r0
 800b868:	4608      	mov	r0, r1
 800b86a:	602b      	str	r3, [r5, #0]
 800b86c:	f7fd fadc 	bl	8008e28 <_close>
 800b870:	1c43      	adds	r3, r0, #1
 800b872:	d102      	bne.n	800b87a <_close_r+0x1a>
 800b874:	682b      	ldr	r3, [r5, #0]
 800b876:	b103      	cbz	r3, 800b87a <_close_r+0x1a>
 800b878:	6023      	str	r3, [r4, #0]
 800b87a:	bd38      	pop	{r3, r4, r5, pc}
 800b87c:	200100c4 	.word	0x200100c4

0800b880 <_fstat_r>:
 800b880:	b538      	push	{r3, r4, r5, lr}
 800b882:	4d07      	ldr	r5, [pc, #28]	@ (800b8a0 <_fstat_r+0x20>)
 800b884:	2300      	movs	r3, #0
 800b886:	4604      	mov	r4, r0
 800b888:	4608      	mov	r0, r1
 800b88a:	4611      	mov	r1, r2
 800b88c:	602b      	str	r3, [r5, #0]
 800b88e:	f7fd facf 	bl	8008e30 <_fstat>
 800b892:	1c43      	adds	r3, r0, #1
 800b894:	d102      	bne.n	800b89c <_fstat_r+0x1c>
 800b896:	682b      	ldr	r3, [r5, #0]
 800b898:	b103      	cbz	r3, 800b89c <_fstat_r+0x1c>
 800b89a:	6023      	str	r3, [r4, #0]
 800b89c:	bd38      	pop	{r3, r4, r5, pc}
 800b89e:	bf00      	nop
 800b8a0:	200100c4 	.word	0x200100c4

0800b8a4 <_isatty_r>:
 800b8a4:	b538      	push	{r3, r4, r5, lr}
 800b8a6:	4d06      	ldr	r5, [pc, #24]	@ (800b8c0 <_isatty_r+0x1c>)
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	4604      	mov	r4, r0
 800b8ac:	4608      	mov	r0, r1
 800b8ae:	602b      	str	r3, [r5, #0]
 800b8b0:	f7fd fac2 	bl	8008e38 <_isatty>
 800b8b4:	1c43      	adds	r3, r0, #1
 800b8b6:	d102      	bne.n	800b8be <_isatty_r+0x1a>
 800b8b8:	682b      	ldr	r3, [r5, #0]
 800b8ba:	b103      	cbz	r3, 800b8be <_isatty_r+0x1a>
 800b8bc:	6023      	str	r3, [r4, #0]
 800b8be:	bd38      	pop	{r3, r4, r5, pc}
 800b8c0:	200100c4 	.word	0x200100c4

0800b8c4 <_lseek_r>:
 800b8c4:	b538      	push	{r3, r4, r5, lr}
 800b8c6:	4d07      	ldr	r5, [pc, #28]	@ (800b8e4 <_lseek_r+0x20>)
 800b8c8:	4604      	mov	r4, r0
 800b8ca:	4608      	mov	r0, r1
 800b8cc:	4611      	mov	r1, r2
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	602a      	str	r2, [r5, #0]
 800b8d2:	461a      	mov	r2, r3
 800b8d4:	f7fd fab4 	bl	8008e40 <_lseek>
 800b8d8:	1c43      	adds	r3, r0, #1
 800b8da:	d102      	bne.n	800b8e2 <_lseek_r+0x1e>
 800b8dc:	682b      	ldr	r3, [r5, #0]
 800b8de:	b103      	cbz	r3, 800b8e2 <_lseek_r+0x1e>
 800b8e0:	6023      	str	r3, [r4, #0]
 800b8e2:	bd38      	pop	{r3, r4, r5, pc}
 800b8e4:	200100c4 	.word	0x200100c4

0800b8e8 <_read_r>:
 800b8e8:	b538      	push	{r3, r4, r5, lr}
 800b8ea:	4d07      	ldr	r5, [pc, #28]	@ (800b908 <_read_r+0x20>)
 800b8ec:	4604      	mov	r4, r0
 800b8ee:	4608      	mov	r0, r1
 800b8f0:	4611      	mov	r1, r2
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	602a      	str	r2, [r5, #0]
 800b8f6:	461a      	mov	r2, r3
 800b8f8:	f7fd fa88 	bl	8008e0c <_read>
 800b8fc:	1c43      	adds	r3, r0, #1
 800b8fe:	d102      	bne.n	800b906 <_read_r+0x1e>
 800b900:	682b      	ldr	r3, [r5, #0]
 800b902:	b103      	cbz	r3, 800b906 <_read_r+0x1e>
 800b904:	6023      	str	r3, [r4, #0]
 800b906:	bd38      	pop	{r3, r4, r5, pc}
 800b908:	200100c4 	.word	0x200100c4

0800b90c <_write_r>:
 800b90c:	b538      	push	{r3, r4, r5, lr}
 800b90e:	4d07      	ldr	r5, [pc, #28]	@ (800b92c <_write_r+0x20>)
 800b910:	4604      	mov	r4, r0
 800b912:	4608      	mov	r0, r1
 800b914:	4611      	mov	r1, r2
 800b916:	2200      	movs	r2, #0
 800b918:	602a      	str	r2, [r5, #0]
 800b91a:	461a      	mov	r2, r3
 800b91c:	f7fd fa68 	bl	8008df0 <_write>
 800b920:	1c43      	adds	r3, r0, #1
 800b922:	d102      	bne.n	800b92a <_write_r+0x1e>
 800b924:	682b      	ldr	r3, [r5, #0]
 800b926:	b103      	cbz	r3, 800b92a <_write_r+0x1e>
 800b928:	6023      	str	r3, [r4, #0]
 800b92a:	bd38      	pop	{r3, r4, r5, pc}
 800b92c:	200100c4 	.word	0x200100c4

0800b930 <__errno>:
 800b930:	4b01      	ldr	r3, [pc, #4]	@ (800b938 <__errno+0x8>)
 800b932:	6818      	ldr	r0, [r3, #0]
 800b934:	4770      	bx	lr
 800b936:	bf00      	nop
 800b938:	20000440 	.word	0x20000440

0800b93c <__libc_fini_array>:
 800b93c:	b538      	push	{r3, r4, r5, lr}
 800b93e:	4d07      	ldr	r5, [pc, #28]	@ (800b95c <__libc_fini_array+0x20>)
 800b940:	4c07      	ldr	r4, [pc, #28]	@ (800b960 <__libc_fini_array+0x24>)
 800b942:	1b64      	subs	r4, r4, r5
 800b944:	10a4      	asrs	r4, r4, #2
 800b946:	b91c      	cbnz	r4, 800b950 <__libc_fini_array+0x14>
 800b948:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b94c:	f002 b850 	b.w	800d9f0 <_fini>
 800b950:	3c01      	subs	r4, #1
 800b952:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800b956:	4798      	blx	r3
 800b958:	e7f5      	b.n	800b946 <__libc_fini_array+0xa>
 800b95a:	bf00      	nop
 800b95c:	0808e9e4 	.word	0x0808e9e4
 800b960:	0808e9ec 	.word	0x0808e9ec

0800b964 <frexp>:
 800b964:	b570      	push	{r4, r5, r6, lr}
 800b966:	2100      	movs	r1, #0
 800b968:	ec55 4b10 	vmov	r4, r5, d0
 800b96c:	6001      	str	r1, [r0, #0]
 800b96e:	4915      	ldr	r1, [pc, #84]	@ (800b9c4 <frexp+0x60>)
 800b970:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800b974:	428a      	cmp	r2, r1
 800b976:	4606      	mov	r6, r0
 800b978:	462b      	mov	r3, r5
 800b97a:	d820      	bhi.n	800b9be <frexp+0x5a>
 800b97c:	4621      	mov	r1, r4
 800b97e:	4311      	orrs	r1, r2
 800b980:	d01d      	beq.n	800b9be <frexp+0x5a>
 800b982:	4911      	ldr	r1, [pc, #68]	@ (800b9c8 <frexp+0x64>)
 800b984:	4029      	ands	r1, r5
 800b986:	b961      	cbnz	r1, 800b9a2 <frexp+0x3e>
 800b988:	4b10      	ldr	r3, [pc, #64]	@ (800b9cc <frexp+0x68>)
 800b98a:	2200      	movs	r2, #0
 800b98c:	4620      	mov	r0, r4
 800b98e:	4629      	mov	r1, r5
 800b990:	f7f4 fe52 	bl	8000638 <__aeabi_dmul>
 800b994:	460b      	mov	r3, r1
 800b996:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800b99a:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 800b99e:	4604      	mov	r4, r0
 800b9a0:	6031      	str	r1, [r6, #0]
 800b9a2:	6831      	ldr	r1, [r6, #0]
 800b9a4:	1512      	asrs	r2, r2, #20
 800b9a6:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b9aa:	f2a2 32fe 	subw	r2, r2, #1022	@ 0x3fe
 800b9ae:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b9b2:	4411      	add	r1, r2
 800b9b4:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 800b9b8:	6031      	str	r1, [r6, #0]
 800b9ba:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 800b9be:	ec45 4b10 	vmov	d0, r4, r5
 800b9c2:	bd70      	pop	{r4, r5, r6, pc}
 800b9c4:	7fefffff 	.word	0x7fefffff
 800b9c8:	7ff00000 	.word	0x7ff00000
 800b9cc:	43500000 	.word	0x43500000

0800b9d0 <quorem>:
 800b9d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9d4:	6903      	ldr	r3, [r0, #16]
 800b9d6:	690c      	ldr	r4, [r1, #16]
 800b9d8:	42a3      	cmp	r3, r4
 800b9da:	4607      	mov	r7, r0
 800b9dc:	db7e      	blt.n	800badc <quorem+0x10c>
 800b9de:	3c01      	subs	r4, #1
 800b9e0:	f101 0814 	add.w	r8, r1, #20
 800b9e4:	00a3      	lsls	r3, r4, #2
 800b9e6:	f100 0514 	add.w	r5, r0, #20
 800b9ea:	9300      	str	r3, [sp, #0]
 800b9ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b9f0:	9301      	str	r3, [sp, #4]
 800b9f2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b9f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b9fa:	3301      	adds	r3, #1
 800b9fc:	429a      	cmp	r2, r3
 800b9fe:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ba02:	fbb2 f6f3 	udiv	r6, r2, r3
 800ba06:	d32e      	bcc.n	800ba66 <quorem+0x96>
 800ba08:	f04f 0a00 	mov.w	sl, #0
 800ba0c:	46c4      	mov	ip, r8
 800ba0e:	46ae      	mov	lr, r5
 800ba10:	46d3      	mov	fp, sl
 800ba12:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ba16:	b298      	uxth	r0, r3
 800ba18:	fb06 a000 	mla	r0, r6, r0, sl
 800ba1c:	0c02      	lsrs	r2, r0, #16
 800ba1e:	0c1b      	lsrs	r3, r3, #16
 800ba20:	fb06 2303 	mla	r3, r6, r3, r2
 800ba24:	f8de 2000 	ldr.w	r2, [lr]
 800ba28:	b280      	uxth	r0, r0
 800ba2a:	b292      	uxth	r2, r2
 800ba2c:	1a12      	subs	r2, r2, r0
 800ba2e:	445a      	add	r2, fp
 800ba30:	f8de 0000 	ldr.w	r0, [lr]
 800ba34:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ba38:	b29b      	uxth	r3, r3
 800ba3a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ba3e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ba42:	b292      	uxth	r2, r2
 800ba44:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ba48:	45e1      	cmp	r9, ip
 800ba4a:	f84e 2b04 	str.w	r2, [lr], #4
 800ba4e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ba52:	d2de      	bcs.n	800ba12 <quorem+0x42>
 800ba54:	9b00      	ldr	r3, [sp, #0]
 800ba56:	58eb      	ldr	r3, [r5, r3]
 800ba58:	b92b      	cbnz	r3, 800ba66 <quorem+0x96>
 800ba5a:	9b01      	ldr	r3, [sp, #4]
 800ba5c:	3b04      	subs	r3, #4
 800ba5e:	429d      	cmp	r5, r3
 800ba60:	461a      	mov	r2, r3
 800ba62:	d32f      	bcc.n	800bac4 <quorem+0xf4>
 800ba64:	613c      	str	r4, [r7, #16]
 800ba66:	4638      	mov	r0, r7
 800ba68:	f001 f890 	bl	800cb8c <__mcmp>
 800ba6c:	2800      	cmp	r0, #0
 800ba6e:	db25      	blt.n	800babc <quorem+0xec>
 800ba70:	4629      	mov	r1, r5
 800ba72:	2000      	movs	r0, #0
 800ba74:	f858 2b04 	ldr.w	r2, [r8], #4
 800ba78:	f8d1 c000 	ldr.w	ip, [r1]
 800ba7c:	fa1f fe82 	uxth.w	lr, r2
 800ba80:	fa1f f38c 	uxth.w	r3, ip
 800ba84:	eba3 030e 	sub.w	r3, r3, lr
 800ba88:	4403      	add	r3, r0
 800ba8a:	0c12      	lsrs	r2, r2, #16
 800ba8c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ba90:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ba94:	b29b      	uxth	r3, r3
 800ba96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba9a:	45c1      	cmp	r9, r8
 800ba9c:	f841 3b04 	str.w	r3, [r1], #4
 800baa0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800baa4:	d2e6      	bcs.n	800ba74 <quorem+0xa4>
 800baa6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800baaa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800baae:	b922      	cbnz	r2, 800baba <quorem+0xea>
 800bab0:	3b04      	subs	r3, #4
 800bab2:	429d      	cmp	r5, r3
 800bab4:	461a      	mov	r2, r3
 800bab6:	d30b      	bcc.n	800bad0 <quorem+0x100>
 800bab8:	613c      	str	r4, [r7, #16]
 800baba:	3601      	adds	r6, #1
 800babc:	4630      	mov	r0, r6
 800babe:	b003      	add	sp, #12
 800bac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bac4:	6812      	ldr	r2, [r2, #0]
 800bac6:	3b04      	subs	r3, #4
 800bac8:	2a00      	cmp	r2, #0
 800baca:	d1cb      	bne.n	800ba64 <quorem+0x94>
 800bacc:	3c01      	subs	r4, #1
 800bace:	e7c6      	b.n	800ba5e <quorem+0x8e>
 800bad0:	6812      	ldr	r2, [r2, #0]
 800bad2:	3b04      	subs	r3, #4
 800bad4:	2a00      	cmp	r2, #0
 800bad6:	d1ef      	bne.n	800bab8 <quorem+0xe8>
 800bad8:	3c01      	subs	r4, #1
 800bada:	e7ea      	b.n	800bab2 <quorem+0xe2>
 800badc:	2000      	movs	r0, #0
 800bade:	e7ee      	b.n	800babe <quorem+0xee>

0800bae0 <_dtoa_r>:
 800bae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bae4:	b099      	sub	sp, #100	@ 0x64
 800bae6:	ed8d 0b02 	vstr	d0, [sp, #8]
 800baea:	9109      	str	r1, [sp, #36]	@ 0x24
 800baec:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 800baee:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800baf0:	920e      	str	r2, [sp, #56]	@ 0x38
 800baf2:	ec55 4b10 	vmov	r4, r5, d0
 800baf6:	4683      	mov	fp, r0
 800baf8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bafa:	b149      	cbz	r1, 800bb10 <_dtoa_r+0x30>
 800bafc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bafe:	604a      	str	r2, [r1, #4]
 800bb00:	2301      	movs	r3, #1
 800bb02:	4093      	lsls	r3, r2
 800bb04:	608b      	str	r3, [r1, #8]
 800bb06:	f000 fe39 	bl	800c77c <_Bfree>
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	f8cb 3038 	str.w	r3, [fp, #56]	@ 0x38
 800bb10:	1e2b      	subs	r3, r5, #0
 800bb12:	bfb9      	ittee	lt
 800bb14:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bb18:	9303      	strlt	r3, [sp, #12]
 800bb1a:	2300      	movge	r3, #0
 800bb1c:	6033      	strge	r3, [r6, #0]
 800bb1e:	9f03      	ldr	r7, [sp, #12]
 800bb20:	4b97      	ldr	r3, [pc, #604]	@ (800bd80 <_dtoa_r+0x2a0>)
 800bb22:	bfbc      	itt	lt
 800bb24:	2201      	movlt	r2, #1
 800bb26:	6032      	strlt	r2, [r6, #0]
 800bb28:	43bb      	bics	r3, r7
 800bb2a:	d114      	bne.n	800bb56 <_dtoa_r+0x76>
 800bb2c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bb2e:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bb32:	6013      	str	r3, [r2, #0]
 800bb34:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bb38:	4323      	orrs	r3, r4
 800bb3a:	f000 854c 	beq.w	800c5d6 <_dtoa_r+0xaf6>
 800bb3e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bb40:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800bd98 <_dtoa_r+0x2b8>
 800bb44:	b11b      	cbz	r3, 800bb4e <_dtoa_r+0x6e>
 800bb46:	f10a 0303 	add.w	r3, sl, #3
 800bb4a:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bb4c:	6013      	str	r3, [r2, #0]
 800bb4e:	4650      	mov	r0, sl
 800bb50:	b019      	add	sp, #100	@ 0x64
 800bb52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb56:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	ec51 0b17 	vmov	r0, r1, d7
 800bb60:	2300      	movs	r3, #0
 800bb62:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800bb66:	f7f4 ffcf 	bl	8000b08 <__aeabi_dcmpeq>
 800bb6a:	4680      	mov	r8, r0
 800bb6c:	b150      	cbz	r0, 800bb84 <_dtoa_r+0xa4>
 800bb6e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bb70:	2301      	movs	r3, #1
 800bb72:	6013      	str	r3, [r2, #0]
 800bb74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bb76:	b113      	cbz	r3, 800bb7e <_dtoa_r+0x9e>
 800bb78:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bb7a:	4b82      	ldr	r3, [pc, #520]	@ (800bd84 <_dtoa_r+0x2a4>)
 800bb7c:	6013      	str	r3, [r2, #0]
 800bb7e:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 800bd9c <_dtoa_r+0x2bc>
 800bb82:	e7e4      	b.n	800bb4e <_dtoa_r+0x6e>
 800bb84:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bb88:	aa16      	add	r2, sp, #88	@ 0x58
 800bb8a:	a917      	add	r1, sp, #92	@ 0x5c
 800bb8c:	4658      	mov	r0, fp
 800bb8e:	f001 f8ad 	bl	800ccec <__d2b>
 800bb92:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bb96:	4681      	mov	r9, r0
 800bb98:	2e00      	cmp	r6, #0
 800bb9a:	d077      	beq.n	800bc8c <_dtoa_r+0x1ac>
 800bb9c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bb9e:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800bba2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bba6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bbaa:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bbae:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bbb2:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bbb6:	4619      	mov	r1, r3
 800bbb8:	2200      	movs	r2, #0
 800bbba:	4b73      	ldr	r3, [pc, #460]	@ (800bd88 <_dtoa_r+0x2a8>)
 800bbbc:	f7f4 fb84 	bl	80002c8 <__aeabi_dsub>
 800bbc0:	a369      	add	r3, pc, #420	@ (adr r3, 800bd68 <_dtoa_r+0x288>)
 800bbc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc6:	f7f4 fd37 	bl	8000638 <__aeabi_dmul>
 800bbca:	a369      	add	r3, pc, #420	@ (adr r3, 800bd70 <_dtoa_r+0x290>)
 800bbcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd0:	f7f4 fb7c 	bl	80002cc <__adddf3>
 800bbd4:	4604      	mov	r4, r0
 800bbd6:	4630      	mov	r0, r6
 800bbd8:	460d      	mov	r5, r1
 800bbda:	f7f4 fcc3 	bl	8000564 <__aeabi_i2d>
 800bbde:	a366      	add	r3, pc, #408	@ (adr r3, 800bd78 <_dtoa_r+0x298>)
 800bbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe4:	f7f4 fd28 	bl	8000638 <__aeabi_dmul>
 800bbe8:	4602      	mov	r2, r0
 800bbea:	460b      	mov	r3, r1
 800bbec:	4620      	mov	r0, r4
 800bbee:	4629      	mov	r1, r5
 800bbf0:	f7f4 fb6c 	bl	80002cc <__adddf3>
 800bbf4:	4604      	mov	r4, r0
 800bbf6:	460d      	mov	r5, r1
 800bbf8:	f7f4 ffce 	bl	8000b98 <__aeabi_d2iz>
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	4607      	mov	r7, r0
 800bc00:	2300      	movs	r3, #0
 800bc02:	4620      	mov	r0, r4
 800bc04:	4629      	mov	r1, r5
 800bc06:	f7f4 ff89 	bl	8000b1c <__aeabi_dcmplt>
 800bc0a:	b140      	cbz	r0, 800bc1e <_dtoa_r+0x13e>
 800bc0c:	4638      	mov	r0, r7
 800bc0e:	f7f4 fca9 	bl	8000564 <__aeabi_i2d>
 800bc12:	4622      	mov	r2, r4
 800bc14:	462b      	mov	r3, r5
 800bc16:	f7f4 ff77 	bl	8000b08 <__aeabi_dcmpeq>
 800bc1a:	b900      	cbnz	r0, 800bc1e <_dtoa_r+0x13e>
 800bc1c:	3f01      	subs	r7, #1
 800bc1e:	2f16      	cmp	r7, #22
 800bc20:	d851      	bhi.n	800bcc6 <_dtoa_r+0x1e6>
 800bc22:	4b5a      	ldr	r3, [pc, #360]	@ (800bd8c <_dtoa_r+0x2ac>)
 800bc24:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bc28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bc30:	f7f4 ff74 	bl	8000b1c <__aeabi_dcmplt>
 800bc34:	2800      	cmp	r0, #0
 800bc36:	d048      	beq.n	800bcca <_dtoa_r+0x1ea>
 800bc38:	3f01      	subs	r7, #1
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	9312      	str	r3, [sp, #72]	@ 0x48
 800bc3e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bc40:	1b9b      	subs	r3, r3, r6
 800bc42:	1e5a      	subs	r2, r3, #1
 800bc44:	bf44      	itt	mi
 800bc46:	f1c3 0801 	rsbmi	r8, r3, #1
 800bc4a:	2300      	movmi	r3, #0
 800bc4c:	9208      	str	r2, [sp, #32]
 800bc4e:	bf54      	ite	pl
 800bc50:	f04f 0800 	movpl.w	r8, #0
 800bc54:	9308      	strmi	r3, [sp, #32]
 800bc56:	2f00      	cmp	r7, #0
 800bc58:	db39      	blt.n	800bcce <_dtoa_r+0x1ee>
 800bc5a:	9b08      	ldr	r3, [sp, #32]
 800bc5c:	970f      	str	r7, [sp, #60]	@ 0x3c
 800bc5e:	443b      	add	r3, r7
 800bc60:	9308      	str	r3, [sp, #32]
 800bc62:	2300      	movs	r3, #0
 800bc64:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc68:	2b09      	cmp	r3, #9
 800bc6a:	d865      	bhi.n	800bd38 <_dtoa_r+0x258>
 800bc6c:	2b05      	cmp	r3, #5
 800bc6e:	bfc4      	itt	gt
 800bc70:	3b04      	subgt	r3, #4
 800bc72:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800bc74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc76:	f1a3 0302 	sub.w	r3, r3, #2
 800bc7a:	bfcc      	ite	gt
 800bc7c:	2400      	movgt	r4, #0
 800bc7e:	2401      	movle	r4, #1
 800bc80:	2b03      	cmp	r3, #3
 800bc82:	d864      	bhi.n	800bd4e <_dtoa_r+0x26e>
 800bc84:	e8df f003 	tbb	[pc, r3]
 800bc88:	5635372a 	.word	0x5635372a
 800bc8c:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800bc90:	441e      	add	r6, r3
 800bc92:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bc96:	2b20      	cmp	r3, #32
 800bc98:	bfc1      	itttt	gt
 800bc9a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bc9e:	409f      	lslgt	r7, r3
 800bca0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bca4:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bca8:	bfd6      	itet	le
 800bcaa:	f1c3 0320 	rsble	r3, r3, #32
 800bcae:	ea47 0003 	orrgt.w	r0, r7, r3
 800bcb2:	fa04 f003 	lslle.w	r0, r4, r3
 800bcb6:	f7f4 fc45 	bl	8000544 <__aeabi_ui2d>
 800bcba:	2201      	movs	r2, #1
 800bcbc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bcc0:	3e01      	subs	r6, #1
 800bcc2:	9214      	str	r2, [sp, #80]	@ 0x50
 800bcc4:	e777      	b.n	800bbb6 <_dtoa_r+0xd6>
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	e7b8      	b.n	800bc3c <_dtoa_r+0x15c>
 800bcca:	9012      	str	r0, [sp, #72]	@ 0x48
 800bccc:	e7b7      	b.n	800bc3e <_dtoa_r+0x15e>
 800bcce:	427b      	negs	r3, r7
 800bcd0:	930a      	str	r3, [sp, #40]	@ 0x28
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	eba8 0807 	sub.w	r8, r8, r7
 800bcd8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bcda:	e7c4      	b.n	800bc66 <_dtoa_r+0x186>
 800bcdc:	2300      	movs	r3, #0
 800bcde:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bce0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	dc36      	bgt.n	800bd54 <_dtoa_r+0x274>
 800bce6:	2301      	movs	r3, #1
 800bce8:	9300      	str	r3, [sp, #0]
 800bcea:	9307      	str	r3, [sp, #28]
 800bcec:	461a      	mov	r2, r3
 800bcee:	920e      	str	r2, [sp, #56]	@ 0x38
 800bcf0:	e00b      	b.n	800bd0a <_dtoa_r+0x22a>
 800bcf2:	2301      	movs	r3, #1
 800bcf4:	e7f3      	b.n	800bcde <_dtoa_r+0x1fe>
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bcfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bcfc:	18fb      	adds	r3, r7, r3
 800bcfe:	9300      	str	r3, [sp, #0]
 800bd00:	3301      	adds	r3, #1
 800bd02:	2b01      	cmp	r3, #1
 800bd04:	9307      	str	r3, [sp, #28]
 800bd06:	bfb8      	it	lt
 800bd08:	2301      	movlt	r3, #1
 800bd0a:	2100      	movs	r1, #0
 800bd0c:	2204      	movs	r2, #4
 800bd0e:	f102 0014 	add.w	r0, r2, #20
 800bd12:	4298      	cmp	r0, r3
 800bd14:	d922      	bls.n	800bd5c <_dtoa_r+0x27c>
 800bd16:	f8cb 103c 	str.w	r1, [fp, #60]	@ 0x3c
 800bd1a:	4658      	mov	r0, fp
 800bd1c:	f000 fd09 	bl	800c732 <_Balloc>
 800bd20:	4682      	mov	sl, r0
 800bd22:	2800      	cmp	r0, #0
 800bd24:	d13c      	bne.n	800bda0 <_dtoa_r+0x2c0>
 800bd26:	4b1a      	ldr	r3, [pc, #104]	@ (800bd90 <_dtoa_r+0x2b0>)
 800bd28:	4602      	mov	r2, r0
 800bd2a:	f240 11af 	movw	r1, #431	@ 0x1af
 800bd2e:	4819      	ldr	r0, [pc, #100]	@ (800bd94 <_dtoa_r+0x2b4>)
 800bd30:	f001 f83a 	bl	800cda8 <__assert_func>
 800bd34:	2301      	movs	r3, #1
 800bd36:	e7df      	b.n	800bcf8 <_dtoa_r+0x218>
 800bd38:	2401      	movs	r4, #1
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd3e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bd40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bd44:	9300      	str	r3, [sp, #0]
 800bd46:	9307      	str	r3, [sp, #28]
 800bd48:	2200      	movs	r2, #0
 800bd4a:	2312      	movs	r3, #18
 800bd4c:	e7cf      	b.n	800bcee <_dtoa_r+0x20e>
 800bd4e:	2301      	movs	r3, #1
 800bd50:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bd52:	e7f5      	b.n	800bd40 <_dtoa_r+0x260>
 800bd54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd56:	9300      	str	r3, [sp, #0]
 800bd58:	9307      	str	r3, [sp, #28]
 800bd5a:	e7d6      	b.n	800bd0a <_dtoa_r+0x22a>
 800bd5c:	3101      	adds	r1, #1
 800bd5e:	0052      	lsls	r2, r2, #1
 800bd60:	e7d5      	b.n	800bd0e <_dtoa_r+0x22e>
 800bd62:	bf00      	nop
 800bd64:	f3af 8000 	nop.w
 800bd68:	636f4361 	.word	0x636f4361
 800bd6c:	3fd287a7 	.word	0x3fd287a7
 800bd70:	8b60c8b3 	.word	0x8b60c8b3
 800bd74:	3fc68a28 	.word	0x3fc68a28
 800bd78:	509f79fb 	.word	0x509f79fb
 800bd7c:	3fd34413 	.word	0x3fd34413
 800bd80:	7ff00000 	.word	0x7ff00000
 800bd84:	0808e66f 	.word	0x0808e66f
 800bd88:	3ff80000 	.word	0x3ff80000
 800bd8c:	0808e798 	.word	0x0808e798
 800bd90:	0808e69d 	.word	0x0808e69d
 800bd94:	0808e6ae 	.word	0x0808e6ae
 800bd98:	0808e699 	.word	0x0808e699
 800bd9c:	0808e66e 	.word	0x0808e66e
 800bda0:	9b07      	ldr	r3, [sp, #28]
 800bda2:	f8cb 0038 	str.w	r0, [fp, #56]	@ 0x38
 800bda6:	2b0e      	cmp	r3, #14
 800bda8:	f200 80a4 	bhi.w	800bef4 <_dtoa_r+0x414>
 800bdac:	2c00      	cmp	r4, #0
 800bdae:	f000 80a1 	beq.w	800bef4 <_dtoa_r+0x414>
 800bdb2:	2f00      	cmp	r7, #0
 800bdb4:	dd33      	ble.n	800be1e <_dtoa_r+0x33e>
 800bdb6:	4bae      	ldr	r3, [pc, #696]	@ (800c070 <_dtoa_r+0x590>)
 800bdb8:	f007 020f 	and.w	r2, r7, #15
 800bdbc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bdc0:	ed93 7b00 	vldr	d7, [r3]
 800bdc4:	05f8      	lsls	r0, r7, #23
 800bdc6:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bdca:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bdce:	d516      	bpl.n	800bdfe <_dtoa_r+0x31e>
 800bdd0:	4ba8      	ldr	r3, [pc, #672]	@ (800c074 <_dtoa_r+0x594>)
 800bdd2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bdd6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bdda:	f7f4 fd57 	bl	800088c <__aeabi_ddiv>
 800bdde:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bde2:	f004 040f 	and.w	r4, r4, #15
 800bde6:	2603      	movs	r6, #3
 800bde8:	4da2      	ldr	r5, [pc, #648]	@ (800c074 <_dtoa_r+0x594>)
 800bdea:	b954      	cbnz	r4, 800be02 <_dtoa_r+0x322>
 800bdec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bdf0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdf4:	f7f4 fd4a 	bl	800088c <__aeabi_ddiv>
 800bdf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bdfc:	e028      	b.n	800be50 <_dtoa_r+0x370>
 800bdfe:	2602      	movs	r6, #2
 800be00:	e7f2      	b.n	800bde8 <_dtoa_r+0x308>
 800be02:	07e1      	lsls	r1, r4, #31
 800be04:	d508      	bpl.n	800be18 <_dtoa_r+0x338>
 800be06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be0a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800be0e:	f7f4 fc13 	bl	8000638 <__aeabi_dmul>
 800be12:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800be16:	3601      	adds	r6, #1
 800be18:	1064      	asrs	r4, r4, #1
 800be1a:	3508      	adds	r5, #8
 800be1c:	e7e5      	b.n	800bdea <_dtoa_r+0x30a>
 800be1e:	f000 80d2 	beq.w	800bfc6 <_dtoa_r+0x4e6>
 800be22:	427c      	negs	r4, r7
 800be24:	4b92      	ldr	r3, [pc, #584]	@ (800c070 <_dtoa_r+0x590>)
 800be26:	4d93      	ldr	r5, [pc, #588]	@ (800c074 <_dtoa_r+0x594>)
 800be28:	f004 020f 	and.w	r2, r4, #15
 800be2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be34:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800be38:	f7f4 fbfe 	bl	8000638 <__aeabi_dmul>
 800be3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be40:	1124      	asrs	r4, r4, #4
 800be42:	2300      	movs	r3, #0
 800be44:	2602      	movs	r6, #2
 800be46:	2c00      	cmp	r4, #0
 800be48:	f040 80b2 	bne.w	800bfb0 <_dtoa_r+0x4d0>
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d1d3      	bne.n	800bdf8 <_dtoa_r+0x318>
 800be50:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800be52:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800be56:	2b00      	cmp	r3, #0
 800be58:	f000 80b7 	beq.w	800bfca <_dtoa_r+0x4ea>
 800be5c:	4b86      	ldr	r3, [pc, #536]	@ (800c078 <_dtoa_r+0x598>)
 800be5e:	2200      	movs	r2, #0
 800be60:	4620      	mov	r0, r4
 800be62:	4629      	mov	r1, r5
 800be64:	f7f4 fe5a 	bl	8000b1c <__aeabi_dcmplt>
 800be68:	2800      	cmp	r0, #0
 800be6a:	f000 80ae 	beq.w	800bfca <_dtoa_r+0x4ea>
 800be6e:	9b07      	ldr	r3, [sp, #28]
 800be70:	2b00      	cmp	r3, #0
 800be72:	f000 80aa 	beq.w	800bfca <_dtoa_r+0x4ea>
 800be76:	9b00      	ldr	r3, [sp, #0]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	dd37      	ble.n	800beec <_dtoa_r+0x40c>
 800be7c:	1e7b      	subs	r3, r7, #1
 800be7e:	9304      	str	r3, [sp, #16]
 800be80:	4620      	mov	r0, r4
 800be82:	4b7e      	ldr	r3, [pc, #504]	@ (800c07c <_dtoa_r+0x59c>)
 800be84:	2200      	movs	r2, #0
 800be86:	4629      	mov	r1, r5
 800be88:	f7f4 fbd6 	bl	8000638 <__aeabi_dmul>
 800be8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be90:	9c00      	ldr	r4, [sp, #0]
 800be92:	3601      	adds	r6, #1
 800be94:	4630      	mov	r0, r6
 800be96:	f7f4 fb65 	bl	8000564 <__aeabi_i2d>
 800be9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800be9e:	f7f4 fbcb 	bl	8000638 <__aeabi_dmul>
 800bea2:	4b77      	ldr	r3, [pc, #476]	@ (800c080 <_dtoa_r+0x5a0>)
 800bea4:	2200      	movs	r2, #0
 800bea6:	f7f4 fa11 	bl	80002cc <__adddf3>
 800beaa:	4605      	mov	r5, r0
 800beac:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800beb0:	2c00      	cmp	r4, #0
 800beb2:	f040 808d 	bne.w	800bfd0 <_dtoa_r+0x4f0>
 800beb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800beba:	4b72      	ldr	r3, [pc, #456]	@ (800c084 <_dtoa_r+0x5a4>)
 800bebc:	2200      	movs	r2, #0
 800bebe:	f7f4 fa03 	bl	80002c8 <__aeabi_dsub>
 800bec2:	4602      	mov	r2, r0
 800bec4:	460b      	mov	r3, r1
 800bec6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800beca:	462a      	mov	r2, r5
 800becc:	4633      	mov	r3, r6
 800bece:	f7f4 fe43 	bl	8000b58 <__aeabi_dcmpgt>
 800bed2:	2800      	cmp	r0, #0
 800bed4:	f040 828c 	bne.w	800c3f0 <_dtoa_r+0x910>
 800bed8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bedc:	462a      	mov	r2, r5
 800bede:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bee2:	f7f4 fe1b 	bl	8000b1c <__aeabi_dcmplt>
 800bee6:	2800      	cmp	r0, #0
 800bee8:	f040 8129 	bne.w	800c13e <_dtoa_r+0x65e>
 800beec:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800bef0:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bef4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	f2c0 815b 	blt.w	800c1b2 <_dtoa_r+0x6d2>
 800befc:	2f0e      	cmp	r7, #14
 800befe:	f300 8158 	bgt.w	800c1b2 <_dtoa_r+0x6d2>
 800bf02:	4b5b      	ldr	r3, [pc, #364]	@ (800c070 <_dtoa_r+0x590>)
 800bf04:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bf08:	ed93 7b00 	vldr	d7, [r3]
 800bf0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	ed8d 7b00 	vstr	d7, [sp]
 800bf14:	da03      	bge.n	800bf1e <_dtoa_r+0x43e>
 800bf16:	9b07      	ldr	r3, [sp, #28]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	f340 8102 	ble.w	800c122 <_dtoa_r+0x642>
 800bf1e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bf22:	4656      	mov	r6, sl
 800bf24:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf28:	4620      	mov	r0, r4
 800bf2a:	4629      	mov	r1, r5
 800bf2c:	f7f4 fcae 	bl	800088c <__aeabi_ddiv>
 800bf30:	f7f4 fe32 	bl	8000b98 <__aeabi_d2iz>
 800bf34:	4680      	mov	r8, r0
 800bf36:	f7f4 fb15 	bl	8000564 <__aeabi_i2d>
 800bf3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf3e:	f7f4 fb7b 	bl	8000638 <__aeabi_dmul>
 800bf42:	4602      	mov	r2, r0
 800bf44:	460b      	mov	r3, r1
 800bf46:	4620      	mov	r0, r4
 800bf48:	4629      	mov	r1, r5
 800bf4a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bf4e:	f7f4 f9bb 	bl	80002c8 <__aeabi_dsub>
 800bf52:	f806 4b01 	strb.w	r4, [r6], #1
 800bf56:	9d07      	ldr	r5, [sp, #28]
 800bf58:	eba6 040a 	sub.w	r4, r6, sl
 800bf5c:	42a5      	cmp	r5, r4
 800bf5e:	4602      	mov	r2, r0
 800bf60:	460b      	mov	r3, r1
 800bf62:	f040 8118 	bne.w	800c196 <_dtoa_r+0x6b6>
 800bf66:	f7f4 f9b1 	bl	80002cc <__adddf3>
 800bf6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf6e:	4604      	mov	r4, r0
 800bf70:	460d      	mov	r5, r1
 800bf72:	f7f4 fdf1 	bl	8000b58 <__aeabi_dcmpgt>
 800bf76:	2800      	cmp	r0, #0
 800bf78:	f040 80fa 	bne.w	800c170 <_dtoa_r+0x690>
 800bf7c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf80:	4620      	mov	r0, r4
 800bf82:	4629      	mov	r1, r5
 800bf84:	f7f4 fdc0 	bl	8000b08 <__aeabi_dcmpeq>
 800bf88:	b118      	cbz	r0, 800bf92 <_dtoa_r+0x4b2>
 800bf8a:	f018 0f01 	tst.w	r8, #1
 800bf8e:	f040 80ef 	bne.w	800c170 <_dtoa_r+0x690>
 800bf92:	4649      	mov	r1, r9
 800bf94:	4658      	mov	r0, fp
 800bf96:	f000 fbf1 	bl	800c77c <_Bfree>
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	7033      	strb	r3, [r6, #0]
 800bf9e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bfa0:	3701      	adds	r7, #1
 800bfa2:	601f      	str	r7, [r3, #0]
 800bfa4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	f43f add1 	beq.w	800bb4e <_dtoa_r+0x6e>
 800bfac:	601e      	str	r6, [r3, #0]
 800bfae:	e5ce      	b.n	800bb4e <_dtoa_r+0x6e>
 800bfb0:	07e2      	lsls	r2, r4, #31
 800bfb2:	d505      	bpl.n	800bfc0 <_dtoa_r+0x4e0>
 800bfb4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bfb8:	f7f4 fb3e 	bl	8000638 <__aeabi_dmul>
 800bfbc:	3601      	adds	r6, #1
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	1064      	asrs	r4, r4, #1
 800bfc2:	3508      	adds	r5, #8
 800bfc4:	e73f      	b.n	800be46 <_dtoa_r+0x366>
 800bfc6:	2602      	movs	r6, #2
 800bfc8:	e742      	b.n	800be50 <_dtoa_r+0x370>
 800bfca:	9c07      	ldr	r4, [sp, #28]
 800bfcc:	9704      	str	r7, [sp, #16]
 800bfce:	e761      	b.n	800be94 <_dtoa_r+0x3b4>
 800bfd0:	4b27      	ldr	r3, [pc, #156]	@ (800c070 <_dtoa_r+0x590>)
 800bfd2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bfd4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bfd8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bfdc:	4454      	add	r4, sl
 800bfde:	2900      	cmp	r1, #0
 800bfe0:	d054      	beq.n	800c08c <_dtoa_r+0x5ac>
 800bfe2:	4929      	ldr	r1, [pc, #164]	@ (800c088 <_dtoa_r+0x5a8>)
 800bfe4:	2000      	movs	r0, #0
 800bfe6:	f7f4 fc51 	bl	800088c <__aeabi_ddiv>
 800bfea:	4633      	mov	r3, r6
 800bfec:	462a      	mov	r2, r5
 800bfee:	f7f4 f96b 	bl	80002c8 <__aeabi_dsub>
 800bff2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bff6:	4656      	mov	r6, sl
 800bff8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bffc:	f7f4 fdcc 	bl	8000b98 <__aeabi_d2iz>
 800c000:	4605      	mov	r5, r0
 800c002:	f7f4 faaf 	bl	8000564 <__aeabi_i2d>
 800c006:	4602      	mov	r2, r0
 800c008:	460b      	mov	r3, r1
 800c00a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c00e:	f7f4 f95b 	bl	80002c8 <__aeabi_dsub>
 800c012:	3530      	adds	r5, #48	@ 0x30
 800c014:	4602      	mov	r2, r0
 800c016:	460b      	mov	r3, r1
 800c018:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c01c:	f806 5b01 	strb.w	r5, [r6], #1
 800c020:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c024:	f7f4 fd7a 	bl	8000b1c <__aeabi_dcmplt>
 800c028:	2800      	cmp	r0, #0
 800c02a:	d172      	bne.n	800c112 <_dtoa_r+0x632>
 800c02c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c030:	4911      	ldr	r1, [pc, #68]	@ (800c078 <_dtoa_r+0x598>)
 800c032:	2000      	movs	r0, #0
 800c034:	f7f4 f948 	bl	80002c8 <__aeabi_dsub>
 800c038:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c03c:	f7f4 fd6e 	bl	8000b1c <__aeabi_dcmplt>
 800c040:	2800      	cmp	r0, #0
 800c042:	f040 8096 	bne.w	800c172 <_dtoa_r+0x692>
 800c046:	42a6      	cmp	r6, r4
 800c048:	f43f af50 	beq.w	800beec <_dtoa_r+0x40c>
 800c04c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c050:	4b0a      	ldr	r3, [pc, #40]	@ (800c07c <_dtoa_r+0x59c>)
 800c052:	2200      	movs	r2, #0
 800c054:	f7f4 faf0 	bl	8000638 <__aeabi_dmul>
 800c058:	4b08      	ldr	r3, [pc, #32]	@ (800c07c <_dtoa_r+0x59c>)
 800c05a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c05e:	2200      	movs	r2, #0
 800c060:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c064:	f7f4 fae8 	bl	8000638 <__aeabi_dmul>
 800c068:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c06c:	e7c4      	b.n	800bff8 <_dtoa_r+0x518>
 800c06e:	bf00      	nop
 800c070:	0808e798 	.word	0x0808e798
 800c074:	0808e770 	.word	0x0808e770
 800c078:	3ff00000 	.word	0x3ff00000
 800c07c:	40240000 	.word	0x40240000
 800c080:	401c0000 	.word	0x401c0000
 800c084:	40140000 	.word	0x40140000
 800c088:	3fe00000 	.word	0x3fe00000
 800c08c:	4631      	mov	r1, r6
 800c08e:	4628      	mov	r0, r5
 800c090:	f7f4 fad2 	bl	8000638 <__aeabi_dmul>
 800c094:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c098:	9415      	str	r4, [sp, #84]	@ 0x54
 800c09a:	4656      	mov	r6, sl
 800c09c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0a0:	f7f4 fd7a 	bl	8000b98 <__aeabi_d2iz>
 800c0a4:	4605      	mov	r5, r0
 800c0a6:	f7f4 fa5d 	bl	8000564 <__aeabi_i2d>
 800c0aa:	4602      	mov	r2, r0
 800c0ac:	460b      	mov	r3, r1
 800c0ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0b2:	f7f4 f909 	bl	80002c8 <__aeabi_dsub>
 800c0b6:	3530      	adds	r5, #48	@ 0x30
 800c0b8:	f806 5b01 	strb.w	r5, [r6], #1
 800c0bc:	4602      	mov	r2, r0
 800c0be:	460b      	mov	r3, r1
 800c0c0:	42a6      	cmp	r6, r4
 800c0c2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c0c6:	f04f 0200 	mov.w	r2, #0
 800c0ca:	d124      	bne.n	800c116 <_dtoa_r+0x636>
 800c0cc:	4bac      	ldr	r3, [pc, #688]	@ (800c380 <_dtoa_r+0x8a0>)
 800c0ce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c0d2:	f7f4 f8fb 	bl	80002cc <__adddf3>
 800c0d6:	4602      	mov	r2, r0
 800c0d8:	460b      	mov	r3, r1
 800c0da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0de:	f7f4 fd3b 	bl	8000b58 <__aeabi_dcmpgt>
 800c0e2:	2800      	cmp	r0, #0
 800c0e4:	d145      	bne.n	800c172 <_dtoa_r+0x692>
 800c0e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c0ea:	49a5      	ldr	r1, [pc, #660]	@ (800c380 <_dtoa_r+0x8a0>)
 800c0ec:	2000      	movs	r0, #0
 800c0ee:	f7f4 f8eb 	bl	80002c8 <__aeabi_dsub>
 800c0f2:	4602      	mov	r2, r0
 800c0f4:	460b      	mov	r3, r1
 800c0f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0fa:	f7f4 fd0f 	bl	8000b1c <__aeabi_dcmplt>
 800c0fe:	2800      	cmp	r0, #0
 800c100:	f43f aef4 	beq.w	800beec <_dtoa_r+0x40c>
 800c104:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c106:	1e73      	subs	r3, r6, #1
 800c108:	9315      	str	r3, [sp, #84]	@ 0x54
 800c10a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c10e:	2b30      	cmp	r3, #48	@ 0x30
 800c110:	d0f8      	beq.n	800c104 <_dtoa_r+0x624>
 800c112:	9f04      	ldr	r7, [sp, #16]
 800c114:	e73d      	b.n	800bf92 <_dtoa_r+0x4b2>
 800c116:	4b9b      	ldr	r3, [pc, #620]	@ (800c384 <_dtoa_r+0x8a4>)
 800c118:	f7f4 fa8e 	bl	8000638 <__aeabi_dmul>
 800c11c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c120:	e7bc      	b.n	800c09c <_dtoa_r+0x5bc>
 800c122:	d10c      	bne.n	800c13e <_dtoa_r+0x65e>
 800c124:	4b98      	ldr	r3, [pc, #608]	@ (800c388 <_dtoa_r+0x8a8>)
 800c126:	2200      	movs	r2, #0
 800c128:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c12c:	f7f4 fa84 	bl	8000638 <__aeabi_dmul>
 800c130:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c134:	f7f4 fd06 	bl	8000b44 <__aeabi_dcmpge>
 800c138:	2800      	cmp	r0, #0
 800c13a:	f000 8157 	beq.w	800c3ec <_dtoa_r+0x90c>
 800c13e:	2400      	movs	r4, #0
 800c140:	4625      	mov	r5, r4
 800c142:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c144:	43db      	mvns	r3, r3
 800c146:	9304      	str	r3, [sp, #16]
 800c148:	4656      	mov	r6, sl
 800c14a:	2700      	movs	r7, #0
 800c14c:	4621      	mov	r1, r4
 800c14e:	4658      	mov	r0, fp
 800c150:	f000 fb14 	bl	800c77c <_Bfree>
 800c154:	2d00      	cmp	r5, #0
 800c156:	d0dc      	beq.n	800c112 <_dtoa_r+0x632>
 800c158:	b12f      	cbz	r7, 800c166 <_dtoa_r+0x686>
 800c15a:	42af      	cmp	r7, r5
 800c15c:	d003      	beq.n	800c166 <_dtoa_r+0x686>
 800c15e:	4639      	mov	r1, r7
 800c160:	4658      	mov	r0, fp
 800c162:	f000 fb0b 	bl	800c77c <_Bfree>
 800c166:	4629      	mov	r1, r5
 800c168:	4658      	mov	r0, fp
 800c16a:	f000 fb07 	bl	800c77c <_Bfree>
 800c16e:	e7d0      	b.n	800c112 <_dtoa_r+0x632>
 800c170:	9704      	str	r7, [sp, #16]
 800c172:	4633      	mov	r3, r6
 800c174:	461e      	mov	r6, r3
 800c176:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c17a:	2a39      	cmp	r2, #57	@ 0x39
 800c17c:	d107      	bne.n	800c18e <_dtoa_r+0x6ae>
 800c17e:	459a      	cmp	sl, r3
 800c180:	d1f8      	bne.n	800c174 <_dtoa_r+0x694>
 800c182:	9a04      	ldr	r2, [sp, #16]
 800c184:	3201      	adds	r2, #1
 800c186:	9204      	str	r2, [sp, #16]
 800c188:	2230      	movs	r2, #48	@ 0x30
 800c18a:	f88a 2000 	strb.w	r2, [sl]
 800c18e:	781a      	ldrb	r2, [r3, #0]
 800c190:	3201      	adds	r2, #1
 800c192:	701a      	strb	r2, [r3, #0]
 800c194:	e7bd      	b.n	800c112 <_dtoa_r+0x632>
 800c196:	4b7b      	ldr	r3, [pc, #492]	@ (800c384 <_dtoa_r+0x8a4>)
 800c198:	2200      	movs	r2, #0
 800c19a:	f7f4 fa4d 	bl	8000638 <__aeabi_dmul>
 800c19e:	2200      	movs	r2, #0
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	4604      	mov	r4, r0
 800c1a4:	460d      	mov	r5, r1
 800c1a6:	f7f4 fcaf 	bl	8000b08 <__aeabi_dcmpeq>
 800c1aa:	2800      	cmp	r0, #0
 800c1ac:	f43f aeba 	beq.w	800bf24 <_dtoa_r+0x444>
 800c1b0:	e6ef      	b.n	800bf92 <_dtoa_r+0x4b2>
 800c1b2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c1b4:	2a00      	cmp	r2, #0
 800c1b6:	f000 80db 	beq.w	800c370 <_dtoa_r+0x890>
 800c1ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c1bc:	2a01      	cmp	r2, #1
 800c1be:	f300 80bf 	bgt.w	800c340 <_dtoa_r+0x860>
 800c1c2:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c1c4:	2a00      	cmp	r2, #0
 800c1c6:	f000 80b7 	beq.w	800c338 <_dtoa_r+0x858>
 800c1ca:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c1ce:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c1d0:	4646      	mov	r6, r8
 800c1d2:	9a08      	ldr	r2, [sp, #32]
 800c1d4:	2101      	movs	r1, #1
 800c1d6:	441a      	add	r2, r3
 800c1d8:	4658      	mov	r0, fp
 800c1da:	4498      	add	r8, r3
 800c1dc:	9208      	str	r2, [sp, #32]
 800c1de:	f000 fb69 	bl	800c8b4 <__i2b>
 800c1e2:	4605      	mov	r5, r0
 800c1e4:	b15e      	cbz	r6, 800c1fe <_dtoa_r+0x71e>
 800c1e6:	9b08      	ldr	r3, [sp, #32]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	dd08      	ble.n	800c1fe <_dtoa_r+0x71e>
 800c1ec:	42b3      	cmp	r3, r6
 800c1ee:	9a08      	ldr	r2, [sp, #32]
 800c1f0:	bfa8      	it	ge
 800c1f2:	4633      	movge	r3, r6
 800c1f4:	eba8 0803 	sub.w	r8, r8, r3
 800c1f8:	1af6      	subs	r6, r6, r3
 800c1fa:	1ad3      	subs	r3, r2, r3
 800c1fc:	9308      	str	r3, [sp, #32]
 800c1fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c200:	b1f3      	cbz	r3, 800c240 <_dtoa_r+0x760>
 800c202:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c204:	2b00      	cmp	r3, #0
 800c206:	f000 80b7 	beq.w	800c378 <_dtoa_r+0x898>
 800c20a:	b18c      	cbz	r4, 800c230 <_dtoa_r+0x750>
 800c20c:	4629      	mov	r1, r5
 800c20e:	4622      	mov	r2, r4
 800c210:	4658      	mov	r0, fp
 800c212:	f000 fc0f 	bl	800ca34 <__pow5mult>
 800c216:	464a      	mov	r2, r9
 800c218:	4601      	mov	r1, r0
 800c21a:	4605      	mov	r5, r0
 800c21c:	4658      	mov	r0, fp
 800c21e:	f000 fb5f 	bl	800c8e0 <__multiply>
 800c222:	4649      	mov	r1, r9
 800c224:	9004      	str	r0, [sp, #16]
 800c226:	4658      	mov	r0, fp
 800c228:	f000 faa8 	bl	800c77c <_Bfree>
 800c22c:	9b04      	ldr	r3, [sp, #16]
 800c22e:	4699      	mov	r9, r3
 800c230:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c232:	1b1a      	subs	r2, r3, r4
 800c234:	d004      	beq.n	800c240 <_dtoa_r+0x760>
 800c236:	4649      	mov	r1, r9
 800c238:	4658      	mov	r0, fp
 800c23a:	f000 fbfb 	bl	800ca34 <__pow5mult>
 800c23e:	4681      	mov	r9, r0
 800c240:	2101      	movs	r1, #1
 800c242:	4658      	mov	r0, fp
 800c244:	f000 fb36 	bl	800c8b4 <__i2b>
 800c248:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c24a:	4604      	mov	r4, r0
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	f000 81cc 	beq.w	800c5ea <_dtoa_r+0xb0a>
 800c252:	461a      	mov	r2, r3
 800c254:	4601      	mov	r1, r0
 800c256:	4658      	mov	r0, fp
 800c258:	f000 fbec 	bl	800ca34 <__pow5mult>
 800c25c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c25e:	2b01      	cmp	r3, #1
 800c260:	4604      	mov	r4, r0
 800c262:	f300 8095 	bgt.w	800c390 <_dtoa_r+0x8b0>
 800c266:	9b02      	ldr	r3, [sp, #8]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	f040 8087 	bne.w	800c37c <_dtoa_r+0x89c>
 800c26e:	9b03      	ldr	r3, [sp, #12]
 800c270:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c274:	2b00      	cmp	r3, #0
 800c276:	f040 8089 	bne.w	800c38c <_dtoa_r+0x8ac>
 800c27a:	9b03      	ldr	r3, [sp, #12]
 800c27c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c280:	0d1b      	lsrs	r3, r3, #20
 800c282:	051b      	lsls	r3, r3, #20
 800c284:	b12b      	cbz	r3, 800c292 <_dtoa_r+0x7b2>
 800c286:	9b08      	ldr	r3, [sp, #32]
 800c288:	3301      	adds	r3, #1
 800c28a:	9308      	str	r3, [sp, #32]
 800c28c:	f108 0801 	add.w	r8, r8, #1
 800c290:	2301      	movs	r3, #1
 800c292:	930a      	str	r3, [sp, #40]	@ 0x28
 800c294:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c296:	2b00      	cmp	r3, #0
 800c298:	f000 81ad 	beq.w	800c5f6 <_dtoa_r+0xb16>
 800c29c:	6923      	ldr	r3, [r4, #16]
 800c29e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c2a2:	6918      	ldr	r0, [r3, #16]
 800c2a4:	f000 faba 	bl	800c81c <__hi0bits>
 800c2a8:	f1c0 0020 	rsb	r0, r0, #32
 800c2ac:	9b08      	ldr	r3, [sp, #32]
 800c2ae:	4418      	add	r0, r3
 800c2b0:	f010 001f 	ands.w	r0, r0, #31
 800c2b4:	d077      	beq.n	800c3a6 <_dtoa_r+0x8c6>
 800c2b6:	f1c0 0320 	rsb	r3, r0, #32
 800c2ba:	2b04      	cmp	r3, #4
 800c2bc:	dd6b      	ble.n	800c396 <_dtoa_r+0x8b6>
 800c2be:	9b08      	ldr	r3, [sp, #32]
 800c2c0:	f1c0 001c 	rsb	r0, r0, #28
 800c2c4:	4403      	add	r3, r0
 800c2c6:	4480      	add	r8, r0
 800c2c8:	4406      	add	r6, r0
 800c2ca:	9308      	str	r3, [sp, #32]
 800c2cc:	f1b8 0f00 	cmp.w	r8, #0
 800c2d0:	dd05      	ble.n	800c2de <_dtoa_r+0x7fe>
 800c2d2:	4649      	mov	r1, r9
 800c2d4:	4642      	mov	r2, r8
 800c2d6:	4658      	mov	r0, fp
 800c2d8:	f000 fbec 	bl	800cab4 <__lshift>
 800c2dc:	4681      	mov	r9, r0
 800c2de:	9b08      	ldr	r3, [sp, #32]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	dd05      	ble.n	800c2f0 <_dtoa_r+0x810>
 800c2e4:	4621      	mov	r1, r4
 800c2e6:	461a      	mov	r2, r3
 800c2e8:	4658      	mov	r0, fp
 800c2ea:	f000 fbe3 	bl	800cab4 <__lshift>
 800c2ee:	4604      	mov	r4, r0
 800c2f0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d059      	beq.n	800c3aa <_dtoa_r+0x8ca>
 800c2f6:	4621      	mov	r1, r4
 800c2f8:	4648      	mov	r0, r9
 800c2fa:	f000 fc47 	bl	800cb8c <__mcmp>
 800c2fe:	2800      	cmp	r0, #0
 800c300:	da53      	bge.n	800c3aa <_dtoa_r+0x8ca>
 800c302:	1e7b      	subs	r3, r7, #1
 800c304:	9304      	str	r3, [sp, #16]
 800c306:	4649      	mov	r1, r9
 800c308:	2300      	movs	r3, #0
 800c30a:	220a      	movs	r2, #10
 800c30c:	4658      	mov	r0, fp
 800c30e:	f000 fa3f 	bl	800c790 <__multadd>
 800c312:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c314:	4681      	mov	r9, r0
 800c316:	2b00      	cmp	r3, #0
 800c318:	f000 816f 	beq.w	800c5fa <_dtoa_r+0xb1a>
 800c31c:	2300      	movs	r3, #0
 800c31e:	4629      	mov	r1, r5
 800c320:	220a      	movs	r2, #10
 800c322:	4658      	mov	r0, fp
 800c324:	f000 fa34 	bl	800c790 <__multadd>
 800c328:	9b00      	ldr	r3, [sp, #0]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	4605      	mov	r5, r0
 800c32e:	dc67      	bgt.n	800c400 <_dtoa_r+0x920>
 800c330:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c332:	2b02      	cmp	r3, #2
 800c334:	dc41      	bgt.n	800c3ba <_dtoa_r+0x8da>
 800c336:	e063      	b.n	800c400 <_dtoa_r+0x920>
 800c338:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c33a:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c33e:	e746      	b.n	800c1ce <_dtoa_r+0x6ee>
 800c340:	9b07      	ldr	r3, [sp, #28]
 800c342:	1e5c      	subs	r4, r3, #1
 800c344:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c346:	42a3      	cmp	r3, r4
 800c348:	bfbf      	itttt	lt
 800c34a:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c34c:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c34e:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c350:	1ae3      	sublt	r3, r4, r3
 800c352:	bfb4      	ite	lt
 800c354:	18d2      	addlt	r2, r2, r3
 800c356:	1b1c      	subge	r4, r3, r4
 800c358:	9b07      	ldr	r3, [sp, #28]
 800c35a:	bfbc      	itt	lt
 800c35c:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c35e:	2400      	movlt	r4, #0
 800c360:	2b00      	cmp	r3, #0
 800c362:	bfb5      	itete	lt
 800c364:	eba8 0603 	sublt.w	r6, r8, r3
 800c368:	9b07      	ldrge	r3, [sp, #28]
 800c36a:	2300      	movlt	r3, #0
 800c36c:	4646      	movge	r6, r8
 800c36e:	e730      	b.n	800c1d2 <_dtoa_r+0x6f2>
 800c370:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c372:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c374:	4646      	mov	r6, r8
 800c376:	e735      	b.n	800c1e4 <_dtoa_r+0x704>
 800c378:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c37a:	e75c      	b.n	800c236 <_dtoa_r+0x756>
 800c37c:	2300      	movs	r3, #0
 800c37e:	e788      	b.n	800c292 <_dtoa_r+0x7b2>
 800c380:	3fe00000 	.word	0x3fe00000
 800c384:	40240000 	.word	0x40240000
 800c388:	40140000 	.word	0x40140000
 800c38c:	9b02      	ldr	r3, [sp, #8]
 800c38e:	e780      	b.n	800c292 <_dtoa_r+0x7b2>
 800c390:	2300      	movs	r3, #0
 800c392:	930a      	str	r3, [sp, #40]	@ 0x28
 800c394:	e782      	b.n	800c29c <_dtoa_r+0x7bc>
 800c396:	d099      	beq.n	800c2cc <_dtoa_r+0x7ec>
 800c398:	9a08      	ldr	r2, [sp, #32]
 800c39a:	331c      	adds	r3, #28
 800c39c:	441a      	add	r2, r3
 800c39e:	4498      	add	r8, r3
 800c3a0:	441e      	add	r6, r3
 800c3a2:	9208      	str	r2, [sp, #32]
 800c3a4:	e792      	b.n	800c2cc <_dtoa_r+0x7ec>
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	e7f6      	b.n	800c398 <_dtoa_r+0x8b8>
 800c3aa:	9b07      	ldr	r3, [sp, #28]
 800c3ac:	9704      	str	r7, [sp, #16]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	dc20      	bgt.n	800c3f4 <_dtoa_r+0x914>
 800c3b2:	9300      	str	r3, [sp, #0]
 800c3b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3b6:	2b02      	cmp	r3, #2
 800c3b8:	dd1e      	ble.n	800c3f8 <_dtoa_r+0x918>
 800c3ba:	9b00      	ldr	r3, [sp, #0]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	f47f aec0 	bne.w	800c142 <_dtoa_r+0x662>
 800c3c2:	4621      	mov	r1, r4
 800c3c4:	2205      	movs	r2, #5
 800c3c6:	4658      	mov	r0, fp
 800c3c8:	f000 f9e2 	bl	800c790 <__multadd>
 800c3cc:	4601      	mov	r1, r0
 800c3ce:	4604      	mov	r4, r0
 800c3d0:	4648      	mov	r0, r9
 800c3d2:	f000 fbdb 	bl	800cb8c <__mcmp>
 800c3d6:	2800      	cmp	r0, #0
 800c3d8:	f77f aeb3 	ble.w	800c142 <_dtoa_r+0x662>
 800c3dc:	4656      	mov	r6, sl
 800c3de:	2331      	movs	r3, #49	@ 0x31
 800c3e0:	f806 3b01 	strb.w	r3, [r6], #1
 800c3e4:	9b04      	ldr	r3, [sp, #16]
 800c3e6:	3301      	adds	r3, #1
 800c3e8:	9304      	str	r3, [sp, #16]
 800c3ea:	e6ae      	b.n	800c14a <_dtoa_r+0x66a>
 800c3ec:	9c07      	ldr	r4, [sp, #28]
 800c3ee:	9704      	str	r7, [sp, #16]
 800c3f0:	4625      	mov	r5, r4
 800c3f2:	e7f3      	b.n	800c3dc <_dtoa_r+0x8fc>
 800c3f4:	9b07      	ldr	r3, [sp, #28]
 800c3f6:	9300      	str	r3, [sp, #0]
 800c3f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	f000 8101 	beq.w	800c602 <_dtoa_r+0xb22>
 800c400:	2e00      	cmp	r6, #0
 800c402:	dd05      	ble.n	800c410 <_dtoa_r+0x930>
 800c404:	4629      	mov	r1, r5
 800c406:	4632      	mov	r2, r6
 800c408:	4658      	mov	r0, fp
 800c40a:	f000 fb53 	bl	800cab4 <__lshift>
 800c40e:	4605      	mov	r5, r0
 800c410:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c412:	2b00      	cmp	r3, #0
 800c414:	d059      	beq.n	800c4ca <_dtoa_r+0x9ea>
 800c416:	6869      	ldr	r1, [r5, #4]
 800c418:	4658      	mov	r0, fp
 800c41a:	f000 f98a 	bl	800c732 <_Balloc>
 800c41e:	4606      	mov	r6, r0
 800c420:	b920      	cbnz	r0, 800c42c <_dtoa_r+0x94c>
 800c422:	4b83      	ldr	r3, [pc, #524]	@ (800c630 <_dtoa_r+0xb50>)
 800c424:	4602      	mov	r2, r0
 800c426:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c42a:	e480      	b.n	800bd2e <_dtoa_r+0x24e>
 800c42c:	692a      	ldr	r2, [r5, #16]
 800c42e:	3202      	adds	r2, #2
 800c430:	0092      	lsls	r2, r2, #2
 800c432:	f105 010c 	add.w	r1, r5, #12
 800c436:	300c      	adds	r0, #12
 800c438:	f7fd fcb6 	bl	8009da8 <memcpy>
 800c43c:	2201      	movs	r2, #1
 800c43e:	4631      	mov	r1, r6
 800c440:	4658      	mov	r0, fp
 800c442:	f000 fb37 	bl	800cab4 <__lshift>
 800c446:	f10a 0301 	add.w	r3, sl, #1
 800c44a:	9307      	str	r3, [sp, #28]
 800c44c:	9b00      	ldr	r3, [sp, #0]
 800c44e:	4453      	add	r3, sl
 800c450:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c452:	9b02      	ldr	r3, [sp, #8]
 800c454:	f003 0301 	and.w	r3, r3, #1
 800c458:	462f      	mov	r7, r5
 800c45a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c45c:	4605      	mov	r5, r0
 800c45e:	9b07      	ldr	r3, [sp, #28]
 800c460:	4621      	mov	r1, r4
 800c462:	3b01      	subs	r3, #1
 800c464:	4648      	mov	r0, r9
 800c466:	9300      	str	r3, [sp, #0]
 800c468:	f7ff fab2 	bl	800b9d0 <quorem>
 800c46c:	4639      	mov	r1, r7
 800c46e:	9002      	str	r0, [sp, #8]
 800c470:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c474:	4648      	mov	r0, r9
 800c476:	f000 fb89 	bl	800cb8c <__mcmp>
 800c47a:	462a      	mov	r2, r5
 800c47c:	9008      	str	r0, [sp, #32]
 800c47e:	4621      	mov	r1, r4
 800c480:	4658      	mov	r0, fp
 800c482:	f000 fb9f 	bl	800cbc4 <__mdiff>
 800c486:	68c2      	ldr	r2, [r0, #12]
 800c488:	4606      	mov	r6, r0
 800c48a:	bb02      	cbnz	r2, 800c4ce <_dtoa_r+0x9ee>
 800c48c:	4601      	mov	r1, r0
 800c48e:	4648      	mov	r0, r9
 800c490:	f000 fb7c 	bl	800cb8c <__mcmp>
 800c494:	4602      	mov	r2, r0
 800c496:	4631      	mov	r1, r6
 800c498:	4658      	mov	r0, fp
 800c49a:	920e      	str	r2, [sp, #56]	@ 0x38
 800c49c:	f000 f96e 	bl	800c77c <_Bfree>
 800c4a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c4a4:	9e07      	ldr	r6, [sp, #28]
 800c4a6:	ea43 0102 	orr.w	r1, r3, r2
 800c4aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c4ac:	4319      	orrs	r1, r3
 800c4ae:	d110      	bne.n	800c4d2 <_dtoa_r+0x9f2>
 800c4b0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c4b4:	d029      	beq.n	800c50a <_dtoa_r+0xa2a>
 800c4b6:	9b08      	ldr	r3, [sp, #32]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	dd02      	ble.n	800c4c2 <_dtoa_r+0x9e2>
 800c4bc:	9b02      	ldr	r3, [sp, #8]
 800c4be:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c4c2:	9b00      	ldr	r3, [sp, #0]
 800c4c4:	f883 8000 	strb.w	r8, [r3]
 800c4c8:	e640      	b.n	800c14c <_dtoa_r+0x66c>
 800c4ca:	4628      	mov	r0, r5
 800c4cc:	e7bb      	b.n	800c446 <_dtoa_r+0x966>
 800c4ce:	2201      	movs	r2, #1
 800c4d0:	e7e1      	b.n	800c496 <_dtoa_r+0x9b6>
 800c4d2:	9b08      	ldr	r3, [sp, #32]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	db04      	blt.n	800c4e2 <_dtoa_r+0xa02>
 800c4d8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c4da:	430b      	orrs	r3, r1
 800c4dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c4de:	430b      	orrs	r3, r1
 800c4e0:	d120      	bne.n	800c524 <_dtoa_r+0xa44>
 800c4e2:	2a00      	cmp	r2, #0
 800c4e4:	dded      	ble.n	800c4c2 <_dtoa_r+0x9e2>
 800c4e6:	4649      	mov	r1, r9
 800c4e8:	2201      	movs	r2, #1
 800c4ea:	4658      	mov	r0, fp
 800c4ec:	f000 fae2 	bl	800cab4 <__lshift>
 800c4f0:	4621      	mov	r1, r4
 800c4f2:	4681      	mov	r9, r0
 800c4f4:	f000 fb4a 	bl	800cb8c <__mcmp>
 800c4f8:	2800      	cmp	r0, #0
 800c4fa:	dc03      	bgt.n	800c504 <_dtoa_r+0xa24>
 800c4fc:	d1e1      	bne.n	800c4c2 <_dtoa_r+0x9e2>
 800c4fe:	f018 0f01 	tst.w	r8, #1
 800c502:	d0de      	beq.n	800c4c2 <_dtoa_r+0x9e2>
 800c504:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c508:	d1d8      	bne.n	800c4bc <_dtoa_r+0x9dc>
 800c50a:	9a00      	ldr	r2, [sp, #0]
 800c50c:	2339      	movs	r3, #57	@ 0x39
 800c50e:	7013      	strb	r3, [r2, #0]
 800c510:	4633      	mov	r3, r6
 800c512:	461e      	mov	r6, r3
 800c514:	3b01      	subs	r3, #1
 800c516:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c51a:	2a39      	cmp	r2, #57	@ 0x39
 800c51c:	d052      	beq.n	800c5c4 <_dtoa_r+0xae4>
 800c51e:	3201      	adds	r2, #1
 800c520:	701a      	strb	r2, [r3, #0]
 800c522:	e613      	b.n	800c14c <_dtoa_r+0x66c>
 800c524:	2a00      	cmp	r2, #0
 800c526:	dd07      	ble.n	800c538 <_dtoa_r+0xa58>
 800c528:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c52c:	d0ed      	beq.n	800c50a <_dtoa_r+0xa2a>
 800c52e:	9a00      	ldr	r2, [sp, #0]
 800c530:	f108 0301 	add.w	r3, r8, #1
 800c534:	7013      	strb	r3, [r2, #0]
 800c536:	e609      	b.n	800c14c <_dtoa_r+0x66c>
 800c538:	9b07      	ldr	r3, [sp, #28]
 800c53a:	9a07      	ldr	r2, [sp, #28]
 800c53c:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c540:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c542:	4293      	cmp	r3, r2
 800c544:	d028      	beq.n	800c598 <_dtoa_r+0xab8>
 800c546:	4649      	mov	r1, r9
 800c548:	2300      	movs	r3, #0
 800c54a:	220a      	movs	r2, #10
 800c54c:	4658      	mov	r0, fp
 800c54e:	f000 f91f 	bl	800c790 <__multadd>
 800c552:	42af      	cmp	r7, r5
 800c554:	4681      	mov	r9, r0
 800c556:	f04f 0300 	mov.w	r3, #0
 800c55a:	f04f 020a 	mov.w	r2, #10
 800c55e:	4639      	mov	r1, r7
 800c560:	4658      	mov	r0, fp
 800c562:	d107      	bne.n	800c574 <_dtoa_r+0xa94>
 800c564:	f000 f914 	bl	800c790 <__multadd>
 800c568:	4607      	mov	r7, r0
 800c56a:	4605      	mov	r5, r0
 800c56c:	9b07      	ldr	r3, [sp, #28]
 800c56e:	3301      	adds	r3, #1
 800c570:	9307      	str	r3, [sp, #28]
 800c572:	e774      	b.n	800c45e <_dtoa_r+0x97e>
 800c574:	f000 f90c 	bl	800c790 <__multadd>
 800c578:	4629      	mov	r1, r5
 800c57a:	4607      	mov	r7, r0
 800c57c:	2300      	movs	r3, #0
 800c57e:	220a      	movs	r2, #10
 800c580:	4658      	mov	r0, fp
 800c582:	f000 f905 	bl	800c790 <__multadd>
 800c586:	4605      	mov	r5, r0
 800c588:	e7f0      	b.n	800c56c <_dtoa_r+0xa8c>
 800c58a:	9b00      	ldr	r3, [sp, #0]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	bfcc      	ite	gt
 800c590:	461e      	movgt	r6, r3
 800c592:	2601      	movle	r6, #1
 800c594:	4456      	add	r6, sl
 800c596:	2700      	movs	r7, #0
 800c598:	4649      	mov	r1, r9
 800c59a:	2201      	movs	r2, #1
 800c59c:	4658      	mov	r0, fp
 800c59e:	f000 fa89 	bl	800cab4 <__lshift>
 800c5a2:	4621      	mov	r1, r4
 800c5a4:	4681      	mov	r9, r0
 800c5a6:	f000 faf1 	bl	800cb8c <__mcmp>
 800c5aa:	2800      	cmp	r0, #0
 800c5ac:	dcb0      	bgt.n	800c510 <_dtoa_r+0xa30>
 800c5ae:	d102      	bne.n	800c5b6 <_dtoa_r+0xad6>
 800c5b0:	f018 0f01 	tst.w	r8, #1
 800c5b4:	d1ac      	bne.n	800c510 <_dtoa_r+0xa30>
 800c5b6:	4633      	mov	r3, r6
 800c5b8:	461e      	mov	r6, r3
 800c5ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c5be:	2a30      	cmp	r2, #48	@ 0x30
 800c5c0:	d0fa      	beq.n	800c5b8 <_dtoa_r+0xad8>
 800c5c2:	e5c3      	b.n	800c14c <_dtoa_r+0x66c>
 800c5c4:	459a      	cmp	sl, r3
 800c5c6:	d1a4      	bne.n	800c512 <_dtoa_r+0xa32>
 800c5c8:	9b04      	ldr	r3, [sp, #16]
 800c5ca:	3301      	adds	r3, #1
 800c5cc:	9304      	str	r3, [sp, #16]
 800c5ce:	2331      	movs	r3, #49	@ 0x31
 800c5d0:	f88a 3000 	strb.w	r3, [sl]
 800c5d4:	e5ba      	b.n	800c14c <_dtoa_r+0x66c>
 800c5d6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c5d8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800c634 <_dtoa_r+0xb54>
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	f43f aab6 	beq.w	800bb4e <_dtoa_r+0x6e>
 800c5e2:	f10a 0308 	add.w	r3, sl, #8
 800c5e6:	f7ff bab0 	b.w	800bb4a <_dtoa_r+0x6a>
 800c5ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5ec:	2b01      	cmp	r3, #1
 800c5ee:	f77f ae3a 	ble.w	800c266 <_dtoa_r+0x786>
 800c5f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c5f4:	930a      	str	r3, [sp, #40]	@ 0x28
 800c5f6:	2001      	movs	r0, #1
 800c5f8:	e658      	b.n	800c2ac <_dtoa_r+0x7cc>
 800c5fa:	9b00      	ldr	r3, [sp, #0]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	f77f aed9 	ble.w	800c3b4 <_dtoa_r+0x8d4>
 800c602:	4656      	mov	r6, sl
 800c604:	4621      	mov	r1, r4
 800c606:	4648      	mov	r0, r9
 800c608:	f7ff f9e2 	bl	800b9d0 <quorem>
 800c60c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c610:	f806 8b01 	strb.w	r8, [r6], #1
 800c614:	9b00      	ldr	r3, [sp, #0]
 800c616:	eba6 020a 	sub.w	r2, r6, sl
 800c61a:	4293      	cmp	r3, r2
 800c61c:	ddb5      	ble.n	800c58a <_dtoa_r+0xaaa>
 800c61e:	4649      	mov	r1, r9
 800c620:	2300      	movs	r3, #0
 800c622:	220a      	movs	r2, #10
 800c624:	4658      	mov	r0, fp
 800c626:	f000 f8b3 	bl	800c790 <__multadd>
 800c62a:	4681      	mov	r9, r0
 800c62c:	e7ea      	b.n	800c604 <_dtoa_r+0xb24>
 800c62e:	bf00      	nop
 800c630:	0808e69d 	.word	0x0808e69d
 800c634:	0808e690 	.word	0x0808e690

0800c638 <__ssprint_r>:
 800c638:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c63c:	6893      	ldr	r3, [r2, #8]
 800c63e:	f8d2 b000 	ldr.w	fp, [r2]
 800c642:	9001      	str	r0, [sp, #4]
 800c644:	460c      	mov	r4, r1
 800c646:	4617      	mov	r7, r2
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d157      	bne.n	800c6fc <__ssprint_r+0xc4>
 800c64c:	2000      	movs	r0, #0
 800c64e:	2300      	movs	r3, #0
 800c650:	607b      	str	r3, [r7, #4]
 800c652:	b003      	add	sp, #12
 800c654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c658:	e9db a800 	ldrd	sl, r8, [fp]
 800c65c:	f10b 0b08 	add.w	fp, fp, #8
 800c660:	68a6      	ldr	r6, [r4, #8]
 800c662:	6820      	ldr	r0, [r4, #0]
 800c664:	f1b8 0f00 	cmp.w	r8, #0
 800c668:	d0f6      	beq.n	800c658 <__ssprint_r+0x20>
 800c66a:	45b0      	cmp	r8, r6
 800c66c:	d32e      	bcc.n	800c6cc <__ssprint_r+0x94>
 800c66e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c672:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c676:	d029      	beq.n	800c6cc <__ssprint_r+0x94>
 800c678:	6921      	ldr	r1, [r4, #16]
 800c67a:	6965      	ldr	r5, [r4, #20]
 800c67c:	eba0 0901 	sub.w	r9, r0, r1
 800c680:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c684:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c688:	f109 0001 	add.w	r0, r9, #1
 800c68c:	106d      	asrs	r5, r5, #1
 800c68e:	4440      	add	r0, r8
 800c690:	4285      	cmp	r5, r0
 800c692:	bf38      	it	cc
 800c694:	4605      	movcc	r5, r0
 800c696:	0553      	lsls	r3, r2, #21
 800c698:	d534      	bpl.n	800c704 <__ssprint_r+0xcc>
 800c69a:	9801      	ldr	r0, [sp, #4]
 800c69c:	4629      	mov	r1, r5
 800c69e:	f7fc fc5f 	bl	8008f60 <_malloc_r>
 800c6a2:	4606      	mov	r6, r0
 800c6a4:	2800      	cmp	r0, #0
 800c6a6:	d038      	beq.n	800c71a <__ssprint_r+0xe2>
 800c6a8:	464a      	mov	r2, r9
 800c6aa:	6921      	ldr	r1, [r4, #16]
 800c6ac:	f7fd fb7c 	bl	8009da8 <memcpy>
 800c6b0:	89a2      	ldrh	r2, [r4, #12]
 800c6b2:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 800c6b6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800c6ba:	81a2      	strh	r2, [r4, #12]
 800c6bc:	6126      	str	r6, [r4, #16]
 800c6be:	6165      	str	r5, [r4, #20]
 800c6c0:	444e      	add	r6, r9
 800c6c2:	eba5 0509 	sub.w	r5, r5, r9
 800c6c6:	6026      	str	r6, [r4, #0]
 800c6c8:	60a5      	str	r5, [r4, #8]
 800c6ca:	4646      	mov	r6, r8
 800c6cc:	4546      	cmp	r6, r8
 800c6ce:	bf28      	it	cs
 800c6d0:	4646      	movcs	r6, r8
 800c6d2:	4632      	mov	r2, r6
 800c6d4:	4651      	mov	r1, sl
 800c6d6:	6820      	ldr	r0, [r4, #0]
 800c6d8:	f7fd fab4 	bl	8009c44 <memmove>
 800c6dc:	68a2      	ldr	r2, [r4, #8]
 800c6de:	1b92      	subs	r2, r2, r6
 800c6e0:	60a2      	str	r2, [r4, #8]
 800c6e2:	6822      	ldr	r2, [r4, #0]
 800c6e4:	4432      	add	r2, r6
 800c6e6:	6022      	str	r2, [r4, #0]
 800c6e8:	68ba      	ldr	r2, [r7, #8]
 800c6ea:	eba2 0308 	sub.w	r3, r2, r8
 800c6ee:	44c2      	add	sl, r8
 800c6f0:	60bb      	str	r3, [r7, #8]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d0aa      	beq.n	800c64c <__ssprint_r+0x14>
 800c6f6:	f04f 0800 	mov.w	r8, #0
 800c6fa:	e7b1      	b.n	800c660 <__ssprint_r+0x28>
 800c6fc:	f04f 0a00 	mov.w	sl, #0
 800c700:	46d0      	mov	r8, sl
 800c702:	e7ad      	b.n	800c660 <__ssprint_r+0x28>
 800c704:	9801      	ldr	r0, [sp, #4]
 800c706:	462a      	mov	r2, r5
 800c708:	f7fc fe70 	bl	80093ec <_realloc_r>
 800c70c:	4606      	mov	r6, r0
 800c70e:	2800      	cmp	r0, #0
 800c710:	d1d4      	bne.n	800c6bc <__ssprint_r+0x84>
 800c712:	6921      	ldr	r1, [r4, #16]
 800c714:	9801      	ldr	r0, [sp, #4]
 800c716:	f7fd fbfb 	bl	8009f10 <_free_r>
 800c71a:	9a01      	ldr	r2, [sp, #4]
 800c71c:	230c      	movs	r3, #12
 800c71e:	6013      	str	r3, [r2, #0]
 800c720:	89a3      	ldrh	r3, [r4, #12]
 800c722:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c726:	81a3      	strh	r3, [r4, #12]
 800c728:	2300      	movs	r3, #0
 800c72a:	60bb      	str	r3, [r7, #8]
 800c72c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c730:	e78d      	b.n	800c64e <__ssprint_r+0x16>

0800c732 <_Balloc>:
 800c732:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800c734:	b570      	push	{r4, r5, r6, lr}
 800c736:	4605      	mov	r5, r0
 800c738:	460c      	mov	r4, r1
 800c73a:	b17b      	cbz	r3, 800c75c <_Balloc+0x2a>
 800c73c:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800c73e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800c742:	b9a0      	cbnz	r0, 800c76e <_Balloc+0x3c>
 800c744:	2101      	movs	r1, #1
 800c746:	fa01 f604 	lsl.w	r6, r1, r4
 800c74a:	1d72      	adds	r2, r6, #5
 800c74c:	0092      	lsls	r2, r2, #2
 800c74e:	4628      	mov	r0, r5
 800c750:	f000 fb48 	bl	800cde4 <_calloc_r>
 800c754:	b148      	cbz	r0, 800c76a <_Balloc+0x38>
 800c756:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800c75a:	e00b      	b.n	800c774 <_Balloc+0x42>
 800c75c:	2221      	movs	r2, #33	@ 0x21
 800c75e:	2104      	movs	r1, #4
 800c760:	f000 fb40 	bl	800cde4 <_calloc_r>
 800c764:	6468      	str	r0, [r5, #68]	@ 0x44
 800c766:	2800      	cmp	r0, #0
 800c768:	d1e8      	bne.n	800c73c <_Balloc+0xa>
 800c76a:	2000      	movs	r0, #0
 800c76c:	bd70      	pop	{r4, r5, r6, pc}
 800c76e:	6802      	ldr	r2, [r0, #0]
 800c770:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800c774:	2300      	movs	r3, #0
 800c776:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c77a:	e7f7      	b.n	800c76c <_Balloc+0x3a>

0800c77c <_Bfree>:
 800c77c:	b131      	cbz	r1, 800c78c <_Bfree+0x10>
 800c77e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800c780:	684a      	ldr	r2, [r1, #4]
 800c782:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c786:	6008      	str	r0, [r1, #0]
 800c788:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c78c:	4770      	bx	lr
	...

0800c790 <__multadd>:
 800c790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c794:	690d      	ldr	r5, [r1, #16]
 800c796:	4607      	mov	r7, r0
 800c798:	460c      	mov	r4, r1
 800c79a:	461e      	mov	r6, r3
 800c79c:	f101 0c14 	add.w	ip, r1, #20
 800c7a0:	2000      	movs	r0, #0
 800c7a2:	f8dc 3000 	ldr.w	r3, [ip]
 800c7a6:	b299      	uxth	r1, r3
 800c7a8:	fb02 6101 	mla	r1, r2, r1, r6
 800c7ac:	0c1e      	lsrs	r6, r3, #16
 800c7ae:	0c0b      	lsrs	r3, r1, #16
 800c7b0:	fb02 3306 	mla	r3, r2, r6, r3
 800c7b4:	b289      	uxth	r1, r1
 800c7b6:	3001      	adds	r0, #1
 800c7b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c7bc:	4285      	cmp	r5, r0
 800c7be:	f84c 1b04 	str.w	r1, [ip], #4
 800c7c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c7c6:	dcec      	bgt.n	800c7a2 <__multadd+0x12>
 800c7c8:	b30e      	cbz	r6, 800c80e <__multadd+0x7e>
 800c7ca:	68a3      	ldr	r3, [r4, #8]
 800c7cc:	42ab      	cmp	r3, r5
 800c7ce:	dc19      	bgt.n	800c804 <__multadd+0x74>
 800c7d0:	6861      	ldr	r1, [r4, #4]
 800c7d2:	4638      	mov	r0, r7
 800c7d4:	3101      	adds	r1, #1
 800c7d6:	f7ff ffac 	bl	800c732 <_Balloc>
 800c7da:	4680      	mov	r8, r0
 800c7dc:	b928      	cbnz	r0, 800c7ea <__multadd+0x5a>
 800c7de:	4602      	mov	r2, r0
 800c7e0:	4b0c      	ldr	r3, [pc, #48]	@ (800c814 <__multadd+0x84>)
 800c7e2:	480d      	ldr	r0, [pc, #52]	@ (800c818 <__multadd+0x88>)
 800c7e4:	21ba      	movs	r1, #186	@ 0xba
 800c7e6:	f000 fadf 	bl	800cda8 <__assert_func>
 800c7ea:	6922      	ldr	r2, [r4, #16]
 800c7ec:	3202      	adds	r2, #2
 800c7ee:	f104 010c 	add.w	r1, r4, #12
 800c7f2:	0092      	lsls	r2, r2, #2
 800c7f4:	300c      	adds	r0, #12
 800c7f6:	f7fd fad7 	bl	8009da8 <memcpy>
 800c7fa:	4621      	mov	r1, r4
 800c7fc:	4638      	mov	r0, r7
 800c7fe:	f7ff ffbd 	bl	800c77c <_Bfree>
 800c802:	4644      	mov	r4, r8
 800c804:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c808:	3501      	adds	r5, #1
 800c80a:	615e      	str	r6, [r3, #20]
 800c80c:	6125      	str	r5, [r4, #16]
 800c80e:	4620      	mov	r0, r4
 800c810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c814:	0808e69d 	.word	0x0808e69d
 800c818:	0808e706 	.word	0x0808e706

0800c81c <__hi0bits>:
 800c81c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c820:	4603      	mov	r3, r0
 800c822:	bf36      	itet	cc
 800c824:	0403      	lslcc	r3, r0, #16
 800c826:	2000      	movcs	r0, #0
 800c828:	2010      	movcc	r0, #16
 800c82a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c82e:	bf3c      	itt	cc
 800c830:	021b      	lslcc	r3, r3, #8
 800c832:	3008      	addcc	r0, #8
 800c834:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c838:	bf3c      	itt	cc
 800c83a:	011b      	lslcc	r3, r3, #4
 800c83c:	3004      	addcc	r0, #4
 800c83e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c842:	bf3c      	itt	cc
 800c844:	009b      	lslcc	r3, r3, #2
 800c846:	3002      	addcc	r0, #2
 800c848:	2b00      	cmp	r3, #0
 800c84a:	db05      	blt.n	800c858 <__hi0bits+0x3c>
 800c84c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c850:	f100 0001 	add.w	r0, r0, #1
 800c854:	bf08      	it	eq
 800c856:	2020      	moveq	r0, #32
 800c858:	4770      	bx	lr

0800c85a <__lo0bits>:
 800c85a:	6803      	ldr	r3, [r0, #0]
 800c85c:	4602      	mov	r2, r0
 800c85e:	f013 0007 	ands.w	r0, r3, #7
 800c862:	d00b      	beq.n	800c87c <__lo0bits+0x22>
 800c864:	07d9      	lsls	r1, r3, #31
 800c866:	d421      	bmi.n	800c8ac <__lo0bits+0x52>
 800c868:	0798      	lsls	r0, r3, #30
 800c86a:	bf49      	itett	mi
 800c86c:	085b      	lsrmi	r3, r3, #1
 800c86e:	089b      	lsrpl	r3, r3, #2
 800c870:	2001      	movmi	r0, #1
 800c872:	6013      	strmi	r3, [r2, #0]
 800c874:	bf5c      	itt	pl
 800c876:	6013      	strpl	r3, [r2, #0]
 800c878:	2002      	movpl	r0, #2
 800c87a:	4770      	bx	lr
 800c87c:	b299      	uxth	r1, r3
 800c87e:	b909      	cbnz	r1, 800c884 <__lo0bits+0x2a>
 800c880:	0c1b      	lsrs	r3, r3, #16
 800c882:	2010      	movs	r0, #16
 800c884:	b2d9      	uxtb	r1, r3
 800c886:	b909      	cbnz	r1, 800c88c <__lo0bits+0x32>
 800c888:	3008      	adds	r0, #8
 800c88a:	0a1b      	lsrs	r3, r3, #8
 800c88c:	0719      	lsls	r1, r3, #28
 800c88e:	bf04      	itt	eq
 800c890:	091b      	lsreq	r3, r3, #4
 800c892:	3004      	addeq	r0, #4
 800c894:	0799      	lsls	r1, r3, #30
 800c896:	bf04      	itt	eq
 800c898:	089b      	lsreq	r3, r3, #2
 800c89a:	3002      	addeq	r0, #2
 800c89c:	07d9      	lsls	r1, r3, #31
 800c89e:	d403      	bmi.n	800c8a8 <__lo0bits+0x4e>
 800c8a0:	085b      	lsrs	r3, r3, #1
 800c8a2:	f100 0001 	add.w	r0, r0, #1
 800c8a6:	d003      	beq.n	800c8b0 <__lo0bits+0x56>
 800c8a8:	6013      	str	r3, [r2, #0]
 800c8aa:	4770      	bx	lr
 800c8ac:	2000      	movs	r0, #0
 800c8ae:	4770      	bx	lr
 800c8b0:	2020      	movs	r0, #32
 800c8b2:	4770      	bx	lr

0800c8b4 <__i2b>:
 800c8b4:	b510      	push	{r4, lr}
 800c8b6:	460c      	mov	r4, r1
 800c8b8:	2101      	movs	r1, #1
 800c8ba:	f7ff ff3a 	bl	800c732 <_Balloc>
 800c8be:	4602      	mov	r2, r0
 800c8c0:	b928      	cbnz	r0, 800c8ce <__i2b+0x1a>
 800c8c2:	4b05      	ldr	r3, [pc, #20]	@ (800c8d8 <__i2b+0x24>)
 800c8c4:	4805      	ldr	r0, [pc, #20]	@ (800c8dc <__i2b+0x28>)
 800c8c6:	f240 1145 	movw	r1, #325	@ 0x145
 800c8ca:	f000 fa6d 	bl	800cda8 <__assert_func>
 800c8ce:	2301      	movs	r3, #1
 800c8d0:	6144      	str	r4, [r0, #20]
 800c8d2:	6103      	str	r3, [r0, #16]
 800c8d4:	bd10      	pop	{r4, pc}
 800c8d6:	bf00      	nop
 800c8d8:	0808e69d 	.word	0x0808e69d
 800c8dc:	0808e706 	.word	0x0808e706

0800c8e0 <__multiply>:
 800c8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8e4:	4614      	mov	r4, r2
 800c8e6:	690a      	ldr	r2, [r1, #16]
 800c8e8:	6923      	ldr	r3, [r4, #16]
 800c8ea:	429a      	cmp	r2, r3
 800c8ec:	bfa8      	it	ge
 800c8ee:	4623      	movge	r3, r4
 800c8f0:	460f      	mov	r7, r1
 800c8f2:	bfa4      	itt	ge
 800c8f4:	460c      	movge	r4, r1
 800c8f6:	461f      	movge	r7, r3
 800c8f8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c8fc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c900:	68a3      	ldr	r3, [r4, #8]
 800c902:	6861      	ldr	r1, [r4, #4]
 800c904:	eb0a 0609 	add.w	r6, sl, r9
 800c908:	42b3      	cmp	r3, r6
 800c90a:	b085      	sub	sp, #20
 800c90c:	bfb8      	it	lt
 800c90e:	3101      	addlt	r1, #1
 800c910:	f7ff ff0f 	bl	800c732 <_Balloc>
 800c914:	b930      	cbnz	r0, 800c924 <__multiply+0x44>
 800c916:	4602      	mov	r2, r0
 800c918:	4b44      	ldr	r3, [pc, #272]	@ (800ca2c <__multiply+0x14c>)
 800c91a:	4845      	ldr	r0, [pc, #276]	@ (800ca30 <__multiply+0x150>)
 800c91c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c920:	f000 fa42 	bl	800cda8 <__assert_func>
 800c924:	f100 0514 	add.w	r5, r0, #20
 800c928:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c92c:	462b      	mov	r3, r5
 800c92e:	2200      	movs	r2, #0
 800c930:	4543      	cmp	r3, r8
 800c932:	d321      	bcc.n	800c978 <__multiply+0x98>
 800c934:	f107 0114 	add.w	r1, r7, #20
 800c938:	f104 0214 	add.w	r2, r4, #20
 800c93c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c940:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c944:	9302      	str	r3, [sp, #8]
 800c946:	1b13      	subs	r3, r2, r4
 800c948:	3b15      	subs	r3, #21
 800c94a:	f023 0303 	bic.w	r3, r3, #3
 800c94e:	3304      	adds	r3, #4
 800c950:	f104 0715 	add.w	r7, r4, #21
 800c954:	42ba      	cmp	r2, r7
 800c956:	bf38      	it	cc
 800c958:	2304      	movcc	r3, #4
 800c95a:	9301      	str	r3, [sp, #4]
 800c95c:	9b02      	ldr	r3, [sp, #8]
 800c95e:	9103      	str	r1, [sp, #12]
 800c960:	428b      	cmp	r3, r1
 800c962:	d80c      	bhi.n	800c97e <__multiply+0x9e>
 800c964:	2e00      	cmp	r6, #0
 800c966:	dd03      	ble.n	800c970 <__multiply+0x90>
 800c968:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d05b      	beq.n	800ca28 <__multiply+0x148>
 800c970:	6106      	str	r6, [r0, #16]
 800c972:	b005      	add	sp, #20
 800c974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c978:	f843 2b04 	str.w	r2, [r3], #4
 800c97c:	e7d8      	b.n	800c930 <__multiply+0x50>
 800c97e:	f8b1 a000 	ldrh.w	sl, [r1]
 800c982:	f1ba 0f00 	cmp.w	sl, #0
 800c986:	d024      	beq.n	800c9d2 <__multiply+0xf2>
 800c988:	f104 0e14 	add.w	lr, r4, #20
 800c98c:	46a9      	mov	r9, r5
 800c98e:	f04f 0c00 	mov.w	ip, #0
 800c992:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c996:	f8d9 3000 	ldr.w	r3, [r9]
 800c99a:	fa1f fb87 	uxth.w	fp, r7
 800c99e:	b29b      	uxth	r3, r3
 800c9a0:	fb0a 330b 	mla	r3, sl, fp, r3
 800c9a4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c9a8:	f8d9 7000 	ldr.w	r7, [r9]
 800c9ac:	4463      	add	r3, ip
 800c9ae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c9b2:	fb0a c70b 	mla	r7, sl, fp, ip
 800c9b6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c9ba:	b29b      	uxth	r3, r3
 800c9bc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c9c0:	4572      	cmp	r2, lr
 800c9c2:	f849 3b04 	str.w	r3, [r9], #4
 800c9c6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c9ca:	d8e2      	bhi.n	800c992 <__multiply+0xb2>
 800c9cc:	9b01      	ldr	r3, [sp, #4]
 800c9ce:	f845 c003 	str.w	ip, [r5, r3]
 800c9d2:	9b03      	ldr	r3, [sp, #12]
 800c9d4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c9d8:	3104      	adds	r1, #4
 800c9da:	f1b9 0f00 	cmp.w	r9, #0
 800c9de:	d021      	beq.n	800ca24 <__multiply+0x144>
 800c9e0:	682b      	ldr	r3, [r5, #0]
 800c9e2:	f104 0c14 	add.w	ip, r4, #20
 800c9e6:	46ae      	mov	lr, r5
 800c9e8:	f04f 0a00 	mov.w	sl, #0
 800c9ec:	f8bc b000 	ldrh.w	fp, [ip]
 800c9f0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c9f4:	fb09 770b 	mla	r7, r9, fp, r7
 800c9f8:	4457      	add	r7, sl
 800c9fa:	b29b      	uxth	r3, r3
 800c9fc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ca00:	f84e 3b04 	str.w	r3, [lr], #4
 800ca04:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ca08:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ca0c:	f8be 3000 	ldrh.w	r3, [lr]
 800ca10:	fb09 330a 	mla	r3, r9, sl, r3
 800ca14:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ca18:	4562      	cmp	r2, ip
 800ca1a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ca1e:	d8e5      	bhi.n	800c9ec <__multiply+0x10c>
 800ca20:	9f01      	ldr	r7, [sp, #4]
 800ca22:	51eb      	str	r3, [r5, r7]
 800ca24:	3504      	adds	r5, #4
 800ca26:	e799      	b.n	800c95c <__multiply+0x7c>
 800ca28:	3e01      	subs	r6, #1
 800ca2a:	e79b      	b.n	800c964 <__multiply+0x84>
 800ca2c:	0808e69d 	.word	0x0808e69d
 800ca30:	0808e706 	.word	0x0808e706

0800ca34 <__pow5mult>:
 800ca34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca38:	4615      	mov	r5, r2
 800ca3a:	f012 0203 	ands.w	r2, r2, #3
 800ca3e:	4607      	mov	r7, r0
 800ca40:	460e      	mov	r6, r1
 800ca42:	d007      	beq.n	800ca54 <__pow5mult+0x20>
 800ca44:	4c1a      	ldr	r4, [pc, #104]	@ (800cab0 <__pow5mult+0x7c>)
 800ca46:	3a01      	subs	r2, #1
 800ca48:	2300      	movs	r3, #0
 800ca4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ca4e:	f7ff fe9f 	bl	800c790 <__multadd>
 800ca52:	4606      	mov	r6, r0
 800ca54:	10ad      	asrs	r5, r5, #2
 800ca56:	d027      	beq.n	800caa8 <__pow5mult+0x74>
 800ca58:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 800ca5a:	b944      	cbnz	r4, 800ca6e <__pow5mult+0x3a>
 800ca5c:	f240 2171 	movw	r1, #625	@ 0x271
 800ca60:	4638      	mov	r0, r7
 800ca62:	f7ff ff27 	bl	800c8b4 <__i2b>
 800ca66:	2300      	movs	r3, #0
 800ca68:	6438      	str	r0, [r7, #64]	@ 0x40
 800ca6a:	4604      	mov	r4, r0
 800ca6c:	6003      	str	r3, [r0, #0]
 800ca6e:	f04f 0900 	mov.w	r9, #0
 800ca72:	07eb      	lsls	r3, r5, #31
 800ca74:	d50a      	bpl.n	800ca8c <__pow5mult+0x58>
 800ca76:	4631      	mov	r1, r6
 800ca78:	4622      	mov	r2, r4
 800ca7a:	4638      	mov	r0, r7
 800ca7c:	f7ff ff30 	bl	800c8e0 <__multiply>
 800ca80:	4631      	mov	r1, r6
 800ca82:	4680      	mov	r8, r0
 800ca84:	4638      	mov	r0, r7
 800ca86:	f7ff fe79 	bl	800c77c <_Bfree>
 800ca8a:	4646      	mov	r6, r8
 800ca8c:	106d      	asrs	r5, r5, #1
 800ca8e:	d00b      	beq.n	800caa8 <__pow5mult+0x74>
 800ca90:	6820      	ldr	r0, [r4, #0]
 800ca92:	b938      	cbnz	r0, 800caa4 <__pow5mult+0x70>
 800ca94:	4622      	mov	r2, r4
 800ca96:	4621      	mov	r1, r4
 800ca98:	4638      	mov	r0, r7
 800ca9a:	f7ff ff21 	bl	800c8e0 <__multiply>
 800ca9e:	6020      	str	r0, [r4, #0]
 800caa0:	f8c0 9000 	str.w	r9, [r0]
 800caa4:	4604      	mov	r4, r0
 800caa6:	e7e4      	b.n	800ca72 <__pow5mult+0x3e>
 800caa8:	4630      	mov	r0, r6
 800caaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800caae:	bf00      	nop
 800cab0:	0808e760 	.word	0x0808e760

0800cab4 <__lshift>:
 800cab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cab8:	460c      	mov	r4, r1
 800caba:	6849      	ldr	r1, [r1, #4]
 800cabc:	6923      	ldr	r3, [r4, #16]
 800cabe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cac2:	68a3      	ldr	r3, [r4, #8]
 800cac4:	4607      	mov	r7, r0
 800cac6:	4691      	mov	r9, r2
 800cac8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cacc:	f108 0601 	add.w	r6, r8, #1
 800cad0:	42b3      	cmp	r3, r6
 800cad2:	db0b      	blt.n	800caec <__lshift+0x38>
 800cad4:	4638      	mov	r0, r7
 800cad6:	f7ff fe2c 	bl	800c732 <_Balloc>
 800cada:	4605      	mov	r5, r0
 800cadc:	b948      	cbnz	r0, 800caf2 <__lshift+0x3e>
 800cade:	4602      	mov	r2, r0
 800cae0:	4b28      	ldr	r3, [pc, #160]	@ (800cb84 <__lshift+0xd0>)
 800cae2:	4829      	ldr	r0, [pc, #164]	@ (800cb88 <__lshift+0xd4>)
 800cae4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cae8:	f000 f95e 	bl	800cda8 <__assert_func>
 800caec:	3101      	adds	r1, #1
 800caee:	005b      	lsls	r3, r3, #1
 800caf0:	e7ee      	b.n	800cad0 <__lshift+0x1c>
 800caf2:	2300      	movs	r3, #0
 800caf4:	f100 0114 	add.w	r1, r0, #20
 800caf8:	f100 0210 	add.w	r2, r0, #16
 800cafc:	4618      	mov	r0, r3
 800cafe:	4553      	cmp	r3, sl
 800cb00:	db33      	blt.n	800cb6a <__lshift+0xb6>
 800cb02:	6920      	ldr	r0, [r4, #16]
 800cb04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cb08:	f104 0314 	add.w	r3, r4, #20
 800cb0c:	f019 091f 	ands.w	r9, r9, #31
 800cb10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cb14:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cb18:	d02b      	beq.n	800cb72 <__lshift+0xbe>
 800cb1a:	f1c9 0e20 	rsb	lr, r9, #32
 800cb1e:	468a      	mov	sl, r1
 800cb20:	2200      	movs	r2, #0
 800cb22:	6818      	ldr	r0, [r3, #0]
 800cb24:	fa00 f009 	lsl.w	r0, r0, r9
 800cb28:	4310      	orrs	r0, r2
 800cb2a:	f84a 0b04 	str.w	r0, [sl], #4
 800cb2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb32:	459c      	cmp	ip, r3
 800cb34:	fa22 f20e 	lsr.w	r2, r2, lr
 800cb38:	d8f3      	bhi.n	800cb22 <__lshift+0x6e>
 800cb3a:	ebac 0304 	sub.w	r3, ip, r4
 800cb3e:	3b15      	subs	r3, #21
 800cb40:	f023 0303 	bic.w	r3, r3, #3
 800cb44:	3304      	adds	r3, #4
 800cb46:	f104 0015 	add.w	r0, r4, #21
 800cb4a:	4584      	cmp	ip, r0
 800cb4c:	bf38      	it	cc
 800cb4e:	2304      	movcc	r3, #4
 800cb50:	50ca      	str	r2, [r1, r3]
 800cb52:	b10a      	cbz	r2, 800cb58 <__lshift+0xa4>
 800cb54:	f108 0602 	add.w	r6, r8, #2
 800cb58:	3e01      	subs	r6, #1
 800cb5a:	4638      	mov	r0, r7
 800cb5c:	612e      	str	r6, [r5, #16]
 800cb5e:	4621      	mov	r1, r4
 800cb60:	f7ff fe0c 	bl	800c77c <_Bfree>
 800cb64:	4628      	mov	r0, r5
 800cb66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb6a:	f842 0f04 	str.w	r0, [r2, #4]!
 800cb6e:	3301      	adds	r3, #1
 800cb70:	e7c5      	b.n	800cafe <__lshift+0x4a>
 800cb72:	3904      	subs	r1, #4
 800cb74:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb78:	f841 2f04 	str.w	r2, [r1, #4]!
 800cb7c:	459c      	cmp	ip, r3
 800cb7e:	d8f9      	bhi.n	800cb74 <__lshift+0xc0>
 800cb80:	e7ea      	b.n	800cb58 <__lshift+0xa4>
 800cb82:	bf00      	nop
 800cb84:	0808e69d 	.word	0x0808e69d
 800cb88:	0808e706 	.word	0x0808e706

0800cb8c <__mcmp>:
 800cb8c:	690a      	ldr	r2, [r1, #16]
 800cb8e:	4603      	mov	r3, r0
 800cb90:	6900      	ldr	r0, [r0, #16]
 800cb92:	1a80      	subs	r0, r0, r2
 800cb94:	b530      	push	{r4, r5, lr}
 800cb96:	d10e      	bne.n	800cbb6 <__mcmp+0x2a>
 800cb98:	3314      	adds	r3, #20
 800cb9a:	3114      	adds	r1, #20
 800cb9c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cba0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cba4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cba8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cbac:	4295      	cmp	r5, r2
 800cbae:	d003      	beq.n	800cbb8 <__mcmp+0x2c>
 800cbb0:	d205      	bcs.n	800cbbe <__mcmp+0x32>
 800cbb2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cbb6:	bd30      	pop	{r4, r5, pc}
 800cbb8:	42a3      	cmp	r3, r4
 800cbba:	d3f3      	bcc.n	800cba4 <__mcmp+0x18>
 800cbbc:	e7fb      	b.n	800cbb6 <__mcmp+0x2a>
 800cbbe:	2001      	movs	r0, #1
 800cbc0:	e7f9      	b.n	800cbb6 <__mcmp+0x2a>
	...

0800cbc4 <__mdiff>:
 800cbc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbc8:	4689      	mov	r9, r1
 800cbca:	4606      	mov	r6, r0
 800cbcc:	4611      	mov	r1, r2
 800cbce:	4648      	mov	r0, r9
 800cbd0:	4614      	mov	r4, r2
 800cbd2:	f7ff ffdb 	bl	800cb8c <__mcmp>
 800cbd6:	1e05      	subs	r5, r0, #0
 800cbd8:	d112      	bne.n	800cc00 <__mdiff+0x3c>
 800cbda:	4629      	mov	r1, r5
 800cbdc:	4630      	mov	r0, r6
 800cbde:	f7ff fda8 	bl	800c732 <_Balloc>
 800cbe2:	4602      	mov	r2, r0
 800cbe4:	b928      	cbnz	r0, 800cbf2 <__mdiff+0x2e>
 800cbe6:	4b3f      	ldr	r3, [pc, #252]	@ (800cce4 <__mdiff+0x120>)
 800cbe8:	f240 2137 	movw	r1, #567	@ 0x237
 800cbec:	483e      	ldr	r0, [pc, #248]	@ (800cce8 <__mdiff+0x124>)
 800cbee:	f000 f8db 	bl	800cda8 <__assert_func>
 800cbf2:	2301      	movs	r3, #1
 800cbf4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cbf8:	4610      	mov	r0, r2
 800cbfa:	b003      	add	sp, #12
 800cbfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc00:	bfbc      	itt	lt
 800cc02:	464b      	movlt	r3, r9
 800cc04:	46a1      	movlt	r9, r4
 800cc06:	4630      	mov	r0, r6
 800cc08:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cc0c:	bfba      	itte	lt
 800cc0e:	461c      	movlt	r4, r3
 800cc10:	2501      	movlt	r5, #1
 800cc12:	2500      	movge	r5, #0
 800cc14:	f7ff fd8d 	bl	800c732 <_Balloc>
 800cc18:	4602      	mov	r2, r0
 800cc1a:	b918      	cbnz	r0, 800cc24 <__mdiff+0x60>
 800cc1c:	4b31      	ldr	r3, [pc, #196]	@ (800cce4 <__mdiff+0x120>)
 800cc1e:	f240 2145 	movw	r1, #581	@ 0x245
 800cc22:	e7e3      	b.n	800cbec <__mdiff+0x28>
 800cc24:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cc28:	6926      	ldr	r6, [r4, #16]
 800cc2a:	60c5      	str	r5, [r0, #12]
 800cc2c:	f109 0310 	add.w	r3, r9, #16
 800cc30:	f109 0514 	add.w	r5, r9, #20
 800cc34:	f104 0e14 	add.w	lr, r4, #20
 800cc38:	f100 0b14 	add.w	fp, r0, #20
 800cc3c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cc40:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cc44:	9301      	str	r3, [sp, #4]
 800cc46:	46d9      	mov	r9, fp
 800cc48:	f04f 0c00 	mov.w	ip, #0
 800cc4c:	9b01      	ldr	r3, [sp, #4]
 800cc4e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cc52:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cc56:	9301      	str	r3, [sp, #4]
 800cc58:	fa1f f38a 	uxth.w	r3, sl
 800cc5c:	4619      	mov	r1, r3
 800cc5e:	b283      	uxth	r3, r0
 800cc60:	1acb      	subs	r3, r1, r3
 800cc62:	0c00      	lsrs	r0, r0, #16
 800cc64:	4463      	add	r3, ip
 800cc66:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cc6a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cc6e:	b29b      	uxth	r3, r3
 800cc70:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cc74:	4576      	cmp	r6, lr
 800cc76:	f849 3b04 	str.w	r3, [r9], #4
 800cc7a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cc7e:	d8e5      	bhi.n	800cc4c <__mdiff+0x88>
 800cc80:	1b33      	subs	r3, r6, r4
 800cc82:	3b15      	subs	r3, #21
 800cc84:	f023 0303 	bic.w	r3, r3, #3
 800cc88:	3415      	adds	r4, #21
 800cc8a:	3304      	adds	r3, #4
 800cc8c:	42a6      	cmp	r6, r4
 800cc8e:	bf38      	it	cc
 800cc90:	2304      	movcc	r3, #4
 800cc92:	441d      	add	r5, r3
 800cc94:	445b      	add	r3, fp
 800cc96:	461e      	mov	r6, r3
 800cc98:	462c      	mov	r4, r5
 800cc9a:	4544      	cmp	r4, r8
 800cc9c:	d30e      	bcc.n	800ccbc <__mdiff+0xf8>
 800cc9e:	f108 0103 	add.w	r1, r8, #3
 800cca2:	1b49      	subs	r1, r1, r5
 800cca4:	f021 0103 	bic.w	r1, r1, #3
 800cca8:	3d03      	subs	r5, #3
 800ccaa:	45a8      	cmp	r8, r5
 800ccac:	bf38      	it	cc
 800ccae:	2100      	movcc	r1, #0
 800ccb0:	440b      	add	r3, r1
 800ccb2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ccb6:	b191      	cbz	r1, 800ccde <__mdiff+0x11a>
 800ccb8:	6117      	str	r7, [r2, #16]
 800ccba:	e79d      	b.n	800cbf8 <__mdiff+0x34>
 800ccbc:	f854 1b04 	ldr.w	r1, [r4], #4
 800ccc0:	46e6      	mov	lr, ip
 800ccc2:	0c08      	lsrs	r0, r1, #16
 800ccc4:	fa1c fc81 	uxtah	ip, ip, r1
 800ccc8:	4471      	add	r1, lr
 800ccca:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ccce:	b289      	uxth	r1, r1
 800ccd0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ccd4:	f846 1b04 	str.w	r1, [r6], #4
 800ccd8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ccdc:	e7dd      	b.n	800cc9a <__mdiff+0xd6>
 800ccde:	3f01      	subs	r7, #1
 800cce0:	e7e7      	b.n	800ccb2 <__mdiff+0xee>
 800cce2:	bf00      	nop
 800cce4:	0808e69d 	.word	0x0808e69d
 800cce8:	0808e706 	.word	0x0808e706

0800ccec <__d2b>:
 800ccec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ccf0:	460f      	mov	r7, r1
 800ccf2:	2101      	movs	r1, #1
 800ccf4:	ec59 8b10 	vmov	r8, r9, d0
 800ccf8:	4616      	mov	r6, r2
 800ccfa:	f7ff fd1a 	bl	800c732 <_Balloc>
 800ccfe:	4604      	mov	r4, r0
 800cd00:	b930      	cbnz	r0, 800cd10 <__d2b+0x24>
 800cd02:	4602      	mov	r2, r0
 800cd04:	4b23      	ldr	r3, [pc, #140]	@ (800cd94 <__d2b+0xa8>)
 800cd06:	4824      	ldr	r0, [pc, #144]	@ (800cd98 <__d2b+0xac>)
 800cd08:	f240 310f 	movw	r1, #783	@ 0x30f
 800cd0c:	f000 f84c 	bl	800cda8 <__assert_func>
 800cd10:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cd14:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cd18:	b10d      	cbz	r5, 800cd1e <__d2b+0x32>
 800cd1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cd1e:	9301      	str	r3, [sp, #4]
 800cd20:	f1b8 0300 	subs.w	r3, r8, #0
 800cd24:	d023      	beq.n	800cd6e <__d2b+0x82>
 800cd26:	4668      	mov	r0, sp
 800cd28:	9300      	str	r3, [sp, #0]
 800cd2a:	f7ff fd96 	bl	800c85a <__lo0bits>
 800cd2e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cd32:	b1d0      	cbz	r0, 800cd6a <__d2b+0x7e>
 800cd34:	f1c0 0320 	rsb	r3, r0, #32
 800cd38:	fa02 f303 	lsl.w	r3, r2, r3
 800cd3c:	430b      	orrs	r3, r1
 800cd3e:	40c2      	lsrs	r2, r0
 800cd40:	6163      	str	r3, [r4, #20]
 800cd42:	9201      	str	r2, [sp, #4]
 800cd44:	9b01      	ldr	r3, [sp, #4]
 800cd46:	61a3      	str	r3, [r4, #24]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	bf0c      	ite	eq
 800cd4c:	2201      	moveq	r2, #1
 800cd4e:	2202      	movne	r2, #2
 800cd50:	6122      	str	r2, [r4, #16]
 800cd52:	b1a5      	cbz	r5, 800cd7e <__d2b+0x92>
 800cd54:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cd58:	4405      	add	r5, r0
 800cd5a:	603d      	str	r5, [r7, #0]
 800cd5c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cd60:	6030      	str	r0, [r6, #0]
 800cd62:	4620      	mov	r0, r4
 800cd64:	b003      	add	sp, #12
 800cd66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd6a:	6161      	str	r1, [r4, #20]
 800cd6c:	e7ea      	b.n	800cd44 <__d2b+0x58>
 800cd6e:	a801      	add	r0, sp, #4
 800cd70:	f7ff fd73 	bl	800c85a <__lo0bits>
 800cd74:	9b01      	ldr	r3, [sp, #4]
 800cd76:	6163      	str	r3, [r4, #20]
 800cd78:	3020      	adds	r0, #32
 800cd7a:	2201      	movs	r2, #1
 800cd7c:	e7e8      	b.n	800cd50 <__d2b+0x64>
 800cd7e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cd82:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cd86:	6038      	str	r0, [r7, #0]
 800cd88:	6918      	ldr	r0, [r3, #16]
 800cd8a:	f7ff fd47 	bl	800c81c <__hi0bits>
 800cd8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cd92:	e7e5      	b.n	800cd60 <__d2b+0x74>
 800cd94:	0808e69d 	.word	0x0808e69d
 800cd98:	0808e706 	.word	0x0808e706

0800cd9c <__locale_mb_cur_max>:
 800cd9c:	4b01      	ldr	r3, [pc, #4]	@ (800cda4 <__locale_mb_cur_max+0x8>)
 800cd9e:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
 800cda2:	4770      	bx	lr
 800cda4:	2000056c 	.word	0x2000056c

0800cda8 <__assert_func>:
 800cda8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cdaa:	4614      	mov	r4, r2
 800cdac:	461a      	mov	r2, r3
 800cdae:	4b09      	ldr	r3, [pc, #36]	@ (800cdd4 <__assert_func+0x2c>)
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	4605      	mov	r5, r0
 800cdb4:	68d8      	ldr	r0, [r3, #12]
 800cdb6:	b954      	cbnz	r4, 800cdce <__assert_func+0x26>
 800cdb8:	4b07      	ldr	r3, [pc, #28]	@ (800cdd8 <__assert_func+0x30>)
 800cdba:	461c      	mov	r4, r3
 800cdbc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cdc0:	9100      	str	r1, [sp, #0]
 800cdc2:	462b      	mov	r3, r5
 800cdc4:	4905      	ldr	r1, [pc, #20]	@ (800cddc <__assert_func+0x34>)
 800cdc6:	f000 f843 	bl	800ce50 <fiprintf>
 800cdca:	f7fc f8b1 	bl	8008f30 <abort>
 800cdce:	4b04      	ldr	r3, [pc, #16]	@ (800cde0 <__assert_func+0x38>)
 800cdd0:	e7f4      	b.n	800cdbc <__assert_func+0x14>
 800cdd2:	bf00      	nop
 800cdd4:	20000440 	.word	0x20000440
 800cdd8:	0808e9a6 	.word	0x0808e9a6
 800cddc:	0808e978 	.word	0x0808e978
 800cde0:	0808e96b 	.word	0x0808e96b

0800cde4 <_calloc_r>:
 800cde4:	b538      	push	{r3, r4, r5, lr}
 800cde6:	fba1 1502 	umull	r1, r5, r1, r2
 800cdea:	b935      	cbnz	r5, 800cdfa <_calloc_r+0x16>
 800cdec:	f7fc f8b8 	bl	8008f60 <_malloc_r>
 800cdf0:	4604      	mov	r4, r0
 800cdf2:	b938      	cbnz	r0, 800ce04 <_calloc_r+0x20>
 800cdf4:	2400      	movs	r4, #0
 800cdf6:	4620      	mov	r0, r4
 800cdf8:	bd38      	pop	{r3, r4, r5, pc}
 800cdfa:	f7fe fd99 	bl	800b930 <__errno>
 800cdfe:	230c      	movs	r3, #12
 800ce00:	6003      	str	r3, [r0, #0]
 800ce02:	e7f7      	b.n	800cdf4 <_calloc_r+0x10>
 800ce04:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800ce08:	f022 0203 	bic.w	r2, r2, #3
 800ce0c:	3a04      	subs	r2, #4
 800ce0e:	2a24      	cmp	r2, #36	@ 0x24
 800ce10:	d819      	bhi.n	800ce46 <_calloc_r+0x62>
 800ce12:	2a13      	cmp	r2, #19
 800ce14:	d915      	bls.n	800ce42 <_calloc_r+0x5e>
 800ce16:	2a1b      	cmp	r2, #27
 800ce18:	e9c0 5500 	strd	r5, r5, [r0]
 800ce1c:	d806      	bhi.n	800ce2c <_calloc_r+0x48>
 800ce1e:	f100 0308 	add.w	r3, r0, #8
 800ce22:	2200      	movs	r2, #0
 800ce24:	e9c3 2200 	strd	r2, r2, [r3]
 800ce28:	609a      	str	r2, [r3, #8]
 800ce2a:	e7e4      	b.n	800cdf6 <_calloc_r+0x12>
 800ce2c:	2a24      	cmp	r2, #36	@ 0x24
 800ce2e:	e9c0 5502 	strd	r5, r5, [r0, #8]
 800ce32:	bf11      	iteee	ne
 800ce34:	f100 0310 	addne.w	r3, r0, #16
 800ce38:	6105      	streq	r5, [r0, #16]
 800ce3a:	f100 0318 	addeq.w	r3, r0, #24
 800ce3e:	6145      	streq	r5, [r0, #20]
 800ce40:	e7ef      	b.n	800ce22 <_calloc_r+0x3e>
 800ce42:	4603      	mov	r3, r0
 800ce44:	e7ed      	b.n	800ce22 <_calloc_r+0x3e>
 800ce46:	4629      	mov	r1, r5
 800ce48:	f7fc ff16 	bl	8009c78 <memset>
 800ce4c:	e7d3      	b.n	800cdf6 <_calloc_r+0x12>
	...

0800ce50 <fiprintf>:
 800ce50:	b40e      	push	{r1, r2, r3}
 800ce52:	b503      	push	{r0, r1, lr}
 800ce54:	4601      	mov	r1, r0
 800ce56:	ab03      	add	r3, sp, #12
 800ce58:	4805      	ldr	r0, [pc, #20]	@ (800ce70 <fiprintf+0x20>)
 800ce5a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce5e:	6800      	ldr	r0, [r0, #0]
 800ce60:	9301      	str	r3, [sp, #4]
 800ce62:	f000 f84b 	bl	800cefc <_vfiprintf_r>
 800ce66:	b002      	add	sp, #8
 800ce68:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce6c:	b003      	add	sp, #12
 800ce6e:	4770      	bx	lr
 800ce70:	20000440 	.word	0x20000440

0800ce74 <__ascii_mbtowc>:
 800ce74:	b082      	sub	sp, #8
 800ce76:	b901      	cbnz	r1, 800ce7a <__ascii_mbtowc+0x6>
 800ce78:	a901      	add	r1, sp, #4
 800ce7a:	b142      	cbz	r2, 800ce8e <__ascii_mbtowc+0x1a>
 800ce7c:	b14b      	cbz	r3, 800ce92 <__ascii_mbtowc+0x1e>
 800ce7e:	7813      	ldrb	r3, [r2, #0]
 800ce80:	600b      	str	r3, [r1, #0]
 800ce82:	7812      	ldrb	r2, [r2, #0]
 800ce84:	1e10      	subs	r0, r2, #0
 800ce86:	bf18      	it	ne
 800ce88:	2001      	movne	r0, #1
 800ce8a:	b002      	add	sp, #8
 800ce8c:	4770      	bx	lr
 800ce8e:	4610      	mov	r0, r2
 800ce90:	e7fb      	b.n	800ce8a <__ascii_mbtowc+0x16>
 800ce92:	f06f 0001 	mvn.w	r0, #1
 800ce96:	e7f8      	b.n	800ce8a <__ascii_mbtowc+0x16>

0800ce98 <__sprint_r>:
 800ce98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce9c:	6893      	ldr	r3, [r2, #8]
 800ce9e:	4680      	mov	r8, r0
 800cea0:	460e      	mov	r6, r1
 800cea2:	4614      	mov	r4, r2
 800cea4:	b343      	cbz	r3, 800cef8 <__sprint_r+0x60>
 800cea6:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 800cea8:	049d      	lsls	r5, r3, #18
 800ceaa:	d522      	bpl.n	800cef2 <__sprint_r+0x5a>
 800ceac:	6815      	ldr	r5, [r2, #0]
 800ceae:	68a0      	ldr	r0, [r4, #8]
 800ceb0:	3508      	adds	r5, #8
 800ceb2:	b928      	cbnz	r0, 800cec0 <__sprint_r+0x28>
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	60a3      	str	r3, [r4, #8]
 800ceb8:	2300      	movs	r3, #0
 800ceba:	6063      	str	r3, [r4, #4]
 800cebc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cec0:	e955 b702 	ldrd	fp, r7, [r5, #-8]
 800cec4:	f04f 0900 	mov.w	r9, #0
 800cec8:	ea4f 0a97 	mov.w	sl, r7, lsr #2
 800cecc:	45ca      	cmp	sl, r9
 800cece:	dc05      	bgt.n	800cedc <__sprint_r+0x44>
 800ced0:	68a3      	ldr	r3, [r4, #8]
 800ced2:	f027 0703 	bic.w	r7, r7, #3
 800ced6:	1bdb      	subs	r3, r3, r7
 800ced8:	60a3      	str	r3, [r4, #8]
 800ceda:	e7e8      	b.n	800ceae <__sprint_r+0x16>
 800cedc:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800cee0:	4632      	mov	r2, r6
 800cee2:	4640      	mov	r0, r8
 800cee4:	f000 fd20 	bl	800d928 <_fputwc_r>
 800cee8:	1c43      	adds	r3, r0, #1
 800ceea:	d0e3      	beq.n	800ceb4 <__sprint_r+0x1c>
 800ceec:	f109 0901 	add.w	r9, r9, #1
 800cef0:	e7ec      	b.n	800cecc <__sprint_r+0x34>
 800cef2:	f7fc fce7 	bl	80098c4 <__sfvwrite_r>
 800cef6:	e7dd      	b.n	800ceb4 <__sprint_r+0x1c>
 800cef8:	4618      	mov	r0, r3
 800cefa:	e7dd      	b.n	800ceb8 <__sprint_r+0x20>

0800cefc <_vfiprintf_r>:
 800cefc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf00:	b0bb      	sub	sp, #236	@ 0xec
 800cf02:	460f      	mov	r7, r1
 800cf04:	4693      	mov	fp, r2
 800cf06:	461c      	mov	r4, r3
 800cf08:	461d      	mov	r5, r3
 800cf0a:	9000      	str	r0, [sp, #0]
 800cf0c:	b118      	cbz	r0, 800cf16 <_vfiprintf_r+0x1a>
 800cf0e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800cf10:	b90b      	cbnz	r3, 800cf16 <_vfiprintf_r+0x1a>
 800cf12:	f7fc fcbf 	bl	8009894 <__sinit>
 800cf16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cf18:	07db      	lsls	r3, r3, #31
 800cf1a:	d405      	bmi.n	800cf28 <_vfiprintf_r+0x2c>
 800cf1c:	89bb      	ldrh	r3, [r7, #12]
 800cf1e:	059e      	lsls	r6, r3, #22
 800cf20:	d402      	bmi.n	800cf28 <_vfiprintf_r+0x2c>
 800cf22:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800cf24:	f7fc ff3e 	bl	8009da4 <__retarget_lock_acquire_recursive>
 800cf28:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800cf2c:	0498      	lsls	r0, r3, #18
 800cf2e:	d406      	bmi.n	800cf3e <_vfiprintf_r+0x42>
 800cf30:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800cf34:	81bb      	strh	r3, [r7, #12]
 800cf36:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cf38:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800cf3c:	667b      	str	r3, [r7, #100]	@ 0x64
 800cf3e:	89bb      	ldrh	r3, [r7, #12]
 800cf40:	0719      	lsls	r1, r3, #28
 800cf42:	d501      	bpl.n	800cf48 <_vfiprintf_r+0x4c>
 800cf44:	693b      	ldr	r3, [r7, #16]
 800cf46:	b9ab      	cbnz	r3, 800cf74 <_vfiprintf_r+0x78>
 800cf48:	9800      	ldr	r0, [sp, #0]
 800cf4a:	4639      	mov	r1, r7
 800cf4c:	f7fc fe24 	bl	8009b98 <__swsetup_r>
 800cf50:	b180      	cbz	r0, 800cf74 <_vfiprintf_r+0x78>
 800cf52:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cf54:	07da      	lsls	r2, r3, #31
 800cf56:	d506      	bpl.n	800cf66 <_vfiprintf_r+0x6a>
 800cf58:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cf5c:	9303      	str	r3, [sp, #12]
 800cf5e:	9803      	ldr	r0, [sp, #12]
 800cf60:	b03b      	add	sp, #236	@ 0xec
 800cf62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf66:	89bb      	ldrh	r3, [r7, #12]
 800cf68:	059b      	lsls	r3, r3, #22
 800cf6a:	d4f5      	bmi.n	800cf58 <_vfiprintf_r+0x5c>
 800cf6c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800cf6e:	f7fc ff1a 	bl	8009da6 <__retarget_lock_release_recursive>
 800cf72:	e7f1      	b.n	800cf58 <_vfiprintf_r+0x5c>
 800cf74:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800cf78:	f003 021a 	and.w	r2, r3, #26
 800cf7c:	2a0a      	cmp	r2, #10
 800cf7e:	d114      	bne.n	800cfaa <_vfiprintf_r+0xae>
 800cf80:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800cf84:	2a00      	cmp	r2, #0
 800cf86:	db10      	blt.n	800cfaa <_vfiprintf_r+0xae>
 800cf88:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800cf8a:	07d6      	lsls	r6, r2, #31
 800cf8c:	d404      	bmi.n	800cf98 <_vfiprintf_r+0x9c>
 800cf8e:	059d      	lsls	r5, r3, #22
 800cf90:	d402      	bmi.n	800cf98 <_vfiprintf_r+0x9c>
 800cf92:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800cf94:	f7fc ff07 	bl	8009da6 <__retarget_lock_release_recursive>
 800cf98:	9800      	ldr	r0, [sp, #0]
 800cf9a:	4623      	mov	r3, r4
 800cf9c:	465a      	mov	r2, fp
 800cf9e:	4639      	mov	r1, r7
 800cfa0:	b03b      	add	sp, #236	@ 0xec
 800cfa2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfa6:	f000 bc31 	b.w	800d80c <__sbprintf>
 800cfaa:	2300      	movs	r3, #0
 800cfac:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 800cfb0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800cfb4:	ae11      	add	r6, sp, #68	@ 0x44
 800cfb6:	960e      	str	r6, [sp, #56]	@ 0x38
 800cfb8:	9307      	str	r3, [sp, #28]
 800cfba:	9309      	str	r3, [sp, #36]	@ 0x24
 800cfbc:	9303      	str	r3, [sp, #12]
 800cfbe:	465b      	mov	r3, fp
 800cfc0:	461c      	mov	r4, r3
 800cfc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cfc6:	b10a      	cbz	r2, 800cfcc <_vfiprintf_r+0xd0>
 800cfc8:	2a25      	cmp	r2, #37	@ 0x25
 800cfca:	d1f9      	bne.n	800cfc0 <_vfiprintf_r+0xc4>
 800cfcc:	ebb4 080b 	subs.w	r8, r4, fp
 800cfd0:	d00d      	beq.n	800cfee <_vfiprintf_r+0xf2>
 800cfd2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cfd4:	4443      	add	r3, r8
 800cfd6:	9310      	str	r3, [sp, #64]	@ 0x40
 800cfd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cfda:	3301      	adds	r3, #1
 800cfdc:	2b07      	cmp	r3, #7
 800cfde:	e9c6 b800 	strd	fp, r8, [r6]
 800cfe2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cfe4:	dc75      	bgt.n	800d0d2 <_vfiprintf_r+0x1d6>
 800cfe6:	3608      	adds	r6, #8
 800cfe8:	9b03      	ldr	r3, [sp, #12]
 800cfea:	4443      	add	r3, r8
 800cfec:	9303      	str	r3, [sp, #12]
 800cfee:	7823      	ldrb	r3, [r4, #0]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	f000 83cd 	beq.w	800d790 <_vfiprintf_r+0x894>
 800cff6:	2300      	movs	r3, #0
 800cff8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cffc:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800d000:	3401      	adds	r4, #1
 800d002:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 800d006:	469a      	mov	sl, r3
 800d008:	46a3      	mov	fp, r4
 800d00a:	f81b 3b01 	ldrb.w	r3, [fp], #1
 800d00e:	f1a3 0220 	sub.w	r2, r3, #32
 800d012:	2a5a      	cmp	r2, #90	@ 0x5a
 800d014:	f200 8316 	bhi.w	800d644 <_vfiprintf_r+0x748>
 800d018:	e8df f012 	tbh	[pc, r2, lsl #1]
 800d01c:	0314009a 	.word	0x0314009a
 800d020:	00a20314 	.word	0x00a20314
 800d024:	03140314 	.word	0x03140314
 800d028:	00820314 	.word	0x00820314
 800d02c:	03140314 	.word	0x03140314
 800d030:	00af00a5 	.word	0x00af00a5
 800d034:	00ac0314 	.word	0x00ac0314
 800d038:	031400b1 	.word	0x031400b1
 800d03c:	00d000cd 	.word	0x00d000cd
 800d040:	00d000d0 	.word	0x00d000d0
 800d044:	00d000d0 	.word	0x00d000d0
 800d048:	00d000d0 	.word	0x00d000d0
 800d04c:	00d000d0 	.word	0x00d000d0
 800d050:	03140314 	.word	0x03140314
 800d054:	03140314 	.word	0x03140314
 800d058:	03140314 	.word	0x03140314
 800d05c:	03140314 	.word	0x03140314
 800d060:	00f70314 	.word	0x00f70314
 800d064:	03140104 	.word	0x03140104
 800d068:	03140314 	.word	0x03140314
 800d06c:	03140314 	.word	0x03140314
 800d070:	03140314 	.word	0x03140314
 800d074:	03140314 	.word	0x03140314
 800d078:	01520314 	.word	0x01520314
 800d07c:	03140314 	.word	0x03140314
 800d080:	019a0314 	.word	0x019a0314
 800d084:	027a0314 	.word	0x027a0314
 800d088:	03140314 	.word	0x03140314
 800d08c:	0314029a 	.word	0x0314029a
 800d090:	03140314 	.word	0x03140314
 800d094:	03140314 	.word	0x03140314
 800d098:	03140314 	.word	0x03140314
 800d09c:	03140314 	.word	0x03140314
 800d0a0:	00f70314 	.word	0x00f70314
 800d0a4:	03140106 	.word	0x03140106
 800d0a8:	03140314 	.word	0x03140314
 800d0ac:	010600e0 	.word	0x010600e0
 800d0b0:	031400f1 	.word	0x031400f1
 800d0b4:	031400eb 	.word	0x031400eb
 800d0b8:	01540132 	.word	0x01540132
 800d0bc:	00f10189 	.word	0x00f10189
 800d0c0:	019a0314 	.word	0x019a0314
 800d0c4:	027c0098 	.word	0x027c0098
 800d0c8:	03140314 	.word	0x03140314
 800d0cc:	03140065 	.word	0x03140065
 800d0d0:	0098      	.short	0x0098
 800d0d2:	9800      	ldr	r0, [sp, #0]
 800d0d4:	aa0e      	add	r2, sp, #56	@ 0x38
 800d0d6:	4639      	mov	r1, r7
 800d0d8:	f7ff fede 	bl	800ce98 <__sprint_r>
 800d0dc:	2800      	cmp	r0, #0
 800d0de:	f040 8336 	bne.w	800d74e <_vfiprintf_r+0x852>
 800d0e2:	ae11      	add	r6, sp, #68	@ 0x44
 800d0e4:	e780      	b.n	800cfe8 <_vfiprintf_r+0xec>
 800d0e6:	4a99      	ldr	r2, [pc, #612]	@ (800d34c <_vfiprintf_r+0x450>)
 800d0e8:	9205      	str	r2, [sp, #20]
 800d0ea:	f01a 0220 	ands.w	r2, sl, #32
 800d0ee:	f000 8231 	beq.w	800d554 <_vfiprintf_r+0x658>
 800d0f2:	3507      	adds	r5, #7
 800d0f4:	f025 0507 	bic.w	r5, r5, #7
 800d0f8:	46a8      	mov	r8, r5
 800d0fa:	686d      	ldr	r5, [r5, #4]
 800d0fc:	f858 4b08 	ldr.w	r4, [r8], #8
 800d100:	f01a 0f01 	tst.w	sl, #1
 800d104:	d009      	beq.n	800d11a <_vfiprintf_r+0x21e>
 800d106:	ea54 0205 	orrs.w	r2, r4, r5
 800d10a:	bf1f      	itttt	ne
 800d10c:	2230      	movne	r2, #48	@ 0x30
 800d10e:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 800d112:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 800d116:	f04a 0a02 	orrne.w	sl, sl, #2
 800d11a:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 800d11e:	e112      	b.n	800d346 <_vfiprintf_r+0x44a>
 800d120:	9800      	ldr	r0, [sp, #0]
 800d122:	f7fe fb99 	bl	800b858 <_localeconv_r>
 800d126:	6843      	ldr	r3, [r0, #4]
 800d128:	9309      	str	r3, [sp, #36]	@ 0x24
 800d12a:	4618      	mov	r0, r3
 800d12c:	f7f3 f8c0 	bl	80002b0 <strlen>
 800d130:	9007      	str	r0, [sp, #28]
 800d132:	9800      	ldr	r0, [sp, #0]
 800d134:	f7fe fb90 	bl	800b858 <_localeconv_r>
 800d138:	6883      	ldr	r3, [r0, #8]
 800d13a:	9306      	str	r3, [sp, #24]
 800d13c:	9b07      	ldr	r3, [sp, #28]
 800d13e:	b12b      	cbz	r3, 800d14c <_vfiprintf_r+0x250>
 800d140:	9b06      	ldr	r3, [sp, #24]
 800d142:	b11b      	cbz	r3, 800d14c <_vfiprintf_r+0x250>
 800d144:	781b      	ldrb	r3, [r3, #0]
 800d146:	b10b      	cbz	r3, 800d14c <_vfiprintf_r+0x250>
 800d148:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 800d14c:	465c      	mov	r4, fp
 800d14e:	e75b      	b.n	800d008 <_vfiprintf_r+0x10c>
 800d150:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800d154:	2b00      	cmp	r3, #0
 800d156:	d1f9      	bne.n	800d14c <_vfiprintf_r+0x250>
 800d158:	2320      	movs	r3, #32
 800d15a:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 800d15e:	e7f5      	b.n	800d14c <_vfiprintf_r+0x250>
 800d160:	f04a 0a01 	orr.w	sl, sl, #1
 800d164:	e7f2      	b.n	800d14c <_vfiprintf_r+0x250>
 800d166:	f855 3b04 	ldr.w	r3, [r5], #4
 800d16a:	9302      	str	r3, [sp, #8]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	daed      	bge.n	800d14c <_vfiprintf_r+0x250>
 800d170:	425b      	negs	r3, r3
 800d172:	9302      	str	r3, [sp, #8]
 800d174:	f04a 0a04 	orr.w	sl, sl, #4
 800d178:	e7e8      	b.n	800d14c <_vfiprintf_r+0x250>
 800d17a:	232b      	movs	r3, #43	@ 0x2b
 800d17c:	e7ed      	b.n	800d15a <_vfiprintf_r+0x25e>
 800d17e:	465a      	mov	r2, fp
 800d180:	f812 3b01 	ldrb.w	r3, [r2], #1
 800d184:	2b2a      	cmp	r3, #42	@ 0x2a
 800d186:	d112      	bne.n	800d1ae <_vfiprintf_r+0x2b2>
 800d188:	f855 3b04 	ldr.w	r3, [r5], #4
 800d18c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d190:	9301      	str	r3, [sp, #4]
 800d192:	4693      	mov	fp, r2
 800d194:	e7da      	b.n	800d14c <_vfiprintf_r+0x250>
 800d196:	9b01      	ldr	r3, [sp, #4]
 800d198:	fb00 1303 	mla	r3, r0, r3, r1
 800d19c:	9301      	str	r3, [sp, #4]
 800d19e:	f812 3b01 	ldrb.w	r3, [r2], #1
 800d1a2:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 800d1a6:	2909      	cmp	r1, #9
 800d1a8:	d9f5      	bls.n	800d196 <_vfiprintf_r+0x29a>
 800d1aa:	4693      	mov	fp, r2
 800d1ac:	e72f      	b.n	800d00e <_vfiprintf_r+0x112>
 800d1ae:	2100      	movs	r1, #0
 800d1b0:	9101      	str	r1, [sp, #4]
 800d1b2:	200a      	movs	r0, #10
 800d1b4:	e7f5      	b.n	800d1a2 <_vfiprintf_r+0x2a6>
 800d1b6:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 800d1ba:	e7c7      	b.n	800d14c <_vfiprintf_r+0x250>
 800d1bc:	2100      	movs	r1, #0
 800d1be:	465a      	mov	r2, fp
 800d1c0:	9102      	str	r1, [sp, #8]
 800d1c2:	200a      	movs	r0, #10
 800d1c4:	9902      	ldr	r1, [sp, #8]
 800d1c6:	3b30      	subs	r3, #48	@ 0x30
 800d1c8:	fb00 3301 	mla	r3, r0, r1, r3
 800d1cc:	9302      	str	r3, [sp, #8]
 800d1ce:	f812 3b01 	ldrb.w	r3, [r2], #1
 800d1d2:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 800d1d6:	2909      	cmp	r1, #9
 800d1d8:	d9f4      	bls.n	800d1c4 <_vfiprintf_r+0x2c8>
 800d1da:	e7e6      	b.n	800d1aa <_vfiprintf_r+0x2ae>
 800d1dc:	f89b 3000 	ldrb.w	r3, [fp]
 800d1e0:	2b68      	cmp	r3, #104	@ 0x68
 800d1e2:	bf06      	itte	eq
 800d1e4:	f10b 0b01 	addeq.w	fp, fp, #1
 800d1e8:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 800d1ec:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 800d1f0:	e7ac      	b.n	800d14c <_vfiprintf_r+0x250>
 800d1f2:	f89b 3000 	ldrb.w	r3, [fp]
 800d1f6:	2b6c      	cmp	r3, #108	@ 0x6c
 800d1f8:	d104      	bne.n	800d204 <_vfiprintf_r+0x308>
 800d1fa:	f10b 0b01 	add.w	fp, fp, #1
 800d1fe:	f04a 0a20 	orr.w	sl, sl, #32
 800d202:	e7a3      	b.n	800d14c <_vfiprintf_r+0x250>
 800d204:	f04a 0a10 	orr.w	sl, sl, #16
 800d208:	e7a0      	b.n	800d14c <_vfiprintf_r+0x250>
 800d20a:	46a8      	mov	r8, r5
 800d20c:	2400      	movs	r4, #0
 800d20e:	f858 3b04 	ldr.w	r3, [r8], #4
 800d212:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 800d216:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 800d21a:	2301      	movs	r3, #1
 800d21c:	9301      	str	r3, [sp, #4]
 800d21e:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 800d222:	e0ab      	b.n	800d37c <_vfiprintf_r+0x480>
 800d224:	f04a 0a10 	orr.w	sl, sl, #16
 800d228:	f01a 0f20 	tst.w	sl, #32
 800d22c:	d011      	beq.n	800d252 <_vfiprintf_r+0x356>
 800d22e:	3507      	adds	r5, #7
 800d230:	f025 0507 	bic.w	r5, r5, #7
 800d234:	46a8      	mov	r8, r5
 800d236:	686d      	ldr	r5, [r5, #4]
 800d238:	f858 4b08 	ldr.w	r4, [r8], #8
 800d23c:	2d00      	cmp	r5, #0
 800d23e:	da06      	bge.n	800d24e <_vfiprintf_r+0x352>
 800d240:	4264      	negs	r4, r4
 800d242:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 800d246:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800d24a:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 800d24e:	2301      	movs	r3, #1
 800d250:	e048      	b.n	800d2e4 <_vfiprintf_r+0x3e8>
 800d252:	46a8      	mov	r8, r5
 800d254:	f01a 0f10 	tst.w	sl, #16
 800d258:	f858 5b04 	ldr.w	r5, [r8], #4
 800d25c:	d002      	beq.n	800d264 <_vfiprintf_r+0x368>
 800d25e:	462c      	mov	r4, r5
 800d260:	17ed      	asrs	r5, r5, #31
 800d262:	e7eb      	b.n	800d23c <_vfiprintf_r+0x340>
 800d264:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 800d268:	d003      	beq.n	800d272 <_vfiprintf_r+0x376>
 800d26a:	b22c      	sxth	r4, r5
 800d26c:	f345 35c0 	sbfx	r5, r5, #15, #1
 800d270:	e7e4      	b.n	800d23c <_vfiprintf_r+0x340>
 800d272:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 800d276:	d0f2      	beq.n	800d25e <_vfiprintf_r+0x362>
 800d278:	b26c      	sxtb	r4, r5
 800d27a:	f345 15c0 	sbfx	r5, r5, #7, #1
 800d27e:	e7dd      	b.n	800d23c <_vfiprintf_r+0x340>
 800d280:	f01a 0f20 	tst.w	sl, #32
 800d284:	d007      	beq.n	800d296 <_vfiprintf_r+0x39a>
 800d286:	9a03      	ldr	r2, [sp, #12]
 800d288:	682b      	ldr	r3, [r5, #0]
 800d28a:	9903      	ldr	r1, [sp, #12]
 800d28c:	17d2      	asrs	r2, r2, #31
 800d28e:	e9c3 1200 	strd	r1, r2, [r3]
 800d292:	3504      	adds	r5, #4
 800d294:	e693      	b.n	800cfbe <_vfiprintf_r+0xc2>
 800d296:	f01a 0f10 	tst.w	sl, #16
 800d29a:	d003      	beq.n	800d2a4 <_vfiprintf_r+0x3a8>
 800d29c:	682b      	ldr	r3, [r5, #0]
 800d29e:	9a03      	ldr	r2, [sp, #12]
 800d2a0:	601a      	str	r2, [r3, #0]
 800d2a2:	e7f6      	b.n	800d292 <_vfiprintf_r+0x396>
 800d2a4:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 800d2a8:	d003      	beq.n	800d2b2 <_vfiprintf_r+0x3b6>
 800d2aa:	682b      	ldr	r3, [r5, #0]
 800d2ac:	9a03      	ldr	r2, [sp, #12]
 800d2ae:	801a      	strh	r2, [r3, #0]
 800d2b0:	e7ef      	b.n	800d292 <_vfiprintf_r+0x396>
 800d2b2:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 800d2b6:	d0f1      	beq.n	800d29c <_vfiprintf_r+0x3a0>
 800d2b8:	682b      	ldr	r3, [r5, #0]
 800d2ba:	9a03      	ldr	r2, [sp, #12]
 800d2bc:	701a      	strb	r2, [r3, #0]
 800d2be:	e7e8      	b.n	800d292 <_vfiprintf_r+0x396>
 800d2c0:	f04a 0a10 	orr.w	sl, sl, #16
 800d2c4:	f01a 0320 	ands.w	r3, sl, #32
 800d2c8:	d01f      	beq.n	800d30a <_vfiprintf_r+0x40e>
 800d2ca:	3507      	adds	r5, #7
 800d2cc:	f025 0507 	bic.w	r5, r5, #7
 800d2d0:	46a8      	mov	r8, r5
 800d2d2:	686d      	ldr	r5, [r5, #4]
 800d2d4:	f858 4b08 	ldr.w	r4, [r8], #8
 800d2d8:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 800d2dc:	2300      	movs	r3, #0
 800d2de:	2200      	movs	r2, #0
 800d2e0:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 800d2e4:	9a01      	ldr	r2, [sp, #4]
 800d2e6:	3201      	adds	r2, #1
 800d2e8:	f000 825f 	beq.w	800d7aa <_vfiprintf_r+0x8ae>
 800d2ec:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 800d2f0:	9204      	str	r2, [sp, #16]
 800d2f2:	ea54 0205 	orrs.w	r2, r4, r5
 800d2f6:	f040 825e 	bne.w	800d7b6 <_vfiprintf_r+0x8ba>
 800d2fa:	9a01      	ldr	r2, [sp, #4]
 800d2fc:	2a00      	cmp	r2, #0
 800d2fe:	f000 8198 	beq.w	800d632 <_vfiprintf_r+0x736>
 800d302:	2b01      	cmp	r3, #1
 800d304:	f040 825a 	bne.w	800d7bc <_vfiprintf_r+0x8c0>
 800d308:	e13b      	b.n	800d582 <_vfiprintf_r+0x686>
 800d30a:	46a8      	mov	r8, r5
 800d30c:	f01a 0510 	ands.w	r5, sl, #16
 800d310:	f858 4b04 	ldr.w	r4, [r8], #4
 800d314:	d001      	beq.n	800d31a <_vfiprintf_r+0x41e>
 800d316:	461d      	mov	r5, r3
 800d318:	e7de      	b.n	800d2d8 <_vfiprintf_r+0x3dc>
 800d31a:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 800d31e:	d001      	beq.n	800d324 <_vfiprintf_r+0x428>
 800d320:	b2a4      	uxth	r4, r4
 800d322:	e7d9      	b.n	800d2d8 <_vfiprintf_r+0x3dc>
 800d324:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 800d328:	d0d6      	beq.n	800d2d8 <_vfiprintf_r+0x3dc>
 800d32a:	b2e4      	uxtb	r4, r4
 800d32c:	e7f3      	b.n	800d316 <_vfiprintf_r+0x41a>
 800d32e:	46a8      	mov	r8, r5
 800d330:	f647 0330 	movw	r3, #30768	@ 0x7830
 800d334:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 800d338:	f858 4b04 	ldr.w	r4, [r8], #4
 800d33c:	4b03      	ldr	r3, [pc, #12]	@ (800d34c <_vfiprintf_r+0x450>)
 800d33e:	9305      	str	r3, [sp, #20]
 800d340:	2500      	movs	r5, #0
 800d342:	f04a 0a02 	orr.w	sl, sl, #2
 800d346:	2302      	movs	r3, #2
 800d348:	e7c9      	b.n	800d2de <_vfiprintf_r+0x3e2>
 800d34a:	bf00      	nop
 800d34c:	0808e64c 	.word	0x0808e64c
 800d350:	9b01      	ldr	r3, [sp, #4]
 800d352:	46a8      	mov	r8, r5
 800d354:	1c5c      	adds	r4, r3, #1
 800d356:	f04f 0500 	mov.w	r5, #0
 800d35a:	f858 9b04 	ldr.w	r9, [r8], #4
 800d35e:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 800d362:	f000 80d0 	beq.w	800d506 <_vfiprintf_r+0x60a>
 800d366:	461a      	mov	r2, r3
 800d368:	4629      	mov	r1, r5
 800d36a:	4648      	mov	r0, r9
 800d36c:	f7f2 ff50 	bl	8000210 <memchr>
 800d370:	4604      	mov	r4, r0
 800d372:	b118      	cbz	r0, 800d37c <_vfiprintf_r+0x480>
 800d374:	eba0 0309 	sub.w	r3, r0, r9
 800d378:	9301      	str	r3, [sp, #4]
 800d37a:	462c      	mov	r4, r5
 800d37c:	9b01      	ldr	r3, [sp, #4]
 800d37e:	42a3      	cmp	r3, r4
 800d380:	bfb8      	it	lt
 800d382:	4623      	movlt	r3, r4
 800d384:	9304      	str	r3, [sp, #16]
 800d386:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800d38a:	b113      	cbz	r3, 800d392 <_vfiprintf_r+0x496>
 800d38c:	9b04      	ldr	r3, [sp, #16]
 800d38e:	3301      	adds	r3, #1
 800d390:	9304      	str	r3, [sp, #16]
 800d392:	f01a 0302 	ands.w	r3, sl, #2
 800d396:	9308      	str	r3, [sp, #32]
 800d398:	bf1e      	ittt	ne
 800d39a:	9b04      	ldrne	r3, [sp, #16]
 800d39c:	3302      	addne	r3, #2
 800d39e:	9304      	strne	r3, [sp, #16]
 800d3a0:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 800d3a4:	930a      	str	r3, [sp, #40]	@ 0x28
 800d3a6:	d11f      	bne.n	800d3e8 <_vfiprintf_r+0x4ec>
 800d3a8:	9b02      	ldr	r3, [sp, #8]
 800d3aa:	9a04      	ldr	r2, [sp, #16]
 800d3ac:	1a9d      	subs	r5, r3, r2
 800d3ae:	2d00      	cmp	r5, #0
 800d3b0:	dd1a      	ble.n	800d3e8 <_vfiprintf_r+0x4ec>
 800d3b2:	4ba9      	ldr	r3, [pc, #676]	@ (800d658 <_vfiprintf_r+0x75c>)
 800d3b4:	6033      	str	r3, [r6, #0]
 800d3b6:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 800d3ba:	2d10      	cmp	r5, #16
 800d3bc:	f102 0201 	add.w	r2, r2, #1
 800d3c0:	f106 0008 	add.w	r0, r6, #8
 800d3c4:	f300 814e 	bgt.w	800d664 <_vfiprintf_r+0x768>
 800d3c8:	6075      	str	r5, [r6, #4]
 800d3ca:	2a07      	cmp	r2, #7
 800d3cc:	4465      	add	r5, ip
 800d3ce:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 800d3d2:	f340 815a 	ble.w	800d68a <_vfiprintf_r+0x78e>
 800d3d6:	9800      	ldr	r0, [sp, #0]
 800d3d8:	aa0e      	add	r2, sp, #56	@ 0x38
 800d3da:	4639      	mov	r1, r7
 800d3dc:	f7ff fd5c 	bl	800ce98 <__sprint_r>
 800d3e0:	2800      	cmp	r0, #0
 800d3e2:	f040 81b4 	bne.w	800d74e <_vfiprintf_r+0x852>
 800d3e6:	ae11      	add	r6, sp, #68	@ 0x44
 800d3e8:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 800d3ec:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 800d3f0:	b161      	cbz	r1, 800d40c <_vfiprintf_r+0x510>
 800d3f2:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 800d3f6:	3301      	adds	r3, #1
 800d3f8:	6031      	str	r1, [r6, #0]
 800d3fa:	2101      	movs	r1, #1
 800d3fc:	440a      	add	r2, r1
 800d3fe:	2b07      	cmp	r3, #7
 800d400:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 800d404:	6071      	str	r1, [r6, #4]
 800d406:	f300 8142 	bgt.w	800d68e <_vfiprintf_r+0x792>
 800d40a:	3608      	adds	r6, #8
 800d40c:	9908      	ldr	r1, [sp, #32]
 800d40e:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 800d412:	b159      	cbz	r1, 800d42c <_vfiprintf_r+0x530>
 800d414:	a90d      	add	r1, sp, #52	@ 0x34
 800d416:	3301      	adds	r3, #1
 800d418:	6031      	str	r1, [r6, #0]
 800d41a:	2102      	movs	r1, #2
 800d41c:	440a      	add	r2, r1
 800d41e:	2b07      	cmp	r3, #7
 800d420:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 800d424:	6071      	str	r1, [r6, #4]
 800d426:	f300 813b 	bgt.w	800d6a0 <_vfiprintf_r+0x7a4>
 800d42a:	3608      	adds	r6, #8
 800d42c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d42e:	2b80      	cmp	r3, #128	@ 0x80
 800d430:	d11f      	bne.n	800d472 <_vfiprintf_r+0x576>
 800d432:	9b02      	ldr	r3, [sp, #8]
 800d434:	9a04      	ldr	r2, [sp, #16]
 800d436:	1a9d      	subs	r5, r3, r2
 800d438:	2d00      	cmp	r5, #0
 800d43a:	dd1a      	ble.n	800d472 <_vfiprintf_r+0x576>
 800d43c:	4b87      	ldr	r3, [pc, #540]	@ (800d65c <_vfiprintf_r+0x760>)
 800d43e:	6033      	str	r3, [r6, #0]
 800d440:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 800d444:	2d10      	cmp	r5, #16
 800d446:	f102 0201 	add.w	r2, r2, #1
 800d44a:	f106 0008 	add.w	r0, r6, #8
 800d44e:	f300 8130 	bgt.w	800d6b2 <_vfiprintf_r+0x7b6>
 800d452:	6075      	str	r5, [r6, #4]
 800d454:	2a07      	cmp	r2, #7
 800d456:	4465      	add	r5, ip
 800d458:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 800d45c:	f340 813c 	ble.w	800d6d8 <_vfiprintf_r+0x7dc>
 800d460:	9800      	ldr	r0, [sp, #0]
 800d462:	aa0e      	add	r2, sp, #56	@ 0x38
 800d464:	4639      	mov	r1, r7
 800d466:	f7ff fd17 	bl	800ce98 <__sprint_r>
 800d46a:	2800      	cmp	r0, #0
 800d46c:	f040 816f 	bne.w	800d74e <_vfiprintf_r+0x852>
 800d470:	ae11      	add	r6, sp, #68	@ 0x44
 800d472:	9b01      	ldr	r3, [sp, #4]
 800d474:	1ae4      	subs	r4, r4, r3
 800d476:	2c00      	cmp	r4, #0
 800d478:	dd1a      	ble.n	800d4b0 <_vfiprintf_r+0x5b4>
 800d47a:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 800d47e:	4877      	ldr	r0, [pc, #476]	@ (800d65c <_vfiprintf_r+0x760>)
 800d480:	6030      	str	r0, [r6, #0]
 800d482:	2c10      	cmp	r4, #16
 800d484:	f103 0301 	add.w	r3, r3, #1
 800d488:	f106 0108 	add.w	r1, r6, #8
 800d48c:	f300 8126 	bgt.w	800d6dc <_vfiprintf_r+0x7e0>
 800d490:	6074      	str	r4, [r6, #4]
 800d492:	2b07      	cmp	r3, #7
 800d494:	4414      	add	r4, r2
 800d496:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 800d49a:	f340 8130 	ble.w	800d6fe <_vfiprintf_r+0x802>
 800d49e:	9800      	ldr	r0, [sp, #0]
 800d4a0:	aa0e      	add	r2, sp, #56	@ 0x38
 800d4a2:	4639      	mov	r1, r7
 800d4a4:	f7ff fcf8 	bl	800ce98 <__sprint_r>
 800d4a8:	2800      	cmp	r0, #0
 800d4aa:	f040 8150 	bne.w	800d74e <_vfiprintf_r+0x852>
 800d4ae:	ae11      	add	r6, sp, #68	@ 0x44
 800d4b0:	9b01      	ldr	r3, [sp, #4]
 800d4b2:	9a01      	ldr	r2, [sp, #4]
 800d4b4:	6073      	str	r3, [r6, #4]
 800d4b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d4b8:	f8c6 9000 	str.w	r9, [r6]
 800d4bc:	4413      	add	r3, r2
 800d4be:	9310      	str	r3, [sp, #64]	@ 0x40
 800d4c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d4c2:	3301      	adds	r3, #1
 800d4c4:	2b07      	cmp	r3, #7
 800d4c6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d4c8:	f300 811b 	bgt.w	800d702 <_vfiprintf_r+0x806>
 800d4cc:	f106 0308 	add.w	r3, r6, #8
 800d4d0:	f01a 0f04 	tst.w	sl, #4
 800d4d4:	f040 811d 	bne.w	800d712 <_vfiprintf_r+0x816>
 800d4d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d4dc:	9904      	ldr	r1, [sp, #16]
 800d4de:	428a      	cmp	r2, r1
 800d4e0:	bfac      	ite	ge
 800d4e2:	189b      	addge	r3, r3, r2
 800d4e4:	185b      	addlt	r3, r3, r1
 800d4e6:	9303      	str	r3, [sp, #12]
 800d4e8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d4ea:	b13b      	cbz	r3, 800d4fc <_vfiprintf_r+0x600>
 800d4ec:	9800      	ldr	r0, [sp, #0]
 800d4ee:	aa0e      	add	r2, sp, #56	@ 0x38
 800d4f0:	4639      	mov	r1, r7
 800d4f2:	f7ff fcd1 	bl	800ce98 <__sprint_r>
 800d4f6:	2800      	cmp	r0, #0
 800d4f8:	f040 8129 	bne.w	800d74e <_vfiprintf_r+0x852>
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d500:	4645      	mov	r5, r8
 800d502:	ae11      	add	r6, sp, #68	@ 0x44
 800d504:	e55b      	b.n	800cfbe <_vfiprintf_r+0xc2>
 800d506:	4648      	mov	r0, r9
 800d508:	f7f2 fed2 	bl	80002b0 <strlen>
 800d50c:	9001      	str	r0, [sp, #4]
 800d50e:	e734      	b.n	800d37a <_vfiprintf_r+0x47e>
 800d510:	f04a 0a10 	orr.w	sl, sl, #16
 800d514:	f01a 0320 	ands.w	r3, sl, #32
 800d518:	d008      	beq.n	800d52c <_vfiprintf_r+0x630>
 800d51a:	3507      	adds	r5, #7
 800d51c:	f025 0507 	bic.w	r5, r5, #7
 800d520:	46a8      	mov	r8, r5
 800d522:	686d      	ldr	r5, [r5, #4]
 800d524:	f858 4b08 	ldr.w	r4, [r8], #8
 800d528:	2301      	movs	r3, #1
 800d52a:	e6d8      	b.n	800d2de <_vfiprintf_r+0x3e2>
 800d52c:	46a8      	mov	r8, r5
 800d52e:	f01a 0510 	ands.w	r5, sl, #16
 800d532:	f858 4b04 	ldr.w	r4, [r8], #4
 800d536:	d001      	beq.n	800d53c <_vfiprintf_r+0x640>
 800d538:	461d      	mov	r5, r3
 800d53a:	e7f5      	b.n	800d528 <_vfiprintf_r+0x62c>
 800d53c:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 800d540:	d001      	beq.n	800d546 <_vfiprintf_r+0x64a>
 800d542:	b2a4      	uxth	r4, r4
 800d544:	e7f0      	b.n	800d528 <_vfiprintf_r+0x62c>
 800d546:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 800d54a:	d0ed      	beq.n	800d528 <_vfiprintf_r+0x62c>
 800d54c:	b2e4      	uxtb	r4, r4
 800d54e:	e7f3      	b.n	800d538 <_vfiprintf_r+0x63c>
 800d550:	4a43      	ldr	r2, [pc, #268]	@ (800d660 <_vfiprintf_r+0x764>)
 800d552:	e5c9      	b.n	800d0e8 <_vfiprintf_r+0x1ec>
 800d554:	46a8      	mov	r8, r5
 800d556:	f01a 0510 	ands.w	r5, sl, #16
 800d55a:	f858 4b04 	ldr.w	r4, [r8], #4
 800d55e:	d001      	beq.n	800d564 <_vfiprintf_r+0x668>
 800d560:	4615      	mov	r5, r2
 800d562:	e5cd      	b.n	800d100 <_vfiprintf_r+0x204>
 800d564:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 800d568:	d001      	beq.n	800d56e <_vfiprintf_r+0x672>
 800d56a:	b2a4      	uxth	r4, r4
 800d56c:	e5c8      	b.n	800d100 <_vfiprintf_r+0x204>
 800d56e:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 800d572:	f43f adc5 	beq.w	800d100 <_vfiprintf_r+0x204>
 800d576:	b2e4      	uxtb	r4, r4
 800d578:	e7f2      	b.n	800d560 <_vfiprintf_r+0x664>
 800d57a:	2c0a      	cmp	r4, #10
 800d57c:	f175 0300 	sbcs.w	r3, r5, #0
 800d580:	d206      	bcs.n	800d590 <_vfiprintf_r+0x694>
 800d582:	3430      	adds	r4, #48	@ 0x30
 800d584:	b2e4      	uxtb	r4, r4
 800d586:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 800d58a:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 800d58e:	e131      	b.n	800d7f4 <_vfiprintf_r+0x8f8>
 800d590:	ab3a      	add	r3, sp, #232	@ 0xe8
 800d592:	9308      	str	r3, [sp, #32]
 800d594:	9b04      	ldr	r3, [sp, #16]
 800d596:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d59a:	f04f 0a00 	mov.w	sl, #0
 800d59e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d5a0:	220a      	movs	r2, #10
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	4620      	mov	r0, r4
 800d5a6:	4629      	mov	r1, r5
 800d5a8:	f7f3 fb1e 	bl	8000be8 <__aeabi_uldivmod>
 800d5ac:	460b      	mov	r3, r1
 800d5ae:	9908      	ldr	r1, [sp, #32]
 800d5b0:	900b      	str	r0, [sp, #44]	@ 0x2c
 800d5b2:	3230      	adds	r2, #48	@ 0x30
 800d5b4:	f801 2c01 	strb.w	r2, [r1, #-1]
 800d5b8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d5ba:	f101 39ff 	add.w	r9, r1, #4294967295	@ 0xffffffff
 800d5be:	f10a 0a01 	add.w	sl, sl, #1
 800d5c2:	b1e2      	cbz	r2, 800d5fe <_vfiprintf_r+0x702>
 800d5c4:	9a06      	ldr	r2, [sp, #24]
 800d5c6:	7812      	ldrb	r2, [r2, #0]
 800d5c8:	4552      	cmp	r2, sl
 800d5ca:	d118      	bne.n	800d5fe <_vfiprintf_r+0x702>
 800d5cc:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 800d5d0:	d015      	beq.n	800d5fe <_vfiprintf_r+0x702>
 800d5d2:	2c0a      	cmp	r4, #10
 800d5d4:	f175 0200 	sbcs.w	r2, r5, #0
 800d5d8:	d311      	bcc.n	800d5fe <_vfiprintf_r+0x702>
 800d5da:	9308      	str	r3, [sp, #32]
 800d5dc:	9b07      	ldr	r3, [sp, #28]
 800d5de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d5e0:	eba9 0903 	sub.w	r9, r9, r3
 800d5e4:	461a      	mov	r2, r3
 800d5e6:	4648      	mov	r0, r9
 800d5e8:	f7fe f923 	bl	800b832 <strncpy>
 800d5ec:	9b06      	ldr	r3, [sp, #24]
 800d5ee:	785a      	ldrb	r2, [r3, #1]
 800d5f0:	9b08      	ldr	r3, [sp, #32]
 800d5f2:	b172      	cbz	r2, 800d612 <_vfiprintf_r+0x716>
 800d5f4:	9a06      	ldr	r2, [sp, #24]
 800d5f6:	3201      	adds	r2, #1
 800d5f8:	9206      	str	r2, [sp, #24]
 800d5fa:	f04f 0a00 	mov.w	sl, #0
 800d5fe:	2c0a      	cmp	r4, #10
 800d600:	f175 0500 	sbcs.w	r5, r5, #0
 800d604:	f0c0 80f6 	bcc.w	800d7f4 <_vfiprintf_r+0x8f8>
 800d608:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d60a:	f8cd 9020 	str.w	r9, [sp, #32]
 800d60e:	461d      	mov	r5, r3
 800d610:	e7c6      	b.n	800d5a0 <_vfiprintf_r+0x6a4>
 800d612:	4692      	mov	sl, r2
 800d614:	e7f3      	b.n	800d5fe <_vfiprintf_r+0x702>
 800d616:	f004 030f 	and.w	r3, r4, #15
 800d61a:	9a05      	ldr	r2, [sp, #20]
 800d61c:	0924      	lsrs	r4, r4, #4
 800d61e:	5cd3      	ldrb	r3, [r2, r3]
 800d620:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800d624:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 800d628:	092d      	lsrs	r5, r5, #4
 800d62a:	ea54 0305 	orrs.w	r3, r4, r5
 800d62e:	d1f2      	bne.n	800d616 <_vfiprintf_r+0x71a>
 800d630:	e0e0      	b.n	800d7f4 <_vfiprintf_r+0x8f8>
 800d632:	b923      	cbnz	r3, 800d63e <_vfiprintf_r+0x742>
 800d634:	f01a 0f01 	tst.w	sl, #1
 800d638:	d001      	beq.n	800d63e <_vfiprintf_r+0x742>
 800d63a:	2430      	movs	r4, #48	@ 0x30
 800d63c:	e7a3      	b.n	800d586 <_vfiprintf_r+0x68a>
 800d63e:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 800d642:	e0d7      	b.n	800d7f4 <_vfiprintf_r+0x8f8>
 800d644:	2b00      	cmp	r3, #0
 800d646:	f000 80a3 	beq.w	800d790 <_vfiprintf_r+0x894>
 800d64a:	2400      	movs	r4, #0
 800d64c:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 800d650:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 800d654:	46a8      	mov	r8, r5
 800d656:	e5e0      	b.n	800d21a <_vfiprintf_r+0x31e>
 800d658:	0808e9b7 	.word	0x0808e9b7
 800d65c:	0808e9a7 	.word	0x0808e9a7
 800d660:	0808e65d 	.word	0x0808e65d
 800d664:	2110      	movs	r1, #16
 800d666:	6071      	str	r1, [r6, #4]
 800d668:	2a07      	cmp	r2, #7
 800d66a:	4461      	add	r1, ip
 800d66c:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 800d670:	dd08      	ble.n	800d684 <_vfiprintf_r+0x788>
 800d672:	9800      	ldr	r0, [sp, #0]
 800d674:	aa0e      	add	r2, sp, #56	@ 0x38
 800d676:	4639      	mov	r1, r7
 800d678:	f7ff fc0e 	bl	800ce98 <__sprint_r>
 800d67c:	2800      	cmp	r0, #0
 800d67e:	d166      	bne.n	800d74e <_vfiprintf_r+0x852>
 800d680:	4b60      	ldr	r3, [pc, #384]	@ (800d804 <_vfiprintf_r+0x908>)
 800d682:	a811      	add	r0, sp, #68	@ 0x44
 800d684:	3d10      	subs	r5, #16
 800d686:	4606      	mov	r6, r0
 800d688:	e694      	b.n	800d3b4 <_vfiprintf_r+0x4b8>
 800d68a:	4606      	mov	r6, r0
 800d68c:	e6ac      	b.n	800d3e8 <_vfiprintf_r+0x4ec>
 800d68e:	9800      	ldr	r0, [sp, #0]
 800d690:	aa0e      	add	r2, sp, #56	@ 0x38
 800d692:	4639      	mov	r1, r7
 800d694:	f7ff fc00 	bl	800ce98 <__sprint_r>
 800d698:	2800      	cmp	r0, #0
 800d69a:	d158      	bne.n	800d74e <_vfiprintf_r+0x852>
 800d69c:	ae11      	add	r6, sp, #68	@ 0x44
 800d69e:	e6b5      	b.n	800d40c <_vfiprintf_r+0x510>
 800d6a0:	9800      	ldr	r0, [sp, #0]
 800d6a2:	aa0e      	add	r2, sp, #56	@ 0x38
 800d6a4:	4639      	mov	r1, r7
 800d6a6:	f7ff fbf7 	bl	800ce98 <__sprint_r>
 800d6aa:	2800      	cmp	r0, #0
 800d6ac:	d14f      	bne.n	800d74e <_vfiprintf_r+0x852>
 800d6ae:	ae11      	add	r6, sp, #68	@ 0x44
 800d6b0:	e6bc      	b.n	800d42c <_vfiprintf_r+0x530>
 800d6b2:	2110      	movs	r1, #16
 800d6b4:	6071      	str	r1, [r6, #4]
 800d6b6:	2a07      	cmp	r2, #7
 800d6b8:	4461      	add	r1, ip
 800d6ba:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 800d6be:	dd08      	ble.n	800d6d2 <_vfiprintf_r+0x7d6>
 800d6c0:	9800      	ldr	r0, [sp, #0]
 800d6c2:	aa0e      	add	r2, sp, #56	@ 0x38
 800d6c4:	4639      	mov	r1, r7
 800d6c6:	f7ff fbe7 	bl	800ce98 <__sprint_r>
 800d6ca:	2800      	cmp	r0, #0
 800d6cc:	d13f      	bne.n	800d74e <_vfiprintf_r+0x852>
 800d6ce:	4b4e      	ldr	r3, [pc, #312]	@ (800d808 <_vfiprintf_r+0x90c>)
 800d6d0:	a811      	add	r0, sp, #68	@ 0x44
 800d6d2:	3d10      	subs	r5, #16
 800d6d4:	4606      	mov	r6, r0
 800d6d6:	e6b2      	b.n	800d43e <_vfiprintf_r+0x542>
 800d6d8:	4606      	mov	r6, r0
 800d6da:	e6ca      	b.n	800d472 <_vfiprintf_r+0x576>
 800d6dc:	2010      	movs	r0, #16
 800d6de:	4402      	add	r2, r0
 800d6e0:	2b07      	cmp	r3, #7
 800d6e2:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 800d6e6:	6070      	str	r0, [r6, #4]
 800d6e8:	dd06      	ble.n	800d6f8 <_vfiprintf_r+0x7fc>
 800d6ea:	9800      	ldr	r0, [sp, #0]
 800d6ec:	aa0e      	add	r2, sp, #56	@ 0x38
 800d6ee:	4639      	mov	r1, r7
 800d6f0:	f7ff fbd2 	bl	800ce98 <__sprint_r>
 800d6f4:	bb58      	cbnz	r0, 800d74e <_vfiprintf_r+0x852>
 800d6f6:	a911      	add	r1, sp, #68	@ 0x44
 800d6f8:	3c10      	subs	r4, #16
 800d6fa:	460e      	mov	r6, r1
 800d6fc:	e6bd      	b.n	800d47a <_vfiprintf_r+0x57e>
 800d6fe:	460e      	mov	r6, r1
 800d700:	e6d6      	b.n	800d4b0 <_vfiprintf_r+0x5b4>
 800d702:	9800      	ldr	r0, [sp, #0]
 800d704:	aa0e      	add	r2, sp, #56	@ 0x38
 800d706:	4639      	mov	r1, r7
 800d708:	f7ff fbc6 	bl	800ce98 <__sprint_r>
 800d70c:	b9f8      	cbnz	r0, 800d74e <_vfiprintf_r+0x852>
 800d70e:	ab11      	add	r3, sp, #68	@ 0x44
 800d710:	e6de      	b.n	800d4d0 <_vfiprintf_r+0x5d4>
 800d712:	9a02      	ldr	r2, [sp, #8]
 800d714:	9904      	ldr	r1, [sp, #16]
 800d716:	1a54      	subs	r4, r2, r1
 800d718:	2c00      	cmp	r4, #0
 800d71a:	f77f aedd 	ble.w	800d4d8 <_vfiprintf_r+0x5dc>
 800d71e:	4d39      	ldr	r5, [pc, #228]	@ (800d804 <_vfiprintf_r+0x908>)
 800d720:	2610      	movs	r6, #16
 800d722:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 800d726:	2c10      	cmp	r4, #16
 800d728:	f102 0201 	add.w	r2, r2, #1
 800d72c:	601d      	str	r5, [r3, #0]
 800d72e:	dc1d      	bgt.n	800d76c <_vfiprintf_r+0x870>
 800d730:	605c      	str	r4, [r3, #4]
 800d732:	2a07      	cmp	r2, #7
 800d734:	440c      	add	r4, r1
 800d736:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 800d73a:	f77f aecd 	ble.w	800d4d8 <_vfiprintf_r+0x5dc>
 800d73e:	9800      	ldr	r0, [sp, #0]
 800d740:	aa0e      	add	r2, sp, #56	@ 0x38
 800d742:	4639      	mov	r1, r7
 800d744:	f7ff fba8 	bl	800ce98 <__sprint_r>
 800d748:	2800      	cmp	r0, #0
 800d74a:	f43f aec5 	beq.w	800d4d8 <_vfiprintf_r+0x5dc>
 800d74e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d750:	07d9      	lsls	r1, r3, #31
 800d752:	d405      	bmi.n	800d760 <_vfiprintf_r+0x864>
 800d754:	89bb      	ldrh	r3, [r7, #12]
 800d756:	059a      	lsls	r2, r3, #22
 800d758:	d402      	bmi.n	800d760 <_vfiprintf_r+0x864>
 800d75a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800d75c:	f7fc fb23 	bl	8009da6 <__retarget_lock_release_recursive>
 800d760:	89bb      	ldrh	r3, [r7, #12]
 800d762:	065b      	lsls	r3, r3, #25
 800d764:	f57f abfb 	bpl.w	800cf5e <_vfiprintf_r+0x62>
 800d768:	f7ff bbf6 	b.w	800cf58 <_vfiprintf_r+0x5c>
 800d76c:	3110      	adds	r1, #16
 800d76e:	2a07      	cmp	r2, #7
 800d770:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 800d774:	605e      	str	r6, [r3, #4]
 800d776:	dc02      	bgt.n	800d77e <_vfiprintf_r+0x882>
 800d778:	3308      	adds	r3, #8
 800d77a:	3c10      	subs	r4, #16
 800d77c:	e7d1      	b.n	800d722 <_vfiprintf_r+0x826>
 800d77e:	9800      	ldr	r0, [sp, #0]
 800d780:	aa0e      	add	r2, sp, #56	@ 0x38
 800d782:	4639      	mov	r1, r7
 800d784:	f7ff fb88 	bl	800ce98 <__sprint_r>
 800d788:	2800      	cmp	r0, #0
 800d78a:	d1e0      	bne.n	800d74e <_vfiprintf_r+0x852>
 800d78c:	ab11      	add	r3, sp, #68	@ 0x44
 800d78e:	e7f4      	b.n	800d77a <_vfiprintf_r+0x87e>
 800d790:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d792:	b913      	cbnz	r3, 800d79a <_vfiprintf_r+0x89e>
 800d794:	2300      	movs	r3, #0
 800d796:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d798:	e7d9      	b.n	800d74e <_vfiprintf_r+0x852>
 800d79a:	9800      	ldr	r0, [sp, #0]
 800d79c:	aa0e      	add	r2, sp, #56	@ 0x38
 800d79e:	4639      	mov	r1, r7
 800d7a0:	f7ff fb7a 	bl	800ce98 <__sprint_r>
 800d7a4:	2800      	cmp	r0, #0
 800d7a6:	d0f5      	beq.n	800d794 <_vfiprintf_r+0x898>
 800d7a8:	e7d1      	b.n	800d74e <_vfiprintf_r+0x852>
 800d7aa:	ea54 0205 	orrs.w	r2, r4, r5
 800d7ae:	f8cd a010 	str.w	sl, [sp, #16]
 800d7b2:	f43f ada6 	beq.w	800d302 <_vfiprintf_r+0x406>
 800d7b6:	2b01      	cmp	r3, #1
 800d7b8:	f43f aedf 	beq.w	800d57a <_vfiprintf_r+0x67e>
 800d7bc:	2b02      	cmp	r3, #2
 800d7be:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 800d7c2:	f43f af28 	beq.w	800d616 <_vfiprintf_r+0x71a>
 800d7c6:	f004 0307 	and.w	r3, r4, #7
 800d7ca:	08e4      	lsrs	r4, r4, #3
 800d7cc:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 800d7d0:	08ed      	lsrs	r5, r5, #3
 800d7d2:	3330      	adds	r3, #48	@ 0x30
 800d7d4:	ea54 0105 	orrs.w	r1, r4, r5
 800d7d8:	464a      	mov	r2, r9
 800d7da:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800d7de:	d1f2      	bne.n	800d7c6 <_vfiprintf_r+0x8ca>
 800d7e0:	9904      	ldr	r1, [sp, #16]
 800d7e2:	07c8      	lsls	r0, r1, #31
 800d7e4:	d506      	bpl.n	800d7f4 <_vfiprintf_r+0x8f8>
 800d7e6:	2b30      	cmp	r3, #48	@ 0x30
 800d7e8:	d004      	beq.n	800d7f4 <_vfiprintf_r+0x8f8>
 800d7ea:	2330      	movs	r3, #48	@ 0x30
 800d7ec:	f809 3c01 	strb.w	r3, [r9, #-1]
 800d7f0:	f1a2 0902 	sub.w	r9, r2, #2
 800d7f4:	ab3a      	add	r3, sp, #232	@ 0xe8
 800d7f6:	eba3 0309 	sub.w	r3, r3, r9
 800d7fa:	9c01      	ldr	r4, [sp, #4]
 800d7fc:	f8dd a010 	ldr.w	sl, [sp, #16]
 800d800:	9301      	str	r3, [sp, #4]
 800d802:	e5bb      	b.n	800d37c <_vfiprintf_r+0x480>
 800d804:	0808e9b7 	.word	0x0808e9b7
 800d808:	0808e9a7 	.word	0x0808e9a7

0800d80c <__sbprintf>:
 800d80c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d80e:	461f      	mov	r7, r3
 800d810:	898b      	ldrh	r3, [r1, #12]
 800d812:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 800d816:	f023 0302 	bic.w	r3, r3, #2
 800d81a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800d81e:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 800d820:	9319      	str	r3, [sp, #100]	@ 0x64
 800d822:	89cb      	ldrh	r3, [r1, #14]
 800d824:	f8ad 300e 	strh.w	r3, [sp, #14]
 800d828:	69cb      	ldr	r3, [r1, #28]
 800d82a:	9307      	str	r3, [sp, #28]
 800d82c:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 800d82e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d830:	ab1a      	add	r3, sp, #104	@ 0x68
 800d832:	9300      	str	r3, [sp, #0]
 800d834:	9304      	str	r3, [sp, #16]
 800d836:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d83a:	4615      	mov	r5, r2
 800d83c:	4606      	mov	r6, r0
 800d83e:	9302      	str	r3, [sp, #8]
 800d840:	9305      	str	r3, [sp, #20]
 800d842:	a816      	add	r0, sp, #88	@ 0x58
 800d844:	2300      	movs	r3, #0
 800d846:	460c      	mov	r4, r1
 800d848:	9306      	str	r3, [sp, #24]
 800d84a:	f7fc faa9 	bl	8009da0 <__retarget_lock_init_recursive>
 800d84e:	462a      	mov	r2, r5
 800d850:	463b      	mov	r3, r7
 800d852:	4669      	mov	r1, sp
 800d854:	4630      	mov	r0, r6
 800d856:	f7ff fb51 	bl	800cefc <_vfiprintf_r>
 800d85a:	1e05      	subs	r5, r0, #0
 800d85c:	db07      	blt.n	800d86e <__sbprintf+0x62>
 800d85e:	4669      	mov	r1, sp
 800d860:	4630      	mov	r0, r6
 800d862:	f7fd ff35 	bl	800b6d0 <_fflush_r>
 800d866:	2800      	cmp	r0, #0
 800d868:	bf18      	it	ne
 800d86a:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 800d86e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800d872:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800d874:	065b      	lsls	r3, r3, #25
 800d876:	bf42      	ittt	mi
 800d878:	89a3      	ldrhmi	r3, [r4, #12]
 800d87a:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 800d87e:	81a3      	strhmi	r3, [r4, #12]
 800d880:	f7fc fa8f 	bl	8009da2 <__retarget_lock_close_recursive>
 800d884:	4628      	mov	r0, r5
 800d886:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 800d88a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d88c <__ascii_wctomb>:
 800d88c:	4603      	mov	r3, r0
 800d88e:	4608      	mov	r0, r1
 800d890:	b141      	cbz	r1, 800d8a4 <__ascii_wctomb+0x18>
 800d892:	2aff      	cmp	r2, #255	@ 0xff
 800d894:	d904      	bls.n	800d8a0 <__ascii_wctomb+0x14>
 800d896:	228a      	movs	r2, #138	@ 0x8a
 800d898:	601a      	str	r2, [r3, #0]
 800d89a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d89e:	4770      	bx	lr
 800d8a0:	700a      	strb	r2, [r1, #0]
 800d8a2:	2001      	movs	r0, #1
 800d8a4:	4770      	bx	lr

0800d8a6 <__fputwc>:
 800d8a6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d8aa:	4680      	mov	r8, r0
 800d8ac:	460f      	mov	r7, r1
 800d8ae:	4614      	mov	r4, r2
 800d8b0:	f7ff fa74 	bl	800cd9c <__locale_mb_cur_max>
 800d8b4:	2801      	cmp	r0, #1
 800d8b6:	4605      	mov	r5, r0
 800d8b8:	d11b      	bne.n	800d8f2 <__fputwc+0x4c>
 800d8ba:	1e7b      	subs	r3, r7, #1
 800d8bc:	2bfe      	cmp	r3, #254	@ 0xfe
 800d8be:	d818      	bhi.n	800d8f2 <__fputwc+0x4c>
 800d8c0:	f88d 7004 	strb.w	r7, [sp, #4]
 800d8c4:	2600      	movs	r6, #0
 800d8c6:	f10d 0904 	add.w	r9, sp, #4
 800d8ca:	42ae      	cmp	r6, r5
 800d8cc:	d021      	beq.n	800d912 <__fputwc+0x6c>
 800d8ce:	68a3      	ldr	r3, [r4, #8]
 800d8d0:	f816 1009 	ldrb.w	r1, [r6, r9]
 800d8d4:	3b01      	subs	r3, #1
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	60a3      	str	r3, [r4, #8]
 800d8da:	da04      	bge.n	800d8e6 <__fputwc+0x40>
 800d8dc:	69a2      	ldr	r2, [r4, #24]
 800d8de:	4293      	cmp	r3, r2
 800d8e0:	db1b      	blt.n	800d91a <__fputwc+0x74>
 800d8e2:	290a      	cmp	r1, #10
 800d8e4:	d019      	beq.n	800d91a <__fputwc+0x74>
 800d8e6:	6823      	ldr	r3, [r4, #0]
 800d8e8:	1c5a      	adds	r2, r3, #1
 800d8ea:	6022      	str	r2, [r4, #0]
 800d8ec:	7019      	strb	r1, [r3, #0]
 800d8ee:	3601      	adds	r6, #1
 800d8f0:	e7eb      	b.n	800d8ca <__fputwc+0x24>
 800d8f2:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 800d8f6:	463a      	mov	r2, r7
 800d8f8:	a901      	add	r1, sp, #4
 800d8fa:	4640      	mov	r0, r8
 800d8fc:	f000 f83e 	bl	800d97c <_wcrtomb_r>
 800d900:	1c43      	adds	r3, r0, #1
 800d902:	4605      	mov	r5, r0
 800d904:	d1de      	bne.n	800d8c4 <__fputwc+0x1e>
 800d906:	89a3      	ldrh	r3, [r4, #12]
 800d908:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d90c:	81a3      	strh	r3, [r4, #12]
 800d90e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800d912:	4638      	mov	r0, r7
 800d914:	b003      	add	sp, #12
 800d916:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d91a:	4622      	mov	r2, r4
 800d91c:	4640      	mov	r0, r8
 800d91e:	f7fd ff3f 	bl	800b7a0 <__swbuf_r>
 800d922:	3001      	adds	r0, #1
 800d924:	d1e3      	bne.n	800d8ee <__fputwc+0x48>
 800d926:	e7f2      	b.n	800d90e <__fputwc+0x68>

0800d928 <_fputwc_r>:
 800d928:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 800d92a:	07db      	lsls	r3, r3, #31
 800d92c:	b570      	push	{r4, r5, r6, lr}
 800d92e:	4605      	mov	r5, r0
 800d930:	460e      	mov	r6, r1
 800d932:	4614      	mov	r4, r2
 800d934:	d405      	bmi.n	800d942 <_fputwc_r+0x1a>
 800d936:	8993      	ldrh	r3, [r2, #12]
 800d938:	0598      	lsls	r0, r3, #22
 800d93a:	d402      	bmi.n	800d942 <_fputwc_r+0x1a>
 800d93c:	6d90      	ldr	r0, [r2, #88]	@ 0x58
 800d93e:	f7fc fa31 	bl	8009da4 <__retarget_lock_acquire_recursive>
 800d942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d946:	0499      	lsls	r1, r3, #18
 800d948:	d406      	bmi.n	800d958 <_fputwc_r+0x30>
 800d94a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800d94e:	81a3      	strh	r3, [r4, #12]
 800d950:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d952:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800d956:	6663      	str	r3, [r4, #100]	@ 0x64
 800d958:	4622      	mov	r2, r4
 800d95a:	4628      	mov	r0, r5
 800d95c:	4631      	mov	r1, r6
 800d95e:	f7ff ffa2 	bl	800d8a6 <__fputwc>
 800d962:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d964:	07da      	lsls	r2, r3, #31
 800d966:	4605      	mov	r5, r0
 800d968:	d405      	bmi.n	800d976 <_fputwc_r+0x4e>
 800d96a:	89a3      	ldrh	r3, [r4, #12]
 800d96c:	059b      	lsls	r3, r3, #22
 800d96e:	d402      	bmi.n	800d976 <_fputwc_r+0x4e>
 800d970:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d972:	f7fc fa18 	bl	8009da6 <__retarget_lock_release_recursive>
 800d976:	4628      	mov	r0, r5
 800d978:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d97c <_wcrtomb_r>:
 800d97c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d97e:	4c09      	ldr	r4, [pc, #36]	@ (800d9a4 <_wcrtomb_r+0x28>)
 800d980:	b085      	sub	sp, #20
 800d982:	f8d4 70e0 	ldr.w	r7, [r4, #224]	@ 0xe0
 800d986:	4605      	mov	r5, r0
 800d988:	461e      	mov	r6, r3
 800d98a:	b909      	cbnz	r1, 800d990 <_wcrtomb_r+0x14>
 800d98c:	460a      	mov	r2, r1
 800d98e:	a901      	add	r1, sp, #4
 800d990:	47b8      	blx	r7
 800d992:	1c43      	adds	r3, r0, #1
 800d994:	bf01      	itttt	eq
 800d996:	2300      	moveq	r3, #0
 800d998:	6033      	streq	r3, [r6, #0]
 800d99a:	238a      	moveq	r3, #138	@ 0x8a
 800d99c:	602b      	streq	r3, [r5, #0]
 800d99e:	b005      	add	sp, #20
 800d9a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9a2:	bf00      	nop
 800d9a4:	2000056c 	.word	0x2000056c

0800d9a8 <_getpid>:
 800d9a8:	4b02      	ldr	r3, [pc, #8]	@ (800d9b4 <_getpid+0xc>)
 800d9aa:	2258      	movs	r2, #88	@ 0x58
 800d9ac:	601a      	str	r2, [r3, #0]
 800d9ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d9b2:	4770      	bx	lr
 800d9b4:	200100c4 	.word	0x200100c4

0800d9b8 <_kill>:
 800d9b8:	4b02      	ldr	r3, [pc, #8]	@ (800d9c4 <_kill+0xc>)
 800d9ba:	2258      	movs	r2, #88	@ 0x58
 800d9bc:	601a      	str	r2, [r3, #0]
 800d9be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d9c2:	4770      	bx	lr
 800d9c4:	200100c4 	.word	0x200100c4

0800d9c8 <_sbrk>:
 800d9c8:	4a04      	ldr	r2, [pc, #16]	@ (800d9dc <_sbrk+0x14>)
 800d9ca:	6811      	ldr	r1, [r2, #0]
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	b909      	cbnz	r1, 800d9d4 <_sbrk+0xc>
 800d9d0:	4903      	ldr	r1, [pc, #12]	@ (800d9e0 <_sbrk+0x18>)
 800d9d2:	6011      	str	r1, [r2, #0]
 800d9d4:	6810      	ldr	r0, [r2, #0]
 800d9d6:	4403      	add	r3, r0
 800d9d8:	6013      	str	r3, [r2, #0]
 800d9da:	4770      	bx	lr
 800d9dc:	200100c8 	.word	0x200100c8
 800d9e0:	200100cc 	.word	0x200100cc

0800d9e4 <_init>:
 800d9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9e6:	bf00      	nop
 800d9e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9ea:	bc08      	pop	{r3}
 800d9ec:	469e      	mov	lr, r3
 800d9ee:	4770      	bx	lr

0800d9f0 <_fini>:
 800d9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9f2:	bf00      	nop
 800d9f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9f6:	bc08      	pop	{r3}
 800d9f8:	469e      	mov	lr, r3
 800d9fa:	4770      	bx	lr
