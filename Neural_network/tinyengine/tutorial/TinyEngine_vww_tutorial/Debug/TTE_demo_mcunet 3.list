
TTE_demo_mcunet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000125b8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0007f464  08012788  08012788  00013788  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08091bec  08091bec  00092bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000014  08091bf4  08091bf4  00092bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  08091c08  08091c08  00092c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000006c4  20000000  08091c10  00093000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000f7a0  200006c8  080922d4  000936c8  2**3
                  ALLOC
  8 ._user_heap_stack 00000a00  2000fe68  080922d4  00093e68  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000936c4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00084f0a  00000000  00000000  000936f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000027c6  00000000  00000000  001185fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000004f8  00000000  00000000  0011adc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000055f  00000000  00000000  0011b2c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000b2e8  00000000  00000000  0011b81f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00004338  00000000  00000000  00126b07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  0012ae3f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002468  00000000  00000000  0012ae84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loclists 00000fe6  00000000  00000000  0012d2ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000082  00000000  00000000  0012e2d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200006c8 	.word	0x200006c8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08012770 	.word	0x08012770

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200006cc 	.word	0x200006cc
 800020c:	08012770 	.word	0x08012770

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000edc:	4b06      	ldr	r3, [pc, #24]	@ (8000ef8 <HAL_IncTick+0x20>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4b06      	ldr	r3, [pc, #24]	@ (8000efc <HAL_IncTick+0x24>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	4a04      	ldr	r2, [pc, #16]	@ (8000efc <HAL_IncTick+0x24>)
 8000eea:	6013      	str	r3, [r2, #0]
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	20000004 	.word	0x20000004
 8000efc:	200006e4 	.word	0x200006e4

08000f00 <_GLOBAL__sub_I_JpegDec>:
#include "picojpeg.h"
#include <string.h>

JPEGDecoder JpegDec;

JPEGDecoder::JPEGDecoder() {
 8000f00:	4b05      	ldr	r3, [pc, #20]	@ (8000f18 <_GLOBAL__sub_I_JpegDec+0x18>)
 8000f02:	2200      	movs	r2, #0
  mcu_x = 0;
  mcu_y = 0;
  is_available = 0;
 8000f04:	2000      	movs	r0, #0
 8000f06:	2100      	movs	r1, #0
JPEGDecoder::JPEGDecoder() {
 8000f08:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
  mcu_y = 0;
 8000f0c:	639a      	str	r2, [r3, #56]	@ 0x38
  thisPtr = this;
 8000f0e:	665b      	str	r3, [r3, #100]	@ 0x64
  is_available = 0;
 8000f10:	e9c3 010c 	strd	r0, r1, [r3, #48]	@ 0x30
#if defined(LOAD_SD_LIBRARY) || defined(LOAD_SDFAT_LIBRARY)
  if (jpg_source == JPEG_SD_FILE)
    if (g_pInFileSd)
      g_pInFileSd.close();
#endif
}
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	200006e8 	.word	0x200006e8

08000f1c <_GLOBAL__sub_D_JpegDec>:
  if (pImage)
 8000f1c:	4b02      	ldr	r3, [pc, #8]	@ (8000f28 <_GLOBAL__sub_D_JpegDec+0xc>)
 8000f1e:	6e18      	ldr	r0, [r3, #96]	@ 0x60
 8000f20:	b108      	cbz	r0, 8000f26 <_GLOBAL__sub_D_JpegDec+0xa>
    delete[] pImage;
 8000f22:	f00c be57 	b.w	800dbd4 <_ZdaPv>
}
 8000f26:	4770      	bx	lr
 8000f28:	200006e8 	.word	0x200006e8

08000f2c <_Z27invoke_new_weights_givenimgPa>:

signed char out_int[OUTPUT_CH];

float labels[] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};

void invoke_new_weights_givenimg(signed char *out_int8) {
 8000f2c:	b510      	push	{r4, lr}
 8000f2e:	4604      	mov	r4, r0
  invoke(labels);
 8000f30:	4805      	ldr	r0, [pc, #20]	@ (8000f48 <_Z27invoke_new_weights_givenimgPa+0x1c>)
 8000f32:	f00b fc41 	bl	800c7b8 <invoke>
  signed char *output = (signed char *)getOutput();
 8000f36:	f00b fc33 	bl	800c7a0 <getOutput>
  for (int i = 0; i < OUTPUT_CH; i++)
    out_int8[i] = output[i];
 8000f3a:	f990 3000 	ldrsb.w	r3, [r0]
 8000f3e:	7023      	strb	r3, [r4, #0]
 8000f40:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8000f44:	7063      	strb	r3, [r4, #1]
}
 8000f46:	bd10      	pop	{r4, pc}
 8000f48:	2000077c 	.word	0x2000077c

08000f4c <main>:
#define BUTTON2_Pin GPIO_PIN_10
#define BUTTON2_GPIO_Port GPIOF

uint16_t *RGBbuf;

int main(void) {
 8000f4c:	b530      	push	{r4, r5, lr}
 8000f4e:	b0a7      	sub	sp, #156	@ 0x9c
  	while (1);
  }

#else
  uint32_t start, end;
  volatile signed char *input = getInput();
 8000f50:	f00b fc18 	bl	800c784 <getInput>
 8000f54:	4b22      	ldr	r3, [pc, #136]	@ (8000fe0 <main+0x94>)
 8000f56:	4684      	mov	ip, r0
  for (int i = 0; i < RES_W * RES_W * 3; i++) {
 8000f58:	f503 4096 	add.w	r0, r3, #19200	@ 0x4b00
  volatile signed char *input = getInput();
 8000f5c:	4662      	mov	r2, ip
#if NoCamera_Person
    input[i] = person[i];  // Image of person
 8000f5e:	f913 1f01 	ldrsb.w	r1, [r3, #1]!
  for (int i = 0; i < RES_W * RES_W * 3; i++) {
 8000f62:	4283      	cmp	r3, r0
    input[i] = person[i];  // Image of person
 8000f64:	f802 1b01 	strb.w	r1, [r2], #1
  for (int i = 0; i < RES_W * RES_W * 3; i++) {
 8000f68:	d1f9      	bne.n	8000f5e <main+0x12>
#else
    input[i] = no_person[i];  // Image of non-person
#endif
  }

  RGBbuf = (uint16_t *)&input[80 * 80 * 4];
 8000f6a:	f246 34fe 	movw	r4, #25598	@ 0x63fe
 8000f6e:	f644 35f0 	movw	r5, #19440	@ 0x4bf0
 8000f72:	4b1c      	ldr	r3, [pc, #112]	@ (8000fe4 <main+0x98>)
 8000f74:	f50c 42c8 	add.w	r2, ip, #25600	@ 0x6400
 8000f78:	f10c 0ef0 	add.w	lr, ip, #240	@ 0xf0
 8000f7c:	4464      	add	r4, ip
 8000f7e:	4465      	add	r5, ip
 8000f80:	601a      	str	r2, [r3, #0]
  int t_mode = 0;

  // start = HAL_GetTick();

  for (int i = 0; i < RES_W; i++) {
    for (int j = 0; j < RES_W; j++) {
 8000f82:	f1ae 02f0 	sub.w	r2, lr, #240	@ 0xf0
  volatile signed char *input = getInput();
 8000f86:	46a4      	mov	ip, r4
      uint8_t red = (int32_t)input[(80 * i + j) * 3] + 128;
 8000f88:	7810      	ldrb	r0, [r2, #0]
    for (int j = 0; j < RES_W; j++) {
 8000f8a:	3203      	adds	r2, #3
      uint8_t green = (int32_t)input[(80 * i + j) * 3 + 1] + 128;
 8000f8c:	f812 1c02 	ldrb.w	r1, [r2, #-2]
      uint8_t blue = (int32_t)input[(80 * i + j) * 3 + 2] + 128;
 8000f90:	f812 3c01 	ldrb.w	r3, [r2, #-1]

      uint16_t b = (blue >> 3) & 0x1f;
      uint16_t g = ((green >> 2) & 0x3f) << 5;
      uint16_t r = ((red >> 3) & 0x1f) << 11;
 8000f94:	f080 0080 	eor.w	r0, r0, #128	@ 0x80
      uint16_t g = ((green >> 2) & 0x3f) << 5;
 8000f98:	f081 0180 	eor.w	r1, r1, #128	@ 0x80
    for (int j = 0; j < RES_W; j++) {
 8000f9c:	4572      	cmp	r2, lr
      uint16_t b = (blue >> 3) & 0x1f;
 8000f9e:	f083 0380 	eor.w	r3, r3, #128	@ 0x80
      uint16_t r = ((red >> 3) & 0x1f) << 11;
 8000fa2:	ea4f 00d0 	mov.w	r0, r0, lsr #3
      uint16_t g = ((green >> 2) & 0x3f) << 5;
 8000fa6:	ea4f 0191 	mov.w	r1, r1, lsr #2
      uint16_t b = (blue >> 3) & 0x1f;
 8000faa:	ea4f 03d3 	mov.w	r3, r3, lsr #3

      RGBbuf[j + RES_W * i] = (uint16_t)(r | g | b);
 8000fae:	ea43 23c0 	orr.w	r3, r3, r0, lsl #11
 8000fb2:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 8000fb6:	f82c 3f02 	strh.w	r3, [ip, #2]!
    for (int j = 0; j < RES_W; j++) {
 8000fba:	d1e5      	bne.n	8000f88 <main+0x3c>
  for (int i = 0; i < RES_W; i++) {
 8000fbc:	f102 0ef0 	add.w	lr, r2, #240	@ 0xf0
 8000fc0:	34a0      	adds	r4, #160	@ 0xa0
 8000fc2:	45ae      	cmp	lr, r5
 8000fc4:	d1dd      	bne.n	8000f82 <main+0x36>
    }
  }
  // loadRGB565LCD(10, 10, RES_W, RES_W, RGBbuf, 3);

	invoke_new_weights_givenimg(out_int);
 8000fc6:	4c08      	ldr	r4, [pc, #32]	@ (8000fe8 <main+0x9c>)
 8000fc8:	4620      	mov	r0, r4
 8000fca:	f7ff ffaf 	bl	8000f2c <_Z27invoke_new_weights_givenimgPa>
	else {
	  person = 1;
	}
	// end = HAL_GetTick();

	printf(score, "%d %d", out_int[0], out_int[1]);
 8000fce:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8000fd2:	f994 2000 	ldrsb.w	r2, [r4]
 8000fd6:	4668      	mov	r0, sp
 8000fd8:	4904      	ldr	r1, [pc, #16]	@ (8000fec <main+0xa0>)
 8000fda:	f00d f8bf 	bl	800e15c <printf>
	// displaystring(score, 273, 15);

//	sprintf(showbuf, " Inference ");
//	displaystring(showbuf, 273, 10);
	// detectResponse(person, end - start, t_mode, 0, 0);
	while (1);
 8000fde:	e7fe      	b.n	8000fde <main+0x92>
 8000fe0:	0801278f 	.word	0x0801278f
 8000fe4:	20000778 	.word	0x20000778
 8000fe8:	200007a4 	.word	0x200007a4
 8000fec:	08012788 	.word	0x08012788

08000ff0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ff0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001028 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ff4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ff6:	e003      	b.n	8001000 <LoopCopyDataInit>

08000ff8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800102c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ffa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ffc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ffe:	3104      	adds	r1, #4

08001000 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001000:	480b      	ldr	r0, [pc, #44]	@ (8001030 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001002:	4b0c      	ldr	r3, [pc, #48]	@ (8001034 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001004:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001006:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001008:	d3f6      	bcc.n	8000ff8 <CopyDataInit>
  ldr  r2, =_sbss
 800100a:	4a0b      	ldr	r2, [pc, #44]	@ (8001038 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800100c:	e002      	b.n	8001014 <LoopFillZerobss>

0800100e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800100e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001010:	f842 3b04 	str.w	r3, [r2], #4

08001014 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001014:	4b09      	ldr	r3, [pc, #36]	@ (800103c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001016:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001018:	d3f9      	bcc.n	800100e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800101a:	f000 f845 	bl	80010a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800101e:	f00f fdeb 	bl	8010bf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001022:	f7ff ff93 	bl	8000f4c <main>
  bx  lr    
 8001026:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001028:	2004ffff 	.word	0x2004ffff
  ldr  r3, =_sidata
 800102c:	08091c10 	.word	0x08091c10
  ldr  r0, =_sdata
 8001030:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001034:	200006c4 	.word	0x200006c4
  ldr  r2, =_sbss
 8001038:	200006c8 	.word	0x200006c8
  ldr  r3, = _ebss
 800103c:	2000fe68 	.word	0x2000fe68

08001040 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001040:	e7fe      	b.n	8001040 <ADC_IRQHandler>

08001042 <NMI_Handler>:
 * Target ISA:  ARMv7E-M
 * -------------------------------------------------------------------- */
  
#include "stm32f7xx_it.h"
#include "main.h"
void NMI_Handler(void) {}
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0
 8001046:	bf00      	nop
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <HardFault_Handler>:

void HardFault_Handler(void) {
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0

  while (1) {
 8001054:	bf00      	nop
 8001056:	e7fd      	b.n	8001054 <HardFault_Handler+0x4>

08001058 <MemManage_Handler>:
  }
}

void MemManage_Handler(void) {
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0

  while (1) {
 800105c:	bf00      	nop
 800105e:	e7fd      	b.n	800105c <MemManage_Handler+0x4>

08001060 <BusFault_Handler>:
  }
}

void BusFault_Handler(void) {
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0

  while (1) {
 8001064:	bf00      	nop
 8001066:	e7fd      	b.n	8001064 <BusFault_Handler+0x4>

08001068 <UsageFault_Handler>:
  }
}

void UsageFault_Handler(void) {
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0

  while (1) {
 800106c:	bf00      	nop
 800106e:	e7fd      	b.n	800106c <UsageFault_Handler+0x4>

08001070 <SVC_Handler>:
  }
}

void SVC_Handler(void) {}
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <DebugMon_Handler>:

void DebugMon_Handler(void) {}
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0
 8001082:	bf00      	nop
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <PendSV_Handler>:

void PendSV_Handler(void) {}
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <SysTick_Handler>:

void SysTick_Handler(void) { HAL_IncTick(); }
 800109a:	b580      	push	{r7, lr}
 800109c:	af00      	add	r7, sp, #0
 800109e:	f7ff ff1b 	bl	8000ed8 <HAL_IncTick>
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <SystemInit>:
#define VECT_TAB_OFFSET 0x00
uint32_t SystemCoreClock = 16000000;
const uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0,
                                   1, 2, 3, 4, 6, 7, 8, 9};
const uint8_t APBPrescTable[8] = {0, 0, 0, 0, 1, 2, 3, 4};
void SystemInit(void) {
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0

#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2));
 80010ac:	4b15      	ldr	r3, [pc, #84]	@ (8001104 <SystemInit+0x5c>)
 80010ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010b2:	4a14      	ldr	r2, [pc, #80]	@ (8001104 <SystemInit+0x5c>)
 80010b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif

  RCC->CR |= (uint32_t)0x00000001;
 80010bc:	4b12      	ldr	r3, [pc, #72]	@ (8001108 <SystemInit+0x60>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a11      	ldr	r2, [pc, #68]	@ (8001108 <SystemInit+0x60>)
 80010c2:	f043 0301 	orr.w	r3, r3, #1
 80010c6:	6013      	str	r3, [r2, #0]

  RCC->CFGR = 0x00000000;
 80010c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001108 <SystemInit+0x60>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]

  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80010ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001108 <SystemInit+0x60>)
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	490d      	ldr	r1, [pc, #52]	@ (8001108 <SystemInit+0x60>)
 80010d4:	4b0d      	ldr	r3, [pc, #52]	@ (800110c <SystemInit+0x64>)
 80010d6:	4013      	ands	r3, r2
 80010d8:	600b      	str	r3, [r1, #0]

  RCC->PLLCFGR = 0x24003010;
 80010da:	4b0b      	ldr	r3, [pc, #44]	@ (8001108 <SystemInit+0x60>)
 80010dc:	4a0c      	ldr	r2, [pc, #48]	@ (8001110 <SystemInit+0x68>)
 80010de:	605a      	str	r2, [r3, #4]

  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80010e0:	4b09      	ldr	r3, [pc, #36]	@ (8001108 <SystemInit+0x60>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a08      	ldr	r2, [pc, #32]	@ (8001108 <SystemInit+0x60>)
 80010e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010ea:	6013      	str	r3, [r2, #0]

  RCC->CIR = 0x00000000;
 80010ec:	4b06      	ldr	r3, [pc, #24]	@ (8001108 <SystemInit+0x60>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	60da      	str	r2, [r3, #12]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET;
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET;
 80010f2:	4b04      	ldr	r3, [pc, #16]	@ (8001104 <SystemInit+0x5c>)
 80010f4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80010f8:	609a      	str	r2, [r3, #8]
#endif
}
 80010fa:	bf00      	nop
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00
 8001108:	40023800 	.word	0x40023800
 800110c:	fef6ffff 	.word	0xfef6ffff
 8001110:	24003010 	.word	0x24003010

08001114 <add_fpreq>:
#include "arm_math.h"
#include "tinyengine_function.h"

tinyengine_status add_fpreq(int size, const int8_t* input1_data, const float input1_scale, const float input1_zero,
			const int8_t* input2_data, const float input2_scale, const float input2_zero, const float output_scale,
			const float zero_y, int8_t* output_data) {
 8001114:	b580      	push	{r7, lr}
 8001116:	b08e      	sub	sp, #56	@ 0x38
 8001118:	af00      	add	r7, sp, #0
 800111a:	6278      	str	r0, [r7, #36]	@ 0x24
 800111c:	6239      	str	r1, [r7, #32]
 800111e:	ed87 0a07 	vstr	s0, [r7, #28]
 8001122:	edc7 0a06 	vstr	s1, [r7, #24]
 8001126:	617a      	str	r2, [r7, #20]
 8001128:	ed87 1a04 	vstr	s2, [r7, #16]
 800112c:	edc7 1a03 	vstr	s3, [r7, #12]
 8001130:	ed87 2a02 	vstr	s4, [r7, #8]
 8001134:	edc7 2a01 	vstr	s5, [r7, #4]
 8001138:	603b      	str	r3, [r7, #0]
  for (int i = 0; i < size; ++i) {
 800113a:	2300      	movs	r3, #0
 800113c:	637b      	str	r3, [r7, #52]	@ 0x34
 800113e:	e05a      	b.n	80011f6 <add_fpreq+0xe2>
	  float input1_fp = ((float)*input1_data++ - input1_zero) * input1_scale;
 8001140:	6a3b      	ldr	r3, [r7, #32]
 8001142:	1c5a      	adds	r2, r3, #1
 8001144:	623a      	str	r2, [r7, #32]
 8001146:	f993 3000 	ldrsb.w	r3, [r3]
 800114a:	ee07 3a90 	vmov	s15, r3
 800114e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001152:	edd7 7a06 	vldr	s15, [r7, #24]
 8001156:	ee77 7a67 	vsub.f32	s15, s14, s15
 800115a:	ed97 7a07 	vldr	s14, [r7, #28]
 800115e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001162:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	  float input2_fp = ((float)*input2_data++ - input2_zero) * input2_scale;
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	1c5a      	adds	r2, r3, #1
 800116a:	617a      	str	r2, [r7, #20]
 800116c:	f993 3000 	ldrsb.w	r3, [r3]
 8001170:	ee07 3a90 	vmov	s15, r3
 8001174:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001178:	edd7 7a03 	vldr	s15, [r7, #12]
 800117c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001180:	ed97 7a04 	vldr	s14, [r7, #16]
 8001184:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001188:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
      int clamped_output = (int)round((input1_fp + input2_fp) / output_scale + zero_y); // to align with tvm implementation
 800118c:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001190:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001194:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001198:	edd7 7a02 	vldr	s15, [r7, #8]
 800119c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80011a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80011a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011a8:	ee17 0a90 	vmov	r0, s15
 80011ac:	f7ff f9ec 	bl	8000588 <__aeabi_f2d>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	ec43 2b10 	vmov	d0, r2, r3
 80011b8:	f00c fd38 	bl	800dc2c <round>
 80011bc:	ec53 2b10 	vmov	r2, r3, d0
 80011c0:	4610      	mov	r0, r2
 80011c2:	4619      	mov	r1, r3
 80011c4:	f7ff fce8 	bl	8000b98 <__aeabi_d2iz>
 80011c8:	4603      	mov	r3, r0
 80011ca:	62bb      	str	r3, [r7, #40]	@ 0x28
      clamped_output = TN_MAX(clamped_output, -128);
 80011cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011ce:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 80011d2:	4293      	cmp	r3, r2
 80011d4:	bfb8      	it	lt
 80011d6:	4613      	movlt	r3, r2
 80011d8:	62bb      	str	r3, [r7, #40]	@ 0x28
      clamped_output = TN_MIN(clamped_output, 127);
 80011da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80011de:	bfa8      	it	ge
 80011e0:	237f      	movge	r3, #127	@ 0x7f
 80011e2:	62bb      	str	r3, [r7, #40]	@ 0x28
      output_data[i] = (int8_t)(clamped_output);
 80011e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011e6:	683a      	ldr	r2, [r7, #0]
 80011e8:	4413      	add	r3, r2
 80011ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80011ec:	b252      	sxtb	r2, r2
 80011ee:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < size; ++i) {
 80011f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011f2:	3301      	adds	r3, #1
 80011f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80011f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80011f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011fa:	429a      	cmp	r2, r3
 80011fc:	dba0      	blt.n	8001140 <add_fpreq+0x2c>
  }
}
 80011fe:	bf00      	nop
 8001200:	4618      	mov	r0, r3
 8001202:	3738      	adds	r7, #56	@ 0x38
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <arm_nn_mat_mult_kernel_s8_s16_reordered>:
                                              const int16_t activation_min,
                                              const int16_t activation_max,
                                              const uint16_t num_col_a,
                                              const int32_t *const output_bias,
                                              q7_t *out_0)
{
 8001208:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800120c:	f5ad 7d68 	sub.w	sp, sp, #928	@ 0x3a0
 8001210:	af00      	add	r7, sp, #0
 8001212:	f507 7468 	add.w	r4, r7, #928	@ 0x3a0
 8001216:	f5a4 744b 	sub.w	r4, r4, #812	@ 0x32c
 800121a:	6020      	str	r0, [r4, #0]
 800121c:	f507 7068 	add.w	r0, r7, #928	@ 0x3a0
 8001220:	f5a0 704c 	sub.w	r0, r0, #816	@ 0x330
 8001224:	6001      	str	r1, [r0, #0]
 8001226:	4611      	mov	r1, r2
 8001228:	f507 7268 	add.w	r2, r7, #928	@ 0x3a0
 800122c:	f5a2 724e 	sub.w	r2, r2, #824	@ 0x338
 8001230:	6013      	str	r3, [r2, #0]
 8001232:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001236:	f2a3 3232 	subw	r2, r3, #818	@ 0x332
 800123a:	460b      	mov	r3, r1
 800123c:	8013      	strh	r3, [r2, #0]
    /* set up the second output pointers */
    q7_t *out_1 = out_0 + output_ch;
 800123e:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001242:	f2a3 3332 	subw	r3, r3, #818	@ 0x332
 8001246:	881a      	ldrh	r2, [r3, #0]
 8001248:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 800124c:	4413      	add	r3, r2
 800124e:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
    const int32_t *bias = output_bias;
 8001252:	f8d7 33d4 	ldr.w	r3, [r7, #980]	@ 0x3d4
 8001256:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398

    uint16_t row_count = output_ch / 2;
 800125a:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800125e:	f2a3 3332 	subw	r3, r3, #818	@ 0x332
 8001262:	881b      	ldrh	r3, [r3, #0]
 8001264:	085b      	lsrs	r3, r3, #1
 8001266:	f8a7 3396 	strh.w	r3, [r7, #918]	@ 0x396
    const q7_t *ip_a0 = input_a;
 800126a:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800126e:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
    /* this loop over rows in A */
    while (row_count)
 8001278:	f001 bb74 	b.w	8002964 <arm_nn_mat_mult_kernel_s8_s16_reordered+0x175c>
    {
        /* setup pointers for B */
        const q15_t *ip_b0 = input_b;
 800127c:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001280:	f5a3 722d 	sub.w	r2, r3, #692	@ 0x2b4
 8001284:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001288:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	6013      	str	r3, [r2, #0]
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 8001290:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001294:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	f8b7 33d0 	ldrh.w	r3, [r7, #976]	@ 0x3d0
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	441a      	add	r2, r3
 80012a2:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80012a6:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 80012aa:	601a      	str	r2, [r3, #0]

        /* align the second pointer for A */
        const q7_t *ip_a1 = ip_a0 + num_col_a;
 80012ac:	f8b7 23d0 	ldrh.w	r2, [r7, #976]	@ 0x3d0
 80012b0:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 80012b4:	4413      	add	r3, r2
 80012b6:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c

        /* Init accumulator with bias for channel N and N + 1 */
        q31_t ch_0_out_0 = *bias;
 80012ba:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f8c7 3388 	str.w	r3, [r7, #904]	@ 0x388
        q31_t ch_0_out_1 = *bias++;
 80012c4:	f8d7 2398 	ldr.w	r2, [r7, #920]	@ 0x398
 80012c8:	1d13      	adds	r3, r2, #4
 80012ca:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
 80012ce:	6813      	ldr	r3, [r2, #0]
 80012d0:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
        q31_t ch_1_out_0 = *bias;
 80012d4:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f8c7 3380 	str.w	r3, [r7, #896]	@ 0x380
        q31_t ch_1_out_1 = *bias++;
 80012de:	f8d7 2398 	ldr.w	r2, [r7, #920]	@ 0x398
 80012e2:	1d13      	adds	r3, r2, #4
 80012e4:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
 80012e8:	6813      	ldr	r3, [r2, #0]
 80012ea:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c

        uint16_t col_count = num_col_a / 8;
 80012ee:	f8b7 33d0 	ldrh.w	r3, [r7, #976]	@ 0x3d0
 80012f2:	08db      	lsrs	r3, r3, #3
 80012f4:	f8a7 337a 	strh.w	r3, [r7, #890]	@ 0x37a
        /* accumulate over the vector */
        while (col_count)
 80012f8:	f000 be27 	b.w	8001f4a <arm_nn_mat_mult_kernel_s8_s16_reordered+0xd42>
 80012fc:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001300:	f5a3 72f8 	sub.w	r2, r3, #496	@ 0x1f0
 8001304:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001308:	6013      	str	r3, [r2, #0]
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q15x2_ia(const q15_t **in_q15)
{
    q31_t val;

    memcpy(&val, *in_q15, 4);
 800130a:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800130e:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	461a      	mov	r2, r3
 800131a:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800131e:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 8001322:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8001324:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001328:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	1d1a      	adds	r2, r3, #4
 8001332:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001336:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	601a      	str	r2, [r3, #0]

    return (val);
 800133e:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001342:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 8001346:	681b      	ldr	r3, [r3, #0]
        {
            q31_t a01, a02, a11, a12;
            q31_t b0 = arm_nn_read_q15x2_ia(&ip_b0);
 8001348:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
 800134c:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001350:	f5a3 72f6 	sub.w	r2, r3, #492	@ 0x1ec
 8001354:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8001358:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q15, 4);
 800135a:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800135e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	461a      	mov	r2, r3
 800136a:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800136e:	f5a3 733c 	sub.w	r3, r3, #752	@ 0x2f0
 8001372:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8001374:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001378:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	1d1a      	adds	r2, r3, #4
 8001382:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001386:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	601a      	str	r2, [r3, #0]
    return (val);
 800138e:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001392:	f5a3 733c 	sub.w	r3, r3, #752	@ 0x2f0
 8001396:	681b      	ldr	r3, [r3, #0]
            q31_t b1 = arm_nn_read_q15x2_ia(&ip_b1);
 8001398:	f8c7 3370 	str.w	r3, [r7, #880]	@ 0x370
 800139c:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80013a0:	f5a3 723d 	sub.w	r2, r3, #756	@ 0x2f4
 80013a4:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 80013a8:	6013      	str	r3, [r2, #0]
 80013aa:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80013ae:	f5a3 72e2 	sub.w	r2, r3, #452	@ 0x1c4
 80013b2:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80013b6:	6013      	str	r3, [r2, #0]
 80013b8:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80013bc:	f5a3 72e4 	sub.w	r2, r3, #456	@ 0x1c8
 80013c0:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80013c4:	6013      	str	r3, [r2, #0]
 80013c6:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80013ca:	f5a3 72e6 	sub.w	r2, r3, #460	@ 0x1cc
 80013ce:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80013d2:	6013      	str	r3, [r2, #0]
  @return        q31 value
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4_ia(const q7_t **in_q7)
{
    q31_t val;
    memcpy(&val, *in_q7, 4);
 80013d4:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80013d8:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	461a      	mov	r2, r3
 80013e4:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80013e8:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 80013ec:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80013ee:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80013f2:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	1d1a      	adds	r2, r3, #4
 80013fc:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001400:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	601a      	str	r2, [r3, #0]

    return (val);
 8001408:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800140c:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 8001410:	681a      	ldr	r2, [r3, #0]
 * @brief read and expand one q7 word into two q15 words with reordering
 */

__STATIC_FORCEINLINE const q7_t *read_and_pad_reordered(const q7_t *source, q31_t *out1, q31_t *out2)
{
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 8001412:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001416:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800141a:	601a      	str	r2, [r3, #0]
#ifndef ARM_MATH_BIG_ENDIAN
    *out2 = __SXTB16(__ROR((uint32_t)inA, 8));
 800141c:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001420:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800142a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001434:	f5a3 72ec 	sub.w	r2, r3, #472	@ 0x1d8
 8001438:	2308      	movs	r3, #8
 800143a:	6013      	str	r3, [r2, #0]
  \param [in]    op2  Number of Bits to rotate
  \return               Rotated value
 */
__STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
{
  op2 %= 32U;
 800143c:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001440:	f5a3 72ec 	sub.w	r2, r3, #472	@ 0x1d8
 8001444:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001448:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 031f 	and.w	r3, r3, #31
 8001452:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8001454:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001458:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d105      	bne.n	800146e <arm_nn_mat_mult_kernel_s8_s16_reordered+0x266>
  {
    return op1;
 8001462:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001466:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	e00a      	b.n	8001484 <arm_nn_mat_mult_kernel_s8_s16_reordered+0x27c>
  }
  return (op1 >> op2) | (op1 << (32U - op2));
 800146e:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001472:	f5a3 72ea 	sub.w	r2, r3, #468	@ 0x1d4
 8001476:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800147a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800147e:	6812      	ldr	r2, [r2, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	41da      	rors	r2, r3
 8001484:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001488:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800148c:	601a      	str	r2, [r3, #0]

__STATIC_FORCEINLINE uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800148e:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001492:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	fa2f f283 	sxtb16	r2, r3
 800149c:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80014a0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80014a4:	601a      	str	r2, [r3, #0]
  return(result);
 80014a6:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80014aa:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	461a      	mov	r2, r3
 80014b2:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80014b6:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	601a      	str	r2, [r3, #0]
    *out1 = __SXTB16(inA);
 80014be:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80014c2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80014cc:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80014d0:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80014d2:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80014d6:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	fa2f f283 	sxtb16	r2, r3
 80014e0:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80014e4:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80014e8:	601a      	str	r2, [r3, #0]
  return(result);
 80014ea:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80014ee:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	461a      	mov	r2, r3
 80014f6:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80014fa:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	601a      	str	r2, [r3, #0]
#else
    *out1 = __SXTB16(__ROR((uint32_t)inA, 8));
    *out2 = __SXTB16(inA);
#endif

    return source;
 8001502:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001506:	f5a3 733d 	sub.w	r3, r3, #756	@ 0x2f4
 800150a:	681b      	ldr	r3, [r3, #0]

            ip_a0 = read_and_pad_reordered(ip_a0, &a01, &a02);
 800150c:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390

            ch_0_out_0 = __SMLAD(a01, b0, ch_0_out_0);
 8001510:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001514:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4618      	mov	r0, r3
 800151c:	f8d7 2374 	ldr.w	r2, [r7, #884]	@ 0x374
 8001520:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 8001524:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001528:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800152c:	6018      	str	r0, [r3, #0]
 800152e:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001532:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800153c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001540:	6019      	str	r1, [r3, #0]

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001542:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001546:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800154a:	6819      	ldr	r1, [r3, #0]
 800154c:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001550:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800155a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	fb21 3202 	smlad	r2, r1, r2, r3
 8001564:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001568:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800156c:	601a      	str	r2, [r3, #0]
  return(result);
 800156e:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001572:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f8c7 3388 	str.w	r3, [r7, #904]	@ 0x388
 800157c:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001580:	f5a3 723f 	sub.w	r2, r3, #764	@ 0x2fc
 8001584:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 8001588:	6013      	str	r3, [r2, #0]
 800158a:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800158e:	f5a3 72c6 	sub.w	r2, r3, #396	@ 0x18c
 8001592:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001596:	6013      	str	r3, [r2, #0]
 8001598:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800159c:	f5a3 72c8 	sub.w	r2, r3, #400	@ 0x190
 80015a0:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 80015a4:	6013      	str	r3, [r2, #0]
 80015a6:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80015aa:	f5a3 72ca 	sub.w	r2, r3, #404	@ 0x194
 80015ae:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80015b2:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 80015b4:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80015b8:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	461a      	mov	r2, r3
 80015c4:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80015c8:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 80015cc:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80015ce:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80015d2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	1d1a      	adds	r2, r3, #4
 80015dc:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80015e0:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	601a      	str	r2, [r3, #0]
    return (val);
 80015e8:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80015ec:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 80015f0:	681a      	ldr	r2, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 80015f2:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80015f6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80015fa:	601a      	str	r2, [r3, #0]
    *out2 = __SXTB16(__ROR((uint32_t)inA, 8));
 80015fc:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001600:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800160a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001614:	f5a3 72d0 	sub.w	r2, r3, #416	@ 0x1a0
 8001618:	2308      	movs	r3, #8
 800161a:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 800161c:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001620:	f5a3 72d0 	sub.w	r2, r3, #416	@ 0x1a0
 8001624:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001628:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 031f 	and.w	r3, r3, #31
 8001632:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8001634:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001638:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d105      	bne.n	800164e <arm_nn_mat_mult_kernel_s8_s16_reordered+0x446>
    return op1;
 8001642:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001646:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	e00a      	b.n	8001664 <arm_nn_mat_mult_kernel_s8_s16_reordered+0x45c>
  return (op1 >> op2) | (op1 << (32U - op2));
 800164e:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001652:	f5a3 72ce 	sub.w	r2, r3, #412	@ 0x19c
 8001656:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800165a:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 800165e:	6812      	ldr	r2, [r2, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	41da      	rors	r2, r3
 8001664:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001668:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 800166c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800166e:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001672:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	fa2f f283 	sxtb16	r2, r3
 800167c:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001680:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001684:	601a      	str	r2, [r3, #0]
  return(result);
 8001686:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800168a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	461a      	mov	r2, r3
 8001692:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001696:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	601a      	str	r2, [r3, #0]
    *out1 = __SXTB16(inA);
 800169e:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80016a2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80016ac:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80016b0:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80016b2:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80016b6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	fa2f f283 	sxtb16	r2, r3
 80016c0:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80016c4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80016c8:	601a      	str	r2, [r3, #0]
  return(result);
 80016ca:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80016ce:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	461a      	mov	r2, r3
 80016d6:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80016da:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	601a      	str	r2, [r3, #0]
    return source;
 80016e2:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80016e6:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 80016ea:	681b      	ldr	r3, [r3, #0]
            ip_a1 = read_and_pad_reordered(ip_a1, &a11, &a12);
 80016ec:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
            ch_0_out_1 = __SMLAD(a01, b1, ch_0_out_1);
 80016f0:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80016f4:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f8d7 2370 	ldr.w	r2, [r7, #880]	@ 0x370
 8001700:	f8d7 1384 	ldr.w	r1, [r7, #900]	@ 0x384
 8001704:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001708:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800170c:	6018      	str	r0, [r3, #0]
 800170e:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001712:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800171c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001720:	6019      	str	r1, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001722:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001726:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800172a:	6819      	ldr	r1, [r3, #0]
 800172c:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001730:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800173a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	fb21 3202 	smlad	r2, r1, r2, r3
 8001744:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001748:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800174c:	601a      	str	r2, [r3, #0]
  return(result);
 800174e:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001752:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
            ch_1_out_0 = __SMLAD(a11, b0, ch_1_out_0);
 800175c:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001760:	f5a3 7339 	sub.w	r3, r3, #740	@ 0x2e4
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f8d7 2374 	ldr.w	r2, [r7, #884]	@ 0x374
 800176c:	f8d7 1380 	ldr.w	r1, [r7, #896]	@ 0x380
 8001770:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001774:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001778:	6018      	str	r0, [r3, #0]
 800177a:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800177e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001788:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800178c:	6019      	str	r1, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800178e:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001792:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001796:	6819      	ldr	r1, [r3, #0]
 8001798:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800179c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80017a6:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	fb21 3202 	smlad	r2, r1, r2, r3
 80017b0:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80017b4:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80017b8:	601a      	str	r2, [r3, #0]
  return(result);
 80017ba:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80017be:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f8c7 3380 	str.w	r3, [r7, #896]	@ 0x380
 80017c8:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80017cc:	f5a3 72b4 	sub.w	r2, r3, #360	@ 0x168
 80017d0:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80017d4:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q15, 4);
 80017d6:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80017da:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	461a      	mov	r2, r3
 80017e6:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80017ea:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 80017ee:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 80017f0:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80017f4:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	1d1a      	adds	r2, r3, #4
 80017fe:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001802:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	601a      	str	r2, [r3, #0]
    return (val);
 800180a:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800180e:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8001812:	681b      	ldr	r3, [r3, #0]
            b0 = arm_nn_read_q15x2_ia(&ip_b0);
 8001814:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
            ch_1_out_1 = __SMLAD(a11, b1, ch_1_out_1);
 8001818:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800181c:	f5a3 7339 	sub.w	r3, r3, #740	@ 0x2e4
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f8d7 2370 	ldr.w	r2, [r7, #880]	@ 0x370
 8001828:	f8d7 137c 	ldr.w	r1, [r7, #892]	@ 0x37c
 800182c:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001830:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001834:	6018      	str	r0, [r3, #0]
 8001836:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800183a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001844:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001848:	6019      	str	r1, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800184a:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800184e:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001852:	6819      	ldr	r1, [r3, #0]
 8001854:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001858:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001862:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	fb21 3202 	smlad	r2, r1, r2, r3
 800186c:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001870:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001874:	601a      	str	r2, [r3, #0]
  return(result);
 8001876:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800187a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
 8001884:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001888:	f5a3 72aa 	sub.w	r2, r3, #340	@ 0x154
 800188c:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8001890:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q15, 4);
 8001892:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001896:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	461a      	mov	r2, r3
 80018a2:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80018a6:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 80018aa:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 80018ac:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80018b0:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	1d1a      	adds	r2, r3, #4
 80018ba:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80018be:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	601a      	str	r2, [r3, #0]
    return (val);
 80018c6:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80018ca:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 80018ce:	681b      	ldr	r3, [r3, #0]

            b1 = arm_nn_read_q15x2_ia(&ip_b1);
 80018d0:	f8c7 3370 	str.w	r3, [r7, #880]	@ 0x370

            ch_0_out_0 = __SMLAD(a02, b0, ch_0_out_0);
 80018d4:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80018d8:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f8d7 2374 	ldr.w	r2, [r7, #884]	@ 0x374
 80018e4:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 80018e8:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80018ec:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80018f0:	6018      	str	r0, [r3, #0]
 80018f2:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80018f6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001900:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001904:	6019      	str	r1, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001906:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800190a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800190e:	6819      	ldr	r1, [r3, #0]
 8001910:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001914:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800191e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	fb21 3202 	smlad	r2, r1, r2, r3
 8001928:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800192c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001930:	601a      	str	r2, [r3, #0]
  return(result);
 8001932:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001936:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f8c7 3388 	str.w	r3, [r7, #904]	@ 0x388
            ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);
 8001940:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001944:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f8d7 2370 	ldr.w	r2, [r7, #880]	@ 0x370
 8001950:	f8d7 1384 	ldr.w	r1, [r7, #900]	@ 0x384
 8001954:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001958:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800195c:	6018      	str	r0, [r3, #0]
 800195e:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001962:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800196c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001970:	6019      	str	r1, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001972:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001976:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800197a:	6819      	ldr	r1, [r3, #0]
 800197c:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001980:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800198a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	fb21 3202 	smlad	r2, r1, r2, r3
 8001994:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001998:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800199c:	601a      	str	r2, [r3, #0]
  return(result);
 800199e:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80019a2:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
            ch_1_out_0 = __SMLAD(a12, b0, ch_1_out_0);
 80019ac:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80019b0:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f8d7 2374 	ldr.w	r2, [r7, #884]	@ 0x374
 80019bc:	f8d7 1380 	ldr.w	r1, [r7, #896]	@ 0x380
 80019c0:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80019c4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80019c8:	6018      	str	r0, [r3, #0]
 80019ca:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80019ce:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80019d8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80019dc:	6019      	str	r1, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80019de:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80019e2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80019e6:	6819      	ldr	r1, [r3, #0]
 80019e8:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80019ec:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80019f6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	fb21 3202 	smlad	r2, r1, r2, r3
 8001a00:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001a04:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001a08:	601a      	str	r2, [r3, #0]
  return(result);
 8001a0a:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001a0e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f8c7 3380 	str.w	r3, [r7, #896]	@ 0x380
 8001a18:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001a1c:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 8001a20:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001a24:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q15, 4);
 8001a26:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001a2a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	461a      	mov	r2, r3
 8001a36:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001a3a:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8001a3e:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8001a40:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001a44:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	1d1a      	adds	r2, r3, #4
 8001a4e:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001a52:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	601a      	str	r2, [r3, #0]
    return (val);
 8001a5a:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001a5e:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8001a62:	681b      	ldr	r3, [r3, #0]
            b0 = arm_nn_read_q15x2_ia(&ip_b0);
 8001a64:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
            ch_1_out_1 = __SMLAD(a12, b1, ch_1_out_1);
 8001a68:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001a6c:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f8d7 2370 	ldr.w	r2, [r7, #880]	@ 0x370
 8001a78:	f8d7 137c 	ldr.w	r1, [r7, #892]	@ 0x37c
 8001a7c:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001a80:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001a84:	6018      	str	r0, [r3, #0]
 8001a86:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001a8a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001a94:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001a98:	6019      	str	r1, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001a9a:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001a9e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001aa2:	6819      	ldr	r1, [r3, #0]
 8001aa4:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001aa8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001ab2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	fb21 3202 	smlad	r2, r1, r2, r3
 8001abc:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001ac0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001ac4:	601a      	str	r2, [r3, #0]
  return(result);
 8001ac6:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001aca:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
 8001ad4:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001ad8:	f5a3 7286 	sub.w	r2, r3, #268	@ 0x10c
 8001adc:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8001ae0:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q15, 4);
 8001ae2:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001ae6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	461a      	mov	r2, r3
 8001af2:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001af6:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8001afa:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8001afc:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001b00:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	1d1a      	adds	r2, r3, #4
 8001b0a:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001b0e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	601a      	str	r2, [r3, #0]
    return (val);
 8001b16:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001b1a:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8001b1e:	681b      	ldr	r3, [r3, #0]

            b1 = arm_nn_read_q15x2_ia(&ip_b1);
 8001b20:	f8c7 3370 	str.w	r3, [r7, #880]	@ 0x370
 8001b24:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001b28:	f5a3 7245 	sub.w	r2, r3, #788	@ 0x314
 8001b2c:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8001b30:	6013      	str	r3, [r2, #0]
 8001b32:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001b36:	f8c7 32bc 	str.w	r3, [r7, #700]	@ 0x2bc
 8001b3a:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001b3e:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
 8001b42:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001b46:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
    memcpy(&val, *in_q7, 4);
 8001b4a:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	461a      	mov	r2, r3
 8001b54:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001b58:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 8001b5c:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8001b5e:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	1d1a      	adds	r2, r3, #4
 8001b66:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8001b6a:	601a      	str	r2, [r3, #0]
    return (val);
 8001b6c:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001b70:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 8001b74:	681b      	ldr	r3, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 8001b76:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
    *out2 = __SXTB16(__ROR((uint32_t)inA, 8));
 8001b7a:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 8001b7e:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8001b82:	2308      	movs	r3, #8
 8001b84:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
  op2 %= 32U;
 8001b88:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 8001b8c:	f003 031f 	and.w	r3, r3, #31
 8001b90:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
  if (op2 == 0U)
 8001b94:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d102      	bne.n	8001ba2 <arm_nn_mat_mult_kernel_s8_s16_reordered+0x99a>
    return op1;
 8001b9c:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8001ba0:	e005      	b.n	8001bae <arm_nn_mat_mult_kernel_s8_s16_reordered+0x9a6>
  return (op1 >> op2) | (op1 << (32U - op2));
 8001ba2:	f8d7 22ac 	ldr.w	r2, [r7, #684]	@ 0x2ac
 8001ba6:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 8001baa:	fa62 f303 	ror.w	r3, r2, r3
 8001bae:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001bb2:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 8001bb6:	fa2f f283 	sxtb16	r2, r3
 8001bba:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001bbe:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001bc2:	601a      	str	r2, [r3, #0]
  return(result);
 8001bc4:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001bc8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	f8d7 32b8 	ldr.w	r3, [r7, #696]	@ 0x2b8
 8001bd4:	601a      	str	r2, [r3, #0]
    *out1 = __SXTB16(inA);
 8001bd6:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 8001bda:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001bde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001be2:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001be4:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001be8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	fa2f f283 	sxtb16	r2, r3
 8001bf2:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001bf6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001bfa:	601a      	str	r2, [r3, #0]
  return(result);
 8001bfc:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001c00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	461a      	mov	r2, r3
 8001c08:	f8d7 32bc 	ldr.w	r3, [r7, #700]	@ 0x2bc
 8001c0c:	601a      	str	r2, [r3, #0]
    return source;
 8001c0e:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001c12:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8001c16:	681b      	ldr	r3, [r3, #0]

            ip_a0 = read_and_pad_reordered(ip_a0, &a01, &a02);
 8001c18:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390

			ch_0_out_0 = __SMLAD(a01, b0, ch_0_out_0);
 8001c1c:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001c20:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4619      	mov	r1, r3
 8001c28:	f8d7 2374 	ldr.w	r2, [r7, #884]	@ 0x374
 8001c2c:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 8001c30:	f8c7 12cc 	str.w	r1, [r7, #716]	@ 0x2cc
 8001c34:	f8c7 22c8 	str.w	r2, [r7, #712]	@ 0x2c8
 8001c38:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001c3c:	f8d7 12cc 	ldr.w	r1, [r7, #716]	@ 0x2cc
 8001c40:	f8d7 22c8 	ldr.w	r2, [r7, #712]	@ 0x2c8
 8001c44:	f8d7 32c4 	ldr.w	r3, [r7, #708]	@ 0x2c4
 8001c48:	fb21 3302 	smlad	r3, r1, r2, r3
 8001c4c:	f8c7 32c0 	str.w	r3, [r7, #704]	@ 0x2c0
  return(result);
 8001c50:	f8d7 32c0 	ldr.w	r3, [r7, #704]	@ 0x2c0
 8001c54:	f8c7 3388 	str.w	r3, [r7, #904]	@ 0x388
 8001c58:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001c5c:	f5a3 7247 	sub.w	r2, r3, #796	@ 0x31c
 8001c60:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 8001c64:	6013      	str	r3, [r2, #0]
 8001c66:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001c6a:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
 8001c6e:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8001c72:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
 8001c76:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001c7a:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
    memcpy(&val, *in_q7, 4);
 8001c7e:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	461a      	mov	r2, r3
 8001c88:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001c8c:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 8001c90:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8001c92:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	1d1a      	adds	r2, r3, #4
 8001c9a:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 8001c9e:	601a      	str	r2, [r3, #0]
    return (val);
 8001ca0:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001ca4:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 8001ca8:	681b      	ldr	r3, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 8001caa:	f8c7 32e8 	str.w	r3, [r7, #744]	@ 0x2e8
    *out2 = __SXTB16(__ROR((uint32_t)inA, 8));
 8001cae:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 8001cb2:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
 8001cb6:	2308      	movs	r3, #8
 8001cb8:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
  op2 %= 32U;
 8001cbc:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 8001cc0:	f003 031f 	and.w	r3, r3, #31
 8001cc4:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
  if (op2 == 0U)
 8001cc8:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d102      	bne.n	8001cd6 <arm_nn_mat_mult_kernel_s8_s16_reordered+0xace>
    return op1;
 8001cd0:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 8001cd4:	e005      	b.n	8001ce2 <arm_nn_mat_mult_kernel_s8_s16_reordered+0xada>
  return (op1 >> op2) | (op1 << (32U - op2));
 8001cd6:	f8d7 22e4 	ldr.w	r2, [r7, #740]	@ 0x2e4
 8001cda:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 8001cde:	fa62 f303 	ror.w	r3, r2, r3
 8001ce2:	f8c7 32dc 	str.w	r3, [r7, #732]	@ 0x2dc
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001ce6:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 8001cea:	fa2f f383 	sxtb16	r3, r3
 8001cee:	f8c7 32d8 	str.w	r3, [r7, #728]	@ 0x2d8
  return(result);
 8001cf2:	f8d7 32d8 	ldr.w	r3, [r7, #728]	@ 0x2d8
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 8001cfc:	601a      	str	r2, [r3, #0]
    *out1 = __SXTB16(inA);
 8001cfe:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 8001d02:	f8c7 32d4 	str.w	r3, [r7, #724]	@ 0x2d4
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001d06:	f8d7 32d4 	ldr.w	r3, [r7, #724]	@ 0x2d4
 8001d0a:	fa2f f383 	sxtb16	r3, r3
 8001d0e:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
  return(result);
 8001d12:	f8d7 32d0 	ldr.w	r3, [r7, #720]	@ 0x2d0
 8001d16:	461a      	mov	r2, r3
 8001d18:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 8001d1c:	601a      	str	r2, [r3, #0]
    return source;
 8001d1e:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001d22:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8001d26:	681b      	ldr	r3, [r3, #0]
			ip_a1 = read_and_pad_reordered(ip_a1, &a11, &a12);
 8001d28:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
			ch_0_out_1 = __SMLAD(a01, b1, ch_0_out_1);
 8001d2c:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001d30:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4619      	mov	r1, r3
 8001d38:	f8d7 2370 	ldr.w	r2, [r7, #880]	@ 0x370
 8001d3c:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 8001d40:	f8c7 1304 	str.w	r1, [r7, #772]	@ 0x304
 8001d44:	f8c7 2300 	str.w	r2, [r7, #768]	@ 0x300
 8001d48:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001d4c:	f8d7 1304 	ldr.w	r1, [r7, #772]	@ 0x304
 8001d50:	f8d7 2300 	ldr.w	r2, [r7, #768]	@ 0x300
 8001d54:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8001d58:	fb21 3302 	smlad	r3, r1, r2, r3
 8001d5c:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
  return(result);
 8001d60:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 8001d64:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
			ch_1_out_0 = __SMLAD(a11, b0, ch_1_out_0);
 8001d68:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001d6c:	f5a3 7339 	sub.w	r3, r3, #740	@ 0x2e4
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4619      	mov	r1, r3
 8001d74:	f8d7 2374 	ldr.w	r2, [r7, #884]	@ 0x374
 8001d78:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 8001d7c:	f8c7 1314 	str.w	r1, [r7, #788]	@ 0x314
 8001d80:	f8c7 2310 	str.w	r2, [r7, #784]	@ 0x310
 8001d84:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001d88:	f8d7 1314 	ldr.w	r1, [r7, #788]	@ 0x314
 8001d8c:	f8d7 2310 	ldr.w	r2, [r7, #784]	@ 0x310
 8001d90:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 8001d94:	fb21 3302 	smlad	r3, r1, r2, r3
 8001d98:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308
  return(result);
 8001d9c:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 8001da0:	f8c7 3380 	str.w	r3, [r7, #896]	@ 0x380
 8001da4:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001da8:	f8c7 3318 	str.w	r3, [r7, #792]	@ 0x318
    memcpy(&val, *in_q15, 4);
 8001dac:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	461a      	mov	r2, r3
 8001db6:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001dba:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8001dbe:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8001dc0:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	1d1a      	adds	r2, r3, #4
 8001dc8:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8001dcc:	601a      	str	r2, [r3, #0]
    return (val);
 8001dce:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001dd2:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8001dd6:	681b      	ldr	r3, [r3, #0]
			b0 = arm_nn_read_q15x2_ia(&ip_b0);
 8001dd8:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
			ch_1_out_1 = __SMLAD(a11, b1, ch_1_out_1);
 8001ddc:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001de0:	f5a3 7339 	sub.w	r3, r3, #740	@ 0x2e4
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4619      	mov	r1, r3
 8001de8:	f8d7 2370 	ldr.w	r2, [r7, #880]	@ 0x370
 8001dec:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 8001df0:	f8c7 1328 	str.w	r1, [r7, #808]	@ 0x328
 8001df4:	f8c7 2324 	str.w	r2, [r7, #804]	@ 0x324
 8001df8:	f8c7 3320 	str.w	r3, [r7, #800]	@ 0x320
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001dfc:	f8d7 1328 	ldr.w	r1, [r7, #808]	@ 0x328
 8001e00:	f8d7 2324 	ldr.w	r2, [r7, #804]	@ 0x324
 8001e04:	f8d7 3320 	ldr.w	r3, [r7, #800]	@ 0x320
 8001e08:	fb21 3302 	smlad	r3, r1, r2, r3
 8001e0c:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
  return(result);
 8001e10:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8001e14:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
 8001e18:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8001e1c:	f8c7 332c 	str.w	r3, [r7, #812]	@ 0x32c
    memcpy(&val, *in_q15, 4);
 8001e20:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001e2e:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 8001e32:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8001e34:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	1d1a      	adds	r2, r3, #4
 8001e3c:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8001e40:	601a      	str	r2, [r3, #0]
    return (val);
 8001e42:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001e46:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 8001e4a:	681b      	ldr	r3, [r3, #0]

			b1 = arm_nn_read_q15x2_ia(&ip_b1);
 8001e4c:	f8c7 3370 	str.w	r3, [r7, #880]	@ 0x370

			ch_0_out_0 = __SMLAD(a02, b0, ch_0_out_0);
 8001e50:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001e54:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	f8d7 2374 	ldr.w	r2, [r7, #884]	@ 0x374
 8001e60:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 8001e64:	f8c7 133c 	str.w	r1, [r7, #828]	@ 0x33c
 8001e68:	f8c7 2338 	str.w	r2, [r7, #824]	@ 0x338
 8001e6c:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001e70:	f8d7 133c 	ldr.w	r1, [r7, #828]	@ 0x33c
 8001e74:	f8d7 2338 	ldr.w	r2, [r7, #824]	@ 0x338
 8001e78:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8001e7c:	fb21 3302 	smlad	r3, r1, r2, r3
 8001e80:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330
  return(result);
 8001e84:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001e88:	f8c7 3388 	str.w	r3, [r7, #904]	@ 0x388
			ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);
 8001e8c:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001e90:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4619      	mov	r1, r3
 8001e98:	f8d7 2370 	ldr.w	r2, [r7, #880]	@ 0x370
 8001e9c:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 8001ea0:	f8c7 134c 	str.w	r1, [r7, #844]	@ 0x34c
 8001ea4:	f8c7 2348 	str.w	r2, [r7, #840]	@ 0x348
 8001ea8:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001eac:	f8d7 134c 	ldr.w	r1, [r7, #844]	@ 0x34c
 8001eb0:	f8d7 2348 	ldr.w	r2, [r7, #840]	@ 0x348
 8001eb4:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8001eb8:	fb21 3302 	smlad	r3, r1, r2, r3
 8001ebc:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
  return(result);
 8001ec0:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8001ec4:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
			ch_1_out_0 = __SMLAD(a12, b0, ch_1_out_0);
 8001ec8:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001ecc:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	f8d7 2374 	ldr.w	r2, [r7, #884]	@ 0x374
 8001ed8:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 8001edc:	f8c7 135c 	str.w	r1, [r7, #860]	@ 0x35c
 8001ee0:	f8c7 2358 	str.w	r2, [r7, #856]	@ 0x358
 8001ee4:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001ee8:	f8d7 135c 	ldr.w	r1, [r7, #860]	@ 0x35c
 8001eec:	f8d7 2358 	ldr.w	r2, [r7, #856]	@ 0x358
 8001ef0:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8001ef4:	fb21 3302 	smlad	r3, r1, r2, r3
 8001ef8:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
  return(result);
 8001efc:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8001f00:	f8c7 3380 	str.w	r3, [r7, #896]	@ 0x380
			ch_1_out_1 = __SMLAD(a12, b1, ch_1_out_1);
 8001f04:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001f08:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4619      	mov	r1, r3
 8001f10:	f8d7 2370 	ldr.w	r2, [r7, #880]	@ 0x370
 8001f14:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 8001f18:	f8c7 136c 	str.w	r1, [r7, #876]	@ 0x36c
 8001f1c:	f8c7 2368 	str.w	r2, [r7, #872]	@ 0x368
 8001f20:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001f24:	f8d7 136c 	ldr.w	r1, [r7, #876]	@ 0x36c
 8001f28:	f8d7 2368 	ldr.w	r2, [r7, #872]	@ 0x368
 8001f2c:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8001f30:	fb21 3302 	smlad	r3, r1, r2, r3
 8001f34:	f8c7 3360 	str.w	r3, [r7, #864]	@ 0x360
  return(result);
 8001f38:	f8d7 3360 	ldr.w	r3, [r7, #864]	@ 0x360
 8001f3c:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c

            col_count--;
 8001f40:	f8b7 337a 	ldrh.w	r3, [r7, #890]	@ 0x37a
 8001f44:	3b01      	subs	r3, #1
 8001f46:	f8a7 337a 	strh.w	r3, [r7, #890]	@ 0x37a
        while (col_count)
 8001f4a:	f8b7 337a 	ldrh.w	r3, [r7, #890]	@ 0x37a
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f47f a9d4 	bne.w	80012fc <arm_nn_mat_mult_kernel_s8_s16_reordered+0xf4>
        } /* while over col_count */

        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
 8001f54:	f8d7 33c0 	ldr.w	r3, [r7, #960]	@ 0x3c0
 8001f58:	6818      	ldr	r0, [r3, #0]
 8001f5a:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001f5e:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6819      	ldr	r1, [r3, #0]
 8001f66:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001f6a:	f5a3 7221 	sub.w	r2, r3, #644	@ 0x284
 8001f6e:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 8001f72:	6013      	str	r3, [r2, #0]
 8001f74:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001f78:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8001f7c:	6018      	str	r0, [r3, #0]
 8001f7e:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001f82:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8001f86:	6019      	str	r1, [r3, #0]
    int32_t result = new_val >> (total_shift - 1);
    result = (result + 1) >> 1;

    return result;
#else
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8001f88:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001f8c:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8001f96:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001f9a:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	fa03 f202 	lsl.w	r2, r3, r2
 8001fa4:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001fa8:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001fb2:	f5a3 7225 	sub.w	r2, r3, #660	@ 0x294
 8001fb6:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001fba:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8001fc2:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001fc6:	f5a3 7226 	sub.w	r2, r3, #664	@ 0x298
 8001fca:	2300      	movs	r3, #0
 8001fcc:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 8001fce:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001fd2:	f5a3 7230 	sub.w	r2, r3, #704	@ 0x2c0
 8001fd6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001fda:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 8001fdc:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001fe0:	f5a3 7230 	sub.w	r2, r3, #704	@ 0x2c0
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8001fe8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001fec:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001ff0:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	17da      	asrs	r2, r3, #31
 8001ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ffa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ffc:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002000:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	17da      	asrs	r2, r3, #31
 8002008:	623b      	str	r3, [r7, #32]
 800200a:	627a      	str	r2, [r7, #36]	@ 0x24
 800200c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800200e:	6a3a      	ldr	r2, [r7, #32]
 8002010:	fb02 f203 	mul.w	r2, r2, r3
 8002014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002016:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 8002018:	fb04 f303 	mul.w	r3, r4, r3
 800201c:	4413      	add	r3, r2
 800201e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002020:	6a3c      	ldr	r4, [r7, #32]
 8002022:	fba2 4204 	umull	r4, r2, r2, r4
 8002026:	667a      	str	r2, [r7, #100]	@ 0x64
 8002028:	4622      	mov	r2, r4
 800202a:	663a      	str	r2, [r7, #96]	@ 0x60
 800202c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800202e:	4413      	add	r3, r2
 8002030:	667b      	str	r3, [r7, #100]	@ 0x64
 8002032:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002034:	18c3      	adds	r3, r0, r3
 8002036:	603b      	str	r3, [r7, #0]
 8002038:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800203a:	eb41 0303 	adc.w	r3, r1, r3
 800203e:	607b      	str	r3, [r7, #4]
 8002040:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002044:	e9c7 3438 	strd	r3, r4, [r7, #224]	@ 0xe0
    result = (int32_t)(mult.long_long >> 31);
 8002048:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 800204c:	f04f 0000 	mov.w	r0, #0
 8002050:	f04f 0100 	mov.w	r1, #0
 8002054:	0fd0      	lsrs	r0, r2, #31
 8002056:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800205a:	17d9      	asrs	r1, r3, #31
 800205c:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002060:	f5a3 7226 	sub.w	r2, r3, #664	@ 0x298
 8002064:	4603      	mov	r3, r0
 8002066:	6013      	str	r3, [r2, #0]
    return result;
 8002068:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800206c:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8002070:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8002072:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002076:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2b00      	cmp	r3, #0
 800207e:	dc06      	bgt.n	800208e <arm_nn_mat_mult_kernel_s8_s16_reordered+0xe86>
 8002080:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002084:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	425a      	negs	r2, r3
 800208c:	e000      	b.n	8002090 <arm_nn_mat_mult_kernel_s8_s16_reordered+0xe88>
 800208e:	2200      	movs	r2, #0
 8002090:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002094:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 8002098:	6019      	str	r1, [r3, #0]
 800209a:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800209e:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 80020a2:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 80020a4:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80020a8:	f5a3 7229 	sub.w	r2, r3, #676	@ 0x2a4
 80020ac:	2300      	movs	r3, #0
 80020ae:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 80020b0:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80020b4:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 80020b8:	2201      	movs	r2, #1
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	fa02 f103 	lsl.w	r1, r2, r3
 80020c0:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80020c4:	f5a3 722a 	sub.w	r2, r3, #680	@ 0x2a8
 80020c8:	1e4b      	subs	r3, r1, #1
 80020ca:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 80020cc:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80020d0:	f5a3 712b 	sub.w	r1, r3, #684	@ 0x2ac
 80020d4:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80020d8:	f5a3 7227 	sub.w	r2, r3, #668	@ 0x29c
 80020dc:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80020e0:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 80020e4:	6812      	ldr	r2, [r2, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4013      	ands	r3, r2
 80020ea:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 80020ec:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80020f0:	f5a3 7129 	sub.w	r1, r3, #676	@ 0x2a4
 80020f4:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80020f8:	f5a3 7227 	sub.w	r2, r3, #668	@ 0x29c
 80020fc:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002100:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8002104:	6812      	ldr	r2, [r2, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	fa42 f303 	asr.w	r3, r2, r3
 800210c:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 800210e:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002112:	f5a3 722c 	sub.w	r2, r3, #688	@ 0x2b0
 8002116:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800211a:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	105b      	asrs	r3, r3, #1
 8002122:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8002124:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002128:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	da0a      	bge.n	8002148 <arm_nn_mat_mult_kernel_s8_s16_reordered+0xf40>
        threshold++;
 8002132:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002136:	f5a3 722c 	sub.w	r2, r3, #688	@ 0x2b0
 800213a:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800213e:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	3301      	adds	r3, #1
 8002146:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8002148:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800214c:	f5a3 722b 	sub.w	r2, r3, #684	@ 0x2ac
 8002150:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002154:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8002158:	6812      	ldr	r2, [r2, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	429a      	cmp	r2, r3
 800215e:	dd0a      	ble.n	8002176 <arm_nn_mat_mult_kernel_s8_s16_reordered+0xf6e>
        result++;
 8002160:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002164:	f5a3 7229 	sub.w	r2, r3, #676	@ 0x2a4
 8002168:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800216c:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	3301      	adds	r3, #1
 8002174:	6013      	str	r3, [r2, #0]
    return result;
 8002176:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800217a:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800217e:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8002180:	bf00      	nop
 8002182:	f8c7 3388 	str.w	r3, [r7, #904]	@ 0x388
        ch_0_out_0 += out_offset;
 8002186:	f8d7 2388 	ldr.w	r2, [r7, #904]	@ 0x388
 800218a:	f8d7 33c4 	ldr.w	r3, [r7, #964]	@ 0x3c4
 800218e:	4413      	add	r3, r2
 8002190:	f8c7 3388 	str.w	r3, [r7, #904]	@ 0x388
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 8002194:	f9b7 23c8 	ldrsh.w	r2, [r7, #968]	@ 0x3c8
 8002198:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 800219c:	4293      	cmp	r3, r2
 800219e:	bfb8      	it	lt
 80021a0:	4613      	movlt	r3, r2
 80021a2:	f8c7 3388 	str.w	r3, [r7, #904]	@ 0x388
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 80021a6:	f9b7 23cc 	ldrsh.w	r2, [r7, #972]	@ 0x3cc
 80021aa:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 80021ae:	4293      	cmp	r3, r2
 80021b0:	bfa8      	it	ge
 80021b2:	4613      	movge	r3, r2
 80021b4:	f8c7 3388 	str.w	r3, [r7, #904]	@ 0x388
        *out_0++ = (q7_t)ch_0_out_0;
 80021b8:	f8d7 23d8 	ldr.w	r2, [r7, #984]	@ 0x3d8
 80021bc:	1c53      	adds	r3, r2, #1
 80021be:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
 80021c2:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 80021c6:	b25b      	sxtb	r3, r3
 80021c8:	7013      	strb	r3, [r2, #0]

        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
 80021ca:	f8d7 33c0 	ldr.w	r3, [r7, #960]	@ 0x3c0
 80021ce:	6818      	ldr	r0, [r3, #0]
 80021d0:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80021d4:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	6819      	ldr	r1, [r3, #0]
 80021dc:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80021e0:	f5a3 7215 	sub.w	r2, r3, #596	@ 0x254
 80021e4:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 80021e8:	6013      	str	r3, [r2, #0]
 80021ea:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80021ee:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 80021f2:	6018      	str	r0, [r3, #0]
 80021f4:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80021f8:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80021fc:	6019      	str	r1, [r3, #0]
 80021fe:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002202:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 800220c:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002210:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	fa03 f202 	lsl.w	r2, r3, r2
 800221a:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800221e:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002228:	f5a3 7219 	sub.w	r2, r3, #612	@ 0x264
 800222c:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002230:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8002238:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800223c:	f5a3 721a 	sub.w	r2, r3, #616	@ 0x268
 8002240:	2300      	movs	r3, #0
 8002242:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 8002244:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002248:	f5a3 7232 	sub.w	r2, r3, #712	@ 0x2c8
 800224c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002250:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 8002252:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002256:	f5a3 7232 	sub.w	r2, r3, #712	@ 0x2c8
 800225a:	2300      	movs	r3, #0
 800225c:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800225e:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 8002262:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002266:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	17da      	asrs	r2, r3, #31
 800226e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002270:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002272:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002276:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	17da      	asrs	r2, r3, #31
 800227e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002280:	637a      	str	r2, [r7, #52]	@ 0x34
 8002282:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002284:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002286:	fb02 f203 	mul.w	r2, r2, r3
 800228a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800228c:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 800228e:	fb04 f303 	mul.w	r3, r4, r3
 8002292:	4413      	add	r3, r2
 8002294:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002296:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 8002298:	fba2 5604 	umull	r5, r6, r2, r4
 800229c:	4433      	add	r3, r6
 800229e:	461e      	mov	r6, r3
 80022a0:	1943      	adds	r3, r0, r5
 80022a2:	60bb      	str	r3, [r7, #8]
 80022a4:	eb41 0306 	adc.w	r3, r1, r6
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80022ae:	e9c7 3436 	strd	r3, r4, [r7, #216]	@ 0xd8
    result = (int32_t)(mult.long_long >> 31);
 80022b2:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 80022b6:	f04f 0000 	mov.w	r0, #0
 80022ba:	f04f 0100 	mov.w	r1, #0
 80022be:	0fd0      	lsrs	r0, r2, #31
 80022c0:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80022c4:	17d9      	asrs	r1, r3, #31
 80022c6:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80022ca:	f5a3 721a 	sub.w	r2, r3, #616	@ 0x268
 80022ce:	4603      	mov	r3, r0
 80022d0:	6013      	str	r3, [r2, #0]
    return result;
 80022d2:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80022d6:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 80022da:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80022dc:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80022e0:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	dc06      	bgt.n	80022f8 <arm_nn_mat_mult_kernel_s8_s16_reordered+0x10f0>
 80022ea:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80022ee:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	425a      	negs	r2, r3
 80022f6:	e000      	b.n	80022fa <arm_nn_mat_mult_kernel_s8_s16_reordered+0x10f2>
 80022f8:	2200      	movs	r2, #0
 80022fa:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80022fe:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8002302:	6019      	str	r1, [r3, #0]
 8002304:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002308:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 800230c:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 800230e:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002312:	f5a3 721d 	sub.w	r2, r3, #628	@ 0x274
 8002316:	2300      	movs	r3, #0
 8002318:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 800231a:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800231e:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 8002322:	2201      	movs	r2, #1
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	fa02 f103 	lsl.w	r1, r2, r3
 800232a:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800232e:	f5a3 721e 	sub.w	r2, r3, #632	@ 0x278
 8002332:	1e4b      	subs	r3, r1, #1
 8002334:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8002336:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800233a:	f5a3 711f 	sub.w	r1, r3, #636	@ 0x27c
 800233e:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002342:	f5a3 721b 	sub.w	r2, r3, #620	@ 0x26c
 8002346:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800234a:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800234e:	6812      	ldr	r2, [r2, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4013      	ands	r3, r2
 8002354:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8002356:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800235a:	f5a3 711d 	sub.w	r1, r3, #628	@ 0x274
 800235e:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002362:	f5a3 721b 	sub.w	r2, r3, #620	@ 0x26c
 8002366:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800236a:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 800236e:	6812      	ldr	r2, [r2, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	fa42 f303 	asr.w	r3, r2, r3
 8002376:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8002378:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800237c:	f5a3 7220 	sub.w	r2, r3, #640	@ 0x280
 8002380:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002384:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	105b      	asrs	r3, r3, #1
 800238c:	6013      	str	r3, [r2, #0]
    if (result < 0)
 800238e:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002392:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	da0a      	bge.n	80023b2 <arm_nn_mat_mult_kernel_s8_s16_reordered+0x11aa>
        threshold++;
 800239c:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80023a0:	f5a3 7220 	sub.w	r2, r3, #640	@ 0x280
 80023a4:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80023a8:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	3301      	adds	r3, #1
 80023b0:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 80023b2:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80023b6:	f5a3 721f 	sub.w	r2, r3, #636	@ 0x27c
 80023ba:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80023be:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 80023c2:	6812      	ldr	r2, [r2, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	dd0a      	ble.n	80023e0 <arm_nn_mat_mult_kernel_s8_s16_reordered+0x11d8>
        result++;
 80023ca:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80023ce:	f5a3 721d 	sub.w	r2, r3, #628	@ 0x274
 80023d2:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80023d6:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	3301      	adds	r3, #1
 80023de:	6013      	str	r3, [r2, #0]
    return result;
 80023e0:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80023e4:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 80023e8:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80023ea:	bf00      	nop
 80023ec:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
        ch_0_out_1 += out_offset;
 80023f0:	f8d7 2384 	ldr.w	r2, [r7, #900]	@ 0x384
 80023f4:	f8d7 33c4 	ldr.w	r3, [r7, #964]	@ 0x3c4
 80023f8:	4413      	add	r3, r2
 80023fa:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 80023fe:	f9b7 23c8 	ldrsh.w	r2, [r7, #968]	@ 0x3c8
 8002402:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 8002406:	4293      	cmp	r3, r2
 8002408:	bfb8      	it	lt
 800240a:	4613      	movlt	r3, r2
 800240c:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 8002410:	f9b7 23cc 	ldrsh.w	r2, [r7, #972]	@ 0x3cc
 8002414:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 8002418:	4293      	cmp	r3, r2
 800241a:	bfa8      	it	ge
 800241c:	4613      	movge	r3, r2
 800241e:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
        *out_1++ = (q7_t)ch_0_out_1;
 8002422:	f8d7 239c 	ldr.w	r2, [r7, #924]	@ 0x39c
 8002426:	1c53      	adds	r3, r2, #1
 8002428:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
 800242c:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 8002430:	b25b      	sxtb	r3, r3
 8002432:	7013      	strb	r3, [r2, #0]
        out_mult++;
 8002434:	f8d7 33c0 	ldr.w	r3, [r7, #960]	@ 0x3c0
 8002438:	3304      	adds	r3, #4
 800243a:	f8c7 33c0 	str.w	r3, [r7, #960]	@ 0x3c0
        out_shift++;
 800243e:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002442:	f5a3 724e 	sub.w	r2, r3, #824	@ 0x338
 8002446:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800244a:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	3304      	adds	r3, #4
 8002452:	6013      	str	r3, [r2, #0]

        ch_1_out_0 = arm_nn_requantize(ch_1_out_0, *out_mult, *out_shift);
 8002454:	f8d7 33c0 	ldr.w	r3, [r7, #960]	@ 0x3c0
 8002458:	6818      	ldr	r0, [r3, #0]
 800245a:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800245e:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6819      	ldr	r1, [r3, #0]
 8002466:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800246a:	f5a3 7209 	sub.w	r2, r3, #548	@ 0x224
 800246e:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 8002472:	6013      	str	r3, [r2, #0]
 8002474:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002478:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 800247c:	6018      	str	r0, [r3, #0]
 800247e:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002482:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8002486:	6019      	str	r1, [r3, #0]
 8002488:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800248c:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8002496:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800249a:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	fa03 f202 	lsl.w	r2, r3, r2
 80024a4:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80024a8:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80024b2:	f5a3 720d 	sub.w	r2, r3, #564	@ 0x234
 80024b6:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80024ba:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80024c2:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80024c6:	f5a3 720e 	sub.w	r2, r3, #568	@ 0x238
 80024ca:	2300      	movs	r3, #0
 80024cc:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 80024ce:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80024d2:	f5a3 7234 	sub.w	r2, r3, #720	@ 0x2d0
 80024d6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80024da:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 80024dc:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80024e0:	f5a3 7234 	sub.w	r2, r3, #720	@ 0x2d0
 80024e4:	2300      	movs	r3, #0
 80024e6:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80024e8:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 80024ec:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80024f0:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	17da      	asrs	r2, r3, #31
 80024f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80024fa:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80024fc:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002500:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	17da      	asrs	r2, r3, #31
 8002508:	643b      	str	r3, [r7, #64]	@ 0x40
 800250a:	647a      	str	r2, [r7, #68]	@ 0x44
 800250c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800250e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002510:	fb02 f203 	mul.w	r2, r2, r3
 8002514:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002516:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
 8002518:	fb04 f303 	mul.w	r3, r4, r3
 800251c:	4413      	add	r3, r2
 800251e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002520:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 8002522:	fba2 ab04 	umull	sl, fp, r2, r4
 8002526:	445b      	add	r3, fp
 8002528:	469b      	mov	fp, r3
 800252a:	eb10 030a 	adds.w	r3, r0, sl
 800252e:	613b      	str	r3, [r7, #16]
 8002530:	eb41 030b 	adc.w	r3, r1, fp
 8002534:	617b      	str	r3, [r7, #20]
 8002536:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800253a:	e9c7 3434 	strd	r3, r4, [r7, #208]	@ 0xd0
    result = (int32_t)(mult.long_long >> 31);
 800253e:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 8002542:	f04f 0000 	mov.w	r0, #0
 8002546:	f04f 0100 	mov.w	r1, #0
 800254a:	0fd0      	lsrs	r0, r2, #31
 800254c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8002550:	17d9      	asrs	r1, r3, #31
 8002552:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002556:	f5a3 720e 	sub.w	r2, r3, #568	@ 0x238
 800255a:	4603      	mov	r3, r0
 800255c:	6013      	str	r3, [r2, #0]
    return result;
 800255e:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002562:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8002566:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8002568:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800256c:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2b00      	cmp	r3, #0
 8002574:	dc06      	bgt.n	8002584 <arm_nn_mat_mult_kernel_s8_s16_reordered+0x137c>
 8002576:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800257a:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	425a      	negs	r2, r3
 8002582:	e000      	b.n	8002586 <arm_nn_mat_mult_kernel_s8_s16_reordered+0x137e>
 8002584:	2200      	movs	r2, #0
 8002586:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800258a:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800258e:	6019      	str	r1, [r3, #0]
 8002590:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002594:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8002598:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 800259a:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800259e:	f5a3 7211 	sub.w	r2, r3, #580	@ 0x244
 80025a2:	2300      	movs	r3, #0
 80025a4:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 80025a6:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80025aa:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 80025ae:	2201      	movs	r2, #1
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	fa02 f103 	lsl.w	r1, r2, r3
 80025b6:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80025ba:	f5a3 7212 	sub.w	r2, r3, #584	@ 0x248
 80025be:	1e4b      	subs	r3, r1, #1
 80025c0:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 80025c2:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80025c6:	f5a3 7113 	sub.w	r1, r3, #588	@ 0x24c
 80025ca:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80025ce:	f5a3 720f 	sub.w	r2, r3, #572	@ 0x23c
 80025d2:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80025d6:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80025da:	6812      	ldr	r2, [r2, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4013      	ands	r3, r2
 80025e0:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 80025e2:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80025e6:	f5a3 7111 	sub.w	r1, r3, #580	@ 0x244
 80025ea:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80025ee:	f5a3 720f 	sub.w	r2, r3, #572	@ 0x23c
 80025f2:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80025f6:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 80025fa:	6812      	ldr	r2, [r2, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	fa42 f303 	asr.w	r3, r2, r3
 8002602:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8002604:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002608:	f5a3 7214 	sub.w	r2, r3, #592	@ 0x250
 800260c:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002610:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	105b      	asrs	r3, r3, #1
 8002618:	6013      	str	r3, [r2, #0]
    if (result < 0)
 800261a:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800261e:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2b00      	cmp	r3, #0
 8002626:	da0a      	bge.n	800263e <arm_nn_mat_mult_kernel_s8_s16_reordered+0x1436>
        threshold++;
 8002628:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800262c:	f5a3 7214 	sub.w	r2, r3, #592	@ 0x250
 8002630:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002634:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	3301      	adds	r3, #1
 800263c:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 800263e:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002642:	f5a3 7213 	sub.w	r2, r3, #588	@ 0x24c
 8002646:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800264a:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 800264e:	6812      	ldr	r2, [r2, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	429a      	cmp	r2, r3
 8002654:	dd0a      	ble.n	800266c <arm_nn_mat_mult_kernel_s8_s16_reordered+0x1464>
        result++;
 8002656:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800265a:	f5a3 7211 	sub.w	r2, r3, #580	@ 0x244
 800265e:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002662:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	3301      	adds	r3, #1
 800266a:	6013      	str	r3, [r2, #0]
    return result;
 800266c:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002670:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8002674:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8002676:	bf00      	nop
 8002678:	f8c7 3380 	str.w	r3, [r7, #896]	@ 0x380
        ch_1_out_0 += out_offset;
 800267c:	f8d7 2380 	ldr.w	r2, [r7, #896]	@ 0x380
 8002680:	f8d7 33c4 	ldr.w	r3, [r7, #964]	@ 0x3c4
 8002684:	4413      	add	r3, r2
 8002686:	f8c7 3380 	str.w	r3, [r7, #896]	@ 0x380
        ch_1_out_0 = MAX(ch_1_out_0, activation_min);
 800268a:	f9b7 23c8 	ldrsh.w	r2, [r7, #968]	@ 0x3c8
 800268e:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 8002692:	4293      	cmp	r3, r2
 8002694:	bfb8      	it	lt
 8002696:	4613      	movlt	r3, r2
 8002698:	f8c7 3380 	str.w	r3, [r7, #896]	@ 0x380
        ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 800269c:	f9b7 23cc 	ldrsh.w	r2, [r7, #972]	@ 0x3cc
 80026a0:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 80026a4:	4293      	cmp	r3, r2
 80026a6:	bfa8      	it	ge
 80026a8:	4613      	movge	r3, r2
 80026aa:	f8c7 3380 	str.w	r3, [r7, #896]	@ 0x380
        *out_0++ = (q7_t)ch_1_out_0;
 80026ae:	f8d7 23d8 	ldr.w	r2, [r7, #984]	@ 0x3d8
 80026b2:	1c53      	adds	r3, r2, #1
 80026b4:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
 80026b8:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 80026bc:	b25b      	sxtb	r3, r3
 80026be:	7013      	strb	r3, [r2, #0]

        ch_1_out_1 = arm_nn_requantize(ch_1_out_1, *out_mult, *out_shift);
 80026c0:	f8d7 33c0 	ldr.w	r3, [r7, #960]	@ 0x3c0
 80026c4:	6818      	ldr	r0, [r3, #0]
 80026c6:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80026ca:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6819      	ldr	r1, [r3, #0]
 80026d2:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80026d6:	f5a3 72fa 	sub.w	r2, r3, #500	@ 0x1f4
 80026da:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 80026de:	6013      	str	r3, [r2, #0]
 80026e0:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80026e4:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80026e8:	6018      	str	r0, [r3, #0]
 80026ea:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80026ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026f2:	6019      	str	r1, [r3, #0]
 80026f4:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80026f8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8002702:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002706:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	fa03 f202 	lsl.w	r2, r3, r2
 8002710:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002714:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8002718:	601a      	str	r2, [r3, #0]
 800271a:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800271e:	f5a3 7201 	sub.w	r2, r3, #516	@ 0x204
 8002722:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002726:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 800272e:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002732:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 8002736:	2300      	movs	r3, #0
 8002738:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 800273a:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800273e:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8002742:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002746:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 8002748:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800274c:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8002750:	2300      	movs	r3, #0
 8002752:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8002754:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002758:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800275c:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	17da      	asrs	r2, r3, #31
 8002764:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002766:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002768:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800276c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	17da      	asrs	r2, r3, #31
 8002774:	653b      	str	r3, [r7, #80]	@ 0x50
 8002776:	657a      	str	r2, [r7, #84]	@ 0x54
 8002778:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800277a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800277c:	fb02 f203 	mul.w	r2, r2, r3
 8002780:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002782:	6dbc      	ldr	r4, [r7, #88]	@ 0x58
 8002784:	fb04 f303 	mul.w	r3, r4, r3
 8002788:	4413      	add	r3, r2
 800278a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800278c:	6d3c      	ldr	r4, [r7, #80]	@ 0x50
 800278e:	fba2 8904 	umull	r8, r9, r2, r4
 8002792:	444b      	add	r3, r9
 8002794:	4699      	mov	r9, r3
 8002796:	eb10 0308 	adds.w	r3, r0, r8
 800279a:	61bb      	str	r3, [r7, #24]
 800279c:	eb41 0309 	adc.w	r3, r1, r9
 80027a0:	61fb      	str	r3, [r7, #28]
 80027a2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80027a6:	e9c7 3432 	strd	r3, r4, [r7, #200]	@ 0xc8
    result = (int32_t)(mult.long_long >> 31);
 80027aa:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 80027ae:	f04f 0000 	mov.w	r0, #0
 80027b2:	f04f 0100 	mov.w	r1, #0
 80027b6:	0fd0      	lsrs	r0, r2, #31
 80027b8:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80027bc:	17d9      	asrs	r1, r3, #31
 80027be:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80027c2:	f5a3 7202 	sub.w	r2, r3, #520	@ 0x208
 80027c6:	4603      	mov	r3, r0
 80027c8:	6013      	str	r3, [r2, #0]
    return result;
 80027ca:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80027ce:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 80027d2:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80027d4:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80027d8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	dc06      	bgt.n	80027f0 <arm_nn_mat_mult_kernel_s8_s16_reordered+0x15e8>
 80027e2:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80027e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	425a      	negs	r2, r3
 80027ee:	e000      	b.n	80027f2 <arm_nn_mat_mult_kernel_s8_s16_reordered+0x15ea>
 80027f0:	2200      	movs	r2, #0
 80027f2:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80027f6:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80027fa:	6019      	str	r1, [r3, #0]
 80027fc:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002800:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8002804:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8002806:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800280a:	f5a3 7205 	sub.w	r2, r3, #532	@ 0x214
 800280e:	2300      	movs	r3, #0
 8002810:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8002812:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002816:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800281a:	2201      	movs	r2, #1
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	fa02 f103 	lsl.w	r1, r2, r3
 8002822:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002826:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 800282a:	1e4b      	subs	r3, r1, #1
 800282c:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 800282e:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002832:	f5a3 7107 	sub.w	r1, r3, #540	@ 0x21c
 8002836:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800283a:	f5a3 7203 	sub.w	r2, r3, #524	@ 0x20c
 800283e:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002842:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8002846:	6812      	ldr	r2, [r2, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4013      	ands	r3, r2
 800284c:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 800284e:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002852:	f5a3 7105 	sub.w	r1, r3, #532	@ 0x214
 8002856:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800285a:	f5a3 7203 	sub.w	r2, r3, #524	@ 0x20c
 800285e:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002862:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8002866:	6812      	ldr	r2, [r2, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	fa42 f303 	asr.w	r3, r2, r3
 800286e:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8002870:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002874:	f5a3 7208 	sub.w	r2, r3, #544	@ 0x220
 8002878:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800287c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	105b      	asrs	r3, r3, #1
 8002884:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8002886:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800288a:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2b00      	cmp	r3, #0
 8002892:	da0a      	bge.n	80028aa <arm_nn_mat_mult_kernel_s8_s16_reordered+0x16a2>
        threshold++;
 8002894:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002898:	f5a3 7208 	sub.w	r2, r3, #544	@ 0x220
 800289c:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80028a0:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	3301      	adds	r3, #1
 80028a8:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 80028aa:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80028ae:	f5a3 7207 	sub.w	r2, r3, #540	@ 0x21c
 80028b2:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80028b6:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80028ba:	6812      	ldr	r2, [r2, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	429a      	cmp	r2, r3
 80028c0:	dd0a      	ble.n	80028d8 <arm_nn_mat_mult_kernel_s8_s16_reordered+0x16d0>
        result++;
 80028c2:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80028c6:	f5a3 7205 	sub.w	r2, r3, #532	@ 0x214
 80028ca:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80028ce:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	3301      	adds	r3, #1
 80028d6:	6013      	str	r3, [r2, #0]
    return result;
 80028d8:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80028dc:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80028e0:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80028e2:	bf00      	nop
 80028e4:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
        ch_1_out_1 += out_offset;
 80028e8:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
 80028ec:	f8d7 33c4 	ldr.w	r3, [r7, #964]	@ 0x3c4
 80028f0:	4413      	add	r3, r2
 80028f2:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
        ch_1_out_1 = MAX(ch_1_out_1, activation_min);
 80028f6:	f9b7 23c8 	ldrsh.w	r2, [r7, #968]	@ 0x3c8
 80028fa:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 80028fe:	4293      	cmp	r3, r2
 8002900:	bfb8      	it	lt
 8002902:	4613      	movlt	r3, r2
 8002904:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
        ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 8002908:	f9b7 23cc 	ldrsh.w	r2, [r7, #972]	@ 0x3cc
 800290c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 8002910:	4293      	cmp	r3, r2
 8002912:	bfa8      	it	ge
 8002914:	4613      	movge	r3, r2
 8002916:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
        *out_1++ = (q7_t)ch_1_out_1;
 800291a:	f8d7 239c 	ldr.w	r2, [r7, #924]	@ 0x39c
 800291e:	1c53      	adds	r3, r2, #1
 8002920:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
 8002924:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 8002928:	b25b      	sxtb	r3, r3
 800292a:	7013      	strb	r3, [r2, #0]
        out_mult++;
 800292c:	f8d7 33c0 	ldr.w	r3, [r7, #960]	@ 0x3c0
 8002930:	3304      	adds	r3, #4
 8002932:	f8c7 33c0 	str.w	r3, [r7, #960]	@ 0x3c0
        out_shift++;
 8002936:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800293a:	f5a3 724e 	sub.w	r2, r3, #824	@ 0x338
 800293e:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002942:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	3304      	adds	r3, #4
 800294a:	6013      	str	r3, [r2, #0]

        /* skip row */
        ip_a0 += num_col_a;
 800294c:	f8b7 23d0 	ldrh.w	r2, [r7, #976]	@ 0x3d0
 8002950:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8002954:	4413      	add	r3, r2
 8002956:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
        row_count--;
 800295a:	f8b7 3396 	ldrh.w	r3, [r7, #918]	@ 0x396
 800295e:	3b01      	subs	r3, #1
 8002960:	f8a7 3396 	strh.w	r3, [r7, #918]	@ 0x396
    while (row_count)
 8002964:	f8b7 3396 	ldrh.w	r3, [r7, #918]	@ 0x396
 8002968:	2b00      	cmp	r3, #0
 800296a:	f47e ac87 	bne.w	800127c <arm_nn_mat_mult_kernel_s8_s16_reordered+0x74>
    }

    out_0 += output_ch;
 800296e:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8002972:	f2a3 3332 	subw	r3, r3, #818	@ 0x332
 8002976:	881b      	ldrh	r3, [r3, #0]
 8002978:	f8d7 23d8 	ldr.w	r2, [r7, #984]	@ 0x3d8
 800297c:	4413      	add	r3, r2
 800297e:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8

    /* return the new output pointer with offset */
    return out_0;
 8002982:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
}
 8002986:	4618      	mov	r0, r3
 8002988:	f507 7768 	add.w	r7, r7, #928	@ 0x3a0
 800298c:	46bd      	mov	sp, r7
 800298e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002992:	4770      	bx	lr

08002994 <mat_mult_kernel_s8_s16_reordered_ch16>:
                                              const int16_t activation_min,
                                              const int16_t activation_max,
                                              const uint16_t num_col_a,
                                              const int32_t *const output_bias,
                                              q7_t *out_0)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b08c      	sub	sp, #48	@ 0x30
 8002998:	af08      	add	r7, sp, #32
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	603b      	str	r3, [r7, #0]
 80029a0:	4613      	mov	r3, r2
 80029a2:	80fb      	strh	r3, [r7, #6]
	return arm_nn_mat_mult_kernel_s8_s16_reordered(input_a, input_b, output_ch, out_shift, out_mult, out_offset, activation_min, activation_max, num_col_a, output_bias, out_0);
 80029a4:	88fa      	ldrh	r2, [r7, #6]
 80029a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029a8:	9306      	str	r3, [sp, #24]
 80029aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029ac:	9305      	str	r3, [sp, #20]
 80029ae:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80029b0:	9304      	str	r3, [sp, #16]
 80029b2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80029b6:	9303      	str	r3, [sp, #12]
 80029b8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80029bc:	9302      	str	r3, [sp, #8]
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	9301      	str	r3, [sp, #4]
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	9300      	str	r3, [sp, #0]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	68b9      	ldr	r1, [r7, #8]
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f7fe fc1c 	bl	8001208 <arm_nn_mat_mult_kernel_s8_s16_reordered>
 80029d0:	4603      	mov	r3, r0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <mat_mult_kernel_s8_s16_reordered_ch24>:
                                              const int16_t activation_min,
                                              const int16_t activation_max,
                                              const uint16_t num_col_a,
                                              const int32_t *const output_bias,
                                              q7_t *out_0)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b08c      	sub	sp, #48	@ 0x30
 80029de:	af08      	add	r7, sp, #32
 80029e0:	60f8      	str	r0, [r7, #12]
 80029e2:	60b9      	str	r1, [r7, #8]
 80029e4:	603b      	str	r3, [r7, #0]
 80029e6:	4613      	mov	r3, r2
 80029e8:	80fb      	strh	r3, [r7, #6]
	return arm_nn_mat_mult_kernel_s8_s16_reordered(input_a, input_b, output_ch, out_shift, out_mult, out_offset, activation_min, activation_max, num_col_a, output_bias, out_0);
 80029ea:	88fa      	ldrh	r2, [r7, #6]
 80029ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ee:	9306      	str	r3, [sp, #24]
 80029f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029f2:	9305      	str	r3, [sp, #20]
 80029f4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80029f6:	9304      	str	r3, [sp, #16]
 80029f8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80029fc:	9303      	str	r3, [sp, #12]
 80029fe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002a02:	9302      	str	r3, [sp, #8]
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	9301      	str	r3, [sp, #4]
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	68b9      	ldr	r1, [r7, #8]
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f7fe fbf9 	bl	8001208 <arm_nn_mat_mult_kernel_s8_s16_reordered>
 8002a16:	4603      	mov	r3, r0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <mat_mult_kernel_s8_s16_reordered_ch48>:
                                              const int16_t activation_min,
                                              const int16_t activation_max,
                                              const uint16_t num_col_a,
                                              const int32_t *const output_bias,
                                              q7_t *out_0)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b08c      	sub	sp, #48	@ 0x30
 8002a24:	af08      	add	r7, sp, #32
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	603b      	str	r3, [r7, #0]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	80fb      	strh	r3, [r7, #6]
	return arm_nn_mat_mult_kernel_s8_s16_reordered(input_a, input_b, output_ch, out_shift, out_mult, out_offset, activation_min, activation_max, num_col_a, output_bias, out_0);
 8002a30:	88fa      	ldrh	r2, [r7, #6]
 8002a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a34:	9306      	str	r3, [sp, #24]
 8002a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a38:	9305      	str	r3, [sp, #20]
 8002a3a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002a3c:	9304      	str	r3, [sp, #16]
 8002a3e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8002a42:	9303      	str	r3, [sp, #12]
 8002a44:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002a48:	9302      	str	r3, [sp, #8]
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	9301      	str	r3, [sp, #4]
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	68b9      	ldr	r1, [r7, #8]
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f7fe fbd6 	bl	8001208 <arm_nn_mat_mult_kernel_s8_s16_reordered>
 8002a5c:	4603      	mov	r3, r0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <avg_pooling>:

tinyengine_status avg_pooling(const q7_t* input, const uint16_t input_h, const uint16_t input_w,
		const uint16_t input_c,	const uint16_t sample_h, const uint16_t sample_w,
		const uint16_t output_h, const uint16_t output_w, const int32_t out_activation_min,
        const int32_t out_activation_max, q7_t* output)
{
 8002a66:	b480      	push	{r7}
 8002a68:	b08f      	sub	sp, #60	@ 0x3c
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	60f8      	str	r0, [r7, #12]
 8002a6e:	4608      	mov	r0, r1
 8002a70:	4611      	mov	r1, r2
 8002a72:	461a      	mov	r2, r3
 8002a74:	4603      	mov	r3, r0
 8002a76:	817b      	strh	r3, [r7, #10]
 8002a78:	460b      	mov	r3, r1
 8002a7a:	813b      	strh	r3, [r7, #8]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	80fb      	strh	r3, [r7, #6]
	int h, w, c;
	int sh, sw;
	const int divider_half = ((sample_h * sample_w) / 2);
 8002a80:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002a84:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8002a88:	fb02 f303 	mul.w	r3, r2, r3
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	da00      	bge.n	8002a92 <avg_pooling+0x2c>
 8002a90:	3301      	adds	r3, #1
 8002a92:	105b      	asrs	r3, r3, #1
 8002a94:	61fb      	str	r3, [r7, #28]
	for(c = 0; c < input_c; c++){
 8002a96:	2300      	movs	r3, #0
 8002a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a9a:	e089      	b.n	8002bb0 <avg_pooling+0x14a>
		for(h = 0; h < output_h; h++){
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002aa0:	e07d      	b.n	8002b9e <avg_pooling+0x138>
			for(w = 0; w < output_w; w++){
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	633b      	str	r3, [r7, #48]	@ 0x30
 8002aa6:	e072      	b.n	8002b8e <avg_pooling+0x128>
				int avg = 0;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	623b      	str	r3, [r7, #32]

				for(sh = 0; sh < sample_h; sh++){
 8002aac:	2300      	movs	r3, #0
 8002aae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ab0:	e031      	b.n	8002b16 <avg_pooling+0xb0>
					int height = sh + h * sample_h;
 8002ab2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002ab6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002ab8:	fb02 f303 	mul.w	r3, r2, r3
 8002abc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002abe:	4413      	add	r3, r2
 8002ac0:	617b      	str	r3, [r7, #20]
					for(sw = 0; sw < sample_w; sw++){
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ac6:	e01e      	b.n	8002b06 <avg_pooling+0xa0>
						int width = sw + w * sample_w;
 8002ac8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8002acc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ace:	fb02 f303 	mul.w	r3, r2, r3
 8002ad2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ad4:	4413      	add	r3, r2
 8002ad6:	613b      	str	r3, [r7, #16]
						avg += input[(width + height * input_w) * input_c + c];
 8002ad8:	893b      	ldrh	r3, [r7, #8]
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	fb03 f202 	mul.w	r2, r3, r2
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	88fa      	ldrh	r2, [r7, #6]
 8002ae6:	fb03 f202 	mul.w	r2, r3, r2
 8002aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aec:	4413      	add	r3, r2
 8002aee:	461a      	mov	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	4413      	add	r3, r2
 8002af4:	f993 3000 	ldrsb.w	r3, [r3]
 8002af8:	461a      	mov	r2, r3
 8002afa:	6a3b      	ldr	r3, [r7, #32]
 8002afc:	4413      	add	r3, r2
 8002afe:	623b      	str	r3, [r7, #32]
					for(sw = 0; sw < sample_w; sw++){
 8002b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b02:	3301      	adds	r3, #1
 8002b04:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b06:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8002b0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	dbdb      	blt.n	8002ac8 <avg_pooling+0x62>
				for(sh = 0; sh < sample_h; sh++){
 8002b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b12:	3301      	adds	r3, #1
 8002b14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b16:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002b1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	dbc8      	blt.n	8002ab2 <avg_pooling+0x4c>
					}
				}

				// for rounded div
				if (avg > 0)
 8002b20:	6a3b      	ldr	r3, [r7, #32]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	dd04      	ble.n	8002b30 <avg_pooling+0xca>
					avg += divider_half;
 8002b26:	6a3a      	ldr	r2, [r7, #32]
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	623b      	str	r3, [r7, #32]
 8002b2e:	e003      	b.n	8002b38 <avg_pooling+0xd2>
				else
					avg -= divider_half;
 8002b30:	6a3a      	ldr	r2, [r7, #32]
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	623b      	str	r3, [r7, #32]

				int out = avg / (sample_h * sample_w);
 8002b38:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002b3c:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8002b40:	fb02 f303 	mul.w	r3, r2, r3
 8002b44:	6a3a      	ldr	r2, [r7, #32]
 8002b46:	fb92 f3f3 	sdiv	r3, r2, r3
 8002b4a:	61bb      	str	r3, [r7, #24]
				out = TN_MAX(out, out_activation_min);
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b50:	4293      	cmp	r3, r2
 8002b52:	bfb8      	it	lt
 8002b54:	4613      	movlt	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
				out = TN_MIN(out, out_activation_max);
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	bfa8      	it	ge
 8002b60:	4613      	movge	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]
				output[(w + h * output_w) * input_c + c] = out;
 8002b64:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002b68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002b6a:	fb03 f202 	mul.w	r2, r3, r2
 8002b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b70:	4413      	add	r3, r2
 8002b72:	88fa      	ldrh	r2, [r7, #6]
 8002b74:	fb03 f202 	mul.w	r2, r3, r2
 8002b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b7a:	4413      	add	r3, r2
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b80:	4413      	add	r3, r2
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	b252      	sxtb	r2, r2
 8002b86:	701a      	strb	r2, [r3, #0]
			for(w = 0; w < output_w; w++){
 8002b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b8e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002b92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b94:	429a      	cmp	r2, r3
 8002b96:	db87      	blt.n	8002aa8 <avg_pooling+0x42>
		for(h = 0; h < output_h; h++){
 8002b98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b9e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8002ba2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	f6ff af7c 	blt.w	8002aa2 <avg_pooling+0x3c>
	for(c = 0; c < input_c; c++){
 8002baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bac:	3301      	adds	r3, #1
 8002bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bb0:	88fb      	ldrh	r3, [r7, #6]
 8002bb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	f6ff af71 	blt.w	8002a9c <avg_pooling+0x36>
			}
		}
	}
}
 8002bba:	bf00      	nop
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	373c      	adds	r7, #60	@ 0x3c
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <convolve_1x1_s8>:
		const uint16_t input_y, const uint16_t input_ch, const q7_t *kernel,
		const int32_t *bias, const int32_t *output_shift,
		const int32_t *output_mult, const int32_t out_offset,
		const int32_t input_offset, const int32_t out_activation_min,
		const int32_t out_activation_max, q7_t *output, const uint16_t output_x,
		const uint16_t output_y, const uint16_t output_ch, q15_t *runtime_buf) {
 8002bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bcc:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
 8002bd0:	af08      	add	r7, sp, #32
 8002bd2:	f507 7608 	add.w	r6, r7, #544	@ 0x220
 8002bd6:	f5a6 7603 	sub.w	r6, r6, #524	@ 0x20c
 8002bda:	6030      	str	r0, [r6, #0]
 8002bdc:	460e      	mov	r6, r1
 8002bde:	4610      	mov	r0, r2
 8002be0:	4619      	mov	r1, r3
 8002be2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002be6:	f2a3 230e 	subw	r3, r3, #526	@ 0x20e
 8002bea:	4632      	mov	r2, r6
 8002bec:	801a      	strh	r2, [r3, #0]
 8002bee:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002bf2:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	801a      	strh	r2, [r3, #0]
 8002bfa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002bfe:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 8002c02:	460a      	mov	r2, r1
 8002c04:	801a      	strh	r2, [r3, #0]
	if (input_ch % 4 != 0 || input_ch % 2 != 0) {
 8002c06:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002c0a:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 8002c0e:	881b      	ldrh	r3, [r3, #0]
 8002c10:	f003 0303 	and.w	r3, r3, #3
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d109      	bne.n	8002c2e <convolve_1x1_s8+0x66>
 8002c1a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002c1e:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 8002c22:	881b      	ldrh	r3, [r3, #0]
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d002      	beq.n	8002c34 <convolve_1x1_s8+0x6c>
		return PARAM_NO_SUPPORT;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	f000 be30 	b.w	8003894 <convolve_1x1_s8+0xccc>
	int32_t i_element;
	(void) input_x;
	(void) input_y;

	/* Partial(two columns) im2col buffer */
	q15_t *two_column_buffer = runtime_buf;
 8002c34:	f8d7 3278 	ldr.w	r3, [r7, #632]	@ 0x278
 8002c38:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
	q7_t *out = output;
 8002c3c:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 8002c40:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
	const int32_t num_elements = output_x * output_y;
 8002c44:	f8b7 326c 	ldrh.w	r3, [r7, #620]	@ 0x26c
 8002c48:	f8b7 2270 	ldrh.w	r2, [r7, #624]	@ 0x270
 8002c4c:	fb02 f303 	mul.w	r3, r2, r3
 8002c50:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
	const int channel_div4 = (input_ch >> 2);
 8002c54:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002c58:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 8002c5c:	881b      	ldrh	r3, [r3, #0]
 8002c5e:	089b      	lsrs	r3, r3, #2
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4

	const int16_t inoff16 = input_offset;
 8002c66:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8002c6a:	f8a7 31f2 	strh.w	r3, [r7, #498]	@ 0x1f2
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 8002c6e:	f9b7 31f2 	ldrsh.w	r3, [r7, #498]	@ 0x1f2
 8002c72:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 8002c76:	f9b7 31f2 	ldrsh.w	r3, [r7, #498]	@ 0x1f2
 8002c7a:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8002c7e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8002c82:	f8d7 21e8 	ldr.w	r2, [r7, #488]	@ 0x1e8
 8002c86:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 8002c8a:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002c8e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8002c92:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0

	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8002c96:	2300      	movs	r3, #0
 8002c98:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8002c9c:	e1c9      	b.n	8003032 <convolve_1x1_s8+0x46a>
		/* Fill buffer for partial im2col - two columns at a time */
		q7_t *src = &input[i_element * input_ch * 2];
 8002c9e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002ca2:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 8002ca6:	881b      	ldrh	r3, [r3, #0]
 8002ca8:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 8002cac:	fb02 f303 	mul.w	r3, r2, r3
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002cb8:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	441a      	add	r2, r3
 8002cc0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002cc4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002cc8:	601a      	str	r2, [r3, #0]
		q15_t *dst = two_column_buffer;
 8002cca:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002cce:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002cd2:	f8d7 21fc 	ldr.w	r2, [r7, #508]	@ 0x1fc
 8002cd6:	601a      	str	r2, [r3, #0]
		q31_t in_q15x2_1;
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two columns
 8002cd8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002cdc:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
		while (cnt > 0) {
 8002ce0:	e174      	b.n	8002fcc <convolve_1x1_s8+0x404>
 8002ce2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8002ce6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    memcpy(&val, *in_q7, 4);
 8002cea:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002cf8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002cfc:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8002cfe:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	1d1a      	adds	r2, r3, #4
 8002d06:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002d0a:	601a      	str	r2, [r3, #0]
    return (val);
 8002d0c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002d10:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002d14:	681b      	ldr	r3, [r3, #0]
			q7_q15_offset_reordered_ele(src, dst)
 8002d16:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8002d1a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002d1e:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8002d22:	2308      	movs	r3, #8
 8002d24:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
  op2 %= 32U;
 8002d28:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002d2c:	f003 031f 	and.w	r3, r3, #31
 8002d30:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
  if (op2 == 0U)
 8002d34:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d102      	bne.n	8002d42 <convolve_1x1_s8+0x17a>
    return op1;
 8002d3c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8002d40:	e005      	b.n	8002d4e <convolve_1x1_s8+0x186>
  return (op1 >> op2) | (op1 << (32U - op2));
 8002d42:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8002d46:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002d4a:	fa62 f303 	ror.w	r3, r2, r3
 8002d4e:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8002d52:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8002d56:	fa2f f383 	sxtb16	r3, r3
 8002d5a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
  return(result);
 8002d5e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8002d62:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002d66:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002d6a:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8002d6e:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002d72:	fa2f f383 	sxtb16	r3, r3
 8002d76:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
  return(result);
 8002d7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002d7e:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002d82:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8002d86:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002d8a:	f8c7 215c 	str.w	r2, [r7, #348]	@ 0x15c
 8002d8e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8002d92:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8002d96:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8002d9a:	fa93 f302 	sadd16	r3, r3, r2
 8002d9e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
  return(result);
 8002da2:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8002da6:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002daa:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8002dae:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002db2:	f8c7 2168 	str.w	r2, [r7, #360]	@ 0x168
 8002db6:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8002dba:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002dbe:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 8002dc2:	fa93 f302 	sadd16	r3, r3, r2
 8002dc6:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return(result);
 8002dca:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002dce:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002dd2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002dd6:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8002dda:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002dde:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 */
__STATIC_FORCEINLINE void write_q15x2_ia (
  q15_t ** pQ15,
  q31_t    value)
{
  q31_t val = value;
 8002de2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002de6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002dea:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8002dee:	601a      	str	r2, [r3, #0]
#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (*pQ15, &val, 4);
 8002df0:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8002dfa:	f5a2 72de 	sub.w	r2, r2, #444	@ 0x1bc
 8002dfe:	6812      	ldr	r2, [r2, #0]
 8002e00:	601a      	str	r2, [r3, #0]
#else
  (*pQ15)[0] = (val & 0x0FFFF);
  (*pQ15)[1] = (val >> 16) & 0x0FFFF;
#endif

 *pQ15 += 2;
 8002e02:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	1d1a      	adds	r2, r3, #4
 8002e0a:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8002e0e:	601a      	str	r2, [r3, #0]
}
 8002e10:	bf00      	nop
 8002e12:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002e16:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8002e1a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8002e1e:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
  q31_t val = value;
 8002e22:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002e26:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002e2a:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002e2e:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8002e30:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8002e3a:	f5a2 72e0 	sub.w	r2, r2, #448	@ 0x1c0
 8002e3e:	6812      	ldr	r2, [r2, #0]
 8002e40:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8002e42:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	1d1a      	adds	r2, r3, #4
 8002e4a:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8002e4e:	601a      	str	r2, [r3, #0]
}
 8002e50:	bf00      	nop
 8002e52:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8002e56:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
    memcpy(&val, *in_q7, 4);
 8002e5a:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	461a      	mov	r2, r3
 8002e64:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002e68:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002e6c:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8002e6e:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	1d1a      	adds	r2, r3, #4
 8002e76:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8002e7a:	601a      	str	r2, [r3, #0]
    return (val);
 8002e7c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002e80:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002e84:	681b      	ldr	r3, [r3, #0]
			q7_q15_offset_reordered_ele(src, dst)
 8002e86:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8002e8a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002e8e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002e92:	2308      	movs	r3, #8
 8002e94:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
  op2 %= 32U;
 8002e98:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002e9c:	f003 031f 	and.w	r3, r3, #31
 8002ea0:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
  if (op2 == 0U)
 8002ea4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d102      	bne.n	8002eb2 <convolve_1x1_s8+0x2ea>
    return op1;
 8002eac:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8002eb0:	e005      	b.n	8002ebe <convolve_1x1_s8+0x2f6>
  return (op1 >> op2) | (op1 << (32U - op2));
 8002eb2:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8002eb6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002eba:	fa62 f303 	ror.w	r3, r2, r3
 8002ebe:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8002ec2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8002ec6:	fa2f f383 	sxtb16	r3, r3
 8002eca:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
  return(result);
 8002ece:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002ed2:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002ed6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002eda:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8002ede:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8002ee2:	fa2f f383 	sxtb16	r3, r3
 8002ee6:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return(result);
 8002eea:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002eee:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002ef2:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8002ef6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002efa:	f8c7 21a0 	str.w	r2, [r7, #416]	@ 0x1a0
 8002efe:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8002f02:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002f06:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8002f0a:	fa93 f302 	sadd16	r3, r3, r2
 8002f0e:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
  return(result);
 8002f12:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8002f16:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002f1a:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8002f1e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002f22:	f8c7 21ac 	str.w	r2, [r7, #428]	@ 0x1ac
 8002f26:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8002f2a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8002f2e:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8002f32:	fa93 f302 	sadd16	r3, r3, r2
 8002f36:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
  return(result);
 8002f3a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002f3e:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002f42:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002f46:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8002f4a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002f4e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  q31_t val = value;
 8002f52:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002f56:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8002f5a:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8002f5e:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8002f60:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8002f6a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002f6e:	6812      	ldr	r2, [r2, #0]
 8002f70:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8002f72:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	1d1a      	adds	r2, r3, #4
 8002f7a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002f7e:	601a      	str	r2, [r3, #0]
}
 8002f80:	bf00      	nop
 8002f82:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002f86:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002f8a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8002f8e:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
  q31_t val = value;
 8002f92:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8002f96:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8002f9a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002f9e:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8002fa0:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8002faa:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002fae:	6812      	ldr	r2, [r2, #0]
 8002fb0:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8002fb2:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	1d1a      	adds	r2, r3, #4
 8002fba:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8002fbe:	601a      	str	r2, [r3, #0]
}
 8002fc0:	bf00      	nop
			cnt--;
 8002fc2:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
		while (cnt > 0) {
 8002fcc:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f73f ae86 	bgt.w	8002ce2 <convolve_1x1_s8+0x11a>
//				out_activation_max, input_ch * DIM_KER_Y * DIM_KER_X,
//				bias, out);

		out = arm_nn_mat_mult_kernel_s8_s16_reordered(kernel,
						two_column_buffer, output_ch, output_shift, output_mult,
						(q7_t) out_offset, out_activation_min,
 8002fd6:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8002fda:	b25b      	sxtb	r3, r3
		out = arm_nn_mat_mult_kernel_s8_s16_reordered(kernel,
 8002fdc:	461e      	mov	r6, r3
 8002fde:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 8002fe2:	b21b      	sxth	r3, r3
 8002fe4:	f8d7 2264 	ldr.w	r2, [r7, #612]	@ 0x264
 8002fe8:	b212      	sxth	r2, r2
 8002fea:	f8b7 0274 	ldrh.w	r0, [r7, #628]	@ 0x274
 8002fee:	f8d7 1218 	ldr.w	r1, [r7, #536]	@ 0x218
 8002ff2:	9106      	str	r1, [sp, #24]
 8002ff4:	f8d7 124c 	ldr.w	r1, [r7, #588]	@ 0x24c
 8002ff8:	9105      	str	r1, [sp, #20]
 8002ffa:	f507 7108 	add.w	r1, r7, #544	@ 0x220
 8002ffe:	f2a1 2112 	subw	r1, r1, #530	@ 0x212
 8003002:	8809      	ldrh	r1, [r1, #0]
 8003004:	9104      	str	r1, [sp, #16]
 8003006:	9203      	str	r2, [sp, #12]
 8003008:	9302      	str	r3, [sp, #8]
 800300a:	9601      	str	r6, [sp, #4]
 800300c:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8003010:	9300      	str	r3, [sp, #0]
 8003012:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8003016:	4602      	mov	r2, r0
 8003018:	f8d7 11fc 	ldr.w	r1, [r7, #508]	@ 0x1fc
 800301c:	f8d7 0248 	ldr.w	r0, [r7, #584]	@ 0x248
 8003020:	f7fe f8f2 	bl	8001208 <arm_nn_mat_mult_kernel_s8_s16_reordered>
 8003024:	f8c7 0218 	str.w	r0, [r7, #536]	@ 0x218
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8003028:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800302c:	3301      	adds	r3, #1
 800302e:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8003032:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003036:	2b00      	cmp	r3, #0
 8003038:	da00      	bge.n	800303c <convolve_1x1_s8+0x474>
 800303a:	3301      	adds	r3, #1
 800303c:	105b      	asrs	r3, r3, #1
 800303e:	461a      	mov	r2, r3
 8003040:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8003044:	4293      	cmp	r3, r2
 8003046:	f6ff ae2a 	blt.w	8002c9e <convolve_1x1_s8+0xd6>
						out_activation_max, input_ch * DIM_KER_Y * DIM_KER_X,
						bias, out);
	}

	/* check if there is an odd column left-over for computation */
	if (num_elements & 0x1) {
 800304a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b00      	cmp	r3, #0
 8003054:	f000 841d 	beq.w	8003892 <convolve_1x1_s8+0xcca>
		int32_t i_ch_out;
		const q7_t *ker_a = kernel;
 8003058:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 800305c:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
		q7_t *src = &input[(num_elements - 1) * input_ch];
 8003060:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003064:	3b01      	subs	r3, #1
 8003066:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 800306a:	f2a2 2212 	subw	r2, r2, #530	@ 0x212
 800306e:	8812      	ldrh	r2, [r2, #0]
 8003070:	fb02 f303 	mul.w	r3, r2, r3
 8003074:	461a      	mov	r2, r3
 8003076:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800307a:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	441a      	add	r2, r3
 8003082:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003086:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800308a:	601a      	str	r2, [r3, #0]
		q15_t *dst = two_column_buffer;
 800308c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003090:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003094:	f8d7 21fc 	ldr.w	r2, [r7, #508]	@ 0x1fc
 8003098:	601a      	str	r2, [r3, #0]
		q31_t in_q15x2_1;
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two * numof2col columns
 800309a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800309e:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
		while (cnt > 0) {
 80030a2:	e116      	b.n	80032d2 <convolve_1x1_s8+0x70a>
 80030a4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80030a8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80030ac:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80030b0:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 80030b2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80030b6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	461a      	mov	r2, r3
 80030c2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80030c6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80030ca:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80030cc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80030d0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	1d1a      	adds	r2, r3, #4
 80030da:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80030de:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	601a      	str	r2, [r3, #0]
    return (val);
 80030e6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80030ea:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80030ee:	681b      	ldr	r3, [r3, #0]
			q7_q15_offset_reordered_ele(src, dst)
 80030f0:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 80030f4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80030f8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80030fc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003100:	601a      	str	r2, [r3, #0]
 8003102:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003106:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800310a:	2208      	movs	r2, #8
 800310c:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800310e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003112:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003116:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 800311a:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 800311e:	6812      	ldr	r2, [r2, #0]
 8003120:	f002 021f 	and.w	r2, r2, #31
 8003124:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8003126:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800312a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d105      	bne.n	8003140 <convolve_1x1_s8+0x578>
    return op1;
 8003134:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003138:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	e00b      	b.n	8003158 <convolve_1x1_s8+0x590>
  return (op1 >> op2) | (op1 << (32U - op2));
 8003140:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003144:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 8003148:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800314c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003150:	6812      	ldr	r2, [r2, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	fa62 f303 	ror.w	r3, r2, r3
 8003158:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 800315c:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 8003160:	6013      	str	r3, [r2, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003162:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003166:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	fa2f f283 	sxtb16	r2, r3
 8003170:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003174:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003178:	601a      	str	r2, [r3, #0]
  return(result);
 800317a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800317e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8003188:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 800318c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003190:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003194:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003196:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800319a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	fa2f f283 	sxtb16	r2, r3
 80031a4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80031a8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80031ac:	601a      	str	r2, [r3, #0]
  return(result);
 80031ae:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80031b2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 80031bc:	f8d7 11d0 	ldr.w	r1, [r7, #464]	@ 0x1d0
 80031c0:	f8d7 21e0 	ldr.w	r2, [r7, #480]	@ 0x1e0
 80031c4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80031c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80031cc:	6019      	str	r1, [r3, #0]
 80031ce:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80031d2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80031d6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80031d8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80031dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80031e6:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80031ea:	6812      	ldr	r2, [r2, #0]
 80031ec:	fa93 f202 	sadd16	r2, r3, r2
 80031f0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80031f4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80031f8:	601a      	str	r2, [r3, #0]
  return(result);
 80031fa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80031fe:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8003208:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800320c:	f8d7 21e0 	ldr.w	r2, [r7, #480]	@ 0x1e0
 8003210:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003214:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003218:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800321c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800321e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003222:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8003226:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 800322a:	6812      	ldr	r2, [r2, #0]
 800322c:	fa93 f202 	sadd16	r2, r3, r2
 8003230:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003234:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003238:	601a      	str	r2, [r3, #0]
  return(result);
 800323a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800323e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8003248:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800324c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8003250:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003254:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  q31_t val = value;
 8003258:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800325c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003260:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8003264:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8003266:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8003270:	f5a2 72ee 	sub.w	r2, r2, #476	@ 0x1dc
 8003274:	6812      	ldr	r2, [r2, #0]
 8003276:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8003278:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	1d1a      	adds	r2, r3, #4
 8003280:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003284:	601a      	str	r2, [r3, #0]
}
 8003286:	bf00      	nop
 8003288:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800328c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8003290:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003294:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  q31_t val = value;
 8003298:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800329c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80032a0:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80032a4:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 80032a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80032b0:	f5a2 72f0 	sub.w	r2, r2, #480	@ 0x1e0
 80032b4:	6812      	ldr	r2, [r2, #0]
 80032b6:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 80032b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	1d1a      	adds	r2, r3, #4
 80032c0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80032c4:	601a      	str	r2, [r3, #0]
}
 80032c6:	bf00      	nop
			cnt--;
 80032c8:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80032cc:	3b01      	subs	r3, #1
 80032ce:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
		while (cnt > 0) {
 80032d2:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	f73f aee4 	bgt.w	80030a4 <convolve_1x1_s8+0x4dc>
		}

		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 80032dc:	2300      	movs	r3, #0
 80032de:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 80032e2:	e2cf      	b.n	8003884 <convolve_1x1_s8+0xcbc>
			q31_t sum = bias[i_ch_out];
 80032e4:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 80032ee:	4413      	add	r3, r2
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204

			/* Point to the beginning of the im2col buffer where the input is available as a rearranged column */
			const q15_t *ip_as_col = runtime_buf;
 80032f6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80032fa:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80032fe:	f8d7 2278 	ldr.w	r2, [r7, #632]	@ 0x278
 8003302:	601a      	str	r2, [r3, #0]
			uint16_t col_count = (input_ch * DIM_KER_X * DIM_KER_Y) >> 2;
 8003304:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003308:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 800330c:	881b      	ldrh	r3, [r3, #0]
 800330e:	089b      	lsrs	r3, r3, #2
 8003310:	f8a7 3202 	strh.w	r3, [r7, #514]	@ 0x202

			while (col_count) {
 8003314:	e17b      	b.n	800360e <convolve_1x1_s8+0xa46>
 8003316:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800331a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800331e:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003328:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800332c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8003330:	601a      	str	r2, [r3, #0]
 8003332:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003336:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800333a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800333e:	601a      	str	r2, [r3, #0]
 8003340:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003344:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003348:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800334c:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 800334e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003352:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	461a      	mov	r2, r3
 800335e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003362:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8003366:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8003368:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800336c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	1d1a      	adds	r2, r3, #4
 8003376:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800337a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	601a      	str	r2, [r3, #0]
    return (val);
 8003382:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003386:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800338a:	681a      	ldr	r2, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 800338c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003390:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003394:	601a      	str	r2, [r3, #0]
    *out2 = __SXTB16(__ROR((uint32_t)inA, 8));
 8003396:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800339a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80033a4:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80033a8:	601a      	str	r2, [r3, #0]
 80033aa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80033ae:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80033b2:	2208      	movs	r2, #8
 80033b4:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 80033b6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80033ba:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80033be:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80033c2:	f5a2 72b6 	sub.w	r2, r2, #364	@ 0x16c
 80033c6:	6812      	ldr	r2, [r2, #0]
 80033c8:	f002 021f 	and.w	r2, r2, #31
 80033cc:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 80033ce:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80033d2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d105      	bne.n	80033e8 <convolve_1x1_s8+0x820>
    return op1;
 80033dc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80033e0:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	e00b      	b.n	8003400 <convolve_1x1_s8+0x838>
  return (op1 >> op2) | (op1 << (32U - op2));
 80033e8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80033ec:	f5a3 72b4 	sub.w	r2, r3, #360	@ 0x168
 80033f0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80033f4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80033f8:	6812      	ldr	r2, [r2, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	fa62 f303 	ror.w	r3, r2, r3
 8003400:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8003404:	f5a2 72b8 	sub.w	r2, r2, #368	@ 0x170
 8003408:	6013      	str	r3, [r2, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800340a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800340e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	fa2f f283 	sxtb16	r2, r3
 8003418:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800341c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003420:	601a      	str	r2, [r3, #0]
  return(result);
 8003422:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003426:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	461a      	mov	r2, r3
 800342e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003432:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	601a      	str	r2, [r3, #0]
    *out1 = __SXTB16(inA);
 800343a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800343e:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003448:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800344c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800344e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003452:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	fa2f f283 	sxtb16	r2, r3
 800345c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003460:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8003464:	601a      	str	r2, [r3, #0]
  return(result);
 8003466:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800346a:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	461a      	mov	r2, r3
 8003472:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003476:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	601a      	str	r2, [r3, #0]
    return source;
 800347e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003482:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003486:	681b      	ldr	r3, [r3, #0]
				q31_t ker_a1, ker_a2;
				q31_t in_b1, in_b2;
				ker_a = read_and_pad_reordered(ker_a, &ker_a1, &ker_a2);
 8003488:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 800348c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003490:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003494:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8003498:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 800349a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800349e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	461a      	mov	r2, r3
 80034aa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80034ae:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80034b2:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 80034b4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80034b8:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	1d1a      	adds	r2, r3, #4
 80034c2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80034c6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	601a      	str	r2, [r3, #0]
    return (val);
 80034ce:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80034d2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80034d6:	681b      	ldr	r3, [r3, #0]

				in_b1 = arm_nn_read_q15x2_ia(&ip_as_col);
 80034d8:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
				sum = __SMLAD(ker_a1, in_b1, sum);
 80034dc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80034e0:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f8d7 11dc 	ldr.w	r1, [r7, #476]	@ 0x1dc
 80034ec:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 80034f0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80034f4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80034f8:	6018      	str	r0, [r3, #0]
 80034fa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80034fe:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003502:	6019      	str	r1, [r3, #0]
 8003504:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003508:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800350c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800350e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003512:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 800351c:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 8003520:	6812      	ldr	r2, [r2, #0]
 8003522:	f507 7108 	add.w	r1, r7, #544	@ 0x220
 8003526:	f5a1 71a6 	sub.w	r1, r1, #332	@ 0x14c
 800352a:	6809      	ldr	r1, [r1, #0]
 800352c:	fb23 1202 	smlad	r2, r3, r2, r1
 8003530:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003534:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003538:	601a      	str	r2, [r3, #0]
  return(result);
 800353a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800353e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 8003548:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800354c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003550:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8003554:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 8003556:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800355a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	461a      	mov	r2, r3
 8003566:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800356a:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800356e:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8003570:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003574:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	1d1a      	adds	r2, r3, #4
 800357e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003582:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	601a      	str	r2, [r3, #0]
    return (val);
 800358a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800358e:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003592:	681b      	ldr	r3, [r3, #0]
				in_b2 = arm_nn_read_q15x2_ia(&ip_as_col);
 8003594:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
				sum = __SMLAD(ker_a2, in_b2, sum);
 8003598:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800359c:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f8d7 11d8 	ldr.w	r1, [r7, #472]	@ 0x1d8
 80035a8:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 80035ac:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80035b0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80035b4:	6018      	str	r0, [r3, #0]
 80035b6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80035ba:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80035be:	6019      	str	r1, [r3, #0]
 80035c0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80035c4:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80035c8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80035ca:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80035ce:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80035d8:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 80035dc:	6812      	ldr	r2, [r2, #0]
 80035de:	f507 7108 	add.w	r1, r7, #544	@ 0x220
 80035e2:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 80035e6:	6809      	ldr	r1, [r1, #0]
 80035e8:	fb23 1202 	smlad	r2, r3, r2, r1
 80035ec:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80035f0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80035f4:	601a      	str	r2, [r3, #0]
  return(result);
 80035f6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80035fa:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204

				col_count--;
 8003604:	f8b7 3202 	ldrh.w	r3, [r7, #514]	@ 0x202
 8003608:	3b01      	subs	r3, #1
 800360a:	f8a7 3202 	strh.w	r3, [r7, #514]	@ 0x202
			while (col_count) {
 800360e:	f8b7 3202 	ldrh.w	r3, [r7, #514]	@ 0x202
 8003612:	2b00      	cmp	r3, #0
 8003614:	f47f ae7f 	bne.w	8003316 <convolve_1x1_s8+0x74e>
			}

			sum = arm_nn_requantize(sum, output_mult[i_ch_out],
 8003618:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 8003622:	4413      	add	r3, r2
 8003624:	6819      	ldr	r1, [r3, #0]
					output_shift[i_ch_out]);
 8003626:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 8003630:	4413      	add	r3, r2
			sum = arm_nn_requantize(sum, output_mult[i_ch_out],
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003638:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800363c:	f8d7 0204 	ldr.w	r0, [r7, #516]	@ 0x204
 8003640:	6018      	str	r0, [r3, #0]
 8003642:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003646:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800364a:	6019      	str	r1, [r3, #0]
 800364c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003650:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003654:	601a      	str	r2, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8003656:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800365a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003664:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8003668:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 800366c:	6812      	ldr	r2, [r2, #0]
 800366e:	409a      	lsls	r2, r3
 8003670:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003674:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003678:	601a      	str	r2, [r3, #0]
 800367a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800367e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003682:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8003686:	f5a2 72c2 	sub.w	r2, r2, #388	@ 0x184
 800368a:	6812      	ldr	r2, [r2, #0]
 800368c:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 800368e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003692:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003696:	2200      	movs	r2, #0
 8003698:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 800369a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800369e:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80036a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80036a6:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 80036a8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80036ac:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80036b0:	2200      	movs	r2, #0
 80036b2:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80036b4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80036b8:	f507 7108 	add.w	r1, r7, #544	@ 0x220
 80036bc:	f5a1 71c6 	sub.w	r1, r1, #396	@ 0x18c
 80036c0:	6809      	ldr	r1, [r1, #0]
 80036c2:	17c8      	asrs	r0, r1, #31
 80036c4:	4688      	mov	r8, r1
 80036c6:	4681      	mov	r9, r0
 80036c8:	f507 7108 	add.w	r1, r7, #544	@ 0x220
 80036cc:	f5a1 71c8 	sub.w	r1, r1, #400	@ 0x190
 80036d0:	6809      	ldr	r1, [r1, #0]
 80036d2:	17c8      	asrs	r0, r1, #31
 80036d4:	468a      	mov	sl, r1
 80036d6:	4683      	mov	fp, r0
 80036d8:	fb0a f009 	mul.w	r0, sl, r9
 80036dc:	fb08 f10b 	mul.w	r1, r8, fp
 80036e0:	4401      	add	r1, r0
 80036e2:	fba8 450a 	umull	r4, r5, r8, sl
 80036e6:	4429      	add	r1, r5
 80036e8:	460d      	mov	r5, r1
 80036ea:	1911      	adds	r1, r2, r4
 80036ec:	6039      	str	r1, [r7, #0]
 80036ee:	416b      	adcs	r3, r5
 80036f0:	607b      	str	r3, [r7, #4]
 80036f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036f6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    result = (int32_t)(mult.long_long >> 31);
 80036fa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80036fe:	f04f 0200 	mov.w	r2, #0
 8003702:	f04f 0300 	mov.w	r3, #0
 8003706:	0fc2      	lsrs	r2, r0, #31
 8003708:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800370c:	17cb      	asrs	r3, r1, #31
 800370e:	f507 7108 	add.w	r1, r7, #544	@ 0x220
 8003712:	f5a1 71ca 	sub.w	r1, r1, #404	@ 0x194
 8003716:	4613      	mov	r3, r2
 8003718:	600b      	str	r3, [r1, #0]
    return result;
 800371a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800371e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003722:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8003724:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003728:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2b00      	cmp	r3, #0
 8003730:	dc06      	bgt.n	8003740 <convolve_1x1_s8+0xb78>
 8003732:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003736:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	425b      	negs	r3, r3
 800373e:	e000      	b.n	8003742 <convolve_1x1_s8+0xb7a>
 8003740:	2300      	movs	r3, #0
 8003742:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8003746:	f5a2 72cc 	sub.w	r2, r2, #408	@ 0x198
 800374a:	6011      	str	r1, [r2, #0]
 800374c:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8003750:	f5a2 72ce 	sub.w	r2, r2, #412	@ 0x19c
 8003754:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8003756:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800375a:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 800375e:	2200      	movs	r2, #0
 8003760:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8003762:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003766:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800376a:	2201      	movs	r2, #1
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	409a      	lsls	r2, r3
 8003770:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003774:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8003778:	3a01      	subs	r2, #1
 800377a:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 800377c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003780:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003784:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8003788:	f5a2 71cc 	sub.w	r1, r2, #408	@ 0x198
 800378c:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8003790:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003794:	6809      	ldr	r1, [r1, #0]
 8003796:	6812      	ldr	r2, [r2, #0]
 8003798:	400a      	ands	r2, r1
 800379a:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 800379c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80037a0:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80037a4:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80037a8:	f5a2 71cc 	sub.w	r1, r2, #408	@ 0x198
 80037ac:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80037b0:	f5a2 72ce 	sub.w	r2, r2, #412	@ 0x19c
 80037b4:	6809      	ldr	r1, [r1, #0]
 80037b6:	6812      	ldr	r2, [r2, #0]
 80037b8:	fa41 f202 	asr.w	r2, r1, r2
 80037bc:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 80037be:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80037c2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80037c6:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80037ca:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80037ce:	6812      	ldr	r2, [r2, #0]
 80037d0:	1052      	asrs	r2, r2, #1
 80037d2:	601a      	str	r2, [r3, #0]
    if (result < 0)
 80037d4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80037d8:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	da0a      	bge.n	80037f8 <convolve_1x1_s8+0xc30>
        threshold++;
 80037e2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80037e6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80037ea:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80037ee:	f5a2 72d6 	sub.w	r2, r2, #428	@ 0x1ac
 80037f2:	6812      	ldr	r2, [r2, #0]
 80037f4:	3201      	adds	r2, #1
 80037f6:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 80037f8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80037fc:	f5a3 72d4 	sub.w	r2, r3, #424	@ 0x1a8
 8003800:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003804:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003808:	6812      	ldr	r2, [r2, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	429a      	cmp	r2, r3
 800380e:	dd0a      	ble.n	8003826 <convolve_1x1_s8+0xc5e>
        result++;
 8003810:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003814:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8003818:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 800381c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003820:	6812      	ldr	r2, [r2, #0]
 8003822:	3201      	adds	r2, #1
 8003824:	601a      	str	r2, [r3, #0]
    return result;
 8003826:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800382a:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 800382e:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8003830:	bf00      	nop
 8003832:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
			sum += out_offset;
 8003836:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 800383a:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 800383e:	4413      	add	r3, r2
 8003840:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
			sum = MAX(sum, out_activation_min);
 8003844:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 8003848:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 800384c:	4293      	cmp	r3, r2
 800384e:	bfb8      	it	lt
 8003850:	4613      	movlt	r3, r2
 8003852:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
			sum = MIN(sum, out_activation_max);
 8003856:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 800385a:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 800385e:	4293      	cmp	r3, r2
 8003860:	bfa8      	it	ge
 8003862:	4613      	movge	r3, r2
 8003864:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
			*out++ = (q7_t) sum;
 8003868:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 800386c:	1c5a      	adds	r2, r3, #1
 800386e:	f8c7 2218 	str.w	r2, [r7, #536]	@ 0x218
 8003872:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 8003876:	b252      	sxtb	r2, r2
 8003878:	701a      	strb	r2, [r3, #0]
		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 800387a:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800387e:	3301      	adds	r3, #1
 8003880:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 8003884:	f8b7 3274 	ldrh.w	r3, [r7, #628]	@ 0x274
 8003888:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 800388c:	429a      	cmp	r2, r3
 800388e:	f6ff ad29 	blt.w	80032e4 <convolve_1x1_s8+0x71c>
		}
	}

	/* Return to application */
	return STATE_SUCCESS;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	f507 7709 	add.w	r7, r7, #548	@ 0x224
 800389a:	46bd      	mov	sp, r7
 800389c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080038a0 <convolve_1x1_s8_ch16>:
		const uint16_t input_y, const uint16_t input_ch, const q7_t *kernel,
		const int32_t *bias, const int32_t *output_shift,
		const int32_t *output_mult, const int32_t out_offset,
		const int32_t input_offset, const int32_t out_activation_min,
		const int32_t out_activation_max, q7_t *output, const uint16_t output_x,
		const uint16_t output_y, const uint16_t output_ch, q15_t *runtime_buf) {
 80038a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038a4:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
 80038a8:	af08      	add	r7, sp, #32
 80038aa:	f507 7608 	add.w	r6, r7, #544	@ 0x220
 80038ae:	f5a6 7603 	sub.w	r6, r6, #524	@ 0x20c
 80038b2:	6030      	str	r0, [r6, #0]
 80038b4:	460e      	mov	r6, r1
 80038b6:	4610      	mov	r0, r2
 80038b8:	4619      	mov	r1, r3
 80038ba:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80038be:	f2a3 230e 	subw	r3, r3, #526	@ 0x20e
 80038c2:	4632      	mov	r2, r6
 80038c4:	801a      	strh	r2, [r3, #0]
 80038c6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80038ca:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80038ce:	4602      	mov	r2, r0
 80038d0:	801a      	strh	r2, [r3, #0]
 80038d2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80038d6:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 80038da:	460a      	mov	r2, r1
 80038dc:	801a      	strh	r2, [r3, #0]
	int32_t i_element;
	(void) input_x;
	(void) input_y;

	/* Partial(two columns) im2col buffer */
	q15_t *two_column_buffer = runtime_buf;
 80038de:	f8d7 3278 	ldr.w	r3, [r7, #632]	@ 0x278
 80038e2:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
	q7_t *out = output;
 80038e6:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 80038ea:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
	const int32_t num_elements = output_x * output_y;
 80038ee:	f8b7 326c 	ldrh.w	r3, [r7, #620]	@ 0x26c
 80038f2:	f8b7 2270 	ldrh.w	r2, [r7, #624]	@ 0x270
 80038f6:	fb02 f303 	mul.w	r3, r2, r3
 80038fa:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
	const int channel_div4 = (input_ch >> 2);
 80038fe:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003902:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 8003906:	881b      	ldrh	r3, [r3, #0]
 8003908:	089b      	lsrs	r3, r3, #2
 800390a:	b29b      	uxth	r3, r3
 800390c:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4

	const int16_t inoff16 = input_offset;
 8003910:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8003914:	f8a7 31f2 	strh.w	r3, [r7, #498]	@ 0x1f2
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 8003918:	f9b7 31f2 	ldrsh.w	r3, [r7, #498]	@ 0x1f2
 800391c:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 8003920:	f9b7 31f2 	ldrsh.w	r3, [r7, #498]	@ 0x1f2
 8003924:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8003928:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 800392c:	f8d7 21e8 	ldr.w	r2, [r7, #488]	@ 0x1e8
 8003930:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 8003934:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8003938:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 800393c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0

	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8003940:	2300      	movs	r3, #0
 8003942:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8003946:	e1c8      	b.n	8003cda <convolve_1x1_s8_ch16+0x43a>
		/* Fill buffer for partial im2col - two columns at a time */
		q7_t *src = &input[i_element * input_ch * 2];
 8003948:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800394c:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 8003950:	881b      	ldrh	r3, [r3, #0]
 8003952:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 8003956:	fb02 f303 	mul.w	r3, r2, r3
 800395a:	005b      	lsls	r3, r3, #1
 800395c:	461a      	mov	r2, r3
 800395e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003962:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	441a      	add	r2, r3
 800396a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800396e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003972:	601a      	str	r2, [r3, #0]
		q15_t *dst = two_column_buffer;
 8003974:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003978:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800397c:	f8d7 21fc 	ldr.w	r2, [r7, #508]	@ 0x1fc
 8003980:	601a      	str	r2, [r3, #0]
		q31_t in_q15x2_1;
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two columns
 8003982:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003986:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
		while (cnt > 0) {
 800398a:	e174      	b.n	8003c76 <convolve_1x1_s8_ch16+0x3d6>
 800398c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8003990:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    memcpy(&val, *in_q7, 4);
 8003994:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	461a      	mov	r2, r3
 800399e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80039a2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80039a6:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80039a8:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	1d1a      	adds	r2, r3, #4
 80039b0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80039b4:	601a      	str	r2, [r3, #0]
    return (val);
 80039b6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80039ba:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80039be:	681b      	ldr	r3, [r3, #0]
			q7_q15_offset_reordered_ele(src, dst)
 80039c0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80039c4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80039c8:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 80039cc:	2308      	movs	r3, #8
 80039ce:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
  op2 %= 32U;
 80039d2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80039d6:	f003 031f 	and.w	r3, r3, #31
 80039da:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
  if (op2 == 0U)
 80039de:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d102      	bne.n	80039ec <convolve_1x1_s8_ch16+0x14c>
    return op1;
 80039e6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80039ea:	e005      	b.n	80039f8 <convolve_1x1_s8_ch16+0x158>
  return (op1 >> op2) | (op1 << (32U - op2));
 80039ec:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 80039f0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80039f4:	fa62 f303 	ror.w	r3, r2, r3
 80039f8:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80039fc:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8003a00:	fa2f f383 	sxtb16	r3, r3
 8003a04:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
  return(result);
 8003a08:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003a0c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003a10:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003a14:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003a18:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8003a1c:	fa2f f383 	sxtb16	r3, r3
 8003a20:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
  return(result);
 8003a24:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a28:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003a2c:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8003a30:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8003a34:	f8c7 215c 	str.w	r2, [r7, #348]	@ 0x15c
 8003a38:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003a3c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8003a40:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8003a44:	fa93 f302 	sadd16	r3, r3, r2
 8003a48:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
  return(result);
 8003a4c:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8003a50:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003a54:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8003a58:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8003a5c:	f8c7 2168 	str.w	r2, [r7, #360]	@ 0x168
 8003a60:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003a64:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8003a68:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 8003a6c:	fa93 f302 	sadd16	r3, r3, r2
 8003a70:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return(result);
 8003a74:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8003a78:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003a7c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003a80:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8003a84:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003a88:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
  q31_t val = value;
 8003a8c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003a90:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003a94:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8003a98:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8003a9a:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8003aa4:	f5a2 72de 	sub.w	r2, r2, #444	@ 0x1bc
 8003aa8:	6812      	ldr	r2, [r2, #0]
 8003aaa:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8003aac:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	1d1a      	adds	r2, r3, #4
 8003ab4:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8003ab8:	601a      	str	r2, [r3, #0]
}
 8003aba:	bf00      	nop
 8003abc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003ac0:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8003ac4:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8003ac8:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
  q31_t val = value;
 8003acc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003ad0:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003ad4:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8003ad8:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8003ada:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8003ae4:	f5a2 72e0 	sub.w	r2, r2, #448	@ 0x1c0
 8003ae8:	6812      	ldr	r2, [r2, #0]
 8003aea:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8003aec:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	1d1a      	adds	r2, r3, #4
 8003af4:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8003af8:	601a      	str	r2, [r3, #0]
}
 8003afa:	bf00      	nop
 8003afc:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8003b00:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
    memcpy(&val, *in_q7, 4);
 8003b04:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003b12:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003b16:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8003b18:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	1d1a      	adds	r2, r3, #4
 8003b20:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8003b24:	601a      	str	r2, [r3, #0]
    return (val);
 8003b26:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003b2a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003b2e:	681b      	ldr	r3, [r3, #0]
			q7_q15_offset_reordered_ele(src, dst)
 8003b30:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8003b34:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003b38:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003b3c:	2308      	movs	r3, #8
 8003b3e:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
  op2 %= 32U;
 8003b42:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003b46:	f003 031f 	and.w	r3, r3, #31
 8003b4a:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
  if (op2 == 0U)
 8003b4e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d102      	bne.n	8003b5c <convolve_1x1_s8_ch16+0x2bc>
    return op1;
 8003b56:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8003b5a:	e005      	b.n	8003b68 <convolve_1x1_s8_ch16+0x2c8>
  return (op1 >> op2) | (op1 << (32U - op2));
 8003b5c:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8003b60:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003b64:	fa62 f303 	ror.w	r3, r2, r3
 8003b68:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003b6c:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8003b70:	fa2f f383 	sxtb16	r3, r3
 8003b74:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
  return(result);
 8003b78:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003b7c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003b80:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003b84:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003b88:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8003b8c:	fa2f f383 	sxtb16	r3, r3
 8003b90:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return(result);
 8003b94:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003b98:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003b9c:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8003ba0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8003ba4:	f8c7 21a0 	str.w	r2, [r7, #416]	@ 0x1a0
 8003ba8:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003bac:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003bb0:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8003bb4:	fa93 f302 	sadd16	r3, r3, r2
 8003bb8:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
  return(result);
 8003bbc:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8003bc0:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003bc4:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8003bc8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8003bcc:	f8c7 21ac 	str.w	r2, [r7, #428]	@ 0x1ac
 8003bd0:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003bd4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8003bd8:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8003bdc:	fa93 f302 	sadd16	r3, r3, r2
 8003be0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
  return(result);
 8003be4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003be8:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003bec:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003bf0:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8003bf4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003bf8:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  q31_t val = value;
 8003bfc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003c00:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8003c04:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8003c08:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8003c0a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8003c14:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003c18:	6812      	ldr	r2, [r2, #0]
 8003c1a:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8003c1c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	1d1a      	adds	r2, r3, #4
 8003c24:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8003c28:	601a      	str	r2, [r3, #0]
}
 8003c2a:	bf00      	nop
 8003c2c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003c30:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003c34:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8003c38:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
  q31_t val = value;
 8003c3c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003c40:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003c44:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003c48:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8003c4a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8003c54:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003c58:	6812      	ldr	r2, [r2, #0]
 8003c5a:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8003c5c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	1d1a      	adds	r2, r3, #4
 8003c64:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8003c68:	601a      	str	r2, [r3, #0]
}
 8003c6a:	bf00      	nop
			cnt--;
 8003c6c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003c70:	3b01      	subs	r3, #1
 8003c72:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
		while (cnt > 0) {
 8003c76:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f73f ae86 	bgt.w	800398c <convolve_1x1_s8_ch16+0xec>
		}

		out = mat_mult_kernel_s8_s16_reordered_ch16(kernel,
 8003c80:	f8b7 1274 	ldrh.w	r1, [r7, #628]	@ 0x274
				two_column_buffer, output_ch, output_shift, output_mult,
				(q7_t) out_offset, out_activation_min,
 8003c84:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8003c88:	b25b      	sxtb	r3, r3
		out = mat_mult_kernel_s8_s16_reordered_ch16(kernel,
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003c90:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 8003c94:	881b      	ldrh	r3, [r3, #0]
 8003c96:	f8d7 2218 	ldr.w	r2, [r7, #536]	@ 0x218
 8003c9a:	9206      	str	r2, [sp, #24]
 8003c9c:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 8003ca0:	9205      	str	r2, [sp, #20]
 8003ca2:	9304      	str	r3, [sp, #16]
 8003ca4:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 8003ca8:	9303      	str	r3, [sp, #12]
 8003caa:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 8003cae:	9302      	str	r3, [sp, #8]
 8003cb0:	9001      	str	r0, [sp, #4]
 8003cb2:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8003cb6:	9300      	str	r3, [sp, #0]
 8003cb8:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8003cbc:	460a      	mov	r2, r1
 8003cbe:	f8d7 11fc 	ldr.w	r1, [r7, #508]	@ 0x1fc
 8003cc2:	f8d7 0248 	ldr.w	r0, [r7, #584]	@ 0x248
 8003cc6:	f7fe fe65 	bl	8002994 <mat_mult_kernel_s8_s16_reordered_ch16>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8003cd0:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8003cda:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	da00      	bge.n	8003ce4 <convolve_1x1_s8_ch16+0x444>
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	105b      	asrs	r3, r3, #1
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8003cec:	4293      	cmp	r3, r2
 8003cee:	f6ff ae2b 	blt.w	8003948 <convolve_1x1_s8_ch16+0xa8>
				out_activation_max, input_ch * DIM_KER_Y * DIM_KER_X,
				bias, out);
	}

	/* check if there is an odd column left-over for computation */
	if (num_elements & 0x1) {
 8003cf2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f000 841d 	beq.w	800453a <convolve_1x1_s8_ch16+0xc9a>
		int32_t i_ch_out;
		const q7_t *ker_a = kernel;
 8003d00:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8003d04:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
		q7_t *src = &input[(num_elements - 1) * input_ch];
 8003d08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8003d12:	f2a2 2212 	subw	r2, r2, #530	@ 0x212
 8003d16:	8812      	ldrh	r2, [r2, #0]
 8003d18:	fb02 f303 	mul.w	r3, r2, r3
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003d22:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	441a      	add	r2, r3
 8003d2a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003d2e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003d32:	601a      	str	r2, [r3, #0]
		q15_t *dst = two_column_buffer;
 8003d34:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003d38:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003d3c:	f8d7 21fc 	ldr.w	r2, [r7, #508]	@ 0x1fc
 8003d40:	601a      	str	r2, [r3, #0]
		q31_t in_q15x2_1;
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two * numof2col columns
 8003d42:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003d46:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
		while (cnt > 0) {
 8003d4a:	e116      	b.n	8003f7a <convolve_1x1_s8_ch16+0x6da>
 8003d4c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003d50:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003d54:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8003d58:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8003d5a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003d5e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	461a      	mov	r2, r3
 8003d6a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003d6e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003d72:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8003d74:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003d78:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	1d1a      	adds	r2, r3, #4
 8003d82:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003d86:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	601a      	str	r2, [r3, #0]
    return (val);
 8003d8e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003d92:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003d96:	681b      	ldr	r3, [r3, #0]
			q7_q15_offset_reordered_ele(src, dst)
 8003d98:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 8003d9c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8003da0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003da4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003da8:	601a      	str	r2, [r3, #0]
 8003daa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003dae:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003db2:	2208      	movs	r2, #8
 8003db4:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8003db6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003dba:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003dbe:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8003dc2:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 8003dc6:	6812      	ldr	r2, [r2, #0]
 8003dc8:	f002 021f 	and.w	r2, r2, #31
 8003dcc:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8003dce:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003dd2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d105      	bne.n	8003de8 <convolve_1x1_s8_ch16+0x548>
    return op1;
 8003ddc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003de0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	e00b      	b.n	8003e00 <convolve_1x1_s8_ch16+0x560>
  return (op1 >> op2) | (op1 << (32U - op2));
 8003de8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003dec:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 8003df0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003df4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003df8:	6812      	ldr	r2, [r2, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	fa62 f303 	ror.w	r3, r2, r3
 8003e00:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8003e04:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 8003e08:	6013      	str	r3, [r2, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003e0a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003e0e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	fa2f f283 	sxtb16	r2, r3
 8003e18:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003e1c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003e20:	601a      	str	r2, [r3, #0]
  return(result);
 8003e22:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003e26:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8003e30:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8003e34:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003e38:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003e3c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003e3e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003e42:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	fa2f f283 	sxtb16	r2, r3
 8003e4c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003e50:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003e54:	601a      	str	r2, [r3, #0]
  return(result);
 8003e56:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003e5a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8003e64:	f8d7 11d0 	ldr.w	r1, [r7, #464]	@ 0x1d0
 8003e68:	f8d7 21e0 	ldr.w	r2, [r7, #480]	@ 0x1e0
 8003e6c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003e70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e74:	6019      	str	r1, [r3, #0]
 8003e76:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003e7a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003e7e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003e80:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003e84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8003e8e:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8003e92:	6812      	ldr	r2, [r2, #0]
 8003e94:	fa93 f202 	sadd16	r2, r3, r2
 8003e98:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003e9c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003ea0:	601a      	str	r2, [r3, #0]
  return(result);
 8003ea2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003ea6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8003eb0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003eb4:	f8d7 21e0 	ldr.w	r2, [r7, #480]	@ 0x1e0
 8003eb8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003ebc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003ec0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003ec4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003ec6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003eca:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8003ece:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 8003ed2:	6812      	ldr	r2, [r2, #0]
 8003ed4:	fa93 f202 	sadd16	r2, r3, r2
 8003ed8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003edc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003ee0:	601a      	str	r2, [r3, #0]
  return(result);
 8003ee2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003ee6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8003ef0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003ef4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8003ef8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003efc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  q31_t val = value;
 8003f00:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003f04:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003f08:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8003f0c:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8003f0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8003f18:	f5a2 72ee 	sub.w	r2, r2, #476	@ 0x1dc
 8003f1c:	6812      	ldr	r2, [r2, #0]
 8003f1e:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8003f20:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	1d1a      	adds	r2, r3, #4
 8003f28:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003f2c:	601a      	str	r2, [r3, #0]
}
 8003f2e:	bf00      	nop
 8003f30:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003f34:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8003f38:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003f3c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  q31_t val = value;
 8003f40:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003f44:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003f48:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8003f4c:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8003f4e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8003f58:	f5a2 72f0 	sub.w	r2, r2, #480	@ 0x1e0
 8003f5c:	6812      	ldr	r2, [r2, #0]
 8003f5e:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8003f60:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	1d1a      	adds	r2, r3, #4
 8003f68:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003f6c:	601a      	str	r2, [r3, #0]
}
 8003f6e:	bf00      	nop
			cnt--;
 8003f70:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003f74:	3b01      	subs	r3, #1
 8003f76:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
		while (cnt > 0) {
 8003f7a:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f73f aee4 	bgt.w	8003d4c <convolve_1x1_s8_ch16+0x4ac>
		}

		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 8003f84:	2300      	movs	r3, #0
 8003f86:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 8003f8a:	e2cf      	b.n	800452c <convolve_1x1_s8_ch16+0xc8c>
			q31_t sum = bias[i_ch_out];
 8003f8c:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 8003f96:	4413      	add	r3, r2
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204

			/* Point to the beginning of the im2col buffer where the input is available as a rearranged column */
			const q15_t *ip_as_col = runtime_buf;
 8003f9e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003fa2:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003fa6:	f8d7 2278 	ldr.w	r2, [r7, #632]	@ 0x278
 8003faa:	601a      	str	r2, [r3, #0]
			uint16_t col_count = (input_ch * DIM_KER_X * DIM_KER_Y) >> 2;
 8003fac:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003fb0:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 8003fb4:	881b      	ldrh	r3, [r3, #0]
 8003fb6:	089b      	lsrs	r3, r3, #2
 8003fb8:	f8a7 3202 	strh.w	r3, [r7, #514]	@ 0x202

			while (col_count) {
 8003fbc:	e17b      	b.n	80042b6 <convolve_1x1_s8_ch16+0xa16>
 8003fbe:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003fc2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003fc6:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 8003fca:	601a      	str	r2, [r3, #0]
 8003fcc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003fd0:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8003fd4:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8003fd8:	601a      	str	r2, [r3, #0]
 8003fda:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003fde:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8003fe2:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8003fe6:	601a      	str	r2, [r3, #0]
 8003fe8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003fec:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003ff0:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8003ff4:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8003ff6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8003ffa:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	461a      	mov	r2, r3
 8004006:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800400a:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800400e:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8004010:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004014:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	1d1a      	adds	r2, r3, #4
 800401e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004022:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	601a      	str	r2, [r3, #0]
    return (val);
 800402a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800402e:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8004032:	681a      	ldr	r2, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 8004034:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004038:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800403c:	601a      	str	r2, [r3, #0]
    *out2 = __SXTB16(__ROR((uint32_t)inA, 8));
 800403e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004042:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800404c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004050:	601a      	str	r2, [r3, #0]
 8004052:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004056:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800405a:	2208      	movs	r2, #8
 800405c:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800405e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004062:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004066:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 800406a:	f5a2 72b6 	sub.w	r2, r2, #364	@ 0x16c
 800406e:	6812      	ldr	r2, [r2, #0]
 8004070:	f002 021f 	and.w	r2, r2, #31
 8004074:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8004076:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800407a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d105      	bne.n	8004090 <convolve_1x1_s8_ch16+0x7f0>
    return op1;
 8004084:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004088:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	e00b      	b.n	80040a8 <convolve_1x1_s8_ch16+0x808>
  return (op1 >> op2) | (op1 << (32U - op2));
 8004090:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004094:	f5a3 72b4 	sub.w	r2, r3, #360	@ 0x168
 8004098:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800409c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80040a0:	6812      	ldr	r2, [r2, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	fa62 f303 	ror.w	r3, r2, r3
 80040a8:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80040ac:	f5a2 72b8 	sub.w	r2, r2, #368	@ 0x170
 80040b0:	6013      	str	r3, [r2, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80040b2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80040b6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	fa2f f283 	sxtb16	r2, r3
 80040c0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80040c4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80040c8:	601a      	str	r2, [r3, #0]
  return(result);
 80040ca:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80040ce:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	461a      	mov	r2, r3
 80040d6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80040da:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	601a      	str	r2, [r3, #0]
    *out1 = __SXTB16(inA);
 80040e2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80040e6:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80040f0:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80040f4:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80040f6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80040fa:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	fa2f f283 	sxtb16	r2, r3
 8004104:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004108:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800410c:	601a      	str	r2, [r3, #0]
  return(result);
 800410e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004112:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	461a      	mov	r2, r3
 800411a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800411e:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	601a      	str	r2, [r3, #0]
    return source;
 8004126:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800412a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800412e:	681b      	ldr	r3, [r3, #0]
				q31_t ker_a1, ker_a2;
				q31_t in_b1, in_b2;
				ker_a = read_and_pad_reordered(ker_a, &ker_a1, &ker_a2);
 8004130:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8004134:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004138:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800413c:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8004140:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 8004142:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004146:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	461a      	mov	r2, r3
 8004152:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004156:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800415a:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 800415c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004160:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	1d1a      	adds	r2, r3, #4
 800416a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800416e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	601a      	str	r2, [r3, #0]
    return (val);
 8004176:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800417a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800417e:	681b      	ldr	r3, [r3, #0]

				in_b1 = arm_nn_read_q15x2_ia(&ip_as_col);
 8004180:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
				sum = __SMLAD(ker_a1, in_b1, sum);
 8004184:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004188:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4618      	mov	r0, r3
 8004190:	f8d7 11dc 	ldr.w	r1, [r7, #476]	@ 0x1dc
 8004194:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 8004198:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800419c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80041a0:	6018      	str	r0, [r3, #0]
 80041a2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80041a6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80041aa:	6019      	str	r1, [r3, #0]
 80041ac:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80041b0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80041b4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80041b6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80041ba:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80041c4:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 80041c8:	6812      	ldr	r2, [r2, #0]
 80041ca:	f507 7108 	add.w	r1, r7, #544	@ 0x220
 80041ce:	f5a1 71a6 	sub.w	r1, r1, #332	@ 0x14c
 80041d2:	6809      	ldr	r1, [r1, #0]
 80041d4:	fb23 1202 	smlad	r2, r3, r2, r1
 80041d8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80041dc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80041e0:	601a      	str	r2, [r3, #0]
  return(result);
 80041e2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80041e6:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 80041f0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80041f4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80041f8:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80041fc:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 80041fe:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004202:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	461a      	mov	r2, r3
 800420e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004212:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8004216:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8004218:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800421c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	1d1a      	adds	r2, r3, #4
 8004226:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800422a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	601a      	str	r2, [r3, #0]
    return (val);
 8004232:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004236:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800423a:	681b      	ldr	r3, [r3, #0]
				in_b2 = arm_nn_read_q15x2_ia(&ip_as_col);
 800423c:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
				sum = __SMLAD(ker_a2, in_b2, sum);
 8004240:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004244:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4618      	mov	r0, r3
 800424c:	f8d7 11d8 	ldr.w	r1, [r7, #472]	@ 0x1d8
 8004250:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 8004254:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004258:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800425c:	6018      	str	r0, [r3, #0]
 800425e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004262:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004266:	6019      	str	r1, [r3, #0]
 8004268:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800426c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004270:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8004272:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004276:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8004280:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8004284:	6812      	ldr	r2, [r2, #0]
 8004286:	f507 7108 	add.w	r1, r7, #544	@ 0x220
 800428a:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 800428e:	6809      	ldr	r1, [r1, #0]
 8004290:	fb23 1202 	smlad	r2, r3, r2, r1
 8004294:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004298:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800429c:	601a      	str	r2, [r3, #0]
  return(result);
 800429e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80042a2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204

				col_count--;
 80042ac:	f8b7 3202 	ldrh.w	r3, [r7, #514]	@ 0x202
 80042b0:	3b01      	subs	r3, #1
 80042b2:	f8a7 3202 	strh.w	r3, [r7, #514]	@ 0x202
			while (col_count) {
 80042b6:	f8b7 3202 	ldrh.w	r3, [r7, #514]	@ 0x202
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	f47f ae7f 	bne.w	8003fbe <convolve_1x1_s8_ch16+0x71e>
			}

			sum = arm_nn_requantize(sum, output_mult[i_ch_out],
 80042c0:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 80042ca:	4413      	add	r3, r2
 80042cc:	6819      	ldr	r1, [r3, #0]
					output_shift[i_ch_out]);
 80042ce:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 80042d8:	4413      	add	r3, r2
			sum = arm_nn_requantize(sum, output_mult[i_ch_out],
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80042e0:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80042e4:	f8d7 0204 	ldr.w	r0, [r7, #516]	@ 0x204
 80042e8:	6018      	str	r0, [r3, #0]
 80042ea:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80042ee:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80042f2:	6019      	str	r1, [r3, #0]
 80042f4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80042f8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80042fc:	601a      	str	r2, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80042fe:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004302:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800430c:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8004310:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8004314:	6812      	ldr	r2, [r2, #0]
 8004316:	409a      	lsls	r2, r3
 8004318:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800431c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004320:	601a      	str	r2, [r3, #0]
 8004322:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004326:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800432a:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 800432e:	f5a2 72c2 	sub.w	r2, r2, #388	@ 0x184
 8004332:	6812      	ldr	r2, [r2, #0]
 8004334:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8004336:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800433a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800433e:	2200      	movs	r2, #0
 8004340:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 8004342:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004346:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 800434a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800434e:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 8004350:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004354:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8004358:	2200      	movs	r2, #0
 800435a:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800435c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004360:	f507 7108 	add.w	r1, r7, #544	@ 0x220
 8004364:	f5a1 71c6 	sub.w	r1, r1, #396	@ 0x18c
 8004368:	6809      	ldr	r1, [r1, #0]
 800436a:	17c8      	asrs	r0, r1, #31
 800436c:	4688      	mov	r8, r1
 800436e:	4681      	mov	r9, r0
 8004370:	f507 7108 	add.w	r1, r7, #544	@ 0x220
 8004374:	f5a1 71c8 	sub.w	r1, r1, #400	@ 0x190
 8004378:	6809      	ldr	r1, [r1, #0]
 800437a:	17c8      	asrs	r0, r1, #31
 800437c:	468a      	mov	sl, r1
 800437e:	4683      	mov	fp, r0
 8004380:	fb0a f009 	mul.w	r0, sl, r9
 8004384:	fb08 f10b 	mul.w	r1, r8, fp
 8004388:	4401      	add	r1, r0
 800438a:	fba8 450a 	umull	r4, r5, r8, sl
 800438e:	4429      	add	r1, r5
 8004390:	460d      	mov	r5, r1
 8004392:	1911      	adds	r1, r2, r4
 8004394:	6039      	str	r1, [r7, #0]
 8004396:	416b      	adcs	r3, r5
 8004398:	607b      	str	r3, [r7, #4]
 800439a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800439e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    result = (int32_t)(mult.long_long >> 31);
 80043a2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80043a6:	f04f 0200 	mov.w	r2, #0
 80043aa:	f04f 0300 	mov.w	r3, #0
 80043ae:	0fc2      	lsrs	r2, r0, #31
 80043b0:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80043b4:	17cb      	asrs	r3, r1, #31
 80043b6:	f507 7108 	add.w	r1, r7, #544	@ 0x220
 80043ba:	f5a1 71ca 	sub.w	r1, r1, #404	@ 0x194
 80043be:	4613      	mov	r3, r2
 80043c0:	600b      	str	r3, [r1, #0]
    return result;
 80043c2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80043c6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80043ca:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80043cc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80043d0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	dc06      	bgt.n	80043e8 <convolve_1x1_s8_ch16+0xb48>
 80043da:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80043de:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	425b      	negs	r3, r3
 80043e6:	e000      	b.n	80043ea <convolve_1x1_s8_ch16+0xb4a>
 80043e8:	2300      	movs	r3, #0
 80043ea:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80043ee:	f5a2 72cc 	sub.w	r2, r2, #408	@ 0x198
 80043f2:	6011      	str	r1, [r2, #0]
 80043f4:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80043f8:	f5a2 72ce 	sub.w	r2, r2, #412	@ 0x19c
 80043fc:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80043fe:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004402:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8004406:	2200      	movs	r2, #0
 8004408:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 800440a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800440e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004412:	2201      	movs	r2, #1
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	409a      	lsls	r2, r3
 8004418:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800441c:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8004420:	3a01      	subs	r2, #1
 8004422:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 8004424:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004428:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800442c:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8004430:	f5a2 71cc 	sub.w	r1, r2, #408	@ 0x198
 8004434:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8004438:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800443c:	6809      	ldr	r1, [r1, #0]
 800443e:	6812      	ldr	r2, [r2, #0]
 8004440:	400a      	ands	r2, r1
 8004442:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 8004444:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004448:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 800444c:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8004450:	f5a2 71cc 	sub.w	r1, r2, #408	@ 0x198
 8004454:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8004458:	f5a2 72ce 	sub.w	r2, r2, #412	@ 0x19c
 800445c:	6809      	ldr	r1, [r1, #0]
 800445e:	6812      	ldr	r2, [r2, #0]
 8004460:	fa41 f202 	asr.w	r2, r1, r2
 8004464:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 8004466:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800446a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800446e:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8004472:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004476:	6812      	ldr	r2, [r2, #0]
 8004478:	1052      	asrs	r2, r2, #1
 800447a:	601a      	str	r2, [r3, #0]
    if (result < 0)
 800447c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004480:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	da0a      	bge.n	80044a0 <convolve_1x1_s8_ch16+0xc00>
        threshold++;
 800448a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800448e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004492:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8004496:	f5a2 72d6 	sub.w	r2, r2, #428	@ 0x1ac
 800449a:	6812      	ldr	r2, [r2, #0]
 800449c:	3201      	adds	r2, #1
 800449e:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 80044a0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80044a4:	f5a3 72d4 	sub.w	r2, r3, #424	@ 0x1a8
 80044a8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80044ac:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80044b0:	6812      	ldr	r2, [r2, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	dd0a      	ble.n	80044ce <convolve_1x1_s8_ch16+0xc2e>
        result++;
 80044b8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80044bc:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80044c0:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80044c4:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80044c8:	6812      	ldr	r2, [r2, #0]
 80044ca:	3201      	adds	r2, #1
 80044cc:	601a      	str	r2, [r3, #0]
    return result;
 80044ce:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80044d2:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80044d6:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80044d8:	bf00      	nop
 80044da:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
			sum += out_offset;
 80044de:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 80044e2:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 80044e6:	4413      	add	r3, r2
 80044e8:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
			sum = MAX(sum, out_activation_min);
 80044ec:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 80044f0:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 80044f4:	4293      	cmp	r3, r2
 80044f6:	bfb8      	it	lt
 80044f8:	4613      	movlt	r3, r2
 80044fa:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
			sum = MIN(sum, out_activation_max);
 80044fe:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 8004502:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 8004506:	4293      	cmp	r3, r2
 8004508:	bfa8      	it	ge
 800450a:	4613      	movge	r3, r2
 800450c:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
			*out++ = (q7_t) sum;
 8004510:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8004514:	1c5a      	adds	r2, r3, #1
 8004516:	f8c7 2218 	str.w	r2, [r7, #536]	@ 0x218
 800451a:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 800451e:	b252      	sxtb	r2, r2
 8004520:	701a      	strb	r2, [r3, #0]
		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 8004522:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8004526:	3301      	adds	r3, #1
 8004528:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 800452c:	f8b7 3274 	ldrh.w	r3, [r7, #628]	@ 0x274
 8004530:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 8004534:	429a      	cmp	r2, r3
 8004536:	f6ff ad29 	blt.w	8003f8c <convolve_1x1_s8_ch16+0x6ec>
		}
	}

	/* Return to application */
	return STATE_SUCCESS;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	f507 7709 	add.w	r7, r7, #548	@ 0x224
 8004542:	46bd      	mov	sp, r7
 8004544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004548 <convolve_1x1_s8_ch24>:
		const uint16_t input_y, const uint16_t input_ch, const q7_t *kernel,
		const int32_t *bias, const int32_t *output_shift,
		const int32_t *output_mult, const int32_t out_offset,
		const int32_t input_offset, const int32_t out_activation_min,
		const int32_t out_activation_max, q7_t *output, const uint16_t output_x,
		const uint16_t output_y, const uint16_t output_ch, q15_t *runtime_buf) {
 8004548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800454c:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
 8004550:	af08      	add	r7, sp, #32
 8004552:	f507 7608 	add.w	r6, r7, #544	@ 0x220
 8004556:	f5a6 7603 	sub.w	r6, r6, #524	@ 0x20c
 800455a:	6030      	str	r0, [r6, #0]
 800455c:	460e      	mov	r6, r1
 800455e:	4610      	mov	r0, r2
 8004560:	4619      	mov	r1, r3
 8004562:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004566:	f2a3 230e 	subw	r3, r3, #526	@ 0x20e
 800456a:	4632      	mov	r2, r6
 800456c:	801a      	strh	r2, [r3, #0]
 800456e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004572:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8004576:	4602      	mov	r2, r0
 8004578:	801a      	strh	r2, [r3, #0]
 800457a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800457e:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 8004582:	460a      	mov	r2, r1
 8004584:	801a      	strh	r2, [r3, #0]
	int32_t i_element;
	(void) input_x;
	(void) input_y;

	/* Partial(two columns) im2col buffer */
	q15_t *two_column_buffer = runtime_buf;
 8004586:	f8d7 3278 	ldr.w	r3, [r7, #632]	@ 0x278
 800458a:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
	q7_t *out = output;
 800458e:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 8004592:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
	const int32_t num_elements = output_x * output_y;
 8004596:	f8b7 326c 	ldrh.w	r3, [r7, #620]	@ 0x26c
 800459a:	f8b7 2270 	ldrh.w	r2, [r7, #624]	@ 0x270
 800459e:	fb02 f303 	mul.w	r3, r2, r3
 80045a2:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
	const int channel_div4 = (input_ch >> 2);
 80045a6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80045aa:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 80045ae:	881b      	ldrh	r3, [r3, #0]
 80045b0:	089b      	lsrs	r3, r3, #2
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4

	const int16_t inoff16 = input_offset;
 80045b8:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 80045bc:	f8a7 31f2 	strh.w	r3, [r7, #498]	@ 0x1f2
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 80045c0:	f9b7 31f2 	ldrsh.w	r3, [r7, #498]	@ 0x1f2
 80045c4:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 80045c8:	f9b7 31f2 	ldrsh.w	r3, [r7, #498]	@ 0x1f2
 80045cc:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80045d0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 80045d4:	f8d7 21e8 	ldr.w	r2, [r7, #488]	@ 0x1e8
 80045d8:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 80045dc:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80045e0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80045e4:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0

	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 80045e8:	2300      	movs	r3, #0
 80045ea:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80045ee:	e1c8      	b.n	8004982 <convolve_1x1_s8_ch24+0x43a>
		/* Fill buffer for partial im2col - two columns at a time */
		q7_t *src = &input[i_element * input_ch * 2];
 80045f0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80045f4:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 80045f8:	881b      	ldrh	r3, [r3, #0]
 80045fa:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 80045fe:	fb02 f303 	mul.w	r3, r2, r3
 8004602:	005b      	lsls	r3, r3, #1
 8004604:	461a      	mov	r2, r3
 8004606:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800460a:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	441a      	add	r2, r3
 8004612:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004616:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800461a:	601a      	str	r2, [r3, #0]
		q15_t *dst = two_column_buffer;
 800461c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004620:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004624:	f8d7 21fc 	ldr.w	r2, [r7, #508]	@ 0x1fc
 8004628:	601a      	str	r2, [r3, #0]
		q31_t in_q15x2_1;
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two columns
 800462a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800462e:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
		while (cnt > 0) {
 8004632:	e174      	b.n	800491e <convolve_1x1_s8_ch24+0x3d6>
 8004634:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8004638:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    memcpy(&val, *in_q7, 4);
 800463c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	461a      	mov	r2, r3
 8004646:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800464a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800464e:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8004650:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	1d1a      	adds	r2, r3, #4
 8004658:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800465c:	601a      	str	r2, [r3, #0]
    return (val);
 800465e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004662:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004666:	681b      	ldr	r3, [r3, #0]
			q7_q15_offset_reordered_ele(src, dst)
 8004668:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 800466c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8004670:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8004674:	2308      	movs	r3, #8
 8004676:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
  op2 %= 32U;
 800467a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800467e:	f003 031f 	and.w	r3, r3, #31
 8004682:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
  if (op2 == 0U)
 8004686:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800468a:	2b00      	cmp	r3, #0
 800468c:	d102      	bne.n	8004694 <convolve_1x1_s8_ch24+0x14c>
    return op1;
 800468e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8004692:	e005      	b.n	80046a0 <convolve_1x1_s8_ch24+0x158>
  return (op1 >> op2) | (op1 << (32U - op2));
 8004694:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8004698:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800469c:	fa62 f303 	ror.w	r3, r2, r3
 80046a0:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80046a4:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80046a8:	fa2f f383 	sxtb16	r3, r3
 80046ac:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
  return(result);
 80046b0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80046b4:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80046b8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80046bc:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80046c0:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80046c4:	fa2f f383 	sxtb16	r3, r3
 80046c8:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
  return(result);
 80046cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80046d0:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80046d4:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 80046d8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80046dc:	f8c7 215c 	str.w	r2, [r7, #348]	@ 0x15c
 80046e0:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80046e4:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80046e8:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 80046ec:	fa93 f302 	sadd16	r3, r3, r2
 80046f0:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
  return(result);
 80046f4:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80046f8:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80046fc:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8004700:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8004704:	f8c7 2168 	str.w	r2, [r7, #360]	@ 0x168
 8004708:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800470c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8004710:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 8004714:	fa93 f302 	sadd16	r3, r3, r2
 8004718:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return(result);
 800471c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8004720:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8004724:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004728:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 800472c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8004730:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
  q31_t val = value;
 8004734:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004738:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800473c:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8004740:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8004742:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 800474c:	f5a2 72de 	sub.w	r2, r2, #444	@ 0x1bc
 8004750:	6812      	ldr	r2, [r2, #0]
 8004752:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8004754:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	1d1a      	adds	r2, r3, #4
 800475c:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8004760:	601a      	str	r2, [r3, #0]
}
 8004762:	bf00      	nop
 8004764:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004768:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 800476c:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8004770:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
  q31_t val = value;
 8004774:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004778:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800477c:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8004780:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8004782:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 800478c:	f5a2 72e0 	sub.w	r2, r2, #448	@ 0x1c0
 8004790:	6812      	ldr	r2, [r2, #0]
 8004792:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8004794:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	1d1a      	adds	r2, r3, #4
 800479c:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80047a0:	601a      	str	r2, [r3, #0]
}
 80047a2:	bf00      	nop
 80047a4:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80047a8:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
    memcpy(&val, *in_q7, 4);
 80047ac:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	461a      	mov	r2, r3
 80047b6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80047ba:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80047be:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80047c0:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	1d1a      	adds	r2, r3, #4
 80047c8:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80047cc:	601a      	str	r2, [r3, #0]
    return (val);
 80047ce:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80047d2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80047d6:	681b      	ldr	r3, [r3, #0]
			q7_q15_offset_reordered_ele(src, dst)
 80047d8:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80047dc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80047e0:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80047e4:	2308      	movs	r3, #8
 80047e6:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
  op2 %= 32U;
 80047ea:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80047ee:	f003 031f 	and.w	r3, r3, #31
 80047f2:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
  if (op2 == 0U)
 80047f6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d102      	bne.n	8004804 <convolve_1x1_s8_ch24+0x2bc>
    return op1;
 80047fe:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8004802:	e005      	b.n	8004810 <convolve_1x1_s8_ch24+0x2c8>
  return (op1 >> op2) | (op1 << (32U - op2));
 8004804:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8004808:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800480c:	fa62 f303 	ror.w	r3, r2, r3
 8004810:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8004814:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8004818:	fa2f f383 	sxtb16	r3, r3
 800481c:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
  return(result);
 8004820:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8004824:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8004828:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800482c:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8004830:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8004834:	fa2f f383 	sxtb16	r3, r3
 8004838:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return(result);
 800483c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8004840:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8004844:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8004848:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 800484c:	f8c7 21a0 	str.w	r2, [r7, #416]	@ 0x1a0
 8004850:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8004854:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8004858:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800485c:	fa93 f302 	sadd16	r3, r3, r2
 8004860:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
  return(result);
 8004864:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8004868:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800486c:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8004870:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8004874:	f8c7 21ac 	str.w	r2, [r7, #428]	@ 0x1ac
 8004878:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800487c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004880:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8004884:	fa93 f302 	sadd16	r3, r3, r2
 8004888:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
  return(result);
 800488c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004890:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8004894:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004898:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 800489c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80048a0:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  q31_t val = value;
 80048a4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80048a8:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80048ac:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 80048b0:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 80048b2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80048bc:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80048c0:	6812      	ldr	r2, [r2, #0]
 80048c2:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 80048c4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	1d1a      	adds	r2, r3, #4
 80048cc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80048d0:	601a      	str	r2, [r3, #0]
}
 80048d2:	bf00      	nop
 80048d4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80048d8:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80048dc:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80048e0:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
  q31_t val = value;
 80048e4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80048e8:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80048ec:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80048f0:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 80048f2:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80048fc:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004900:	6812      	ldr	r2, [r2, #0]
 8004902:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8004904:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	1d1a      	adds	r2, r3, #4
 800490c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8004910:	601a      	str	r2, [r3, #0]
}
 8004912:	bf00      	nop
			cnt--;
 8004914:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004918:	3b01      	subs	r3, #1
 800491a:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
		while (cnt > 0) {
 800491e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8004922:	2b00      	cmp	r3, #0
 8004924:	f73f ae86 	bgt.w	8004634 <convolve_1x1_s8_ch24+0xec>
		}

		out = mat_mult_kernel_s8_s16_reordered_ch24(kernel,
 8004928:	f8b7 1274 	ldrh.w	r1, [r7, #628]	@ 0x274
				two_column_buffer, output_ch, output_shift, output_mult,
				(q7_t) out_offset, out_activation_min,
 800492c:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8004930:	b25b      	sxtb	r3, r3
		out = mat_mult_kernel_s8_s16_reordered_ch24(kernel,
 8004932:	4618      	mov	r0, r3
 8004934:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004938:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 800493c:	881b      	ldrh	r3, [r3, #0]
 800493e:	f8d7 2218 	ldr.w	r2, [r7, #536]	@ 0x218
 8004942:	9206      	str	r2, [sp, #24]
 8004944:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 8004948:	9205      	str	r2, [sp, #20]
 800494a:	9304      	str	r3, [sp, #16]
 800494c:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 8004950:	9303      	str	r3, [sp, #12]
 8004952:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 8004956:	9302      	str	r3, [sp, #8]
 8004958:	9001      	str	r0, [sp, #4]
 800495a:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8004964:	460a      	mov	r2, r1
 8004966:	f8d7 11fc 	ldr.w	r1, [r7, #508]	@ 0x1fc
 800496a:	f8d7 0248 	ldr.w	r0, [r7, #584]	@ 0x248
 800496e:	f7fe f834 	bl	80029da <mat_mult_kernel_s8_s16_reordered_ch24>
 8004972:	4603      	mov	r3, r0
 8004974:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8004978:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800497c:	3301      	adds	r3, #1
 800497e:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8004982:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004986:	2b00      	cmp	r3, #0
 8004988:	da00      	bge.n	800498c <convolve_1x1_s8_ch24+0x444>
 800498a:	3301      	adds	r3, #1
 800498c:	105b      	asrs	r3, r3, #1
 800498e:	461a      	mov	r2, r3
 8004990:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004994:	4293      	cmp	r3, r2
 8004996:	f6ff ae2b 	blt.w	80045f0 <convolve_1x1_s8_ch24+0xa8>
				out_activation_max, input_ch * DIM_KER_Y * DIM_KER_X,
				bias, out);
	}

	/* check if there is an odd column left-over for computation */
	if (num_elements & 0x1) {
 800499a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	f000 841d 	beq.w	80051e2 <convolve_1x1_s8_ch24+0xc9a>
		int32_t i_ch_out;
		const q7_t *ker_a = kernel;
 80049a8:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80049ac:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
		q7_t *src = &input[(num_elements - 1) * input_ch];
 80049b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80049b4:	3b01      	subs	r3, #1
 80049b6:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80049ba:	f2a2 2212 	subw	r2, r2, #530	@ 0x212
 80049be:	8812      	ldrh	r2, [r2, #0]
 80049c0:	fb02 f303 	mul.w	r3, r2, r3
 80049c4:	461a      	mov	r2, r3
 80049c6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80049ca:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	441a      	add	r2, r3
 80049d2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80049d6:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80049da:	601a      	str	r2, [r3, #0]
		q15_t *dst = two_column_buffer;
 80049dc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80049e0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80049e4:	f8d7 21fc 	ldr.w	r2, [r7, #508]	@ 0x1fc
 80049e8:	601a      	str	r2, [r3, #0]
		q31_t in_q15x2_1;
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two * numof2col columns
 80049ea:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80049ee:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
		while (cnt > 0) {
 80049f2:	e116      	b.n	8004c22 <convolve_1x1_s8_ch24+0x6da>
 80049f4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80049f8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80049fc:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8004a00:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8004a02:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004a06:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	461a      	mov	r2, r3
 8004a12:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004a16:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004a1a:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8004a1c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004a20:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	1d1a      	adds	r2, r3, #4
 8004a2a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004a2e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	601a      	str	r2, [r3, #0]
    return (val);
 8004a36:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004a3a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004a3e:	681b      	ldr	r3, [r3, #0]
			q7_q15_offset_reordered_ele(src, dst)
 8004a40:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 8004a44:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8004a48:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004a4c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004a50:	601a      	str	r2, [r3, #0]
 8004a52:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004a56:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004a5a:	2208      	movs	r2, #8
 8004a5c:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8004a5e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004a62:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004a66:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8004a6a:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 8004a6e:	6812      	ldr	r2, [r2, #0]
 8004a70:	f002 021f 	and.w	r2, r2, #31
 8004a74:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8004a76:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004a7a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d105      	bne.n	8004a90 <convolve_1x1_s8_ch24+0x548>
    return op1;
 8004a84:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004a88:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	e00b      	b.n	8004aa8 <convolve_1x1_s8_ch24+0x560>
  return (op1 >> op2) | (op1 << (32U - op2));
 8004a90:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004a94:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 8004a98:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004a9c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004aa0:	6812      	ldr	r2, [r2, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	fa62 f303 	ror.w	r3, r2, r3
 8004aa8:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8004aac:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 8004ab0:	6013      	str	r3, [r2, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8004ab2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004ab6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	fa2f f283 	sxtb16	r2, r3
 8004ac0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004ac4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004ac8:	601a      	str	r2, [r3, #0]
  return(result);
 8004aca:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004ace:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8004ad8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8004adc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004ae0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004ae4:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8004ae6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004aea:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	fa2f f283 	sxtb16	r2, r3
 8004af4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004af8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004afc:	601a      	str	r2, [r3, #0]
  return(result);
 8004afe:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004b02:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8004b0c:	f8d7 11d0 	ldr.w	r1, [r7, #464]	@ 0x1d0
 8004b10:	f8d7 21e0 	ldr.w	r2, [r7, #480]	@ 0x1e0
 8004b14:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004b18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b1c:	6019      	str	r1, [r3, #0]
 8004b1e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004b22:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004b26:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8004b28:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004b2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8004b36:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8004b3a:	6812      	ldr	r2, [r2, #0]
 8004b3c:	fa93 f202 	sadd16	r2, r3, r2
 8004b40:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004b44:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004b48:	601a      	str	r2, [r3, #0]
  return(result);
 8004b4a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004b4e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8004b58:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8004b5c:	f8d7 21e0 	ldr.w	r2, [r7, #480]	@ 0x1e0
 8004b60:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8004b64:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004b68:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004b6c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8004b6e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8004b72:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8004b76:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 8004b7a:	6812      	ldr	r2, [r2, #0]
 8004b7c:	fa93 f202 	sadd16	r2, r3, r2
 8004b80:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004b84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004b88:	601a      	str	r2, [r3, #0]
  return(result);
 8004b8a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004b8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8004b98:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8004b9c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8004ba0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8004ba4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  q31_t val = value;
 8004ba8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004bac:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004bb0:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8004bb4:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8004bb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8004bc0:	f5a2 72ee 	sub.w	r2, r2, #476	@ 0x1dc
 8004bc4:	6812      	ldr	r2, [r2, #0]
 8004bc6:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8004bc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	1d1a      	adds	r2, r3, #4
 8004bd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004bd4:	601a      	str	r2, [r3, #0]
}
 8004bd6:	bf00      	nop
 8004bd8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8004bdc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8004be0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8004be4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  q31_t val = value;
 8004be8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004bec:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004bf0:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8004bf4:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8004bf6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8004c00:	f5a2 72f0 	sub.w	r2, r2, #480	@ 0x1e0
 8004c04:	6812      	ldr	r2, [r2, #0]
 8004c06:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8004c08:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	1d1a      	adds	r2, r3, #4
 8004c10:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004c14:	601a      	str	r2, [r3, #0]
}
 8004c16:	bf00      	nop
			cnt--;
 8004c18:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
		while (cnt > 0) {
 8004c22:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	f73f aee4 	bgt.w	80049f4 <convolve_1x1_s8_ch24+0x4ac>
		}

		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 8004c32:	e2cf      	b.n	80051d4 <convolve_1x1_s8_ch24+0xc8c>
			q31_t sum = bias[i_ch_out];
 8004c34:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 8004c3e:	4413      	add	r3, r2
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204

			/* Point to the beginning of the im2col buffer where the input is available as a rearranged column */
			const q15_t *ip_as_col = runtime_buf;
 8004c46:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004c4a:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8004c4e:	f8d7 2278 	ldr.w	r2, [r7, #632]	@ 0x278
 8004c52:	601a      	str	r2, [r3, #0]
			uint16_t col_count = (input_ch * DIM_KER_X * DIM_KER_Y) >> 2;
 8004c54:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004c58:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 8004c5c:	881b      	ldrh	r3, [r3, #0]
 8004c5e:	089b      	lsrs	r3, r3, #2
 8004c60:	f8a7 3202 	strh.w	r3, [r7, #514]	@ 0x202

			while (col_count) {
 8004c64:	e17b      	b.n	8004f5e <convolve_1x1_s8_ch24+0xa16>
 8004c66:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004c6a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004c6e:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004c78:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8004c7c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8004c80:	601a      	str	r2, [r3, #0]
 8004c82:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004c86:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004c8a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8004c8e:	601a      	str	r2, [r3, #0]
 8004c90:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004c94:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004c98:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8004c9c:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8004c9e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004ca2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	461a      	mov	r2, r3
 8004cae:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004cb2:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8004cb6:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8004cb8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004cbc:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	1d1a      	adds	r2, r3, #4
 8004cc6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004cca:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	601a      	str	r2, [r3, #0]
    return (val);
 8004cd2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004cd6:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8004cda:	681a      	ldr	r2, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 8004cdc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004ce0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004ce4:	601a      	str	r2, [r3, #0]
    *out2 = __SXTB16(__ROR((uint32_t)inA, 8));
 8004ce6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004cea:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004cf4:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004cf8:	601a      	str	r2, [r3, #0]
 8004cfa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004cfe:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004d02:	2208      	movs	r2, #8
 8004d04:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8004d06:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004d0a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004d0e:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8004d12:	f5a2 72b6 	sub.w	r2, r2, #364	@ 0x16c
 8004d16:	6812      	ldr	r2, [r2, #0]
 8004d18:	f002 021f 	and.w	r2, r2, #31
 8004d1c:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8004d1e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004d22:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d105      	bne.n	8004d38 <convolve_1x1_s8_ch24+0x7f0>
    return op1;
 8004d2c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004d30:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	e00b      	b.n	8004d50 <convolve_1x1_s8_ch24+0x808>
  return (op1 >> op2) | (op1 << (32U - op2));
 8004d38:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004d3c:	f5a3 72b4 	sub.w	r2, r3, #360	@ 0x168
 8004d40:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004d44:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004d48:	6812      	ldr	r2, [r2, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	fa62 f303 	ror.w	r3, r2, r3
 8004d50:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8004d54:	f5a2 72b8 	sub.w	r2, r2, #368	@ 0x170
 8004d58:	6013      	str	r3, [r2, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8004d5a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004d5e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	fa2f f283 	sxtb16	r2, r3
 8004d68:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004d6c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8004d70:	601a      	str	r2, [r3, #0]
  return(result);
 8004d72:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004d76:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004d82:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	601a      	str	r2, [r3, #0]
    *out1 = __SXTB16(inA);
 8004d8a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004d8e:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004d98:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8004d9c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8004d9e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004da2:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	fa2f f283 	sxtb16	r2, r3
 8004dac:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004db0:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8004db4:	601a      	str	r2, [r3, #0]
  return(result);
 8004db6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004dba:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004dc6:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	601a      	str	r2, [r3, #0]
    return source;
 8004dce:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004dd2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004dd6:	681b      	ldr	r3, [r3, #0]
				q31_t ker_a1, ker_a2;
				q31_t in_b1, in_b2;
				ker_a = read_and_pad_reordered(ker_a, &ker_a1, &ker_a2);
 8004dd8:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8004ddc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004de0:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004de4:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8004de8:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 8004dea:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004dee:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	461a      	mov	r2, r3
 8004dfa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004dfe:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004e02:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8004e04:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004e08:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	1d1a      	adds	r2, r3, #4
 8004e12:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004e16:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	601a      	str	r2, [r3, #0]
    return (val);
 8004e1e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004e22:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004e26:	681b      	ldr	r3, [r3, #0]

				in_b1 = arm_nn_read_q15x2_ia(&ip_as_col);
 8004e28:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
				sum = __SMLAD(ker_a1, in_b1, sum);
 8004e2c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004e30:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4618      	mov	r0, r3
 8004e38:	f8d7 11dc 	ldr.w	r1, [r7, #476]	@ 0x1dc
 8004e3c:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 8004e40:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004e44:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004e48:	6018      	str	r0, [r3, #0]
 8004e4a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004e4e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004e52:	6019      	str	r1, [r3, #0]
 8004e54:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004e58:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004e5c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8004e5e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004e62:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8004e6c:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 8004e70:	6812      	ldr	r2, [r2, #0]
 8004e72:	f507 7108 	add.w	r1, r7, #544	@ 0x220
 8004e76:	f5a1 71a6 	sub.w	r1, r1, #332	@ 0x14c
 8004e7a:	6809      	ldr	r1, [r1, #0]
 8004e7c:	fb23 1202 	smlad	r2, r3, r2, r1
 8004e80:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004e84:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004e88:	601a      	str	r2, [r3, #0]
  return(result);
 8004e8a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004e8e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 8004e98:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004e9c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004ea0:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8004ea4:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 8004ea6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004eaa:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004eba:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8004ebe:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8004ec0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004ec4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	1d1a      	adds	r2, r3, #4
 8004ece:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004ed2:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	601a      	str	r2, [r3, #0]
    return (val);
 8004eda:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004ede:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8004ee2:	681b      	ldr	r3, [r3, #0]
				in_b2 = arm_nn_read_q15x2_ia(&ip_as_col);
 8004ee4:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
				sum = __SMLAD(ker_a2, in_b2, sum);
 8004ee8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004eec:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f8d7 11d8 	ldr.w	r1, [r7, #472]	@ 0x1d8
 8004ef8:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 8004efc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004f00:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004f04:	6018      	str	r0, [r3, #0]
 8004f06:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004f0a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004f0e:	6019      	str	r1, [r3, #0]
 8004f10:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004f14:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004f18:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8004f1a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004f1e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8004f28:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8004f2c:	6812      	ldr	r2, [r2, #0]
 8004f2e:	f507 7108 	add.w	r1, r7, #544	@ 0x220
 8004f32:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8004f36:	6809      	ldr	r1, [r1, #0]
 8004f38:	fb23 1202 	smlad	r2, r3, r2, r1
 8004f3c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004f40:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004f44:	601a      	str	r2, [r3, #0]
  return(result);
 8004f46:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004f4a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204

				col_count--;
 8004f54:	f8b7 3202 	ldrh.w	r3, [r7, #514]	@ 0x202
 8004f58:	3b01      	subs	r3, #1
 8004f5a:	f8a7 3202 	strh.w	r3, [r7, #514]	@ 0x202
			while (col_count) {
 8004f5e:	f8b7 3202 	ldrh.w	r3, [r7, #514]	@ 0x202
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	f47f ae7f 	bne.w	8004c66 <convolve_1x1_s8_ch24+0x71e>
			}

			sum = arm_nn_requantize(sum, output_mult[i_ch_out],
 8004f68:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 8004f72:	4413      	add	r3, r2
 8004f74:	6819      	ldr	r1, [r3, #0]
					output_shift[i_ch_out]);
 8004f76:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 8004f80:	4413      	add	r3, r2
			sum = arm_nn_requantize(sum, output_mult[i_ch_out],
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004f88:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004f8c:	f8d7 0204 	ldr.w	r0, [r7, #516]	@ 0x204
 8004f90:	6018      	str	r0, [r3, #0]
 8004f92:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004f96:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004f9a:	6019      	str	r1, [r3, #0]
 8004f9c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004fa0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004fa4:	601a      	str	r2, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8004fa6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004faa:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004fb4:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8004fb8:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8004fbc:	6812      	ldr	r2, [r2, #0]
 8004fbe:	409a      	lsls	r2, r3
 8004fc0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004fc4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004fc8:	601a      	str	r2, [r3, #0]
 8004fca:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004fce:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004fd2:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8004fd6:	f5a2 72c2 	sub.w	r2, r2, #388	@ 0x184
 8004fda:	6812      	ldr	r2, [r2, #0]
 8004fdc:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8004fde:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004fe2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 8004fea:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004fee:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8004ff2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004ff6:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 8004ff8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004ffc:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8005000:	2200      	movs	r2, #0
 8005002:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8005004:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8005008:	f507 7108 	add.w	r1, r7, #544	@ 0x220
 800500c:	f5a1 71c6 	sub.w	r1, r1, #396	@ 0x18c
 8005010:	6809      	ldr	r1, [r1, #0]
 8005012:	17c8      	asrs	r0, r1, #31
 8005014:	4688      	mov	r8, r1
 8005016:	4681      	mov	r9, r0
 8005018:	f507 7108 	add.w	r1, r7, #544	@ 0x220
 800501c:	f5a1 71c8 	sub.w	r1, r1, #400	@ 0x190
 8005020:	6809      	ldr	r1, [r1, #0]
 8005022:	17c8      	asrs	r0, r1, #31
 8005024:	468a      	mov	sl, r1
 8005026:	4683      	mov	fp, r0
 8005028:	fb0a f009 	mul.w	r0, sl, r9
 800502c:	fb08 f10b 	mul.w	r1, r8, fp
 8005030:	4401      	add	r1, r0
 8005032:	fba8 450a 	umull	r4, r5, r8, sl
 8005036:	4429      	add	r1, r5
 8005038:	460d      	mov	r5, r1
 800503a:	1911      	adds	r1, r2, r4
 800503c:	6039      	str	r1, [r7, #0]
 800503e:	416b      	adcs	r3, r5
 8005040:	607b      	str	r3, [r7, #4]
 8005042:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005046:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    result = (int32_t)(mult.long_long >> 31);
 800504a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800504e:	f04f 0200 	mov.w	r2, #0
 8005052:	f04f 0300 	mov.w	r3, #0
 8005056:	0fc2      	lsrs	r2, r0, #31
 8005058:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800505c:	17cb      	asrs	r3, r1, #31
 800505e:	f507 7108 	add.w	r1, r7, #544	@ 0x220
 8005062:	f5a1 71ca 	sub.w	r1, r1, #404	@ 0x194
 8005066:	4613      	mov	r3, r2
 8005068:	600b      	str	r3, [r1, #0]
    return result;
 800506a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800506e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8005072:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8005074:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005078:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	dc06      	bgt.n	8005090 <convolve_1x1_s8_ch24+0xb48>
 8005082:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005086:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	425b      	negs	r3, r3
 800508e:	e000      	b.n	8005092 <convolve_1x1_s8_ch24+0xb4a>
 8005090:	2300      	movs	r3, #0
 8005092:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8005096:	f5a2 72cc 	sub.w	r2, r2, #408	@ 0x198
 800509a:	6011      	str	r1, [r2, #0]
 800509c:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80050a0:	f5a2 72ce 	sub.w	r2, r2, #412	@ 0x19c
 80050a4:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80050a6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80050aa:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80050ae:	2200      	movs	r2, #0
 80050b0:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 80050b2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80050b6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80050ba:	2201      	movs	r2, #1
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	409a      	lsls	r2, r3
 80050c0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80050c4:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 80050c8:	3a01      	subs	r2, #1
 80050ca:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 80050cc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80050d0:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80050d4:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80050d8:	f5a2 71cc 	sub.w	r1, r2, #408	@ 0x198
 80050dc:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80050e0:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80050e4:	6809      	ldr	r1, [r1, #0]
 80050e6:	6812      	ldr	r2, [r2, #0]
 80050e8:	400a      	ands	r2, r1
 80050ea:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 80050ec:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80050f0:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80050f4:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80050f8:	f5a2 71cc 	sub.w	r1, r2, #408	@ 0x198
 80050fc:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8005100:	f5a2 72ce 	sub.w	r2, r2, #412	@ 0x19c
 8005104:	6809      	ldr	r1, [r1, #0]
 8005106:	6812      	ldr	r2, [r2, #0]
 8005108:	fa41 f202 	asr.w	r2, r1, r2
 800510c:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 800510e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005112:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8005116:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 800511a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800511e:	6812      	ldr	r2, [r2, #0]
 8005120:	1052      	asrs	r2, r2, #1
 8005122:	601a      	str	r2, [r3, #0]
    if (result < 0)
 8005124:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005128:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	2b00      	cmp	r3, #0
 8005130:	da0a      	bge.n	8005148 <convolve_1x1_s8_ch24+0xc00>
        threshold++;
 8005132:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005136:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800513a:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 800513e:	f5a2 72d6 	sub.w	r2, r2, #428	@ 0x1ac
 8005142:	6812      	ldr	r2, [r2, #0]
 8005144:	3201      	adds	r2, #1
 8005146:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 8005148:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800514c:	f5a3 72d4 	sub.w	r2, r3, #424	@ 0x1a8
 8005150:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005154:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8005158:	6812      	ldr	r2, [r2, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	429a      	cmp	r2, r3
 800515e:	dd0a      	ble.n	8005176 <convolve_1x1_s8_ch24+0xc2e>
        result++;
 8005160:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005164:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8005168:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 800516c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8005170:	6812      	ldr	r2, [r2, #0]
 8005172:	3201      	adds	r2, #1
 8005174:	601a      	str	r2, [r3, #0]
    return result;
 8005176:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800517a:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 800517e:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8005180:	bf00      	nop
 8005182:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
			sum += out_offset;
 8005186:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 800518a:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 800518e:	4413      	add	r3, r2
 8005190:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
			sum = MAX(sum, out_activation_min);
 8005194:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 8005198:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 800519c:	4293      	cmp	r3, r2
 800519e:	bfb8      	it	lt
 80051a0:	4613      	movlt	r3, r2
 80051a2:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
			sum = MIN(sum, out_activation_max);
 80051a6:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 80051aa:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 80051ae:	4293      	cmp	r3, r2
 80051b0:	bfa8      	it	ge
 80051b2:	4613      	movge	r3, r2
 80051b4:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
			*out++ = (q7_t) sum;
 80051b8:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 80051bc:	1c5a      	adds	r2, r3, #1
 80051be:	f8c7 2218 	str.w	r2, [r7, #536]	@ 0x218
 80051c2:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 80051c6:	b252      	sxtb	r2, r2
 80051c8:	701a      	strb	r2, [r3, #0]
		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 80051ca:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80051ce:	3301      	adds	r3, #1
 80051d0:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 80051d4:	f8b7 3274 	ldrh.w	r3, [r7, #628]	@ 0x274
 80051d8:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 80051dc:	429a      	cmp	r2, r3
 80051de:	f6ff ad29 	blt.w	8004c34 <convolve_1x1_s8_ch24+0x6ec>
		}
	}

	/* Return to application */
	return STATE_SUCCESS;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	f507 7709 	add.w	r7, r7, #548	@ 0x224
 80051ea:	46bd      	mov	sp, r7
 80051ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080051f0 <convolve_1x1_s8_ch48>:
		const uint16_t input_y, const uint16_t input_ch, const q7_t *kernel,
		const int32_t *bias, const int32_t *output_shift,
		const int32_t *output_mult, const int32_t out_offset,
		const int32_t input_offset, const int32_t out_activation_min,
		const int32_t out_activation_max, q7_t *output, const uint16_t output_x,
		const uint16_t output_y, const uint16_t output_ch, q15_t *runtime_buf) {
 80051f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051f4:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
 80051f8:	af08      	add	r7, sp, #32
 80051fa:	f507 7608 	add.w	r6, r7, #544	@ 0x220
 80051fe:	f5a6 7603 	sub.w	r6, r6, #524	@ 0x20c
 8005202:	6030      	str	r0, [r6, #0]
 8005204:	460e      	mov	r6, r1
 8005206:	4610      	mov	r0, r2
 8005208:	4619      	mov	r1, r3
 800520a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800520e:	f2a3 230e 	subw	r3, r3, #526	@ 0x20e
 8005212:	4632      	mov	r2, r6
 8005214:	801a      	strh	r2, [r3, #0]
 8005216:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800521a:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800521e:	4602      	mov	r2, r0
 8005220:	801a      	strh	r2, [r3, #0]
 8005222:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005226:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 800522a:	460a      	mov	r2, r1
 800522c:	801a      	strh	r2, [r3, #0]
	int32_t i_element;
	(void) input_x;
	(void) input_y;

	/* Partial(two columns) im2col buffer */
	q15_t *two_column_buffer = runtime_buf;
 800522e:	f8d7 3278 	ldr.w	r3, [r7, #632]	@ 0x278
 8005232:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
	q7_t *out = output;
 8005236:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 800523a:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
	const int32_t num_elements = output_x * output_y;
 800523e:	f8b7 326c 	ldrh.w	r3, [r7, #620]	@ 0x26c
 8005242:	f8b7 2270 	ldrh.w	r2, [r7, #624]	@ 0x270
 8005246:	fb02 f303 	mul.w	r3, r2, r3
 800524a:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
	const int channel_div4 = (input_ch >> 2);
 800524e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005252:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 8005256:	881b      	ldrh	r3, [r3, #0]
 8005258:	089b      	lsrs	r3, r3, #2
 800525a:	b29b      	uxth	r3, r3
 800525c:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4

	const int16_t inoff16 = input_offset;
 8005260:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8005264:	f8a7 31f2 	strh.w	r3, [r7, #498]	@ 0x1f2
	q31_t offset_q15x2 = __PKHBT(inoff16, inoff16, 16);
 8005268:	f9b7 31f2 	ldrsh.w	r3, [r7, #498]	@ 0x1f2
 800526c:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 8005270:	f9b7 31f2 	ldrsh.w	r3, [r7, #498]	@ 0x1f2
 8005274:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8005278:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 800527c:	f8d7 21e8 	ldr.w	r2, [r7, #488]	@ 0x1e8
 8005280:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 8005284:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8005288:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 800528c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0

	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8005290:	2300      	movs	r3, #0
 8005292:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8005296:	e1c8      	b.n	800562a <convolve_1x1_s8_ch48+0x43a>
		/* Fill buffer for partial im2col - two columns at a time */
		q7_t *src = &input[i_element * input_ch * 2];
 8005298:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800529c:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 80052a0:	881b      	ldrh	r3, [r3, #0]
 80052a2:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 80052a6:	fb02 f303 	mul.w	r3, r2, r3
 80052aa:	005b      	lsls	r3, r3, #1
 80052ac:	461a      	mov	r2, r3
 80052ae:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80052b2:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	441a      	add	r2, r3
 80052ba:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80052be:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80052c2:	601a      	str	r2, [r3, #0]
		q15_t *dst = two_column_buffer;
 80052c4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80052c8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80052cc:	f8d7 21fc 	ldr.w	r2, [r7, #508]	@ 0x1fc
 80052d0:	601a      	str	r2, [r3, #0]
		q31_t in_q15x2_1;
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two columns
 80052d2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80052d6:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
		while (cnt > 0) {
 80052da:	e174      	b.n	80055c6 <convolve_1x1_s8_ch48+0x3d6>
 80052dc:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80052e0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    memcpy(&val, *in_q7, 4);
 80052e4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	461a      	mov	r2, r3
 80052ee:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80052f2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80052f6:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80052f8:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	1d1a      	adds	r2, r3, #4
 8005300:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005304:	601a      	str	r2, [r3, #0]
    return (val);
 8005306:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800530a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800530e:	681b      	ldr	r3, [r3, #0]
			q7_q15_offset_reordered_ele(src, dst)
 8005310:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8005314:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8005318:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 800531c:	2308      	movs	r3, #8
 800531e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
  op2 %= 32U;
 8005322:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8005326:	f003 031f 	and.w	r3, r3, #31
 800532a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
  if (op2 == 0U)
 800532e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8005332:	2b00      	cmp	r3, #0
 8005334:	d102      	bne.n	800533c <convolve_1x1_s8_ch48+0x14c>
    return op1;
 8005336:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800533a:	e005      	b.n	8005348 <convolve_1x1_s8_ch48+0x158>
  return (op1 >> op2) | (op1 << (32U - op2));
 800533c:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8005340:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8005344:	fa62 f303 	ror.w	r3, r2, r3
 8005348:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800534c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8005350:	fa2f f383 	sxtb16	r3, r3
 8005354:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
  return(result);
 8005358:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800535c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8005360:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8005364:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8005368:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800536c:	fa2f f383 	sxtb16	r3, r3
 8005370:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
  return(result);
 8005374:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005378:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800537c:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8005380:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8005384:	f8c7 215c 	str.w	r2, [r7, #348]	@ 0x15c
 8005388:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800538c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8005390:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8005394:	fa93 f302 	sadd16	r3, r3, r2
 8005398:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
  return(result);
 800539c:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80053a0:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80053a4:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 80053a8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80053ac:	f8c7 2168 	str.w	r2, [r7, #360]	@ 0x168
 80053b0:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80053b4:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80053b8:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 80053bc:	fa93 f302 	sadd16	r3, r3, r2
 80053c0:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return(result);
 80053c4:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80053c8:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80053cc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80053d0:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 80053d4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80053d8:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
  q31_t val = value;
 80053dc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80053e0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80053e4:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 80053e8:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 80053ea:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80053f4:	f5a2 72de 	sub.w	r2, r2, #444	@ 0x1bc
 80053f8:	6812      	ldr	r2, [r2, #0]
 80053fa:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 80053fc:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	1d1a      	adds	r2, r3, #4
 8005404:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8005408:	601a      	str	r2, [r3, #0]
}
 800540a:	bf00      	nop
 800540c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8005410:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8005414:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8005418:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
  q31_t val = value;
 800541c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005420:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8005424:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8005428:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 800542a:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8005434:	f5a2 72e0 	sub.w	r2, r2, #448	@ 0x1c0
 8005438:	6812      	ldr	r2, [r2, #0]
 800543a:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 800543c:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	1d1a      	adds	r2, r3, #4
 8005444:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8005448:	601a      	str	r2, [r3, #0]
}
 800544a:	bf00      	nop
 800544c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8005450:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
    memcpy(&val, *in_q7, 4);
 8005454:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	461a      	mov	r2, r3
 800545e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005462:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8005466:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8005468:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	1d1a      	adds	r2, r3, #4
 8005470:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8005474:	601a      	str	r2, [r3, #0]
    return (val);
 8005476:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800547a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800547e:	681b      	ldr	r3, [r3, #0]
			q7_q15_offset_reordered_ele(src, dst)
 8005480:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8005484:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8005488:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800548c:	2308      	movs	r3, #8
 800548e:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
  op2 %= 32U;
 8005492:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005496:	f003 031f 	and.w	r3, r3, #31
 800549a:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
  if (op2 == 0U)
 800549e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d102      	bne.n	80054ac <convolve_1x1_s8_ch48+0x2bc>
    return op1;
 80054a6:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80054aa:	e005      	b.n	80054b8 <convolve_1x1_s8_ch48+0x2c8>
  return (op1 >> op2) | (op1 << (32U - op2));
 80054ac:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 80054b0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80054b4:	fa62 f303 	ror.w	r3, r2, r3
 80054b8:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80054bc:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80054c0:	fa2f f383 	sxtb16	r3, r3
 80054c4:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
  return(result);
 80054c8:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80054cc:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80054d0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80054d4:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80054d8:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80054dc:	fa2f f383 	sxtb16	r3, r3
 80054e0:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return(result);
 80054e4:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80054e8:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80054ec:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 80054f0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80054f4:	f8c7 21a0 	str.w	r2, [r7, #416]	@ 0x1a0
 80054f8:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80054fc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8005500:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8005504:	fa93 f302 	sadd16	r3, r3, r2
 8005508:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
  return(result);
 800550c:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8005510:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8005514:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8005518:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 800551c:	f8c7 21ac 	str.w	r2, [r7, #428]	@ 0x1ac
 8005520:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8005524:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005528:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 800552c:	fa93 f302 	sadd16	r3, r3, r2
 8005530:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
  return(result);
 8005534:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8005538:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800553c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8005540:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8005544:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8005548:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  q31_t val = value;
 800554c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005550:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8005554:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8005558:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 800555a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8005564:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8005568:	6812      	ldr	r2, [r2, #0]
 800556a:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 800556c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	1d1a      	adds	r2, r3, #4
 8005574:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8005578:	601a      	str	r2, [r3, #0]
}
 800557a:	bf00      	nop
 800557c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8005580:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8005584:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8005588:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
  q31_t val = value;
 800558c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005590:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8005594:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8005598:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 800559a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80055a4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80055a8:	6812      	ldr	r2, [r2, #0]
 80055aa:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 80055ac:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	1d1a      	adds	r2, r3, #4
 80055b4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80055b8:	601a      	str	r2, [r3, #0]
}
 80055ba:	bf00      	nop
			cnt--;
 80055bc:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80055c0:	3b01      	subs	r3, #1
 80055c2:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
		while (cnt > 0) {
 80055c6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	f73f ae86 	bgt.w	80052dc <convolve_1x1_s8_ch48+0xec>
		}

		out = mat_mult_kernel_s8_s16_reordered_ch48(kernel,
 80055d0:	f8b7 1274 	ldrh.w	r1, [r7, #628]	@ 0x274
				two_column_buffer, output_ch, output_shift, output_mult,
				(q7_t) out_offset, out_activation_min,
 80055d4:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 80055d8:	b25b      	sxtb	r3, r3
		out = mat_mult_kernel_s8_s16_reordered_ch48(kernel,
 80055da:	4618      	mov	r0, r3
 80055dc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80055e0:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 80055e4:	881b      	ldrh	r3, [r3, #0]
 80055e6:	f8d7 2218 	ldr.w	r2, [r7, #536]	@ 0x218
 80055ea:	9206      	str	r2, [sp, #24]
 80055ec:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 80055f0:	9205      	str	r2, [sp, #20]
 80055f2:	9304      	str	r3, [sp, #16]
 80055f4:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 80055f8:	9303      	str	r3, [sp, #12]
 80055fa:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 80055fe:	9302      	str	r3, [sp, #8]
 8005600:	9001      	str	r0, [sp, #4]
 8005602:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8005606:	9300      	str	r3, [sp, #0]
 8005608:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 800560c:	460a      	mov	r2, r1
 800560e:	f8d7 11fc 	ldr.w	r1, [r7, #508]	@ 0x1fc
 8005612:	f8d7 0248 	ldr.w	r0, [r7, #584]	@ 0x248
 8005616:	f7fd fa03 	bl	8002a20 <mat_mult_kernel_s8_s16_reordered_ch48>
 800561a:	4603      	mov	r3, r0
 800561c:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
	for (i_element = 0; i_element < num_elements / 2; i_element++) {
 8005620:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8005624:	3301      	adds	r3, #1
 8005626:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 800562a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800562e:	2b00      	cmp	r3, #0
 8005630:	da00      	bge.n	8005634 <convolve_1x1_s8_ch48+0x444>
 8005632:	3301      	adds	r3, #1
 8005634:	105b      	asrs	r3, r3, #1
 8005636:	461a      	mov	r2, r3
 8005638:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800563c:	4293      	cmp	r3, r2
 800563e:	f6ff ae2b 	blt.w	8005298 <convolve_1x1_s8_ch48+0xa8>
				out_activation_max, input_ch * DIM_KER_Y * DIM_KER_X,
				bias, out);
	}

	/* check if there is an odd column left-over for computation */
	if (num_elements & 0x1) {
 8005642:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005646:	f003 0301 	and.w	r3, r3, #1
 800564a:	2b00      	cmp	r3, #0
 800564c:	f000 841d 	beq.w	8005e8a <convolve_1x1_s8_ch48+0xc9a>
		int32_t i_ch_out;
		const q7_t *ker_a = kernel;
 8005650:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8005654:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
		q7_t *src = &input[(num_elements - 1) * input_ch];
 8005658:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800565c:	3b01      	subs	r3, #1
 800565e:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8005662:	f2a2 2212 	subw	r2, r2, #530	@ 0x212
 8005666:	8812      	ldrh	r2, [r2, #0]
 8005668:	fb02 f303 	mul.w	r3, r2, r3
 800566c:	461a      	mov	r2, r3
 800566e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005672:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	441a      	add	r2, r3
 800567a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800567e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005682:	601a      	str	r2, [r3, #0]
		q15_t *dst = two_column_buffer;
 8005684:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005688:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800568c:	f8d7 21fc 	ldr.w	r2, [r7, #508]	@ 0x1fc
 8005690:	601a      	str	r2, [r3, #0]
		q31_t in_q15x2_1;
		q31_t in_q15x2_2;
		q31_t out_q15x2_1;
		q31_t out_q15x2_2;

		int cnt = channel_div4;	//two * numof2col columns
 8005692:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8005696:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
		while (cnt > 0) {
 800569a:	e116      	b.n	80058ca <convolve_1x1_s8_ch48+0x6da>
 800569c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80056a0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80056a4:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80056a8:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 80056aa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80056ae:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	461a      	mov	r2, r3
 80056ba:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80056be:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80056c2:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 80056c4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80056c8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	1d1a      	adds	r2, r3, #4
 80056d2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80056d6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	601a      	str	r2, [r3, #0]
    return (val);
 80056de:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80056e2:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80056e6:	681b      	ldr	r3, [r3, #0]
			q7_q15_offset_reordered_ele(src, dst)
 80056e8:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 80056ec:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80056f0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80056f4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80056f8:	601a      	str	r2, [r3, #0]
 80056fa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80056fe:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005702:	2208      	movs	r2, #8
 8005704:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8005706:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800570a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800570e:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8005712:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 8005716:	6812      	ldr	r2, [r2, #0]
 8005718:	f002 021f 	and.w	r2, r2, #31
 800571c:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800571e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005722:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d105      	bne.n	8005738 <convolve_1x1_s8_ch48+0x548>
    return op1;
 800572c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005730:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	e00b      	b.n	8005750 <convolve_1x1_s8_ch48+0x560>
  return (op1 >> op2) | (op1 << (32U - op2));
 8005738:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800573c:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 8005740:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005744:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005748:	6812      	ldr	r2, [r2, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	fa62 f303 	ror.w	r3, r2, r3
 8005750:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8005754:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 8005758:	6013      	str	r3, [r2, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800575a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800575e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	fa2f f283 	sxtb16	r2, r3
 8005768:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800576c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8005770:	601a      	str	r2, [r3, #0]
  return(result);
 8005772:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005776:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8005780:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8005784:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005788:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800578c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800578e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005792:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	fa2f f283 	sxtb16	r2, r3
 800579c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80057a0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80057a4:	601a      	str	r2, [r3, #0]
  return(result);
 80057a6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80057aa:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 80057b4:	f8d7 11d0 	ldr.w	r1, [r7, #464]	@ 0x1d0
 80057b8:	f8d7 21e0 	ldr.w	r2, [r7, #480]	@ 0x1e0
 80057bc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80057c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057c4:	6019      	str	r1, [r3, #0]
 80057c6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80057ca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80057ce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80057d0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80057d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80057de:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80057e2:	6812      	ldr	r2, [r2, #0]
 80057e4:	fa93 f202 	sadd16	r2, r3, r2
 80057e8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80057ec:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80057f0:	601a      	str	r2, [r3, #0]
  return(result);
 80057f2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80057f6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8005800:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005804:	f8d7 21e0 	ldr.w	r2, [r7, #480]	@ 0x1e0
 8005808:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800580c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005810:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8005814:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8005816:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800581a:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 800581e:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 8005822:	6812      	ldr	r2, [r2, #0]
 8005824:	fa93 f202 	sadd16	r2, r3, r2
 8005828:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800582c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005830:	601a      	str	r2, [r3, #0]
  return(result);
 8005832:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005836:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8005840:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8005844:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8005848:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800584c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  q31_t val = value;
 8005850:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005854:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8005858:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800585c:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 800585e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8005868:	f5a2 72ee 	sub.w	r2, r2, #476	@ 0x1dc
 800586c:	6812      	ldr	r2, [r2, #0]
 800586e:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8005870:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	1d1a      	adds	r2, r3, #4
 8005878:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800587c:	601a      	str	r2, [r3, #0]
}
 800587e:	bf00      	nop
 8005880:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8005884:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8005888:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800588c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  q31_t val = value;
 8005890:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005894:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8005898:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800589c:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 800589e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80058a8:	f5a2 72f0 	sub.w	r2, r2, #480	@ 0x1e0
 80058ac:	6812      	ldr	r2, [r2, #0]
 80058ae:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 80058b0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	1d1a      	adds	r2, r3, #4
 80058b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80058bc:	601a      	str	r2, [r3, #0]
}
 80058be:	bf00      	nop
			cnt--;
 80058c0:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80058c4:	3b01      	subs	r3, #1
 80058c6:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
		while (cnt > 0) {
 80058ca:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	f73f aee4 	bgt.w	800569c <convolve_1x1_s8_ch48+0x4ac>
		}

		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 80058d4:	2300      	movs	r3, #0
 80058d6:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 80058da:	e2cf      	b.n	8005e7c <convolve_1x1_s8_ch48+0xc8c>
			q31_t sum = bias[i_ch_out];
 80058dc:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 80058e6:	4413      	add	r3, r2
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204

			/* Point to the beginning of the im2col buffer where the input is available as a rearranged column */
			const q15_t *ip_as_col = runtime_buf;
 80058ee:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80058f2:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80058f6:	f8d7 2278 	ldr.w	r2, [r7, #632]	@ 0x278
 80058fa:	601a      	str	r2, [r3, #0]
			uint16_t col_count = (input_ch * DIM_KER_X * DIM_KER_Y) >> 2;
 80058fc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005900:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 8005904:	881b      	ldrh	r3, [r3, #0]
 8005906:	089b      	lsrs	r3, r3, #2
 8005908:	f8a7 3202 	strh.w	r3, [r7, #514]	@ 0x202

			while (col_count) {
 800590c:	e17b      	b.n	8005c06 <convolve_1x1_s8_ch48+0xa16>
 800590e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005912:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005916:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 800591a:	601a      	str	r2, [r3, #0]
 800591c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005920:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8005924:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8005928:	601a      	str	r2, [r3, #0]
 800592a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800592e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8005932:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8005936:	601a      	str	r2, [r3, #0]
 8005938:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800593c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8005940:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8005944:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8005946:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800594a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	461a      	mov	r2, r3
 8005956:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800595a:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800595e:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8005960:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005964:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	1d1a      	adds	r2, r3, #4
 800596e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005972:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	601a      	str	r2, [r3, #0]
    return (val);
 800597a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800597e:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8005982:	681a      	ldr	r2, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 8005984:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005988:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800598c:	601a      	str	r2, [r3, #0]
    *out2 = __SXTB16(__ROR((uint32_t)inA, 8));
 800598e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005992:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800599c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80059a0:	601a      	str	r2, [r3, #0]
 80059a2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80059a6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80059aa:	2208      	movs	r2, #8
 80059ac:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 80059ae:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80059b2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80059b6:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80059ba:	f5a2 72b6 	sub.w	r2, r2, #364	@ 0x16c
 80059be:	6812      	ldr	r2, [r2, #0]
 80059c0:	f002 021f 	and.w	r2, r2, #31
 80059c4:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 80059c6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80059ca:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d105      	bne.n	80059e0 <convolve_1x1_s8_ch48+0x7f0>
    return op1;
 80059d4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80059d8:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	e00b      	b.n	80059f8 <convolve_1x1_s8_ch48+0x808>
  return (op1 >> op2) | (op1 << (32U - op2));
 80059e0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80059e4:	f5a3 72b4 	sub.w	r2, r3, #360	@ 0x168
 80059e8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80059ec:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80059f0:	6812      	ldr	r2, [r2, #0]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	fa62 f303 	ror.w	r3, r2, r3
 80059f8:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80059fc:	f5a2 72b8 	sub.w	r2, r2, #368	@ 0x170
 8005a00:	6013      	str	r3, [r2, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8005a02:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005a06:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	fa2f f283 	sxtb16	r2, r3
 8005a10:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005a14:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8005a18:	601a      	str	r2, [r3, #0]
  return(result);
 8005a1a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005a1e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	461a      	mov	r2, r3
 8005a26:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005a2a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	601a      	str	r2, [r3, #0]
    *out1 = __SXTB16(inA);
 8005a32:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005a36:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005a40:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8005a44:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8005a46:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005a4a:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	fa2f f283 	sxtb16	r2, r3
 8005a54:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005a58:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8005a5c:	601a      	str	r2, [r3, #0]
  return(result);
 8005a5e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005a62:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	461a      	mov	r2, r3
 8005a6a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005a6e:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	601a      	str	r2, [r3, #0]
    return source;
 8005a76:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005a7a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005a7e:	681b      	ldr	r3, [r3, #0]
				q31_t ker_a1, ker_a2;
				q31_t in_b1, in_b2;
				ker_a = read_and_pad_reordered(ker_a, &ker_a1, &ker_a2);
 8005a80:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8005a84:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005a88:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8005a8c:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8005a90:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 8005a92:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005a96:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005aa6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005aaa:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8005aac:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005ab0:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	1d1a      	adds	r2, r3, #4
 8005aba:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005abe:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	601a      	str	r2, [r3, #0]
    return (val);
 8005ac6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005aca:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005ace:	681b      	ldr	r3, [r3, #0]

				in_b1 = arm_nn_read_q15x2_ia(&ip_as_col);
 8005ad0:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
				sum = __SMLAD(ker_a1, in_b1, sum);
 8005ad4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005ad8:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f8d7 11dc 	ldr.w	r1, [r7, #476]	@ 0x1dc
 8005ae4:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 8005ae8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005aec:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8005af0:	6018      	str	r0, [r3, #0]
 8005af2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005af6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005afa:	6019      	str	r1, [r3, #0]
 8005afc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005b00:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8005b04:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8005b06:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005b0a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8005b14:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 8005b18:	6812      	ldr	r2, [r2, #0]
 8005b1a:	f507 7108 	add.w	r1, r7, #544	@ 0x220
 8005b1e:	f5a1 71a6 	sub.w	r1, r1, #332	@ 0x14c
 8005b22:	6809      	ldr	r1, [r1, #0]
 8005b24:	fb23 1202 	smlad	r2, r3, r2, r1
 8005b28:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005b2c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8005b30:	601a      	str	r2, [r3, #0]
  return(result);
 8005b32:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005b36:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 8005b40:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005b44:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005b48:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8005b4c:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 8005b4e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005b52:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005b62:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8005b66:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8005b68:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005b6c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	1d1a      	adds	r2, r3, #4
 8005b76:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005b7a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	601a      	str	r2, [r3, #0]
    return (val);
 8005b82:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005b86:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8005b8a:	681b      	ldr	r3, [r3, #0]
				in_b2 = arm_nn_read_q15x2_ia(&ip_as_col);
 8005b8c:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
				sum = __SMLAD(ker_a2, in_b2, sum);
 8005b90:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005b94:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f8d7 11d8 	ldr.w	r1, [r7, #472]	@ 0x1d8
 8005ba0:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 8005ba4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005ba8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005bac:	6018      	str	r0, [r3, #0]
 8005bae:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005bb2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8005bb6:	6019      	str	r1, [r3, #0]
 8005bb8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005bbc:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005bc0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8005bc2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005bc6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8005bd0:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8005bd4:	6812      	ldr	r2, [r2, #0]
 8005bd6:	f507 7108 	add.w	r1, r7, #544	@ 0x220
 8005bda:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8005bde:	6809      	ldr	r1, [r1, #0]
 8005be0:	fb23 1202 	smlad	r2, r3, r2, r1
 8005be4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005be8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8005bec:	601a      	str	r2, [r3, #0]
  return(result);
 8005bee:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005bf2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204

				col_count--;
 8005bfc:	f8b7 3202 	ldrh.w	r3, [r7, #514]	@ 0x202
 8005c00:	3b01      	subs	r3, #1
 8005c02:	f8a7 3202 	strh.w	r3, [r7, #514]	@ 0x202
			while (col_count) {
 8005c06:	f8b7 3202 	ldrh.w	r3, [r7, #514]	@ 0x202
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	f47f ae7f 	bne.w	800590e <convolve_1x1_s8_ch48+0x71e>
			}

			sum = arm_nn_requantize(sum, output_mult[i_ch_out],
 8005c10:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 8005c1a:	4413      	add	r3, r2
 8005c1c:	6819      	ldr	r1, [r3, #0]
					output_shift[i_ch_out]);
 8005c1e:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 8005c28:	4413      	add	r3, r2
			sum = arm_nn_requantize(sum, output_mult[i_ch_out],
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005c30:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8005c34:	f8d7 0204 	ldr.w	r0, [r7, #516]	@ 0x204
 8005c38:	6018      	str	r0, [r3, #0]
 8005c3a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005c3e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8005c42:	6019      	str	r1, [r3, #0]
 8005c44:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005c48:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005c4c:	601a      	str	r2, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8005c4e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005c52:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005c5c:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8005c60:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8005c64:	6812      	ldr	r2, [r2, #0]
 8005c66:	409a      	lsls	r2, r3
 8005c68:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005c6c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8005c70:	601a      	str	r2, [r3, #0]
 8005c72:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005c76:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8005c7a:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8005c7e:	f5a2 72c2 	sub.w	r2, r2, #388	@ 0x184
 8005c82:	6812      	ldr	r2, [r2, #0]
 8005c84:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8005c86:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005c8a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8005c8e:	2200      	movs	r2, #0
 8005c90:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 8005c92:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005c96:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8005c9a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005c9e:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 8005ca0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005ca4:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8005ca8:	2200      	movs	r2, #0
 8005caa:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8005cac:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8005cb0:	f507 7108 	add.w	r1, r7, #544	@ 0x220
 8005cb4:	f5a1 71c6 	sub.w	r1, r1, #396	@ 0x18c
 8005cb8:	6809      	ldr	r1, [r1, #0]
 8005cba:	17c8      	asrs	r0, r1, #31
 8005cbc:	4688      	mov	r8, r1
 8005cbe:	4681      	mov	r9, r0
 8005cc0:	f507 7108 	add.w	r1, r7, #544	@ 0x220
 8005cc4:	f5a1 71c8 	sub.w	r1, r1, #400	@ 0x190
 8005cc8:	6809      	ldr	r1, [r1, #0]
 8005cca:	17c8      	asrs	r0, r1, #31
 8005ccc:	468a      	mov	sl, r1
 8005cce:	4683      	mov	fp, r0
 8005cd0:	fb0a f009 	mul.w	r0, sl, r9
 8005cd4:	fb08 f10b 	mul.w	r1, r8, fp
 8005cd8:	4401      	add	r1, r0
 8005cda:	fba8 450a 	umull	r4, r5, r8, sl
 8005cde:	4429      	add	r1, r5
 8005ce0:	460d      	mov	r5, r1
 8005ce2:	1911      	adds	r1, r2, r4
 8005ce4:	6039      	str	r1, [r7, #0]
 8005ce6:	416b      	adcs	r3, r5
 8005ce8:	607b      	str	r3, [r7, #4]
 8005cea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cee:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    result = (int32_t)(mult.long_long >> 31);
 8005cf2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8005cf6:	f04f 0200 	mov.w	r2, #0
 8005cfa:	f04f 0300 	mov.w	r3, #0
 8005cfe:	0fc2      	lsrs	r2, r0, #31
 8005d00:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8005d04:	17cb      	asrs	r3, r1, #31
 8005d06:	f507 7108 	add.w	r1, r7, #544	@ 0x220
 8005d0a:	f5a1 71ca 	sub.w	r1, r1, #404	@ 0x194
 8005d0e:	4613      	mov	r3, r2
 8005d10:	600b      	str	r3, [r1, #0]
    return result;
 8005d12:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005d16:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8005d1a:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8005d1c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005d20:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	dc06      	bgt.n	8005d38 <convolve_1x1_s8_ch48+0xb48>
 8005d2a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005d2e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	425b      	negs	r3, r3
 8005d36:	e000      	b.n	8005d3a <convolve_1x1_s8_ch48+0xb4a>
 8005d38:	2300      	movs	r3, #0
 8005d3a:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8005d3e:	f5a2 72cc 	sub.w	r2, r2, #408	@ 0x198
 8005d42:	6011      	str	r1, [r2, #0]
 8005d44:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8005d48:	f5a2 72ce 	sub.w	r2, r2, #412	@ 0x19c
 8005d4c:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8005d4e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005d52:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8005d56:	2200      	movs	r2, #0
 8005d58:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8005d5a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005d5e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8005d62:	2201      	movs	r2, #1
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	409a      	lsls	r2, r3
 8005d68:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005d6c:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8005d70:	3a01      	subs	r2, #1
 8005d72:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 8005d74:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005d78:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8005d7c:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8005d80:	f5a2 71cc 	sub.w	r1, r2, #408	@ 0x198
 8005d84:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8005d88:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8005d8c:	6809      	ldr	r1, [r1, #0]
 8005d8e:	6812      	ldr	r2, [r2, #0]
 8005d90:	400a      	ands	r2, r1
 8005d92:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 8005d94:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005d98:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8005d9c:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8005da0:	f5a2 71cc 	sub.w	r1, r2, #408	@ 0x198
 8005da4:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8005da8:	f5a2 72ce 	sub.w	r2, r2, #412	@ 0x19c
 8005dac:	6809      	ldr	r1, [r1, #0]
 8005dae:	6812      	ldr	r2, [r2, #0]
 8005db0:	fa41 f202 	asr.w	r2, r1, r2
 8005db4:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 8005db6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005dba:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8005dbe:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8005dc2:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8005dc6:	6812      	ldr	r2, [r2, #0]
 8005dc8:	1052      	asrs	r2, r2, #1
 8005dca:	601a      	str	r2, [r3, #0]
    if (result < 0)
 8005dcc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005dd0:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	da0a      	bge.n	8005df0 <convolve_1x1_s8_ch48+0xc00>
        threshold++;
 8005dda:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005dde:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8005de2:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8005de6:	f5a2 72d6 	sub.w	r2, r2, #428	@ 0x1ac
 8005dea:	6812      	ldr	r2, [r2, #0]
 8005dec:	3201      	adds	r2, #1
 8005dee:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 8005df0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005df4:	f5a3 72d4 	sub.w	r2, r3, #424	@ 0x1a8
 8005df8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005dfc:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8005e00:	6812      	ldr	r2, [r2, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	dd0a      	ble.n	8005e1e <convolve_1x1_s8_ch48+0xc2e>
        result++;
 8005e08:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005e0c:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8005e10:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8005e14:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8005e18:	6812      	ldr	r2, [r2, #0]
 8005e1a:	3201      	adds	r2, #1
 8005e1c:	601a      	str	r2, [r3, #0]
    return result;
 8005e1e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005e22:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8005e26:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8005e28:	bf00      	nop
 8005e2a:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
			sum += out_offset;
 8005e2e:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 8005e32:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8005e36:	4413      	add	r3, r2
 8005e38:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
			sum = MAX(sum, out_activation_min);
 8005e3c:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 8005e40:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 8005e44:	4293      	cmp	r3, r2
 8005e46:	bfb8      	it	lt
 8005e48:	4613      	movlt	r3, r2
 8005e4a:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
			sum = MIN(sum, out_activation_max);
 8005e4e:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 8005e52:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 8005e56:	4293      	cmp	r3, r2
 8005e58:	bfa8      	it	ge
 8005e5a:	4613      	movge	r3, r2
 8005e5c:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
			*out++ = (q7_t) sum;
 8005e60:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8005e64:	1c5a      	adds	r2, r3, #1
 8005e66:	f8c7 2218 	str.w	r2, [r7, #536]	@ 0x218
 8005e6a:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 8005e6e:	b252      	sxtb	r2, r2
 8005e70:	701a      	strb	r2, [r3, #0]
		for (i_ch_out = 0; i_ch_out < output_ch; i_ch_out++) {
 8005e72:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8005e76:	3301      	adds	r3, #1
 8005e78:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 8005e7c:	f8b7 3274 	ldrh.w	r3, [r7, #628]	@ 0x274
 8005e80:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 8005e84:	429a      	cmp	r2, r3
 8005e86:	f6ff ad29 	blt.w	80058dc <convolve_1x1_s8_ch48+0x6ec>
		}
	}

	/* Return to application */
	return STATE_SUCCESS;
 8005e8a:	2300      	movs	r3, #0
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f507 7709 	add.w	r7, r7, #548	@ 0x224
 8005e92:	46bd      	mov	sp, r7
 8005e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005e98 <depthwise_kernel3x3_stride1_inplace_CHW>:
                const int32_t output_offset, const int32_t input_offset,
                const int32_t output_activation_min,
                const int32_t output_activation_max, q7_t *output,
                const uint16_t output_x, const uint16_t output_y,
                const uint16_t output_ch, q15_t *runtime_buf, q7_t pad_value)
{
 8005e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e9a:	b097      	sub	sp, #92	@ 0x5c
 8005e9c:	af0a      	add	r7, sp, #40	@ 0x28
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	4608      	mov	r0, r1
 8005ea2:	4611      	mov	r1, r2
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	817b      	strh	r3, [r7, #10]
 8005eaa:	460b      	mov	r3, r1
 8005eac:	813b      	strh	r3, [r7, #8]
 8005eae:	4613      	mov	r3, r2
 8005eb0:	80fb      	strh	r3, [r7, #6]

    uint16_t c,i,j;
    q7_t *cols_8b_start = (q7_t *)runtime_buf;
 8005eb2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005eb4:	61bb      	str	r3, [r7, #24]
    q7_t* cols_8b = (q7_t* )cols_8b_start;
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	627b      	str	r3, [r7, #36]	@ 0x24

    //Set padding value
    q7_t PAD8 = pad_value;
 8005eba:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 8005ebe:	75fb      	strb	r3, [r7, #23]
    /* setup the padding regions for Im2col buffers */
    //top region: 8bit x (input_x + pad_w * 2) x pad_h: unroll by pad value
    for(i = 0; i < input_x + 2; i++){
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005ec4:	e007      	b.n	8005ed6 <depthwise_kernel3x3_stride1_inplace_CHW+0x3e>
        *cols_8b++ = PAD8;
 8005ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec8:	1c5a      	adds	r2, r3, #1
 8005eca:	627a      	str	r2, [r7, #36]	@ 0x24
 8005ecc:	7dfa      	ldrb	r2, [r7, #23]
 8005ece:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < input_x + 2; i++){
 8005ed0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005ed6:	897b      	ldrh	r3, [r7, #10]
 8005ed8:	1c5a      	adds	r2, r3, #1
 8005eda:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005edc:	429a      	cmp	r2, r3
 8005ede:	daf2      	bge.n	8005ec6 <depthwise_kernel3x3_stride1_inplace_CHW+0x2e>
    }

    //middle regions: left and right regions
    for(i = 0; i < input_y; i++){
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005ee4:	e010      	b.n	8005f08 <depthwise_kernel3x3_stride1_inplace_CHW+0x70>
        *cols_8b++ = PAD8;//left
 8005ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee8:	1c5a      	adds	r2, r3, #1
 8005eea:	627a      	str	r2, [r7, #36]	@ 0x24
 8005eec:	7dfa      	ldrb	r2, [r7, #23]
 8005eee:	701a      	strb	r2, [r3, #0]
        cols_8b += input_x; //skip middle
 8005ef0:	897b      	ldrh	r3, [r7, #10]
 8005ef2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ef4:	4413      	add	r3, r2
 8005ef6:	627b      	str	r3, [r7, #36]	@ 0x24
        *cols_8b++ = PAD8;//right
 8005ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005efa:	1c5a      	adds	r2, r3, #1
 8005efc:	627a      	str	r2, [r7, #36]	@ 0x24
 8005efe:	7dfa      	ldrb	r2, [r7, #23]
 8005f00:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < input_y; i++){
 8005f02:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005f04:	3301      	adds	r3, #1
 8005f06:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005f08:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8005f0a:	893b      	ldrh	r3, [r7, #8]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d3ea      	bcc.n	8005ee6 <depthwise_kernel3x3_stride1_inplace_CHW+0x4e>
    }

    //bottom region: 8bit x (input_x + pad_w * 2) x pad_h: unroll by pad value
    for(i = 0; i < input_x + 2; i++){
 8005f10:	2300      	movs	r3, #0
 8005f12:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005f14:	e007      	b.n	8005f26 <depthwise_kernel3x3_stride1_inplace_CHW+0x8e>
        *cols_8b++ = PAD8;
 8005f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f18:	1c5a      	adds	r2, r3, #1
 8005f1a:	627a      	str	r2, [r7, #36]	@ 0x24
 8005f1c:	7dfa      	ldrb	r2, [r7, #23]
 8005f1e:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < input_x + 2; i++){
 8005f20:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005f22:	3301      	adds	r3, #1
 8005f24:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005f26:	897b      	ldrh	r3, [r7, #10]
 8005f28:	1c5a      	adds	r2, r3, #1
 8005f2a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	daf2      	bge.n	8005f16 <depthwise_kernel3x3_stride1_inplace_CHW+0x7e>
    }

    const q7_t *src;
    const q7_t *ksrc = kernel;
 8005f30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f32:	61fb      	str	r3, [r7, #28]

    for (c = 0; c < input_ch; c++){
 8005f34:	2300      	movs	r3, #0
 8005f36:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005f38:	e05e      	b.n	8005ff8 <depthwise_kernel3x3_stride1_inplace_CHW+0x160>
        cols_8b = (q7_t*)(cols_8b_start + 1 * (input_x) + 2); //skip 1 rows
 8005f3a:	897b      	ldrh	r3, [r7, #10]
 8005f3c:	3302      	adds	r3, #2
 8005f3e:	69ba      	ldr	r2, [r7, #24]
 8005f40:	4413      	add	r3, r2
 8005f42:	627b      	str	r3, [r7, #36]	@ 0x24
        src = input;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	623b      	str	r3, [r7, #32]
        for(i = 0; i < input_y; i++){
 8005f48:	2300      	movs	r3, #0
 8005f4a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005f4c:	e01d      	b.n	8005f8a <depthwise_kernel3x3_stride1_inplace_CHW+0xf2>
            cols_8b += 1;//skip front
 8005f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f50:	3301      	adds	r3, #1
 8005f52:	627b      	str	r3, [r7, #36]	@ 0x24
            for(j = 0; j < input_x; j++){
 8005f54:	2300      	movs	r3, #0
 8005f56:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005f58:	e00d      	b.n	8005f76 <depthwise_kernel3x3_stride1_inplace_CHW+0xde>
                *cols_8b++ = *src;// + input_offset;
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f5c:	1c5a      	adds	r2, r3, #1
 8005f5e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005f60:	6a3a      	ldr	r2, [r7, #32]
 8005f62:	f992 2000 	ldrsb.w	r2, [r2]
 8005f66:	701a      	strb	r2, [r3, #0]
                src += input_ch;
 8005f68:	88fb      	ldrh	r3, [r7, #6]
 8005f6a:	6a3a      	ldr	r2, [r7, #32]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	623b      	str	r3, [r7, #32]
            for(j = 0; j < input_x; j++){
 8005f70:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005f72:	3301      	adds	r3, #1
 8005f74:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005f76:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8005f78:	897b      	ldrh	r3, [r7, #10]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d3ed      	bcc.n	8005f5a <depthwise_kernel3x3_stride1_inplace_CHW+0xc2>
            }
            cols_8b += 1;//skip end
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f80:	3301      	adds	r3, #1
 8005f82:	627b      	str	r3, [r7, #36]	@ 0x24
        for(i = 0; i < input_y; i++){
 8005f84:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005f86:	3301      	adds	r3, #1
 8005f88:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005f8a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8005f8c:	893b      	ldrh	r3, [r7, #8]
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d3dd      	bcc.n	8005f4e <depthwise_kernel3x3_stride1_inplace_CHW+0xb6>
        }
        q7_t *inplace_out = input;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	613b      	str	r3, [r7, #16]
        depthwise_kernel3x3_stride1_inplace_kernel_CHW(output_y, output_x, bias++, biasR++, ksrc, output_mult++, output_shift++, inplace_out,output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8005f96:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005f98:	1d0b      	adds	r3, r1, #4
 8005f9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f9c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8005f9e:	1d03      	adds	r3, r0, #4
 8005fa0:	653b      	str	r3, [r7, #80]	@ 0x50
 8005fa2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005fa4:	1d1a      	adds	r2, r3, #4
 8005fa6:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005fa8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005faa:	1d14      	adds	r4, r2, #4
 8005fac:	657c      	str	r4, [r7, #84]	@ 0x54
 8005fae:	88fc      	ldrh	r4, [r7, #6]
 8005fb0:	f8b7 6070 	ldrh.w	r6, [r7, #112]	@ 0x70
 8005fb4:	f8b7 5074 	ldrh.w	r5, [r7, #116]	@ 0x74
 8005fb8:	9409      	str	r4, [sp, #36]	@ 0x24
 8005fba:	897c      	ldrh	r4, [r7, #10]
 8005fbc:	9408      	str	r4, [sp, #32]
 8005fbe:	69bc      	ldr	r4, [r7, #24]
 8005fc0:	9407      	str	r4, [sp, #28]
 8005fc2:	6ebc      	ldr	r4, [r7, #104]	@ 0x68
 8005fc4:	9406      	str	r4, [sp, #24]
 8005fc6:	6e7c      	ldr	r4, [r7, #100]	@ 0x64
 8005fc8:	9405      	str	r4, [sp, #20]
 8005fca:	6dfc      	ldr	r4, [r7, #92]	@ 0x5c
 8005fcc:	9404      	str	r4, [sp, #16]
 8005fce:	693c      	ldr	r4, [r7, #16]
 8005fd0:	9403      	str	r4, [sp, #12]
 8005fd2:	9202      	str	r2, [sp, #8]
 8005fd4:	9301      	str	r3, [sp, #4]
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	9300      	str	r3, [sp, #0]
 8005fda:	4603      	mov	r3, r0
 8005fdc:	460a      	mov	r2, r1
 8005fde:	4631      	mov	r1, r6
 8005fe0:	4628      	mov	r0, r5
 8005fe2:	f000 f812 	bl	800600a <depthwise_kernel3x3_stride1_inplace_kernel_CHW>
        ksrc += 9;
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	3309      	adds	r3, #9
 8005fea:	61fb      	str	r3, [r7, #28]
        input++;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	3301      	adds	r3, #1
 8005ff0:	60fb      	str	r3, [r7, #12]
    for (c = 0; c < input_ch; c++){
 8005ff2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005ff8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005ffa:	88fb      	ldrh	r3, [r7, #6]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d39c      	bcc.n	8005f3a <depthwise_kernel3x3_stride1_inplace_CHW+0xa2>
    }
    return STATE_SUCCESS;
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	3734      	adds	r7, #52	@ 0x34
 8006006:	46bd      	mov	sp, r7
 8006008:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800600a <depthwise_kernel3x3_stride1_inplace_kernel_CHW>:
        const uint16_t output_y, const uint16_t output_x,
        const int32_t *bias, const int32_t *biasR, const q7_t *ksrc, const int32_t *multiplier,
        const int32_t *shift, q7_t *output, const int32_t output_offset,
        const int32_t activation_min, const int32_t activation_max,
        q7_t *cols_8b_iterptr, const uint16_t column_x, int channel_offset)
{
 800600a:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800600e:	b0c8      	sub	sp, #288	@ 0x120
 8006010:	af00      	add	r7, sp, #0
 8006012:	653a      	str	r2, [r7, #80]	@ 0x50
 8006014:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006016:	4603      	mov	r3, r0
 8006018:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800601c:	460b      	mov	r3, r1
 800601e:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    #define STRIDE 1
    int i, j;
    /* MACs for each output */
    for (i = 0; i < output_y; i++) {
 8006022:	2300      	movs	r3, #0
 8006024:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8006028:	f000 bca9 	b.w	800697e <depthwise_kernel3x3_stride1_inplace_kernel_CHW+0x974>
        for (j = 0; j < output_x / 2; j++) {
 800602c:	2300      	movs	r3, #0
 800602e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8006032:	e306      	b.n	8006642 <depthwise_kernel3x3_stride1_inplace_kernel_CHW+0x638>
            q7_t *cols_8b = cols_8b_iterptr;
 8006034:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8006038:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

            q31_t sum0 = bias[0] + biasR[0];
 800603c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4413      	add	r3, r2
 8006046:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            q31_t sum1 = bias[0] + biasR[0];
 800604a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4413      	add	r3, r2
 8006054:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            
            /* computation */
            sum0 += cols_8b[0]*ksrc[0];
 8006058:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800605c:	f993 3000 	ldrsb.w	r3, [r3]
 8006060:	461a      	mov	r2, r3
 8006062:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8006066:	f993 3000 	ldrsb.w	r3, [r3]
 800606a:	fb03 f202 	mul.w	r2, r3, r2
 800606e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8006072:	4413      	add	r3, r2
 8006074:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[1]*ksrc[0];
 8006078:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800607c:	3301      	adds	r3, #1
 800607e:	f993 3000 	ldrsb.w	r3, [r3]
 8006082:	461a      	mov	r2, r3
 8006084:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8006088:	f993 3000 	ldrsb.w	r3, [r3]
 800608c:	fb03 f202 	mul.w	r2, r3, r2
 8006090:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006094:	4413      	add	r3, r2
 8006096:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[1]*ksrc[1];
 800609a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800609e:	3301      	adds	r3, #1
 80060a0:	f993 3000 	ldrsb.w	r3, [r3]
 80060a4:	461a      	mov	r2, r3
 80060a6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80060aa:	3301      	adds	r3, #1
 80060ac:	f993 3000 	ldrsb.w	r3, [r3]
 80060b0:	fb03 f202 	mul.w	r2, r3, r2
 80060b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80060b8:	4413      	add	r3, r2
 80060ba:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[2]*ksrc[1];
 80060be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80060c2:	3302      	adds	r3, #2
 80060c4:	f993 3000 	ldrsb.w	r3, [r3]
 80060c8:	461a      	mov	r2, r3
 80060ca:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80060ce:	3301      	adds	r3, #1
 80060d0:	f993 3000 	ldrsb.w	r3, [r3]
 80060d4:	fb03 f202 	mul.w	r2, r3, r2
 80060d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060dc:	4413      	add	r3, r2
 80060de:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[2]*ksrc[2];
 80060e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80060e6:	3302      	adds	r3, #2
 80060e8:	f993 3000 	ldrsb.w	r3, [r3]
 80060ec:	461a      	mov	r2, r3
 80060ee:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80060f2:	3302      	adds	r3, #2
 80060f4:	f993 3000 	ldrsb.w	r3, [r3]
 80060f8:	fb03 f202 	mul.w	r2, r3, r2
 80060fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8006100:	4413      	add	r3, r2
 8006102:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[3]*ksrc[2];
 8006106:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800610a:	3303      	adds	r3, #3
 800610c:	f993 3000 	ldrsb.w	r3, [r3]
 8006110:	461a      	mov	r2, r3
 8006112:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8006116:	3302      	adds	r3, #2
 8006118:	f993 3000 	ldrsb.w	r3, [r3]
 800611c:	fb03 f202 	mul.w	r2, r3, r2
 8006120:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006124:	4413      	add	r3, r2
 8006126:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            cols_8b += column_x + 2;
 800612a:	f8b7 3160 	ldrh.w	r3, [r7, #352]	@ 0x160
 800612e:	1c9a      	adds	r2, r3, #2
 8006130:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006134:	4413      	add	r3, r2
 8006136:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
            sum0 += cols_8b[0]*ksrc[3];
 800613a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800613e:	f993 3000 	ldrsb.w	r3, [r3]
 8006142:	461a      	mov	r2, r3
 8006144:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8006148:	3303      	adds	r3, #3
 800614a:	f993 3000 	ldrsb.w	r3, [r3]
 800614e:	fb03 f202 	mul.w	r2, r3, r2
 8006152:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8006156:	4413      	add	r3, r2
 8006158:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[1]*ksrc[3];
 800615c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006160:	3301      	adds	r3, #1
 8006162:	f993 3000 	ldrsb.w	r3, [r3]
 8006166:	461a      	mov	r2, r3
 8006168:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800616c:	3303      	adds	r3, #3
 800616e:	f993 3000 	ldrsb.w	r3, [r3]
 8006172:	fb03 f202 	mul.w	r2, r3, r2
 8006176:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800617a:	4413      	add	r3, r2
 800617c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[1]*ksrc[4];
 8006180:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006184:	3301      	adds	r3, #1
 8006186:	f993 3000 	ldrsb.w	r3, [r3]
 800618a:	461a      	mov	r2, r3
 800618c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8006190:	3304      	adds	r3, #4
 8006192:	f993 3000 	ldrsb.w	r3, [r3]
 8006196:	fb03 f202 	mul.w	r2, r3, r2
 800619a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800619e:	4413      	add	r3, r2
 80061a0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[2]*ksrc[4];
 80061a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80061a8:	3302      	adds	r3, #2
 80061aa:	f993 3000 	ldrsb.w	r3, [r3]
 80061ae:	461a      	mov	r2, r3
 80061b0:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80061b4:	3304      	adds	r3, #4
 80061b6:	f993 3000 	ldrsb.w	r3, [r3]
 80061ba:	fb03 f202 	mul.w	r2, r3, r2
 80061be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061c2:	4413      	add	r3, r2
 80061c4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[2]*ksrc[5];
 80061c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80061cc:	3302      	adds	r3, #2
 80061ce:	f993 3000 	ldrsb.w	r3, [r3]
 80061d2:	461a      	mov	r2, r3
 80061d4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80061d8:	3305      	adds	r3, #5
 80061da:	f993 3000 	ldrsb.w	r3, [r3]
 80061de:	fb03 f202 	mul.w	r2, r3, r2
 80061e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80061e6:	4413      	add	r3, r2
 80061e8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[3]*ksrc[5];
 80061ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80061f0:	3303      	adds	r3, #3
 80061f2:	f993 3000 	ldrsb.w	r3, [r3]
 80061f6:	461a      	mov	r2, r3
 80061f8:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80061fc:	3305      	adds	r3, #5
 80061fe:	f993 3000 	ldrsb.w	r3, [r3]
 8006202:	fb03 f202 	mul.w	r2, r3, r2
 8006206:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800620a:	4413      	add	r3, r2
 800620c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            cols_8b += column_x + 2;
 8006210:	f8b7 3160 	ldrh.w	r3, [r7, #352]	@ 0x160
 8006214:	1c9a      	adds	r2, r3, #2
 8006216:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800621a:	4413      	add	r3, r2
 800621c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
            sum0 += cols_8b[0]*ksrc[6];
 8006220:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006224:	f993 3000 	ldrsb.w	r3, [r3]
 8006228:	461a      	mov	r2, r3
 800622a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800622e:	3306      	adds	r3, #6
 8006230:	f993 3000 	ldrsb.w	r3, [r3]
 8006234:	fb03 f202 	mul.w	r2, r3, r2
 8006238:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800623c:	4413      	add	r3, r2
 800623e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[1]*ksrc[6];
 8006242:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006246:	3301      	adds	r3, #1
 8006248:	f993 3000 	ldrsb.w	r3, [r3]
 800624c:	461a      	mov	r2, r3
 800624e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8006252:	3306      	adds	r3, #6
 8006254:	f993 3000 	ldrsb.w	r3, [r3]
 8006258:	fb03 f202 	mul.w	r2, r3, r2
 800625c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006260:	4413      	add	r3, r2
 8006262:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[1]*ksrc[7];
 8006266:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800626a:	3301      	adds	r3, #1
 800626c:	f993 3000 	ldrsb.w	r3, [r3]
 8006270:	461a      	mov	r2, r3
 8006272:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8006276:	3307      	adds	r3, #7
 8006278:	f993 3000 	ldrsb.w	r3, [r3]
 800627c:	fb03 f202 	mul.w	r2, r3, r2
 8006280:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8006284:	4413      	add	r3, r2
 8006286:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[2]*ksrc[7];
 800628a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800628e:	3302      	adds	r3, #2
 8006290:	f993 3000 	ldrsb.w	r3, [r3]
 8006294:	461a      	mov	r2, r3
 8006296:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800629a:	3307      	adds	r3, #7
 800629c:	f993 3000 	ldrsb.w	r3, [r3]
 80062a0:	fb03 f202 	mul.w	r2, r3, r2
 80062a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062a8:	4413      	add	r3, r2
 80062aa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[2]*ksrc[8];
 80062ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062b2:	3302      	adds	r3, #2
 80062b4:	f993 3000 	ldrsb.w	r3, [r3]
 80062b8:	461a      	mov	r2, r3
 80062ba:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80062be:	3308      	adds	r3, #8
 80062c0:	f993 3000 	ldrsb.w	r3, [r3]
 80062c4:	fb03 f202 	mul.w	r2, r3, r2
 80062c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80062cc:	4413      	add	r3, r2
 80062ce:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[3]*ksrc[8];
 80062d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062d6:	3303      	adds	r3, #3
 80062d8:	f993 3000 	ldrsb.w	r3, [r3]
 80062dc:	461a      	mov	r2, r3
 80062de:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80062e2:	3308      	adds	r3, #8
 80062e4:	f993 3000 	ldrsb.w	r3, [r3]
 80062e8:	fb03 f202 	mul.w	r2, r3, r2
 80062ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062f0:	4413      	add	r3, r2
 80062f2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

            /* requantize */
            sum0 = arm_nn_requantize(sum0 + biasR[0], *multiplier, *shift);
 80062f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80062fe:	18d1      	adds	r1, r2, r3
 8006300:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8006310:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8006314:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006318:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800631c:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8006320:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006324:	4093      	lsls	r3, r2
 8006326:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800632a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800632e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    q31_t result = 0;
 8006332:	2300      	movs	r3, #0
 8006334:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    mult.word.low = 1 << 30;
 8006338:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800633c:	66bb      	str	r3, [r7, #104]	@ 0x68
    mult.word.high = 0;
 800633e:	2300      	movs	r3, #0
 8006340:	66fb      	str	r3, [r7, #108]	@ 0x6c
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8006342:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006346:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800634a:	17da      	asrs	r2, r3, #31
 800634c:	633b      	str	r3, [r7, #48]	@ 0x30
 800634e:	637a      	str	r2, [r7, #52]	@ 0x34
 8006350:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006354:	17da      	asrs	r2, r3, #31
 8006356:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006358:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800635a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800635c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800635e:	fb02 f203 	mul.w	r2, r2, r3
 8006362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006364:	6b3e      	ldr	r6, [r7, #48]	@ 0x30
 8006366:	fb06 f303 	mul.w	r3, r6, r3
 800636a:	4413      	add	r3, r2
 800636c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800636e:	6abe      	ldr	r6, [r7, #40]	@ 0x28
 8006370:	fba2 8906 	umull	r8, r9, r2, r6
 8006374:	444b      	add	r3, r9
 8006376:	4699      	mov	r9, r3
 8006378:	eb10 0308 	adds.w	r3, r0, r8
 800637c:	60bb      	str	r3, [r7, #8]
 800637e:	eb41 0309 	adc.w	r3, r1, r9
 8006382:	60fb      	str	r3, [r7, #12]
 8006384:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006388:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
    result = (int32_t)(mult.long_long >> 31);
 800638c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8006390:	f04f 0000 	mov.w	r0, #0
 8006394:	f04f 0100 	mov.w	r1, #0
 8006398:	0fd0      	lsrs	r0, r2, #31
 800639a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800639e:	17d9      	asrs	r1, r3, #31
 80063a0:	4603      	mov	r3, r0
 80063a2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    return result;
 80063a6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80063aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	dc03      	bgt.n	80063ba <depthwise_kernel3x3_stride1_inplace_kernel_CHW+0x3b0>
 80063b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80063b6:	425b      	negs	r3, r3
 80063b8:	e000      	b.n	80063bc <depthwise_kernel3x3_stride1_inplace_kernel_CHW+0x3b2>
 80063ba:	2300      	movs	r3, #0
 80063bc:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 80063c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    q31_t result = 0;
 80063c4:	2300      	movs	r3, #0
 80063c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    const q31_t remainder_mask = (1 << exponent) - 1;
 80063ca:	2201      	movs	r2, #1
 80063cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80063d0:	fa02 f303 	lsl.w	r3, r2, r3
 80063d4:	3b01      	subs	r3, #1
 80063d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    int32_t remainder = remainder_mask & dividend;
 80063da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80063de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80063e2:	4013      	ands	r3, r2
 80063e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    result = dividend >> exponent;
 80063e8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80063ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80063f0:	fa42 f303 	asr.w	r3, r2, r3
 80063f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    q31_t threshold = remainder_mask >> 1;
 80063f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80063fc:	105b      	asrs	r3, r3, #1
 80063fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (result < 0)
 8006402:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006406:	2b00      	cmp	r3, #0
 8006408:	da04      	bge.n	8006414 <depthwise_kernel3x3_stride1_inplace_kernel_CHW+0x40a>
        threshold++;
 800640a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800640e:	3301      	adds	r3, #1
 8006410:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (remainder > threshold)
 8006414:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006418:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800641c:	429a      	cmp	r2, r3
 800641e:	dd04      	ble.n	800642a <depthwise_kernel3x3_stride1_inplace_kernel_CHW+0x420>
        result++;
 8006420:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006424:	3301      	adds	r3, #1
 8006426:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    return result;
 800642a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800642e:	bf00      	nop
 8006430:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum0 += output_offset;
 8006434:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8006438:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800643c:	4413      	add	r3, r2
 800643e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum0 = TN_MAX(sum0, activation_min);
 8006442:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8006446:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800644a:	4293      	cmp	r3, r2
 800644c:	bfb8      	it	lt
 800644e:	4613      	movlt	r3, r2
 8006450:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum0 = TN_MIN(sum0, activation_max);
 8006454:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8006458:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800645c:	4293      	cmp	r3, r2
 800645e:	bfa8      	it	ge
 8006460:	4613      	movge	r3, r2
 8006462:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8006466:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 800646a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800646e:	fb03 f202 	mul.w	r2, r3, r2
 8006472:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006476:	005b      	lsls	r3, r3, #1
 8006478:	441a      	add	r2, r3
 800647a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800647e:	fb02 f303 	mul.w	r3, r2, r3
 8006482:	461a      	mov	r2, r3
 8006484:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006488:	441a      	add	r2, r3
 800648a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800648e:	b25b      	sxtb	r3, r3
 8006490:	7013      	strb	r3, [r2, #0]

            sum1 = arm_nn_requantize(sum1 + biasR[0], *multiplier, *shift);
 8006492:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800649a:	18d1      	adds	r1, r2, r3
 800649c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f8c7 1100 	str.w	r1, [r7, #256]	@ 0x100
 80064ac:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 80064b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80064b4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80064b8:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 80064bc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80064c0:	4093      	lsls	r3, r2
 80064c2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80064c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064ca:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    q31_t result = 0;
 80064ce:	2300      	movs	r3, #0
 80064d0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    mult.word.low = 1 << 30;
 80064d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80064d8:	663b      	str	r3, [r7, #96]	@ 0x60
    mult.word.high = 0;
 80064da:	2300      	movs	r3, #0
 80064dc:	667b      	str	r3, [r7, #100]	@ 0x64
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80064de:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 80064e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064e6:	17da      	asrs	r2, r3, #31
 80064e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80064ea:	647a      	str	r2, [r7, #68]	@ 0x44
 80064ec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80064f0:	17da      	asrs	r2, r3, #31
 80064f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80064f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80064f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80064fa:	fb02 f203 	mul.w	r2, r2, r3
 80064fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006500:	6c3e      	ldr	r6, [r7, #64]	@ 0x40
 8006502:	fb06 f303 	mul.w	r3, r6, r3
 8006506:	4413      	add	r3, r2
 8006508:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800650a:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 800650c:	fba2 4506 	umull	r4, r5, r2, r6
 8006510:	442b      	add	r3, r5
 8006512:	461d      	mov	r5, r3
 8006514:	1903      	adds	r3, r0, r4
 8006516:	613b      	str	r3, [r7, #16]
 8006518:	eb41 0305 	adc.w	r3, r1, r5
 800651c:	617b      	str	r3, [r7, #20]
 800651e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006522:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
    result = (int32_t)(mult.long_long >> 31);
 8006526:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800652a:	f04f 0000 	mov.w	r0, #0
 800652e:	f04f 0100 	mov.w	r1, #0
 8006532:	0fd0      	lsrs	r0, r2, #31
 8006534:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8006538:	17d9      	asrs	r1, r3, #31
 800653a:	4603      	mov	r3, r0
 800653c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    return result;
 8006540:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8006544:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006548:	2b00      	cmp	r3, #0
 800654a:	dc03      	bgt.n	8006554 <depthwise_kernel3x3_stride1_inplace_kernel_CHW+0x54a>
 800654c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006550:	425b      	negs	r3, r3
 8006552:	e000      	b.n	8006556 <depthwise_kernel3x3_stride1_inplace_kernel_CHW+0x54c>
 8006554:	2300      	movs	r3, #0
 8006556:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 800655a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    q31_t result = 0;
 800655e:	2300      	movs	r3, #0
 8006560:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    const q31_t remainder_mask = (1 << exponent) - 1;
 8006564:	2201      	movs	r2, #1
 8006566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800656a:	fa02 f303 	lsl.w	r3, r2, r3
 800656e:	3b01      	subs	r3, #1
 8006570:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    int32_t remainder = remainder_mask & dividend;
 8006574:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8006578:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800657c:	4013      	ands	r3, r2
 800657e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    result = dividend >> exponent;
 8006582:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8006586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800658a:	fa42 f303 	asr.w	r3, r2, r3
 800658e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    q31_t threshold = remainder_mask >> 1;
 8006592:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006596:	105b      	asrs	r3, r3, #1
 8006598:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    if (result < 0)
 800659c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	da04      	bge.n	80065ae <depthwise_kernel3x3_stride1_inplace_kernel_CHW+0x5a4>
        threshold++;
 80065a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80065a8:	3301      	adds	r3, #1
 80065aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    if (remainder > threshold)
 80065ae:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 80065b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80065b6:	429a      	cmp	r2, r3
 80065b8:	dd04      	ble.n	80065c4 <depthwise_kernel3x3_stride1_inplace_kernel_CHW+0x5ba>
        result++;
 80065ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065be:	3301      	adds	r3, #1
 80065c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    return result;
 80065c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80065c8:	bf00      	nop
 80065ca:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum1 += output_offset;
 80065ce:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 80065d2:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80065d6:	4413      	add	r3, r2
 80065d8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum1 = TN_MAX(sum1, activation_min);
 80065dc:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 80065e0:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80065e4:	4293      	cmp	r3, r2
 80065e6:	bfb8      	it	lt
 80065e8:	4613      	movlt	r3, r2
 80065ea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum1 = TN_MIN(sum1, activation_max);
 80065ee:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 80065f2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80065f6:	4293      	cmp	r3, r2
 80065f8:	bfa8      	it	ge
 80065fa:	4613      	movge	r3, r2
 80065fc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;
 8006600:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8006604:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006608:	fb03 f202 	mul.w	r2, r3, r2
 800660c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006610:	005b      	lsls	r3, r3, #1
 8006612:	3301      	adds	r3, #1
 8006614:	441a      	add	r2, r3
 8006616:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800661a:	fb02 f303 	mul.w	r3, r2, r3
 800661e:	461a      	mov	r2, r3
 8006620:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006624:	441a      	add	r2, r3
 8006626:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800662a:	b25b      	sxtb	r3, r3
 800662c:	7013      	strb	r3, [r2, #0]

            cols_8b_iterptr += STRIDE * 2;
 800662e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8006632:	3302      	adds	r3, #2
 8006634:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        for (j = 0; j < output_x / 2; j++) {
 8006638:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800663c:	3301      	adds	r3, #1
 800663e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8006642:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8006646:	085b      	lsrs	r3, r3, #1
 8006648:	b29b      	uxth	r3, r3
 800664a:	461a      	mov	r2, r3
 800664c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006650:	4293      	cmp	r3, r2
 8006652:	f6ff acef 	blt.w	8006034 <depthwise_kernel3x3_stride1_inplace_kernel_CHW+0x2a>
        }
        if (output_x & 1) {
 8006656:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 800665a:	f003 0301 	and.w	r3, r3, #1
 800665e:	2b00      	cmp	r3, #0
 8006660:	f000 8183 	beq.w	800696a <depthwise_kernel3x3_stride1_inplace_kernel_CHW+0x960>
            q7_t * cols_8b = cols_8b_iterptr;
 8006664:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8006668:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
            q31_t sum = bias[0] + biasR[0];
 800666c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4413      	add	r3, r2
 8006676:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[0]*ksrc[0];
 800667a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800667e:	f993 3000 	ldrsb.w	r3, [r3]
 8006682:	461a      	mov	r2, r3
 8006684:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8006688:	f993 3000 	ldrsb.w	r3, [r3]
 800668c:	fb03 f202 	mul.w	r2, r3, r2
 8006690:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006694:	4413      	add	r3, r2
 8006696:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[1]*ksrc[1];
 800669a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800669e:	3301      	adds	r3, #1
 80066a0:	f993 3000 	ldrsb.w	r3, [r3]
 80066a4:	461a      	mov	r2, r3
 80066a6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80066aa:	3301      	adds	r3, #1
 80066ac:	f993 3000 	ldrsb.w	r3, [r3]
 80066b0:	fb03 f202 	mul.w	r2, r3, r2
 80066b4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80066b8:	4413      	add	r3, r2
 80066ba:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[2]*ksrc[2];
 80066be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066c2:	3302      	adds	r3, #2
 80066c4:	f993 3000 	ldrsb.w	r3, [r3]
 80066c8:	461a      	mov	r2, r3
 80066ca:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80066ce:	3302      	adds	r3, #2
 80066d0:	f993 3000 	ldrsb.w	r3, [r3]
 80066d4:	fb03 f202 	mul.w	r2, r3, r2
 80066d8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80066dc:	4413      	add	r3, r2
 80066de:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            cols_8b += column_x + 2;
 80066e2:	f8b7 3160 	ldrh.w	r3, [r7, #352]	@ 0x160
 80066e6:	1c9a      	adds	r2, r3, #2
 80066e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ec:	4413      	add	r3, r2
 80066ee:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
            sum += cols_8b[0]*ksrc[3];
 80066f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066f6:	f993 3000 	ldrsb.w	r3, [r3]
 80066fa:	461a      	mov	r2, r3
 80066fc:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8006700:	3303      	adds	r3, #3
 8006702:	f993 3000 	ldrsb.w	r3, [r3]
 8006706:	fb03 f202 	mul.w	r2, r3, r2
 800670a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800670e:	4413      	add	r3, r2
 8006710:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[1]*ksrc[4];
 8006714:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006718:	3301      	adds	r3, #1
 800671a:	f993 3000 	ldrsb.w	r3, [r3]
 800671e:	461a      	mov	r2, r3
 8006720:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8006724:	3304      	adds	r3, #4
 8006726:	f993 3000 	ldrsb.w	r3, [r3]
 800672a:	fb03 f202 	mul.w	r2, r3, r2
 800672e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006732:	4413      	add	r3, r2
 8006734:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[2]*ksrc[5];
 8006738:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800673c:	3302      	adds	r3, #2
 800673e:	f993 3000 	ldrsb.w	r3, [r3]
 8006742:	461a      	mov	r2, r3
 8006744:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8006748:	3305      	adds	r3, #5
 800674a:	f993 3000 	ldrsb.w	r3, [r3]
 800674e:	fb03 f202 	mul.w	r2, r3, r2
 8006752:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006756:	4413      	add	r3, r2
 8006758:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            cols_8b += column_x + 2;
 800675c:	f8b7 3160 	ldrh.w	r3, [r7, #352]	@ 0x160
 8006760:	1c9a      	adds	r2, r3, #2
 8006762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006766:	4413      	add	r3, r2
 8006768:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
            sum += cols_8b[0]*ksrc[6];
 800676c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006770:	f993 3000 	ldrsb.w	r3, [r3]
 8006774:	461a      	mov	r2, r3
 8006776:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800677a:	3306      	adds	r3, #6
 800677c:	f993 3000 	ldrsb.w	r3, [r3]
 8006780:	fb03 f202 	mul.w	r2, r3, r2
 8006784:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006788:	4413      	add	r3, r2
 800678a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[1]*ksrc[7];
 800678e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006792:	3301      	adds	r3, #1
 8006794:	f993 3000 	ldrsb.w	r3, [r3]
 8006798:	461a      	mov	r2, r3
 800679a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800679e:	3307      	adds	r3, #7
 80067a0:	f993 3000 	ldrsb.w	r3, [r3]
 80067a4:	fb03 f202 	mul.w	r2, r3, r2
 80067a8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80067ac:	4413      	add	r3, r2
 80067ae:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[2]*ksrc[8];
 80067b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067b6:	3302      	adds	r3, #2
 80067b8:	f993 3000 	ldrsb.w	r3, [r3]
 80067bc:	461a      	mov	r2, r3
 80067be:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80067c2:	3308      	adds	r3, #8
 80067c4:	f993 3000 	ldrsb.w	r3, [r3]
 80067c8:	fb03 f202 	mul.w	r2, r3, r2
 80067cc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80067d0:	4413      	add	r3, r2
 80067d2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

            sum = arm_nn_requantize(sum + biasR[0], *multiplier, *shift);
 80067d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80067de:	18d1      	adds	r1, r2, r3
 80067e0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 80067f0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80067f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80067f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80067fc:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8006800:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006804:	4093      	lsls	r3, r2
 8006806:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800680a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800680e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    q31_t result = 0;
 8006812:	2300      	movs	r3, #0
 8006814:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    mult.word.low = 1 << 30;
 8006818:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800681c:	65bb      	str	r3, [r7, #88]	@ 0x58
    mult.word.high = 0;
 800681e:	2300      	movs	r3, #0
 8006820:	65fb      	str	r3, [r7, #92]	@ 0x5c
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8006822:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8006826:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800682a:	17da      	asrs	r2, r3, #31
 800682c:	623b      	str	r3, [r7, #32]
 800682e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006830:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006834:	17da      	asrs	r2, r3, #31
 8006836:	61bb      	str	r3, [r7, #24]
 8006838:	61fa      	str	r2, [r7, #28]
 800683a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800683c:	69ba      	ldr	r2, [r7, #24]
 800683e:	fb02 f203 	mul.w	r2, r2, r3
 8006842:	69fb      	ldr	r3, [r7, #28]
 8006844:	6a3e      	ldr	r6, [r7, #32]
 8006846:	fb06 f303 	mul.w	r3, r6, r3
 800684a:	4413      	add	r3, r2
 800684c:	6a3a      	ldr	r2, [r7, #32]
 800684e:	69be      	ldr	r6, [r7, #24]
 8006850:	fba2 ab06 	umull	sl, fp, r2, r6
 8006854:	445b      	add	r3, fp
 8006856:	469b      	mov	fp, r3
 8006858:	eb10 030a 	adds.w	r3, r0, sl
 800685c:	603b      	str	r3, [r7, #0]
 800685e:	eb41 030b 	adc.w	r3, r1, fp
 8006862:	607b      	str	r3, [r7, #4]
 8006864:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006868:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    result = (int32_t)(mult.long_long >> 31);
 800686c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006870:	f04f 0000 	mov.w	r0, #0
 8006874:	f04f 0100 	mov.w	r1, #0
 8006878:	0fd0      	lsrs	r0, r2, #31
 800687a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800687e:	17d9      	asrs	r1, r3, #31
 8006880:	4603      	mov	r3, r0
 8006882:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    return result;
 8006886:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800688a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800688e:	2b00      	cmp	r3, #0
 8006890:	dc03      	bgt.n	800689a <depthwise_kernel3x3_stride1_inplace_kernel_CHW+0x890>
 8006892:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006896:	425b      	negs	r3, r3
 8006898:	e000      	b.n	800689c <depthwise_kernel3x3_stride1_inplace_kernel_CHW+0x892>
 800689a:	2300      	movs	r3, #0
 800689c:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80068a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    q31_t result = 0;
 80068a4:	2300      	movs	r3, #0
 80068a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    const q31_t remainder_mask = (1 << exponent) - 1;
 80068aa:	2201      	movs	r2, #1
 80068ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80068b0:	fa02 f303 	lsl.w	r3, r2, r3
 80068b4:	3b01      	subs	r3, #1
 80068b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    int32_t remainder = remainder_mask & dividend;
 80068b8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80068bc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80068be:	4013      	ands	r3, r2
 80068c0:	67bb      	str	r3, [r7, #120]	@ 0x78
    result = dividend >> exponent;
 80068c2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80068c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80068ca:	fa42 f303 	asr.w	r3, r2, r3
 80068ce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    q31_t threshold = remainder_mask >> 1;
 80068d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80068d4:	105b      	asrs	r3, r3, #1
 80068d6:	677b      	str	r3, [r7, #116]	@ 0x74
    if (result < 0)
 80068d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80068dc:	2b00      	cmp	r3, #0
 80068de:	da02      	bge.n	80068e6 <depthwise_kernel3x3_stride1_inplace_kernel_CHW+0x8dc>
        threshold++;
 80068e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80068e2:	3301      	adds	r3, #1
 80068e4:	677b      	str	r3, [r7, #116]	@ 0x74
    if (remainder > threshold)
 80068e6:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80068e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80068ea:	429a      	cmp	r2, r3
 80068ec:	dd04      	ble.n	80068f8 <depthwise_kernel3x3_stride1_inplace_kernel_CHW+0x8ee>
        result++;
 80068ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80068f2:	3301      	adds	r3, #1
 80068f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    return result;
 80068f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80068fc:	bf00      	nop
 80068fe:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += output_offset;
 8006902:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8006906:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800690a:	4413      	add	r3, r2
 800690c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum = TN_MAX(sum, activation_min);
 8006910:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8006914:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8006918:	4293      	cmp	r3, r2
 800691a:	bfb8      	it	lt
 800691c:	4613      	movlt	r3, r2
 800691e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum = TN_MIN(sum, activation_max);
 8006922:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8006926:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800692a:	4293      	cmp	r3, r2
 800692c:	bfa8      	it	ge
 800692e:	4613      	movge	r3, r2
 8006930:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 8006934:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8006938:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800693c:	fb03 f202 	mul.w	r2, r3, r2
 8006940:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8006944:	4413      	add	r3, r2
 8006946:	1e5a      	subs	r2, r3, #1
 8006948:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800694c:	fb02 f303 	mul.w	r3, r2, r3
 8006950:	461a      	mov	r2, r3
 8006952:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006956:	441a      	add	r2, r3
 8006958:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800695c:	b25b      	sxtb	r3, r3
 800695e:	7013      	strb	r3, [r2, #0]

            cols_8b_iterptr += STRIDE;
 8006960:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8006964:	3301      	adds	r3, #1
 8006966:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        }
        cols_8b_iterptr += 1 * 2;
 800696a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800696e:	3302      	adds	r3, #2
 8006970:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    for (i = 0; i < output_y; i++) {
 8006974:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006978:	3301      	adds	r3, #1
 800697a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800697e:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 8006982:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006986:	4293      	cmp	r3, r2
 8006988:	f6ff ab50 	blt.w	800602c <depthwise_kernel3x3_stride1_inplace_kernel_CHW+0x22>
    }
}
 800698c:	bf00      	nop
 800698e:	bf00      	nop
 8006990:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8006994:	46bd      	mov	sp, r7
 8006996:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800699a:	4770      	bx	lr

0800699c <depthwise_kernel5x5_stride1_inplace_CHW>:
                const int32_t output_offset, const int32_t input_offset,
                const int32_t output_activation_min,
                const int32_t output_activation_max, q7_t *output,
                const uint16_t output_x, const uint16_t output_y,
                const uint16_t output_ch, q15_t *runtime_buf, q7_t pad_value)
{
 800699c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800699e:	b097      	sub	sp, #92	@ 0x5c
 80069a0:	af0a      	add	r7, sp, #40	@ 0x28
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	4608      	mov	r0, r1
 80069a6:	4611      	mov	r1, r2
 80069a8:	461a      	mov	r2, r3
 80069aa:	4603      	mov	r3, r0
 80069ac:	817b      	strh	r3, [r7, #10]
 80069ae:	460b      	mov	r3, r1
 80069b0:	813b      	strh	r3, [r7, #8]
 80069b2:	4613      	mov	r3, r2
 80069b4:	80fb      	strh	r3, [r7, #6]

    uint16_t c,i,j;
    q7_t *cols_8b_start = (q7_t *)runtime_buf;
 80069b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80069b8:	61bb      	str	r3, [r7, #24]
    q7_t* cols_8b = (q7_t* )cols_8b_start;
 80069ba:	69bb      	ldr	r3, [r7, #24]
 80069bc:	627b      	str	r3, [r7, #36]	@ 0x24

    //Set padding value
    q7_t PAD8 = pad_value;
 80069be:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 80069c2:	75fb      	strb	r3, [r7, #23]
    /* setup the padding regions for Im2col buffers */
    //top region: 8bit x (input_x + pad_w * 2) x pad_h: unroll by pad value
    for(i = 0; i < input_x + 4; i++){
 80069c4:	2300      	movs	r3, #0
 80069c6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80069c8:	e00c      	b.n	80069e4 <depthwise_kernel5x5_stride1_inplace_CHW+0x48>
        *cols_8b++ = PAD8;
 80069ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069cc:	1c5a      	adds	r2, r3, #1
 80069ce:	627a      	str	r2, [r7, #36]	@ 0x24
 80069d0:	7dfa      	ldrb	r2, [r7, #23]
 80069d2:	701a      	strb	r2, [r3, #0]
        *cols_8b++ = PAD8;
 80069d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d6:	1c5a      	adds	r2, r3, #1
 80069d8:	627a      	str	r2, [r7, #36]	@ 0x24
 80069da:	7dfa      	ldrb	r2, [r7, #23]
 80069dc:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < input_x + 4; i++){
 80069de:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80069e0:	3301      	adds	r3, #1
 80069e2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80069e4:	897b      	ldrh	r3, [r7, #10]
 80069e6:	1cda      	adds	r2, r3, #3
 80069e8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80069ea:	429a      	cmp	r2, r3
 80069ec:	daed      	bge.n	80069ca <depthwise_kernel5x5_stride1_inplace_CHW+0x2e>
    }

    //middle regions: left and right regions
    for(i = 0; i < input_y; i++){
 80069ee:	2300      	movs	r3, #0
 80069f0:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80069f2:	e01a      	b.n	8006a2a <depthwise_kernel5x5_stride1_inplace_CHW+0x8e>
        *cols_8b++ = PAD8;//left
 80069f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f6:	1c5a      	adds	r2, r3, #1
 80069f8:	627a      	str	r2, [r7, #36]	@ 0x24
 80069fa:	7dfa      	ldrb	r2, [r7, #23]
 80069fc:	701a      	strb	r2, [r3, #0]
        *cols_8b++ = PAD8;//left
 80069fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a00:	1c5a      	adds	r2, r3, #1
 8006a02:	627a      	str	r2, [r7, #36]	@ 0x24
 8006a04:	7dfa      	ldrb	r2, [r7, #23]
 8006a06:	701a      	strb	r2, [r3, #0]
        cols_8b += input_x; //skip middle
 8006a08:	897b      	ldrh	r3, [r7, #10]
 8006a0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a0c:	4413      	add	r3, r2
 8006a0e:	627b      	str	r3, [r7, #36]	@ 0x24
        *cols_8b++ = PAD8;//right
 8006a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a12:	1c5a      	adds	r2, r3, #1
 8006a14:	627a      	str	r2, [r7, #36]	@ 0x24
 8006a16:	7dfa      	ldrb	r2, [r7, #23]
 8006a18:	701a      	strb	r2, [r3, #0]
        *cols_8b++ = PAD8;//right
 8006a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a1c:	1c5a      	adds	r2, r3, #1
 8006a1e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006a20:	7dfa      	ldrb	r2, [r7, #23]
 8006a22:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < input_y; i++){
 8006a24:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006a26:	3301      	adds	r3, #1
 8006a28:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006a2a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8006a2c:	893b      	ldrh	r3, [r7, #8]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d3e0      	bcc.n	80069f4 <depthwise_kernel5x5_stride1_inplace_CHW+0x58>
    }

    //bottom region: 8bit x (input_x + pad_w * 2) x pad_h: unroll by pad value
    for(i = 0; i < input_x + 4; i++){
 8006a32:	2300      	movs	r3, #0
 8006a34:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006a36:	e00c      	b.n	8006a52 <depthwise_kernel5x5_stride1_inplace_CHW+0xb6>
        *cols_8b++ = PAD8;
 8006a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a3a:	1c5a      	adds	r2, r3, #1
 8006a3c:	627a      	str	r2, [r7, #36]	@ 0x24
 8006a3e:	7dfa      	ldrb	r2, [r7, #23]
 8006a40:	701a      	strb	r2, [r3, #0]
        *cols_8b++ = PAD8;
 8006a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a44:	1c5a      	adds	r2, r3, #1
 8006a46:	627a      	str	r2, [r7, #36]	@ 0x24
 8006a48:	7dfa      	ldrb	r2, [r7, #23]
 8006a4a:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < input_x + 4; i++){
 8006a4c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006a4e:	3301      	adds	r3, #1
 8006a50:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006a52:	897b      	ldrh	r3, [r7, #10]
 8006a54:	1cda      	adds	r2, r3, #3
 8006a56:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	daed      	bge.n	8006a38 <depthwise_kernel5x5_stride1_inplace_CHW+0x9c>
    }

    const q7_t *src;
    const q7_t *ksrc = kernel;
 8006a5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a5e:	61fb      	str	r3, [r7, #28]

    for (c = 0; c < input_ch; c++){
 8006a60:	2300      	movs	r3, #0
 8006a62:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006a64:	e05f      	b.n	8006b26 <depthwise_kernel5x5_stride1_inplace_CHW+0x18a>
        cols_8b = (q7_t*)(cols_8b_start + 2 * (input_x) + 8); //skip 2 rows
 8006a66:	897b      	ldrh	r3, [r7, #10]
 8006a68:	005b      	lsls	r3, r3, #1
 8006a6a:	3308      	adds	r3, #8
 8006a6c:	69ba      	ldr	r2, [r7, #24]
 8006a6e:	4413      	add	r3, r2
 8006a70:	627b      	str	r3, [r7, #36]	@ 0x24
        src = input;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	623b      	str	r3, [r7, #32]
        for(i = 0; i < input_y; i++){
 8006a76:	2300      	movs	r3, #0
 8006a78:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006a7a:	e01d      	b.n	8006ab8 <depthwise_kernel5x5_stride1_inplace_CHW+0x11c>
            cols_8b += 2;//skip front
 8006a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a7e:	3302      	adds	r3, #2
 8006a80:	627b      	str	r3, [r7, #36]	@ 0x24
            for(j = 0; j < input_x; j++){
 8006a82:	2300      	movs	r3, #0
 8006a84:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006a86:	e00d      	b.n	8006aa4 <depthwise_kernel5x5_stride1_inplace_CHW+0x108>
                *cols_8b++ = *src;// + input_offset;
 8006a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a8a:	1c5a      	adds	r2, r3, #1
 8006a8c:	627a      	str	r2, [r7, #36]	@ 0x24
 8006a8e:	6a3a      	ldr	r2, [r7, #32]
 8006a90:	f992 2000 	ldrsb.w	r2, [r2]
 8006a94:	701a      	strb	r2, [r3, #0]
                src += input_ch;
 8006a96:	88fb      	ldrh	r3, [r7, #6]
 8006a98:	6a3a      	ldr	r2, [r7, #32]
 8006a9a:	4413      	add	r3, r2
 8006a9c:	623b      	str	r3, [r7, #32]
            for(j = 0; j < input_x; j++){
 8006a9e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006aa4:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8006aa6:	897b      	ldrh	r3, [r7, #10]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d3ed      	bcc.n	8006a88 <depthwise_kernel5x5_stride1_inplace_CHW+0xec>
            }
            cols_8b += 2;//skip end
 8006aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aae:	3302      	adds	r3, #2
 8006ab0:	627b      	str	r3, [r7, #36]	@ 0x24
        for(i = 0; i < input_y; i++){
 8006ab2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006ab8:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8006aba:	893b      	ldrh	r3, [r7, #8]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d3dd      	bcc.n	8006a7c <depthwise_kernel5x5_stride1_inplace_CHW+0xe0>
        }
        q7_t *inplace_out = input;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	613b      	str	r3, [r7, #16]
        depthwise_kernel5x5_stride1_inplace_kernel_CHW(output_y, output_x, bias++, biasR++, ksrc, output_mult++, output_shift++, inplace_out,output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8006ac4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8006ac6:	1d0b      	adds	r3, r1, #4
 8006ac8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006aca:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8006acc:	1d03      	adds	r3, r0, #4
 8006ace:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ad0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006ad2:	1d1a      	adds	r2, r3, #4
 8006ad4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006ad6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006ad8:	1d14      	adds	r4, r2, #4
 8006ada:	657c      	str	r4, [r7, #84]	@ 0x54
 8006adc:	88fc      	ldrh	r4, [r7, #6]
 8006ade:	f8b7 6070 	ldrh.w	r6, [r7, #112]	@ 0x70
 8006ae2:	f8b7 5074 	ldrh.w	r5, [r7, #116]	@ 0x74
 8006ae6:	9409      	str	r4, [sp, #36]	@ 0x24
 8006ae8:	897c      	ldrh	r4, [r7, #10]
 8006aea:	9408      	str	r4, [sp, #32]
 8006aec:	69bc      	ldr	r4, [r7, #24]
 8006aee:	9407      	str	r4, [sp, #28]
 8006af0:	6ebc      	ldr	r4, [r7, #104]	@ 0x68
 8006af2:	9406      	str	r4, [sp, #24]
 8006af4:	6e7c      	ldr	r4, [r7, #100]	@ 0x64
 8006af6:	9405      	str	r4, [sp, #20]
 8006af8:	6dfc      	ldr	r4, [r7, #92]	@ 0x5c
 8006afa:	9404      	str	r4, [sp, #16]
 8006afc:	693c      	ldr	r4, [r7, #16]
 8006afe:	9403      	str	r4, [sp, #12]
 8006b00:	9202      	str	r2, [sp, #8]
 8006b02:	9301      	str	r3, [sp, #4]
 8006b04:	69fb      	ldr	r3, [r7, #28]
 8006b06:	9300      	str	r3, [sp, #0]
 8006b08:	4603      	mov	r3, r0
 8006b0a:	460a      	mov	r2, r1
 8006b0c:	4631      	mov	r1, r6
 8006b0e:	4628      	mov	r0, r5
 8006b10:	f000 f812 	bl	8006b38 <depthwise_kernel5x5_stride1_inplace_kernel_CHW>
        ksrc += 25;
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	3319      	adds	r3, #25
 8006b18:	61fb      	str	r3, [r7, #28]
        input++;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	60fb      	str	r3, [r7, #12]
    for (c = 0; c < input_ch; c++){
 8006b20:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006b22:	3301      	adds	r3, #1
 8006b24:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006b26:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006b28:	88fb      	ldrh	r3, [r7, #6]
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d39b      	bcc.n	8006a66 <depthwise_kernel5x5_stride1_inplace_CHW+0xca>
    }
    return STATE_SUCCESS;
 8006b2e:	2300      	movs	r3, #0
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3734      	adds	r7, #52	@ 0x34
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006b38 <depthwise_kernel5x5_stride1_inplace_kernel_CHW>:
        const uint16_t output_y, const uint16_t output_x,
        const int32_t *bias, const int32_t *biasR, const q7_t *ksrc, const int32_t *multiplier,
        const int32_t *shift, q7_t *output, const int32_t output_offset,
        const int32_t activation_min, const int32_t activation_max,
        q7_t *cols_8b_iterptr, const uint16_t column_x, int channel_offset)
{
 8006b38:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006b3c:	b0c8      	sub	sp, #288	@ 0x120
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	653a      	str	r2, [r7, #80]	@ 0x50
 8006b42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b44:	4603      	mov	r3, r0
 8006b46:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    #define STRIDE 1
    int i, j;
    /* MACs for each output */
    for (i = 0; i < output_y; i++) {
 8006b50:	2300      	movs	r3, #0
 8006b52:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8006b56:	f001 b826 	b.w	8007ba6 <depthwise_kernel5x5_stride1_inplace_kernel_CHW+0x106e>
        for (j = 0; j < output_x / 2; j++) {
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8006b60:	f000 bd55 	b.w	800760e <depthwise_kernel5x5_stride1_inplace_kernel_CHW+0xad6>
            q7_t *cols_8b = cols_8b_iterptr;
 8006b64:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8006b68:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

            q31_t sum0 = bias[0] + biasR[0];
 8006b6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4413      	add	r3, r2
 8006b76:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            q31_t sum1 = bias[0] + biasR[0];
 8006b7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4413      	add	r3, r2
 8006b84:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            
            /* computation */
            sum0 += cols_8b[0]*ksrc[0];
 8006b88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b8c:	f993 3000 	ldrsb.w	r3, [r3]
 8006b90:	461a      	mov	r2, r3
 8006b92:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8006b96:	f993 3000 	ldrsb.w	r3, [r3]
 8006b9a:	fb03 f202 	mul.w	r2, r3, r2
 8006b9e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8006ba2:	4413      	add	r3, r2
 8006ba4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[1]*ksrc[0];
 8006ba8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006bac:	3301      	adds	r3, #1
 8006bae:	f993 3000 	ldrsb.w	r3, [r3]
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8006bb8:	f993 3000 	ldrsb.w	r3, [r3]
 8006bbc:	fb03 f202 	mul.w	r2, r3, r2
 8006bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bc4:	4413      	add	r3, r2
 8006bc6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[1]*ksrc[1];
 8006bca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006bce:	3301      	adds	r3, #1
 8006bd0:	f993 3000 	ldrsb.w	r3, [r3]
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8006bda:	3301      	adds	r3, #1
 8006bdc:	f993 3000 	ldrsb.w	r3, [r3]
 8006be0:	fb03 f202 	mul.w	r2, r3, r2
 8006be4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8006be8:	4413      	add	r3, r2
 8006bea:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[2]*ksrc[1];
 8006bee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006bf2:	3302      	adds	r3, #2
 8006bf4:	f993 3000 	ldrsb.w	r3, [r3]
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8006bfe:	3301      	adds	r3, #1
 8006c00:	f993 3000 	ldrsb.w	r3, [r3]
 8006c04:	fb03 f202 	mul.w	r2, r3, r2
 8006c08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c0c:	4413      	add	r3, r2
 8006c0e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[2]*ksrc[2];
 8006c12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c16:	3302      	adds	r3, #2
 8006c18:	f993 3000 	ldrsb.w	r3, [r3]
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8006c22:	3302      	adds	r3, #2
 8006c24:	f993 3000 	ldrsb.w	r3, [r3]
 8006c28:	fb03 f202 	mul.w	r2, r3, r2
 8006c2c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8006c30:	4413      	add	r3, r2
 8006c32:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[3]*ksrc[2];
 8006c36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c3a:	3303      	adds	r3, #3
 8006c3c:	f993 3000 	ldrsb.w	r3, [r3]
 8006c40:	461a      	mov	r2, r3
 8006c42:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8006c46:	3302      	adds	r3, #2
 8006c48:	f993 3000 	ldrsb.w	r3, [r3]
 8006c4c:	fb03 f202 	mul.w	r2, r3, r2
 8006c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c54:	4413      	add	r3, r2
 8006c56:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[3]*ksrc[3];
 8006c5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c5e:	3303      	adds	r3, #3
 8006c60:	f993 3000 	ldrsb.w	r3, [r3]
 8006c64:	461a      	mov	r2, r3
 8006c66:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8006c6a:	3303      	adds	r3, #3
 8006c6c:	f993 3000 	ldrsb.w	r3, [r3]
 8006c70:	fb03 f202 	mul.w	r2, r3, r2
 8006c74:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8006c78:	4413      	add	r3, r2
 8006c7a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[4]*ksrc[3];
 8006c7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c82:	3304      	adds	r3, #4
 8006c84:	f993 3000 	ldrsb.w	r3, [r3]
 8006c88:	461a      	mov	r2, r3
 8006c8a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8006c8e:	3303      	adds	r3, #3
 8006c90:	f993 3000 	ldrsb.w	r3, [r3]
 8006c94:	fb03 f202 	mul.w	r2, r3, r2
 8006c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c9c:	4413      	add	r3, r2
 8006c9e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[4]*ksrc[4];
 8006ca2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ca6:	3304      	adds	r3, #4
 8006ca8:	f993 3000 	ldrsb.w	r3, [r3]
 8006cac:	461a      	mov	r2, r3
 8006cae:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8006cb2:	3304      	adds	r3, #4
 8006cb4:	f993 3000 	ldrsb.w	r3, [r3]
 8006cb8:	fb03 f202 	mul.w	r2, r3, r2
 8006cbc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8006cc0:	4413      	add	r3, r2
 8006cc2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[5]*ksrc[4];
 8006cc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006cca:	3305      	adds	r3, #5
 8006ccc:	f993 3000 	ldrsb.w	r3, [r3]
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8006cd6:	3304      	adds	r3, #4
 8006cd8:	f993 3000 	ldrsb.w	r3, [r3]
 8006cdc:	fb03 f202 	mul.w	r2, r3, r2
 8006ce0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ce4:	4413      	add	r3, r2
 8006ce6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            cols_8b += column_x + 4;
 8006cea:	f8b7 3160 	ldrh.w	r3, [r7, #352]	@ 0x160
 8006cee:	1d1a      	adds	r2, r3, #4
 8006cf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006cf4:	4413      	add	r3, r2
 8006cf6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
            sum0 += cols_8b[0]*ksrc[5];
 8006cfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006cfe:	f993 3000 	ldrsb.w	r3, [r3]
 8006d02:	461a      	mov	r2, r3
 8006d04:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8006d08:	3305      	adds	r3, #5
 8006d0a:	f993 3000 	ldrsb.w	r3, [r3]
 8006d0e:	fb03 f202 	mul.w	r2, r3, r2
 8006d12:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8006d16:	4413      	add	r3, r2
 8006d18:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[1]*ksrc[5];
 8006d1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d20:	3301      	adds	r3, #1
 8006d22:	f993 3000 	ldrsb.w	r3, [r3]
 8006d26:	461a      	mov	r2, r3
 8006d28:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8006d2c:	3305      	adds	r3, #5
 8006d2e:	f993 3000 	ldrsb.w	r3, [r3]
 8006d32:	fb03 f202 	mul.w	r2, r3, r2
 8006d36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d3a:	4413      	add	r3, r2
 8006d3c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[1]*ksrc[6];
 8006d40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d44:	3301      	adds	r3, #1
 8006d46:	f993 3000 	ldrsb.w	r3, [r3]
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8006d50:	3306      	adds	r3, #6
 8006d52:	f993 3000 	ldrsb.w	r3, [r3]
 8006d56:	fb03 f202 	mul.w	r2, r3, r2
 8006d5a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8006d5e:	4413      	add	r3, r2
 8006d60:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[2]*ksrc[6];
 8006d64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d68:	3302      	adds	r3, #2
 8006d6a:	f993 3000 	ldrsb.w	r3, [r3]
 8006d6e:	461a      	mov	r2, r3
 8006d70:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8006d74:	3306      	adds	r3, #6
 8006d76:	f993 3000 	ldrsb.w	r3, [r3]
 8006d7a:	fb03 f202 	mul.w	r2, r3, r2
 8006d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d82:	4413      	add	r3, r2
 8006d84:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[2]*ksrc[7];
 8006d88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d8c:	3302      	adds	r3, #2
 8006d8e:	f993 3000 	ldrsb.w	r3, [r3]
 8006d92:	461a      	mov	r2, r3
 8006d94:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8006d98:	3307      	adds	r3, #7
 8006d9a:	f993 3000 	ldrsb.w	r3, [r3]
 8006d9e:	fb03 f202 	mul.w	r2, r3, r2
 8006da2:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8006da6:	4413      	add	r3, r2
 8006da8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[3]*ksrc[7];
 8006dac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006db0:	3303      	adds	r3, #3
 8006db2:	f993 3000 	ldrsb.w	r3, [r3]
 8006db6:	461a      	mov	r2, r3
 8006db8:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8006dbc:	3307      	adds	r3, #7
 8006dbe:	f993 3000 	ldrsb.w	r3, [r3]
 8006dc2:	fb03 f202 	mul.w	r2, r3, r2
 8006dc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dca:	4413      	add	r3, r2
 8006dcc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[3]*ksrc[8];
 8006dd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006dd4:	3303      	adds	r3, #3
 8006dd6:	f993 3000 	ldrsb.w	r3, [r3]
 8006dda:	461a      	mov	r2, r3
 8006ddc:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8006de0:	3308      	adds	r3, #8
 8006de2:	f993 3000 	ldrsb.w	r3, [r3]
 8006de6:	fb03 f202 	mul.w	r2, r3, r2
 8006dea:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8006dee:	4413      	add	r3, r2
 8006df0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[4]*ksrc[8];
 8006df4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006df8:	3304      	adds	r3, #4
 8006dfa:	f993 3000 	ldrsb.w	r3, [r3]
 8006dfe:	461a      	mov	r2, r3
 8006e00:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8006e04:	3308      	adds	r3, #8
 8006e06:	f993 3000 	ldrsb.w	r3, [r3]
 8006e0a:	fb03 f202 	mul.w	r2, r3, r2
 8006e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e12:	4413      	add	r3, r2
 8006e14:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[4]*ksrc[9];
 8006e18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e1c:	3304      	adds	r3, #4
 8006e1e:	f993 3000 	ldrsb.w	r3, [r3]
 8006e22:	461a      	mov	r2, r3
 8006e24:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8006e28:	3309      	adds	r3, #9
 8006e2a:	f993 3000 	ldrsb.w	r3, [r3]
 8006e2e:	fb03 f202 	mul.w	r2, r3, r2
 8006e32:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8006e36:	4413      	add	r3, r2
 8006e38:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[5]*ksrc[9];
 8006e3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e40:	3305      	adds	r3, #5
 8006e42:	f993 3000 	ldrsb.w	r3, [r3]
 8006e46:	461a      	mov	r2, r3
 8006e48:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8006e4c:	3309      	adds	r3, #9
 8006e4e:	f993 3000 	ldrsb.w	r3, [r3]
 8006e52:	fb03 f202 	mul.w	r2, r3, r2
 8006e56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e5a:	4413      	add	r3, r2
 8006e5c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            cols_8b += column_x + 4;
 8006e60:	f8b7 3160 	ldrh.w	r3, [r7, #352]	@ 0x160
 8006e64:	1d1a      	adds	r2, r3, #4
 8006e66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e6a:	4413      	add	r3, r2
 8006e6c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
            sum0 += cols_8b[0]*ksrc[10];
 8006e70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e74:	f993 3000 	ldrsb.w	r3, [r3]
 8006e78:	461a      	mov	r2, r3
 8006e7a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8006e7e:	330a      	adds	r3, #10
 8006e80:	f993 3000 	ldrsb.w	r3, [r3]
 8006e84:	fb03 f202 	mul.w	r2, r3, r2
 8006e88:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8006e8c:	4413      	add	r3, r2
 8006e8e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[1]*ksrc[10];
 8006e92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e96:	3301      	adds	r3, #1
 8006e98:	f993 3000 	ldrsb.w	r3, [r3]
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8006ea2:	330a      	adds	r3, #10
 8006ea4:	f993 3000 	ldrsb.w	r3, [r3]
 8006ea8:	fb03 f202 	mul.w	r2, r3, r2
 8006eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eb0:	4413      	add	r3, r2
 8006eb2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[1]*ksrc[11];
 8006eb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006eba:	3301      	adds	r3, #1
 8006ebc:	f993 3000 	ldrsb.w	r3, [r3]
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8006ec6:	330b      	adds	r3, #11
 8006ec8:	f993 3000 	ldrsb.w	r3, [r3]
 8006ecc:	fb03 f202 	mul.w	r2, r3, r2
 8006ed0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8006ed4:	4413      	add	r3, r2
 8006ed6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[2]*ksrc[11];
 8006eda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ede:	3302      	adds	r3, #2
 8006ee0:	f993 3000 	ldrsb.w	r3, [r3]
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8006eea:	330b      	adds	r3, #11
 8006eec:	f993 3000 	ldrsb.w	r3, [r3]
 8006ef0:	fb03 f202 	mul.w	r2, r3, r2
 8006ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ef8:	4413      	add	r3, r2
 8006efa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[2]*ksrc[12];
 8006efe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f02:	3302      	adds	r3, #2
 8006f04:	f993 3000 	ldrsb.w	r3, [r3]
 8006f08:	461a      	mov	r2, r3
 8006f0a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8006f0e:	330c      	adds	r3, #12
 8006f10:	f993 3000 	ldrsb.w	r3, [r3]
 8006f14:	fb03 f202 	mul.w	r2, r3, r2
 8006f18:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8006f1c:	4413      	add	r3, r2
 8006f1e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[3]*ksrc[12];
 8006f22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f26:	3303      	adds	r3, #3
 8006f28:	f993 3000 	ldrsb.w	r3, [r3]
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8006f32:	330c      	adds	r3, #12
 8006f34:	f993 3000 	ldrsb.w	r3, [r3]
 8006f38:	fb03 f202 	mul.w	r2, r3, r2
 8006f3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f40:	4413      	add	r3, r2
 8006f42:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[3]*ksrc[13];
 8006f46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f4a:	3303      	adds	r3, #3
 8006f4c:	f993 3000 	ldrsb.w	r3, [r3]
 8006f50:	461a      	mov	r2, r3
 8006f52:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8006f56:	330d      	adds	r3, #13
 8006f58:	f993 3000 	ldrsb.w	r3, [r3]
 8006f5c:	fb03 f202 	mul.w	r2, r3, r2
 8006f60:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8006f64:	4413      	add	r3, r2
 8006f66:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[4]*ksrc[13];
 8006f6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f6e:	3304      	adds	r3, #4
 8006f70:	f993 3000 	ldrsb.w	r3, [r3]
 8006f74:	461a      	mov	r2, r3
 8006f76:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8006f7a:	330d      	adds	r3, #13
 8006f7c:	f993 3000 	ldrsb.w	r3, [r3]
 8006f80:	fb03 f202 	mul.w	r2, r3, r2
 8006f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f88:	4413      	add	r3, r2
 8006f8a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[4]*ksrc[14];
 8006f8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f92:	3304      	adds	r3, #4
 8006f94:	f993 3000 	ldrsb.w	r3, [r3]
 8006f98:	461a      	mov	r2, r3
 8006f9a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8006f9e:	330e      	adds	r3, #14
 8006fa0:	f993 3000 	ldrsb.w	r3, [r3]
 8006fa4:	fb03 f202 	mul.w	r2, r3, r2
 8006fa8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8006fac:	4413      	add	r3, r2
 8006fae:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[5]*ksrc[14];
 8006fb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006fb6:	3305      	adds	r3, #5
 8006fb8:	f993 3000 	ldrsb.w	r3, [r3]
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8006fc2:	330e      	adds	r3, #14
 8006fc4:	f993 3000 	ldrsb.w	r3, [r3]
 8006fc8:	fb03 f202 	mul.w	r2, r3, r2
 8006fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fd0:	4413      	add	r3, r2
 8006fd2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            cols_8b += column_x + 4;
 8006fd6:	f8b7 3160 	ldrh.w	r3, [r7, #352]	@ 0x160
 8006fda:	1d1a      	adds	r2, r3, #4
 8006fdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006fe0:	4413      	add	r3, r2
 8006fe2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
            sum0 += cols_8b[0]*ksrc[15];
 8006fe6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006fea:	f993 3000 	ldrsb.w	r3, [r3]
 8006fee:	461a      	mov	r2, r3
 8006ff0:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8006ff4:	330f      	adds	r3, #15
 8006ff6:	f993 3000 	ldrsb.w	r3, [r3]
 8006ffa:	fb03 f202 	mul.w	r2, r3, r2
 8006ffe:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8007002:	4413      	add	r3, r2
 8007004:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[1]*ksrc[15];
 8007008:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800700c:	3301      	adds	r3, #1
 800700e:	f993 3000 	ldrsb.w	r3, [r3]
 8007012:	461a      	mov	r2, r3
 8007014:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007018:	330f      	adds	r3, #15
 800701a:	f993 3000 	ldrsb.w	r3, [r3]
 800701e:	fb03 f202 	mul.w	r2, r3, r2
 8007022:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007026:	4413      	add	r3, r2
 8007028:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[1]*ksrc[16];
 800702c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007030:	3301      	adds	r3, #1
 8007032:	f993 3000 	ldrsb.w	r3, [r3]
 8007036:	461a      	mov	r2, r3
 8007038:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800703c:	3310      	adds	r3, #16
 800703e:	f993 3000 	ldrsb.w	r3, [r3]
 8007042:	fb03 f202 	mul.w	r2, r3, r2
 8007046:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800704a:	4413      	add	r3, r2
 800704c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[2]*ksrc[16];
 8007050:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007054:	3302      	adds	r3, #2
 8007056:	f993 3000 	ldrsb.w	r3, [r3]
 800705a:	461a      	mov	r2, r3
 800705c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007060:	3310      	adds	r3, #16
 8007062:	f993 3000 	ldrsb.w	r3, [r3]
 8007066:	fb03 f202 	mul.w	r2, r3, r2
 800706a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800706e:	4413      	add	r3, r2
 8007070:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[2]*ksrc[17];
 8007074:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007078:	3302      	adds	r3, #2
 800707a:	f993 3000 	ldrsb.w	r3, [r3]
 800707e:	461a      	mov	r2, r3
 8007080:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007084:	3311      	adds	r3, #17
 8007086:	f993 3000 	ldrsb.w	r3, [r3]
 800708a:	fb03 f202 	mul.w	r2, r3, r2
 800708e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8007092:	4413      	add	r3, r2
 8007094:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[3]*ksrc[17];
 8007098:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800709c:	3303      	adds	r3, #3
 800709e:	f993 3000 	ldrsb.w	r3, [r3]
 80070a2:	461a      	mov	r2, r3
 80070a4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80070a8:	3311      	adds	r3, #17
 80070aa:	f993 3000 	ldrsb.w	r3, [r3]
 80070ae:	fb03 f202 	mul.w	r2, r3, r2
 80070b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070b6:	4413      	add	r3, r2
 80070b8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[3]*ksrc[18];
 80070bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070c0:	3303      	adds	r3, #3
 80070c2:	f993 3000 	ldrsb.w	r3, [r3]
 80070c6:	461a      	mov	r2, r3
 80070c8:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80070cc:	3312      	adds	r3, #18
 80070ce:	f993 3000 	ldrsb.w	r3, [r3]
 80070d2:	fb03 f202 	mul.w	r2, r3, r2
 80070d6:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80070da:	4413      	add	r3, r2
 80070dc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[4]*ksrc[18];
 80070e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070e4:	3304      	adds	r3, #4
 80070e6:	f993 3000 	ldrsb.w	r3, [r3]
 80070ea:	461a      	mov	r2, r3
 80070ec:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80070f0:	3312      	adds	r3, #18
 80070f2:	f993 3000 	ldrsb.w	r3, [r3]
 80070f6:	fb03 f202 	mul.w	r2, r3, r2
 80070fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070fe:	4413      	add	r3, r2
 8007100:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[4]*ksrc[19];
 8007104:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007108:	3304      	adds	r3, #4
 800710a:	f993 3000 	ldrsb.w	r3, [r3]
 800710e:	461a      	mov	r2, r3
 8007110:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007114:	3313      	adds	r3, #19
 8007116:	f993 3000 	ldrsb.w	r3, [r3]
 800711a:	fb03 f202 	mul.w	r2, r3, r2
 800711e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8007122:	4413      	add	r3, r2
 8007124:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[5]*ksrc[19];
 8007128:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800712c:	3305      	adds	r3, #5
 800712e:	f993 3000 	ldrsb.w	r3, [r3]
 8007132:	461a      	mov	r2, r3
 8007134:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007138:	3313      	adds	r3, #19
 800713a:	f993 3000 	ldrsb.w	r3, [r3]
 800713e:	fb03 f202 	mul.w	r2, r3, r2
 8007142:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007146:	4413      	add	r3, r2
 8007148:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            cols_8b += column_x + 4;
 800714c:	f8b7 3160 	ldrh.w	r3, [r7, #352]	@ 0x160
 8007150:	1d1a      	adds	r2, r3, #4
 8007152:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007156:	4413      	add	r3, r2
 8007158:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
            sum0 += cols_8b[0]*ksrc[20];
 800715c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007160:	f993 3000 	ldrsb.w	r3, [r3]
 8007164:	461a      	mov	r2, r3
 8007166:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800716a:	3314      	adds	r3, #20
 800716c:	f993 3000 	ldrsb.w	r3, [r3]
 8007170:	fb03 f202 	mul.w	r2, r3, r2
 8007174:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8007178:	4413      	add	r3, r2
 800717a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[1]*ksrc[20];
 800717e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007182:	3301      	adds	r3, #1
 8007184:	f993 3000 	ldrsb.w	r3, [r3]
 8007188:	461a      	mov	r2, r3
 800718a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800718e:	3314      	adds	r3, #20
 8007190:	f993 3000 	ldrsb.w	r3, [r3]
 8007194:	fb03 f202 	mul.w	r2, r3, r2
 8007198:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800719c:	4413      	add	r3, r2
 800719e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[1]*ksrc[21];
 80071a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071a6:	3301      	adds	r3, #1
 80071a8:	f993 3000 	ldrsb.w	r3, [r3]
 80071ac:	461a      	mov	r2, r3
 80071ae:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80071b2:	3315      	adds	r3, #21
 80071b4:	f993 3000 	ldrsb.w	r3, [r3]
 80071b8:	fb03 f202 	mul.w	r2, r3, r2
 80071bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80071c0:	4413      	add	r3, r2
 80071c2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[2]*ksrc[21];
 80071c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071ca:	3302      	adds	r3, #2
 80071cc:	f993 3000 	ldrsb.w	r3, [r3]
 80071d0:	461a      	mov	r2, r3
 80071d2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80071d6:	3315      	adds	r3, #21
 80071d8:	f993 3000 	ldrsb.w	r3, [r3]
 80071dc:	fb03 f202 	mul.w	r2, r3, r2
 80071e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071e4:	4413      	add	r3, r2
 80071e6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[2]*ksrc[22];
 80071ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071ee:	3302      	adds	r3, #2
 80071f0:	f993 3000 	ldrsb.w	r3, [r3]
 80071f4:	461a      	mov	r2, r3
 80071f6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80071fa:	3316      	adds	r3, #22
 80071fc:	f993 3000 	ldrsb.w	r3, [r3]
 8007200:	fb03 f202 	mul.w	r2, r3, r2
 8007204:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8007208:	4413      	add	r3, r2
 800720a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[3]*ksrc[22];
 800720e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007212:	3303      	adds	r3, #3
 8007214:	f993 3000 	ldrsb.w	r3, [r3]
 8007218:	461a      	mov	r2, r3
 800721a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800721e:	3316      	adds	r3, #22
 8007220:	f993 3000 	ldrsb.w	r3, [r3]
 8007224:	fb03 f202 	mul.w	r2, r3, r2
 8007228:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800722c:	4413      	add	r3, r2
 800722e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[3]*ksrc[23];
 8007232:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007236:	3303      	adds	r3, #3
 8007238:	f993 3000 	ldrsb.w	r3, [r3]
 800723c:	461a      	mov	r2, r3
 800723e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007242:	3317      	adds	r3, #23
 8007244:	f993 3000 	ldrsb.w	r3, [r3]
 8007248:	fb03 f202 	mul.w	r2, r3, r2
 800724c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8007250:	4413      	add	r3, r2
 8007252:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[4]*ksrc[23];
 8007256:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800725a:	3304      	adds	r3, #4
 800725c:	f993 3000 	ldrsb.w	r3, [r3]
 8007260:	461a      	mov	r2, r3
 8007262:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007266:	3317      	adds	r3, #23
 8007268:	f993 3000 	ldrsb.w	r3, [r3]
 800726c:	fb03 f202 	mul.w	r2, r3, r2
 8007270:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007274:	4413      	add	r3, r2
 8007276:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[4]*ksrc[24];
 800727a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800727e:	3304      	adds	r3, #4
 8007280:	f993 3000 	ldrsb.w	r3, [r3]
 8007284:	461a      	mov	r2, r3
 8007286:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800728a:	3318      	adds	r3, #24
 800728c:	f993 3000 	ldrsb.w	r3, [r3]
 8007290:	fb03 f202 	mul.w	r2, r3, r2
 8007294:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8007298:	4413      	add	r3, r2
 800729a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[5]*ksrc[24];
 800729e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072a2:	3305      	adds	r3, #5
 80072a4:	f993 3000 	ldrsb.w	r3, [r3]
 80072a8:	461a      	mov	r2, r3
 80072aa:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80072ae:	3318      	adds	r3, #24
 80072b0:	f993 3000 	ldrsb.w	r3, [r3]
 80072b4:	fb03 f202 	mul.w	r2, r3, r2
 80072b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072bc:	4413      	add	r3, r2
 80072be:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

            /* requantize */
            sum0 = arm_nn_requantize(sum0 + biasR[0], *multiplier, *shift);
 80072c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80072ca:	18d1      	adds	r1, r2, r3
 80072cc:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 80072dc:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80072e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80072e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80072e8:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 80072ec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80072f0:	4093      	lsls	r3, r2
 80072f2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80072f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80072fa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    q31_t result = 0;
 80072fe:	2300      	movs	r3, #0
 8007300:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    mult.word.low = 1 << 30;
 8007304:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007308:	66bb      	str	r3, [r7, #104]	@ 0x68
    mult.word.high = 0;
 800730a:	2300      	movs	r3, #0
 800730c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800730e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007312:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007316:	17da      	asrs	r2, r3, #31
 8007318:	633b      	str	r3, [r7, #48]	@ 0x30
 800731a:	637a      	str	r2, [r7, #52]	@ 0x34
 800731c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007320:	17da      	asrs	r2, r3, #31
 8007322:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007324:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007328:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800732a:	fb02 f203 	mul.w	r2, r2, r3
 800732e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007330:	6b3e      	ldr	r6, [r7, #48]	@ 0x30
 8007332:	fb06 f303 	mul.w	r3, r6, r3
 8007336:	4413      	add	r3, r2
 8007338:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800733a:	6abe      	ldr	r6, [r7, #40]	@ 0x28
 800733c:	fba2 8906 	umull	r8, r9, r2, r6
 8007340:	444b      	add	r3, r9
 8007342:	4699      	mov	r9, r3
 8007344:	eb10 0308 	adds.w	r3, r0, r8
 8007348:	60bb      	str	r3, [r7, #8]
 800734a:	eb41 0309 	adc.w	r3, r1, r9
 800734e:	60fb      	str	r3, [r7, #12]
 8007350:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007354:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
    result = (int32_t)(mult.long_long >> 31);
 8007358:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800735c:	f04f 0000 	mov.w	r0, #0
 8007360:	f04f 0100 	mov.w	r1, #0
 8007364:	0fd0      	lsrs	r0, r2, #31
 8007366:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800736a:	17d9      	asrs	r1, r3, #31
 800736c:	4603      	mov	r3, r0
 800736e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    return result;
 8007372:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8007376:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800737a:	2b00      	cmp	r3, #0
 800737c:	dc03      	bgt.n	8007386 <depthwise_kernel5x5_stride1_inplace_kernel_CHW+0x84e>
 800737e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007382:	425b      	negs	r3, r3
 8007384:	e000      	b.n	8007388 <depthwise_kernel5x5_stride1_inplace_kernel_CHW+0x850>
 8007386:	2300      	movs	r3, #0
 8007388:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 800738c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    q31_t result = 0;
 8007390:	2300      	movs	r3, #0
 8007392:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    const q31_t remainder_mask = (1 << exponent) - 1;
 8007396:	2201      	movs	r2, #1
 8007398:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800739c:	fa02 f303 	lsl.w	r3, r2, r3
 80073a0:	3b01      	subs	r3, #1
 80073a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    int32_t remainder = remainder_mask & dividend;
 80073a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80073aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80073ae:	4013      	ands	r3, r2
 80073b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    result = dividend >> exponent;
 80073b4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80073b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80073bc:	fa42 f303 	asr.w	r3, r2, r3
 80073c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    q31_t threshold = remainder_mask >> 1;
 80073c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80073c8:	105b      	asrs	r3, r3, #1
 80073ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (result < 0)
 80073ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	da04      	bge.n	80073e0 <depthwise_kernel5x5_stride1_inplace_kernel_CHW+0x8a8>
        threshold++;
 80073d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80073da:	3301      	adds	r3, #1
 80073dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (remainder > threshold)
 80073e0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80073e4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80073e8:	429a      	cmp	r2, r3
 80073ea:	dd04      	ble.n	80073f6 <depthwise_kernel5x5_stride1_inplace_kernel_CHW+0x8be>
        result++;
 80073ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80073f0:	3301      	adds	r3, #1
 80073f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    return result;
 80073f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80073fa:	bf00      	nop
 80073fc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum0 += output_offset;
 8007400:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8007404:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8007408:	4413      	add	r3, r2
 800740a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum0 = TN_MAX(sum0, activation_min);
 800740e:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8007412:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8007416:	4293      	cmp	r3, r2
 8007418:	bfb8      	it	lt
 800741a:	4613      	movlt	r3, r2
 800741c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum0 = TN_MIN(sum0, activation_max);
 8007420:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8007424:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8007428:	4293      	cmp	r3, r2
 800742a:	bfa8      	it	ge
 800742c:	4613      	movge	r3, r2
 800742e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8007432:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8007436:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800743a:	fb03 f202 	mul.w	r2, r3, r2
 800743e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8007442:	005b      	lsls	r3, r3, #1
 8007444:	441a      	add	r2, r3
 8007446:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800744a:	fb02 f303 	mul.w	r3, r2, r3
 800744e:	461a      	mov	r2, r3
 8007450:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007454:	441a      	add	r2, r3
 8007456:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800745a:	b25b      	sxtb	r3, r3
 800745c:	7013      	strb	r3, [r2, #0]

            sum1 = arm_nn_requantize(sum1 + biasR[0], *multiplier, *shift);
 800745e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007466:	18d1      	adds	r1, r2, r3
 8007468:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f8c7 1100 	str.w	r1, [r7, #256]	@ 0x100
 8007478:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 800747c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007480:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007484:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8007488:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800748c:	4093      	lsls	r3, r2
 800748e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007492:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007496:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    q31_t result = 0;
 800749a:	2300      	movs	r3, #0
 800749c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    mult.word.low = 1 << 30;
 80074a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80074a4:	663b      	str	r3, [r7, #96]	@ 0x60
    mult.word.high = 0;
 80074a6:	2300      	movs	r3, #0
 80074a8:	667b      	str	r3, [r7, #100]	@ 0x64
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80074aa:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 80074ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074b2:	17da      	asrs	r2, r3, #31
 80074b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80074b6:	647a      	str	r2, [r7, #68]	@ 0x44
 80074b8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80074bc:	17da      	asrs	r2, r3, #31
 80074be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80074c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80074c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80074c6:	fb02 f203 	mul.w	r2, r2, r3
 80074ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074cc:	6c3e      	ldr	r6, [r7, #64]	@ 0x40
 80074ce:	fb06 f303 	mul.w	r3, r6, r3
 80074d2:	4413      	add	r3, r2
 80074d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80074d6:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 80074d8:	fba2 4506 	umull	r4, r5, r2, r6
 80074dc:	442b      	add	r3, r5
 80074de:	461d      	mov	r5, r3
 80074e0:	1903      	adds	r3, r0, r4
 80074e2:	613b      	str	r3, [r7, #16]
 80074e4:	eb41 0305 	adc.w	r3, r1, r5
 80074e8:	617b      	str	r3, [r7, #20]
 80074ea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80074ee:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
    result = (int32_t)(mult.long_long >> 31);
 80074f2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80074f6:	f04f 0000 	mov.w	r0, #0
 80074fa:	f04f 0100 	mov.w	r1, #0
 80074fe:	0fd0      	lsrs	r0, r2, #31
 8007500:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8007504:	17d9      	asrs	r1, r3, #31
 8007506:	4603      	mov	r3, r0
 8007508:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    return result;
 800750c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8007510:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007514:	2b00      	cmp	r3, #0
 8007516:	dc03      	bgt.n	8007520 <depthwise_kernel5x5_stride1_inplace_kernel_CHW+0x9e8>
 8007518:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800751c:	425b      	negs	r3, r3
 800751e:	e000      	b.n	8007522 <depthwise_kernel5x5_stride1_inplace_kernel_CHW+0x9ea>
 8007520:	2300      	movs	r3, #0
 8007522:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 8007526:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    q31_t result = 0;
 800752a:	2300      	movs	r3, #0
 800752c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    const q31_t remainder_mask = (1 << exponent) - 1;
 8007530:	2201      	movs	r2, #1
 8007532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007536:	fa02 f303 	lsl.w	r3, r2, r3
 800753a:	3b01      	subs	r3, #1
 800753c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    int32_t remainder = remainder_mask & dividend;
 8007540:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8007544:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007548:	4013      	ands	r3, r2
 800754a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    result = dividend >> exponent;
 800754e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8007552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007556:	fa42 f303 	asr.w	r3, r2, r3
 800755a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    q31_t threshold = remainder_mask >> 1;
 800755e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007562:	105b      	asrs	r3, r3, #1
 8007564:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    if (result < 0)
 8007568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800756c:	2b00      	cmp	r3, #0
 800756e:	da04      	bge.n	800757a <depthwise_kernel5x5_stride1_inplace_kernel_CHW+0xa42>
        threshold++;
 8007570:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007574:	3301      	adds	r3, #1
 8007576:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    if (remainder > threshold)
 800757a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800757e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007582:	429a      	cmp	r2, r3
 8007584:	dd04      	ble.n	8007590 <depthwise_kernel5x5_stride1_inplace_kernel_CHW+0xa58>
        result++;
 8007586:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800758a:	3301      	adds	r3, #1
 800758c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    return result;
 8007590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8007594:	bf00      	nop
 8007596:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum1 += output_offset;
 800759a:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800759e:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80075a2:	4413      	add	r3, r2
 80075a4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum1 = TN_MAX(sum1, activation_min);
 80075a8:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 80075ac:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80075b0:	4293      	cmp	r3, r2
 80075b2:	bfb8      	it	lt
 80075b4:	4613      	movlt	r3, r2
 80075b6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum1 = TN_MIN(sum1, activation_max);
 80075ba:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 80075be:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80075c2:	4293      	cmp	r3, r2
 80075c4:	bfa8      	it	ge
 80075c6:	4613      	movge	r3, r2
 80075c8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;
 80075cc:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 80075d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80075d4:	fb03 f202 	mul.w	r2, r3, r2
 80075d8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80075dc:	005b      	lsls	r3, r3, #1
 80075de:	3301      	adds	r3, #1
 80075e0:	441a      	add	r2, r3
 80075e2:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80075e6:	fb02 f303 	mul.w	r3, r2, r3
 80075ea:	461a      	mov	r2, r3
 80075ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80075f0:	441a      	add	r2, r3
 80075f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075f6:	b25b      	sxtb	r3, r3
 80075f8:	7013      	strb	r3, [r2, #0]

            cols_8b_iterptr += STRIDE * 2;
 80075fa:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80075fe:	3302      	adds	r3, #2
 8007600:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        for (j = 0; j < output_x / 2; j++) {
 8007604:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8007608:	3301      	adds	r3, #1
 800760a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800760e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8007612:	085b      	lsrs	r3, r3, #1
 8007614:	b29b      	uxth	r3, r3
 8007616:	461a      	mov	r2, r3
 8007618:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800761c:	4293      	cmp	r3, r2
 800761e:	f6ff aaa1 	blt.w	8006b64 <depthwise_kernel5x5_stride1_inplace_kernel_CHW+0x2c>
        }
        if (output_x & 1) {
 8007622:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8007626:	f003 0301 	and.w	r3, r3, #1
 800762a:	2b00      	cmp	r3, #0
 800762c:	f000 82b1 	beq.w	8007b92 <depthwise_kernel5x5_stride1_inplace_kernel_CHW+0x105a>
            q7_t * cols_8b = cols_8b_iterptr;
 8007630:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8007634:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
            q31_t sum = bias[0] + biasR[0];
 8007638:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4413      	add	r3, r2
 8007642:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[0]*ksrc[0];
 8007646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800764a:	f993 3000 	ldrsb.w	r3, [r3]
 800764e:	461a      	mov	r2, r3
 8007650:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007654:	f993 3000 	ldrsb.w	r3, [r3]
 8007658:	fb03 f202 	mul.w	r2, r3, r2
 800765c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007660:	4413      	add	r3, r2
 8007662:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[1]*ksrc[1];
 8007666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800766a:	3301      	adds	r3, #1
 800766c:	f993 3000 	ldrsb.w	r3, [r3]
 8007670:	461a      	mov	r2, r3
 8007672:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007676:	3301      	adds	r3, #1
 8007678:	f993 3000 	ldrsb.w	r3, [r3]
 800767c:	fb03 f202 	mul.w	r2, r3, r2
 8007680:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007684:	4413      	add	r3, r2
 8007686:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[2]*ksrc[2];
 800768a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800768e:	3302      	adds	r3, #2
 8007690:	f993 3000 	ldrsb.w	r3, [r3]
 8007694:	461a      	mov	r2, r3
 8007696:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800769a:	3302      	adds	r3, #2
 800769c:	f993 3000 	ldrsb.w	r3, [r3]
 80076a0:	fb03 f202 	mul.w	r2, r3, r2
 80076a4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80076a8:	4413      	add	r3, r2
 80076aa:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[3]*ksrc[3];
 80076ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076b2:	3303      	adds	r3, #3
 80076b4:	f993 3000 	ldrsb.w	r3, [r3]
 80076b8:	461a      	mov	r2, r3
 80076ba:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80076be:	3303      	adds	r3, #3
 80076c0:	f993 3000 	ldrsb.w	r3, [r3]
 80076c4:	fb03 f202 	mul.w	r2, r3, r2
 80076c8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80076cc:	4413      	add	r3, r2
 80076ce:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[4]*ksrc[4];
 80076d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076d6:	3304      	adds	r3, #4
 80076d8:	f993 3000 	ldrsb.w	r3, [r3]
 80076dc:	461a      	mov	r2, r3
 80076de:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80076e2:	3304      	adds	r3, #4
 80076e4:	f993 3000 	ldrsb.w	r3, [r3]
 80076e8:	fb03 f202 	mul.w	r2, r3, r2
 80076ec:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80076f0:	4413      	add	r3, r2
 80076f2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            cols_8b += column_x + 4;
 80076f6:	f8b7 3160 	ldrh.w	r3, [r7, #352]	@ 0x160
 80076fa:	1d1a      	adds	r2, r3, #4
 80076fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007700:	4413      	add	r3, r2
 8007702:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
            sum += cols_8b[0]*ksrc[5];
 8007706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800770a:	f993 3000 	ldrsb.w	r3, [r3]
 800770e:	461a      	mov	r2, r3
 8007710:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007714:	3305      	adds	r3, #5
 8007716:	f993 3000 	ldrsb.w	r3, [r3]
 800771a:	fb03 f202 	mul.w	r2, r3, r2
 800771e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007722:	4413      	add	r3, r2
 8007724:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[1]*ksrc[6];
 8007728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800772c:	3301      	adds	r3, #1
 800772e:	f993 3000 	ldrsb.w	r3, [r3]
 8007732:	461a      	mov	r2, r3
 8007734:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007738:	3306      	adds	r3, #6
 800773a:	f993 3000 	ldrsb.w	r3, [r3]
 800773e:	fb03 f202 	mul.w	r2, r3, r2
 8007742:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007746:	4413      	add	r3, r2
 8007748:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[2]*ksrc[7];
 800774c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007750:	3302      	adds	r3, #2
 8007752:	f993 3000 	ldrsb.w	r3, [r3]
 8007756:	461a      	mov	r2, r3
 8007758:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800775c:	3307      	adds	r3, #7
 800775e:	f993 3000 	ldrsb.w	r3, [r3]
 8007762:	fb03 f202 	mul.w	r2, r3, r2
 8007766:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800776a:	4413      	add	r3, r2
 800776c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[3]*ksrc[8];
 8007770:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007774:	3303      	adds	r3, #3
 8007776:	f993 3000 	ldrsb.w	r3, [r3]
 800777a:	461a      	mov	r2, r3
 800777c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007780:	3308      	adds	r3, #8
 8007782:	f993 3000 	ldrsb.w	r3, [r3]
 8007786:	fb03 f202 	mul.w	r2, r3, r2
 800778a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800778e:	4413      	add	r3, r2
 8007790:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[4]*ksrc[9];
 8007794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007798:	3304      	adds	r3, #4
 800779a:	f993 3000 	ldrsb.w	r3, [r3]
 800779e:	461a      	mov	r2, r3
 80077a0:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80077a4:	3309      	adds	r3, #9
 80077a6:	f993 3000 	ldrsb.w	r3, [r3]
 80077aa:	fb03 f202 	mul.w	r2, r3, r2
 80077ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80077b2:	4413      	add	r3, r2
 80077b4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            cols_8b += column_x + 4;
 80077b8:	f8b7 3160 	ldrh.w	r3, [r7, #352]	@ 0x160
 80077bc:	1d1a      	adds	r2, r3, #4
 80077be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077c2:	4413      	add	r3, r2
 80077c4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
            sum += cols_8b[0]*ksrc[10];
 80077c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077cc:	f993 3000 	ldrsb.w	r3, [r3]
 80077d0:	461a      	mov	r2, r3
 80077d2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80077d6:	330a      	adds	r3, #10
 80077d8:	f993 3000 	ldrsb.w	r3, [r3]
 80077dc:	fb03 f202 	mul.w	r2, r3, r2
 80077e0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80077e4:	4413      	add	r3, r2
 80077e6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[1]*ksrc[11];
 80077ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077ee:	3301      	adds	r3, #1
 80077f0:	f993 3000 	ldrsb.w	r3, [r3]
 80077f4:	461a      	mov	r2, r3
 80077f6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80077fa:	330b      	adds	r3, #11
 80077fc:	f993 3000 	ldrsb.w	r3, [r3]
 8007800:	fb03 f202 	mul.w	r2, r3, r2
 8007804:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007808:	4413      	add	r3, r2
 800780a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[2]*ksrc[12];
 800780e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007812:	3302      	adds	r3, #2
 8007814:	f993 3000 	ldrsb.w	r3, [r3]
 8007818:	461a      	mov	r2, r3
 800781a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800781e:	330c      	adds	r3, #12
 8007820:	f993 3000 	ldrsb.w	r3, [r3]
 8007824:	fb03 f202 	mul.w	r2, r3, r2
 8007828:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800782c:	4413      	add	r3, r2
 800782e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[3]*ksrc[13];
 8007832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007836:	3303      	adds	r3, #3
 8007838:	f993 3000 	ldrsb.w	r3, [r3]
 800783c:	461a      	mov	r2, r3
 800783e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007842:	330d      	adds	r3, #13
 8007844:	f993 3000 	ldrsb.w	r3, [r3]
 8007848:	fb03 f202 	mul.w	r2, r3, r2
 800784c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007850:	4413      	add	r3, r2
 8007852:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[4]*ksrc[14];
 8007856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800785a:	3304      	adds	r3, #4
 800785c:	f993 3000 	ldrsb.w	r3, [r3]
 8007860:	461a      	mov	r2, r3
 8007862:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007866:	330e      	adds	r3, #14
 8007868:	f993 3000 	ldrsb.w	r3, [r3]
 800786c:	fb03 f202 	mul.w	r2, r3, r2
 8007870:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007874:	4413      	add	r3, r2
 8007876:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            cols_8b += column_x + 4;
 800787a:	f8b7 3160 	ldrh.w	r3, [r7, #352]	@ 0x160
 800787e:	1d1a      	adds	r2, r3, #4
 8007880:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007884:	4413      	add	r3, r2
 8007886:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
            sum += cols_8b[0]*ksrc[15];
 800788a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800788e:	f993 3000 	ldrsb.w	r3, [r3]
 8007892:	461a      	mov	r2, r3
 8007894:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007898:	330f      	adds	r3, #15
 800789a:	f993 3000 	ldrsb.w	r3, [r3]
 800789e:	fb03 f202 	mul.w	r2, r3, r2
 80078a2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80078a6:	4413      	add	r3, r2
 80078a8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[1]*ksrc[16];
 80078ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078b0:	3301      	adds	r3, #1
 80078b2:	f993 3000 	ldrsb.w	r3, [r3]
 80078b6:	461a      	mov	r2, r3
 80078b8:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80078bc:	3310      	adds	r3, #16
 80078be:	f993 3000 	ldrsb.w	r3, [r3]
 80078c2:	fb03 f202 	mul.w	r2, r3, r2
 80078c6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80078ca:	4413      	add	r3, r2
 80078cc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[2]*ksrc[17];
 80078d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078d4:	3302      	adds	r3, #2
 80078d6:	f993 3000 	ldrsb.w	r3, [r3]
 80078da:	461a      	mov	r2, r3
 80078dc:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80078e0:	3311      	adds	r3, #17
 80078e2:	f993 3000 	ldrsb.w	r3, [r3]
 80078e6:	fb03 f202 	mul.w	r2, r3, r2
 80078ea:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80078ee:	4413      	add	r3, r2
 80078f0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[3]*ksrc[18];
 80078f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078f8:	3303      	adds	r3, #3
 80078fa:	f993 3000 	ldrsb.w	r3, [r3]
 80078fe:	461a      	mov	r2, r3
 8007900:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007904:	3312      	adds	r3, #18
 8007906:	f993 3000 	ldrsb.w	r3, [r3]
 800790a:	fb03 f202 	mul.w	r2, r3, r2
 800790e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007912:	4413      	add	r3, r2
 8007914:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[4]*ksrc[19];
 8007918:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800791c:	3304      	adds	r3, #4
 800791e:	f993 3000 	ldrsb.w	r3, [r3]
 8007922:	461a      	mov	r2, r3
 8007924:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007928:	3313      	adds	r3, #19
 800792a:	f993 3000 	ldrsb.w	r3, [r3]
 800792e:	fb03 f202 	mul.w	r2, r3, r2
 8007932:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007936:	4413      	add	r3, r2
 8007938:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            cols_8b += column_x + 4;
 800793c:	f8b7 3160 	ldrh.w	r3, [r7, #352]	@ 0x160
 8007940:	1d1a      	adds	r2, r3, #4
 8007942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007946:	4413      	add	r3, r2
 8007948:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
            sum += cols_8b[0]*ksrc[20];
 800794c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007950:	f993 3000 	ldrsb.w	r3, [r3]
 8007954:	461a      	mov	r2, r3
 8007956:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800795a:	3314      	adds	r3, #20
 800795c:	f993 3000 	ldrsb.w	r3, [r3]
 8007960:	fb03 f202 	mul.w	r2, r3, r2
 8007964:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007968:	4413      	add	r3, r2
 800796a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[1]*ksrc[21];
 800796e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007972:	3301      	adds	r3, #1
 8007974:	f993 3000 	ldrsb.w	r3, [r3]
 8007978:	461a      	mov	r2, r3
 800797a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800797e:	3315      	adds	r3, #21
 8007980:	f993 3000 	ldrsb.w	r3, [r3]
 8007984:	fb03 f202 	mul.w	r2, r3, r2
 8007988:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800798c:	4413      	add	r3, r2
 800798e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[2]*ksrc[22];
 8007992:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007996:	3302      	adds	r3, #2
 8007998:	f993 3000 	ldrsb.w	r3, [r3]
 800799c:	461a      	mov	r2, r3
 800799e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80079a2:	3316      	adds	r3, #22
 80079a4:	f993 3000 	ldrsb.w	r3, [r3]
 80079a8:	fb03 f202 	mul.w	r2, r3, r2
 80079ac:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80079b0:	4413      	add	r3, r2
 80079b2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[3]*ksrc[23];
 80079b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079ba:	3303      	adds	r3, #3
 80079bc:	f993 3000 	ldrsb.w	r3, [r3]
 80079c0:	461a      	mov	r2, r3
 80079c2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80079c6:	3317      	adds	r3, #23
 80079c8:	f993 3000 	ldrsb.w	r3, [r3]
 80079cc:	fb03 f202 	mul.w	r2, r3, r2
 80079d0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80079d4:	4413      	add	r3, r2
 80079d6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[4]*ksrc[24];
 80079da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079de:	3304      	adds	r3, #4
 80079e0:	f993 3000 	ldrsb.w	r3, [r3]
 80079e4:	461a      	mov	r2, r3
 80079e6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80079ea:	3318      	adds	r3, #24
 80079ec:	f993 3000 	ldrsb.w	r3, [r3]
 80079f0:	fb03 f202 	mul.w	r2, r3, r2
 80079f4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80079f8:	4413      	add	r3, r2
 80079fa:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

            sum = arm_nn_requantize(sum + biasR[0], *multiplier, *shift);
 80079fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a00:	681a      	ldr	r2, [r3, #0]
 8007a02:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007a06:	18d1      	adds	r1, r2, r3
 8007a08:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8007a18:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8007a1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007a20:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007a24:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8007a28:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007a2c:	4093      	lsls	r3, r2
 8007a2e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007a32:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007a36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    q31_t result = 0;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    mult.word.low = 1 << 30;
 8007a40:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007a44:	65bb      	str	r3, [r7, #88]	@ 0x58
    mult.word.high = 0;
 8007a46:	2300      	movs	r3, #0
 8007a48:	65fb      	str	r3, [r7, #92]	@ 0x5c
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8007a4a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8007a4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007a52:	17da      	asrs	r2, r3, #31
 8007a54:	623b      	str	r3, [r7, #32]
 8007a56:	627a      	str	r2, [r7, #36]	@ 0x24
 8007a58:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007a5c:	17da      	asrs	r2, r3, #31
 8007a5e:	61bb      	str	r3, [r7, #24]
 8007a60:	61fa      	str	r2, [r7, #28]
 8007a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a64:	69ba      	ldr	r2, [r7, #24]
 8007a66:	fb02 f203 	mul.w	r2, r2, r3
 8007a6a:	69fb      	ldr	r3, [r7, #28]
 8007a6c:	6a3e      	ldr	r6, [r7, #32]
 8007a6e:	fb06 f303 	mul.w	r3, r6, r3
 8007a72:	4413      	add	r3, r2
 8007a74:	6a3a      	ldr	r2, [r7, #32]
 8007a76:	69be      	ldr	r6, [r7, #24]
 8007a78:	fba2 ab06 	umull	sl, fp, r2, r6
 8007a7c:	445b      	add	r3, fp
 8007a7e:	469b      	mov	fp, r3
 8007a80:	eb10 030a 	adds.w	r3, r0, sl
 8007a84:	603b      	str	r3, [r7, #0]
 8007a86:	eb41 030b 	adc.w	r3, r1, fp
 8007a8a:	607b      	str	r3, [r7, #4]
 8007a8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a90:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    result = (int32_t)(mult.long_long >> 31);
 8007a94:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007a98:	f04f 0000 	mov.w	r0, #0
 8007a9c:	f04f 0100 	mov.w	r1, #0
 8007aa0:	0fd0      	lsrs	r0, r2, #31
 8007aa2:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8007aa6:	17d9      	asrs	r1, r3, #31
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    return result;
 8007aae:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8007ab2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	dc03      	bgt.n	8007ac2 <depthwise_kernel5x5_stride1_inplace_kernel_CHW+0xf8a>
 8007aba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007abe:	425b      	negs	r3, r3
 8007ac0:	e000      	b.n	8007ac4 <depthwise_kernel5x5_stride1_inplace_kernel_CHW+0xf8c>
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8007ac8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    q31_t result = 0;
 8007acc:	2300      	movs	r3, #0
 8007ace:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    const q31_t remainder_mask = (1 << exponent) - 1;
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8007adc:	3b01      	subs	r3, #1
 8007ade:	67fb      	str	r3, [r7, #124]	@ 0x7c
    int32_t remainder = remainder_mask & dividend;
 8007ae0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007ae4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007ae6:	4013      	ands	r3, r2
 8007ae8:	67bb      	str	r3, [r7, #120]	@ 0x78
    result = dividend >> exponent;
 8007aea:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007aee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007af2:	fa42 f303 	asr.w	r3, r2, r3
 8007af6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    q31_t threshold = remainder_mask >> 1;
 8007afa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007afc:	105b      	asrs	r3, r3, #1
 8007afe:	677b      	str	r3, [r7, #116]	@ 0x74
    if (result < 0)
 8007b00:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	da02      	bge.n	8007b0e <depthwise_kernel5x5_stride1_inplace_kernel_CHW+0xfd6>
        threshold++;
 8007b08:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	677b      	str	r3, [r7, #116]	@ 0x74
    if (remainder > threshold)
 8007b0e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8007b10:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007b12:	429a      	cmp	r2, r3
 8007b14:	dd04      	ble.n	8007b20 <depthwise_kernel5x5_stride1_inplace_kernel_CHW+0xfe8>
        result++;
 8007b16:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    return result;
 8007b20:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8007b24:	bf00      	nop
 8007b26:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += output_offset;
 8007b2a:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8007b2e:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8007b32:	4413      	add	r3, r2
 8007b34:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum = TN_MAX(sum, activation_min);
 8007b38:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8007b3c:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8007b40:	4293      	cmp	r3, r2
 8007b42:	bfb8      	it	lt
 8007b44:	4613      	movlt	r3, r2
 8007b46:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum = TN_MIN(sum, activation_max);
 8007b4a:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8007b4e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8007b52:	4293      	cmp	r3, r2
 8007b54:	bfa8      	it	ge
 8007b56:	4613      	movge	r3, r2
 8007b58:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 8007b5c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8007b60:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007b64:	fb03 f202 	mul.w	r2, r3, r2
 8007b68:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8007b6c:	4413      	add	r3, r2
 8007b6e:	1e5a      	subs	r2, r3, #1
 8007b70:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8007b74:	fb02 f303 	mul.w	r3, r2, r3
 8007b78:	461a      	mov	r2, r3
 8007b7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b7e:	441a      	add	r2, r3
 8007b80:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007b84:	b25b      	sxtb	r3, r3
 8007b86:	7013      	strb	r3, [r2, #0]

            cols_8b_iterptr += STRIDE;
 8007b88:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        }
        cols_8b_iterptr += 2 * 2;
 8007b92:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8007b96:	3304      	adds	r3, #4
 8007b98:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    for (i = 0; i < output_y; i++) {
 8007b9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8007ba6:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 8007baa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	f6fe afd3 	blt.w	8006b5a <depthwise_kernel5x5_stride1_inplace_kernel_CHW+0x22>
    }
}
 8007bb4:	bf00      	nop
 8007bb6:	bf00      	nop
 8007bb8:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007bc2:	4770      	bx	lr

08007bc4 <depthwise_kernel5x5_stride2_inplace_CHW>:
                const int32_t output_offset, const int32_t input_offset,
                const int32_t output_activation_min,
                const int32_t output_activation_max, q7_t *output,
                const uint16_t output_x, const uint16_t output_y,
                const uint16_t output_ch, q15_t *runtime_buf, q7_t pad_value)
{
 8007bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bc6:	b097      	sub	sp, #92	@ 0x5c
 8007bc8:	af0a      	add	r7, sp, #40	@ 0x28
 8007bca:	60f8      	str	r0, [r7, #12]
 8007bcc:	4608      	mov	r0, r1
 8007bce:	4611      	mov	r1, r2
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	817b      	strh	r3, [r7, #10]
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	813b      	strh	r3, [r7, #8]
 8007bda:	4613      	mov	r3, r2
 8007bdc:	80fb      	strh	r3, [r7, #6]

    uint16_t c,i,j;
    q7_t *cols_8b_start = (q7_t *)runtime_buf;
 8007bde:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007be0:	61bb      	str	r3, [r7, #24]
    q7_t* cols_8b = (q7_t* )cols_8b_start;
 8007be2:	69bb      	ldr	r3, [r7, #24]
 8007be4:	627b      	str	r3, [r7, #36]	@ 0x24

    //Set padding value
    q7_t PAD8 = pad_value;
 8007be6:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 8007bea:	75fb      	strb	r3, [r7, #23]
    /* setup the padding regions for Im2col buffers */
    //top region: 8bit x (input_x + pad_w * 2) x pad_h: unroll by pad value
    for(i = 0; i < input_x + 4; i++){
 8007bec:	2300      	movs	r3, #0
 8007bee:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8007bf0:	e00c      	b.n	8007c0c <depthwise_kernel5x5_stride2_inplace_CHW+0x48>
        *cols_8b++ = PAD8;
 8007bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf4:	1c5a      	adds	r2, r3, #1
 8007bf6:	627a      	str	r2, [r7, #36]	@ 0x24
 8007bf8:	7dfa      	ldrb	r2, [r7, #23]
 8007bfa:	701a      	strb	r2, [r3, #0]
        *cols_8b++ = PAD8;
 8007bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bfe:	1c5a      	adds	r2, r3, #1
 8007c00:	627a      	str	r2, [r7, #36]	@ 0x24
 8007c02:	7dfa      	ldrb	r2, [r7, #23]
 8007c04:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < input_x + 4; i++){
 8007c06:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007c08:	3301      	adds	r3, #1
 8007c0a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8007c0c:	897b      	ldrh	r3, [r7, #10]
 8007c0e:	1cda      	adds	r2, r3, #3
 8007c10:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007c12:	429a      	cmp	r2, r3
 8007c14:	daed      	bge.n	8007bf2 <depthwise_kernel5x5_stride2_inplace_CHW+0x2e>
    }

    //middle regions: left and right regions
    for(i = 0; i < input_y; i++){
 8007c16:	2300      	movs	r3, #0
 8007c18:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8007c1a:	e01a      	b.n	8007c52 <depthwise_kernel5x5_stride2_inplace_CHW+0x8e>
        *cols_8b++ = PAD8;//left
 8007c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c1e:	1c5a      	adds	r2, r3, #1
 8007c20:	627a      	str	r2, [r7, #36]	@ 0x24
 8007c22:	7dfa      	ldrb	r2, [r7, #23]
 8007c24:	701a      	strb	r2, [r3, #0]
        *cols_8b++ = PAD8;//left
 8007c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c28:	1c5a      	adds	r2, r3, #1
 8007c2a:	627a      	str	r2, [r7, #36]	@ 0x24
 8007c2c:	7dfa      	ldrb	r2, [r7, #23]
 8007c2e:	701a      	strb	r2, [r3, #0]
        cols_8b += input_x; //skip middle
 8007c30:	897b      	ldrh	r3, [r7, #10]
 8007c32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c34:	4413      	add	r3, r2
 8007c36:	627b      	str	r3, [r7, #36]	@ 0x24
        *cols_8b++ = PAD8;//right
 8007c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c3a:	1c5a      	adds	r2, r3, #1
 8007c3c:	627a      	str	r2, [r7, #36]	@ 0x24
 8007c3e:	7dfa      	ldrb	r2, [r7, #23]
 8007c40:	701a      	strb	r2, [r3, #0]
        *cols_8b++ = PAD8;//right
 8007c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c44:	1c5a      	adds	r2, r3, #1
 8007c46:	627a      	str	r2, [r7, #36]	@ 0x24
 8007c48:	7dfa      	ldrb	r2, [r7, #23]
 8007c4a:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < input_y; i++){
 8007c4c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007c4e:	3301      	adds	r3, #1
 8007c50:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8007c52:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8007c54:	893b      	ldrh	r3, [r7, #8]
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d3e0      	bcc.n	8007c1c <depthwise_kernel5x5_stride2_inplace_CHW+0x58>
    }

    //bottom region: 8bit x (input_x + pad_w * 2) x pad_h: unroll by pad value
    for(i = 0; i < input_x + 4; i++){
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8007c5e:	e00c      	b.n	8007c7a <depthwise_kernel5x5_stride2_inplace_CHW+0xb6>
        *cols_8b++ = PAD8;
 8007c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c62:	1c5a      	adds	r2, r3, #1
 8007c64:	627a      	str	r2, [r7, #36]	@ 0x24
 8007c66:	7dfa      	ldrb	r2, [r7, #23]
 8007c68:	701a      	strb	r2, [r3, #0]
        *cols_8b++ = PAD8;
 8007c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c6c:	1c5a      	adds	r2, r3, #1
 8007c6e:	627a      	str	r2, [r7, #36]	@ 0x24
 8007c70:	7dfa      	ldrb	r2, [r7, #23]
 8007c72:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < input_x + 4; i++){
 8007c74:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007c76:	3301      	adds	r3, #1
 8007c78:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8007c7a:	897b      	ldrh	r3, [r7, #10]
 8007c7c:	1cda      	adds	r2, r3, #3
 8007c7e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007c80:	429a      	cmp	r2, r3
 8007c82:	daed      	bge.n	8007c60 <depthwise_kernel5x5_stride2_inplace_CHW+0x9c>
    }

    const q7_t *src;
    const q7_t *ksrc = kernel;
 8007c84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c86:	61fb      	str	r3, [r7, #28]

    for (c = 0; c < input_ch; c++){
 8007c88:	2300      	movs	r3, #0
 8007c8a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8007c8c:	e05f      	b.n	8007d4e <depthwise_kernel5x5_stride2_inplace_CHW+0x18a>
        cols_8b = (q7_t*)(cols_8b_start + 2 * (input_x) + 8); //skip 2 rows
 8007c8e:	897b      	ldrh	r3, [r7, #10]
 8007c90:	005b      	lsls	r3, r3, #1
 8007c92:	3308      	adds	r3, #8
 8007c94:	69ba      	ldr	r2, [r7, #24]
 8007c96:	4413      	add	r3, r2
 8007c98:	627b      	str	r3, [r7, #36]	@ 0x24
        src = input;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	623b      	str	r3, [r7, #32]
        for(i = 0; i < input_y; i++){
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8007ca2:	e01d      	b.n	8007ce0 <depthwise_kernel5x5_stride2_inplace_CHW+0x11c>
            cols_8b += 2;//skip front
 8007ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ca6:	3302      	adds	r3, #2
 8007ca8:	627b      	str	r3, [r7, #36]	@ 0x24
            for(j = 0; j < input_x; j++){
 8007caa:	2300      	movs	r3, #0
 8007cac:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8007cae:	e00d      	b.n	8007ccc <depthwise_kernel5x5_stride2_inplace_CHW+0x108>
                *cols_8b++ = *src;// + input_offset;
 8007cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cb2:	1c5a      	adds	r2, r3, #1
 8007cb4:	627a      	str	r2, [r7, #36]	@ 0x24
 8007cb6:	6a3a      	ldr	r2, [r7, #32]
 8007cb8:	f992 2000 	ldrsb.w	r2, [r2]
 8007cbc:	701a      	strb	r2, [r3, #0]
                src += input_ch;
 8007cbe:	88fb      	ldrh	r3, [r7, #6]
 8007cc0:	6a3a      	ldr	r2, [r7, #32]
 8007cc2:	4413      	add	r3, r2
 8007cc4:	623b      	str	r3, [r7, #32]
            for(j = 0; j < input_x; j++){
 8007cc6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007cc8:	3301      	adds	r3, #1
 8007cca:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8007ccc:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8007cce:	897b      	ldrh	r3, [r7, #10]
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d3ed      	bcc.n	8007cb0 <depthwise_kernel5x5_stride2_inplace_CHW+0xec>
            }
            cols_8b += 2;//skip end
 8007cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd6:	3302      	adds	r3, #2
 8007cd8:	627b      	str	r3, [r7, #36]	@ 0x24
        for(i = 0; i < input_y; i++){
 8007cda:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007cdc:	3301      	adds	r3, #1
 8007cde:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8007ce0:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8007ce2:	893b      	ldrh	r3, [r7, #8]
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d3dd      	bcc.n	8007ca4 <depthwise_kernel5x5_stride2_inplace_CHW+0xe0>
        }
        q7_t *inplace_out = input;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	613b      	str	r3, [r7, #16]
        depthwise_kernel5x5_stride2_inplace_kernel_CHW(output_y, output_x, bias++, biasR++, ksrc, output_mult++, output_shift++, inplace_out,output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8007cec:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8007cee:	1d0b      	adds	r3, r1, #4
 8007cf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007cf2:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8007cf4:	1d03      	adds	r3, r0, #4
 8007cf6:	653b      	str	r3, [r7, #80]	@ 0x50
 8007cf8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007cfa:	1d1a      	adds	r2, r3, #4
 8007cfc:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007cfe:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007d00:	1d14      	adds	r4, r2, #4
 8007d02:	657c      	str	r4, [r7, #84]	@ 0x54
 8007d04:	88fc      	ldrh	r4, [r7, #6]
 8007d06:	f8b7 6070 	ldrh.w	r6, [r7, #112]	@ 0x70
 8007d0a:	f8b7 5074 	ldrh.w	r5, [r7, #116]	@ 0x74
 8007d0e:	9409      	str	r4, [sp, #36]	@ 0x24
 8007d10:	897c      	ldrh	r4, [r7, #10]
 8007d12:	9408      	str	r4, [sp, #32]
 8007d14:	69bc      	ldr	r4, [r7, #24]
 8007d16:	9407      	str	r4, [sp, #28]
 8007d18:	6ebc      	ldr	r4, [r7, #104]	@ 0x68
 8007d1a:	9406      	str	r4, [sp, #24]
 8007d1c:	6e7c      	ldr	r4, [r7, #100]	@ 0x64
 8007d1e:	9405      	str	r4, [sp, #20]
 8007d20:	6dfc      	ldr	r4, [r7, #92]	@ 0x5c
 8007d22:	9404      	str	r4, [sp, #16]
 8007d24:	693c      	ldr	r4, [r7, #16]
 8007d26:	9403      	str	r4, [sp, #12]
 8007d28:	9202      	str	r2, [sp, #8]
 8007d2a:	9301      	str	r3, [sp, #4]
 8007d2c:	69fb      	ldr	r3, [r7, #28]
 8007d2e:	9300      	str	r3, [sp, #0]
 8007d30:	4603      	mov	r3, r0
 8007d32:	460a      	mov	r2, r1
 8007d34:	4631      	mov	r1, r6
 8007d36:	4628      	mov	r0, r5
 8007d38:	f000 f812 	bl	8007d60 <depthwise_kernel5x5_stride2_inplace_kernel_CHW>
        ksrc += 25;
 8007d3c:	69fb      	ldr	r3, [r7, #28]
 8007d3e:	3319      	adds	r3, #25
 8007d40:	61fb      	str	r3, [r7, #28]
        input++;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	3301      	adds	r3, #1
 8007d46:	60fb      	str	r3, [r7, #12]
    for (c = 0; c < input_ch; c++){
 8007d48:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8007d4e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007d50:	88fb      	ldrh	r3, [r7, #6]
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d39b      	bcc.n	8007c8e <depthwise_kernel5x5_stride2_inplace_CHW+0xca>
    }
    return STATE_SUCCESS;
 8007d56:	2300      	movs	r3, #0
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3734      	adds	r7, #52	@ 0x34
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007d60 <depthwise_kernel5x5_stride2_inplace_kernel_CHW>:
        const uint16_t output_y, const uint16_t output_x,
        const int32_t *bias, const int32_t *biasR, const q7_t *ksrc, const int32_t *multiplier,
        const int32_t *shift, q7_t *output, const int32_t output_offset,
        const int32_t activation_min, const int32_t activation_max,
        q7_t *cols_8b_iterptr, const uint16_t column_x, int channel_offset)
{
 8007d60:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007d64:	b0c8      	sub	sp, #288	@ 0x120
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	653a      	str	r2, [r7, #80]	@ 0x50
 8007d6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8007d72:	460b      	mov	r3, r1
 8007d74:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    #define STRIDE 2
    int i, j;
    /* MACs for each output */
    for (i = 0; i < output_y; i++) {
 8007d78:	2300      	movs	r3, #0
 8007d7a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8007d7e:	f001 b836 	b.w	8008dee <depthwise_kernel5x5_stride2_inplace_kernel_CHW+0x108e>
        for (j = 0; j < output_x / 2; j++) {
 8007d82:	2300      	movs	r3, #0
 8007d84:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8007d88:	f000 bd55 	b.w	8008836 <depthwise_kernel5x5_stride2_inplace_kernel_CHW+0xad6>
            q7_t *cols_8b = cols_8b_iterptr;
 8007d8c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8007d90:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

            q31_t sum0 = bias[0] + biasR[0];
 8007d94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4413      	add	r3, r2
 8007d9e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            q31_t sum1 = bias[0] + biasR[0];
 8007da2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4413      	add	r3, r2
 8007dac:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            
            /* computation */
            sum0 += cols_8b[0]*ksrc[0];
 8007db0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007db4:	f993 3000 	ldrsb.w	r3, [r3]
 8007db8:	461a      	mov	r2, r3
 8007dba:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007dbe:	f993 3000 	ldrsb.w	r3, [r3]
 8007dc2:	fb03 f202 	mul.w	r2, r3, r2
 8007dc6:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8007dca:	4413      	add	r3, r2
 8007dcc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[2]*ksrc[0];
 8007dd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007dd4:	3302      	adds	r3, #2
 8007dd6:	f993 3000 	ldrsb.w	r3, [r3]
 8007dda:	461a      	mov	r2, r3
 8007ddc:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007de0:	f993 3000 	ldrsb.w	r3, [r3]
 8007de4:	fb03 f202 	mul.w	r2, r3, r2
 8007de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dec:	4413      	add	r3, r2
 8007dee:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[1]*ksrc[1];
 8007df2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007df6:	3301      	adds	r3, #1
 8007df8:	f993 3000 	ldrsb.w	r3, [r3]
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007e02:	3301      	adds	r3, #1
 8007e04:	f993 3000 	ldrsb.w	r3, [r3]
 8007e08:	fb03 f202 	mul.w	r2, r3, r2
 8007e0c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8007e10:	4413      	add	r3, r2
 8007e12:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[3]*ksrc[1];
 8007e16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e1a:	3303      	adds	r3, #3
 8007e1c:	f993 3000 	ldrsb.w	r3, [r3]
 8007e20:	461a      	mov	r2, r3
 8007e22:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007e26:	3301      	adds	r3, #1
 8007e28:	f993 3000 	ldrsb.w	r3, [r3]
 8007e2c:	fb03 f202 	mul.w	r2, r3, r2
 8007e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e34:	4413      	add	r3, r2
 8007e36:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[2]*ksrc[2];
 8007e3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e3e:	3302      	adds	r3, #2
 8007e40:	f993 3000 	ldrsb.w	r3, [r3]
 8007e44:	461a      	mov	r2, r3
 8007e46:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007e4a:	3302      	adds	r3, #2
 8007e4c:	f993 3000 	ldrsb.w	r3, [r3]
 8007e50:	fb03 f202 	mul.w	r2, r3, r2
 8007e54:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8007e58:	4413      	add	r3, r2
 8007e5a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[4]*ksrc[2];
 8007e5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e62:	3304      	adds	r3, #4
 8007e64:	f993 3000 	ldrsb.w	r3, [r3]
 8007e68:	461a      	mov	r2, r3
 8007e6a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007e6e:	3302      	adds	r3, #2
 8007e70:	f993 3000 	ldrsb.w	r3, [r3]
 8007e74:	fb03 f202 	mul.w	r2, r3, r2
 8007e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e7c:	4413      	add	r3, r2
 8007e7e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[3]*ksrc[3];
 8007e82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e86:	3303      	adds	r3, #3
 8007e88:	f993 3000 	ldrsb.w	r3, [r3]
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007e92:	3303      	adds	r3, #3
 8007e94:	f993 3000 	ldrsb.w	r3, [r3]
 8007e98:	fb03 f202 	mul.w	r2, r3, r2
 8007e9c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8007ea0:	4413      	add	r3, r2
 8007ea2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[5]*ksrc[3];
 8007ea6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007eaa:	3305      	adds	r3, #5
 8007eac:	f993 3000 	ldrsb.w	r3, [r3]
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007eb6:	3303      	adds	r3, #3
 8007eb8:	f993 3000 	ldrsb.w	r3, [r3]
 8007ebc:	fb03 f202 	mul.w	r2, r3, r2
 8007ec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ec4:	4413      	add	r3, r2
 8007ec6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[4]*ksrc[4];
 8007eca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ece:	3304      	adds	r3, #4
 8007ed0:	f993 3000 	ldrsb.w	r3, [r3]
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007eda:	3304      	adds	r3, #4
 8007edc:	f993 3000 	ldrsb.w	r3, [r3]
 8007ee0:	fb03 f202 	mul.w	r2, r3, r2
 8007ee4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8007ee8:	4413      	add	r3, r2
 8007eea:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[6]*ksrc[4];
 8007eee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ef2:	3306      	adds	r3, #6
 8007ef4:	f993 3000 	ldrsb.w	r3, [r3]
 8007ef8:	461a      	mov	r2, r3
 8007efa:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007efe:	3304      	adds	r3, #4
 8007f00:	f993 3000 	ldrsb.w	r3, [r3]
 8007f04:	fb03 f202 	mul.w	r2, r3, r2
 8007f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f0c:	4413      	add	r3, r2
 8007f0e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            cols_8b += column_x + 4;
 8007f12:	f8b7 3160 	ldrh.w	r3, [r7, #352]	@ 0x160
 8007f16:	1d1a      	adds	r2, r3, #4
 8007f18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f1c:	4413      	add	r3, r2
 8007f1e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
            sum0 += cols_8b[0]*ksrc[5];
 8007f22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f26:	f993 3000 	ldrsb.w	r3, [r3]
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007f30:	3305      	adds	r3, #5
 8007f32:	f993 3000 	ldrsb.w	r3, [r3]
 8007f36:	fb03 f202 	mul.w	r2, r3, r2
 8007f3a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8007f3e:	4413      	add	r3, r2
 8007f40:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[2]*ksrc[5];
 8007f44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f48:	3302      	adds	r3, #2
 8007f4a:	f993 3000 	ldrsb.w	r3, [r3]
 8007f4e:	461a      	mov	r2, r3
 8007f50:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007f54:	3305      	adds	r3, #5
 8007f56:	f993 3000 	ldrsb.w	r3, [r3]
 8007f5a:	fb03 f202 	mul.w	r2, r3, r2
 8007f5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f62:	4413      	add	r3, r2
 8007f64:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[1]*ksrc[6];
 8007f68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	f993 3000 	ldrsb.w	r3, [r3]
 8007f72:	461a      	mov	r2, r3
 8007f74:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007f78:	3306      	adds	r3, #6
 8007f7a:	f993 3000 	ldrsb.w	r3, [r3]
 8007f7e:	fb03 f202 	mul.w	r2, r3, r2
 8007f82:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8007f86:	4413      	add	r3, r2
 8007f88:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[3]*ksrc[6];
 8007f8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f90:	3303      	adds	r3, #3
 8007f92:	f993 3000 	ldrsb.w	r3, [r3]
 8007f96:	461a      	mov	r2, r3
 8007f98:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007f9c:	3306      	adds	r3, #6
 8007f9e:	f993 3000 	ldrsb.w	r3, [r3]
 8007fa2:	fb03 f202 	mul.w	r2, r3, r2
 8007fa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007faa:	4413      	add	r3, r2
 8007fac:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[2]*ksrc[7];
 8007fb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fb4:	3302      	adds	r3, #2
 8007fb6:	f993 3000 	ldrsb.w	r3, [r3]
 8007fba:	461a      	mov	r2, r3
 8007fbc:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007fc0:	3307      	adds	r3, #7
 8007fc2:	f993 3000 	ldrsb.w	r3, [r3]
 8007fc6:	fb03 f202 	mul.w	r2, r3, r2
 8007fca:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8007fce:	4413      	add	r3, r2
 8007fd0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[4]*ksrc[7];
 8007fd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fd8:	3304      	adds	r3, #4
 8007fda:	f993 3000 	ldrsb.w	r3, [r3]
 8007fde:	461a      	mov	r2, r3
 8007fe0:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007fe4:	3307      	adds	r3, #7
 8007fe6:	f993 3000 	ldrsb.w	r3, [r3]
 8007fea:	fb03 f202 	mul.w	r2, r3, r2
 8007fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ff2:	4413      	add	r3, r2
 8007ff4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[3]*ksrc[8];
 8007ff8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ffc:	3303      	adds	r3, #3
 8007ffe:	f993 3000 	ldrsb.w	r3, [r3]
 8008002:	461a      	mov	r2, r3
 8008004:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008008:	3308      	adds	r3, #8
 800800a:	f993 3000 	ldrsb.w	r3, [r3]
 800800e:	fb03 f202 	mul.w	r2, r3, r2
 8008012:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8008016:	4413      	add	r3, r2
 8008018:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[5]*ksrc[8];
 800801c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008020:	3305      	adds	r3, #5
 8008022:	f993 3000 	ldrsb.w	r3, [r3]
 8008026:	461a      	mov	r2, r3
 8008028:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800802c:	3308      	adds	r3, #8
 800802e:	f993 3000 	ldrsb.w	r3, [r3]
 8008032:	fb03 f202 	mul.w	r2, r3, r2
 8008036:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800803a:	4413      	add	r3, r2
 800803c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[4]*ksrc[9];
 8008040:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008044:	3304      	adds	r3, #4
 8008046:	f993 3000 	ldrsb.w	r3, [r3]
 800804a:	461a      	mov	r2, r3
 800804c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008050:	3309      	adds	r3, #9
 8008052:	f993 3000 	ldrsb.w	r3, [r3]
 8008056:	fb03 f202 	mul.w	r2, r3, r2
 800805a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800805e:	4413      	add	r3, r2
 8008060:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[6]*ksrc[9];
 8008064:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008068:	3306      	adds	r3, #6
 800806a:	f993 3000 	ldrsb.w	r3, [r3]
 800806e:	461a      	mov	r2, r3
 8008070:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008074:	3309      	adds	r3, #9
 8008076:	f993 3000 	ldrsb.w	r3, [r3]
 800807a:	fb03 f202 	mul.w	r2, r3, r2
 800807e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008082:	4413      	add	r3, r2
 8008084:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            cols_8b += column_x + 4;
 8008088:	f8b7 3160 	ldrh.w	r3, [r7, #352]	@ 0x160
 800808c:	1d1a      	adds	r2, r3, #4
 800808e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008092:	4413      	add	r3, r2
 8008094:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
            sum0 += cols_8b[0]*ksrc[10];
 8008098:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800809c:	f993 3000 	ldrsb.w	r3, [r3]
 80080a0:	461a      	mov	r2, r3
 80080a2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80080a6:	330a      	adds	r3, #10
 80080a8:	f993 3000 	ldrsb.w	r3, [r3]
 80080ac:	fb03 f202 	mul.w	r2, r3, r2
 80080b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80080b4:	4413      	add	r3, r2
 80080b6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[2]*ksrc[10];
 80080ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080be:	3302      	adds	r3, #2
 80080c0:	f993 3000 	ldrsb.w	r3, [r3]
 80080c4:	461a      	mov	r2, r3
 80080c6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80080ca:	330a      	adds	r3, #10
 80080cc:	f993 3000 	ldrsb.w	r3, [r3]
 80080d0:	fb03 f202 	mul.w	r2, r3, r2
 80080d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080d8:	4413      	add	r3, r2
 80080da:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[1]*ksrc[11];
 80080de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080e2:	3301      	adds	r3, #1
 80080e4:	f993 3000 	ldrsb.w	r3, [r3]
 80080e8:	461a      	mov	r2, r3
 80080ea:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80080ee:	330b      	adds	r3, #11
 80080f0:	f993 3000 	ldrsb.w	r3, [r3]
 80080f4:	fb03 f202 	mul.w	r2, r3, r2
 80080f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80080fc:	4413      	add	r3, r2
 80080fe:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[3]*ksrc[11];
 8008102:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008106:	3303      	adds	r3, #3
 8008108:	f993 3000 	ldrsb.w	r3, [r3]
 800810c:	461a      	mov	r2, r3
 800810e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008112:	330b      	adds	r3, #11
 8008114:	f993 3000 	ldrsb.w	r3, [r3]
 8008118:	fb03 f202 	mul.w	r2, r3, r2
 800811c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008120:	4413      	add	r3, r2
 8008122:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[2]*ksrc[12];
 8008126:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800812a:	3302      	adds	r3, #2
 800812c:	f993 3000 	ldrsb.w	r3, [r3]
 8008130:	461a      	mov	r2, r3
 8008132:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008136:	330c      	adds	r3, #12
 8008138:	f993 3000 	ldrsb.w	r3, [r3]
 800813c:	fb03 f202 	mul.w	r2, r3, r2
 8008140:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8008144:	4413      	add	r3, r2
 8008146:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[4]*ksrc[12];
 800814a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800814e:	3304      	adds	r3, #4
 8008150:	f993 3000 	ldrsb.w	r3, [r3]
 8008154:	461a      	mov	r2, r3
 8008156:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800815a:	330c      	adds	r3, #12
 800815c:	f993 3000 	ldrsb.w	r3, [r3]
 8008160:	fb03 f202 	mul.w	r2, r3, r2
 8008164:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008168:	4413      	add	r3, r2
 800816a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[3]*ksrc[13];
 800816e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008172:	3303      	adds	r3, #3
 8008174:	f993 3000 	ldrsb.w	r3, [r3]
 8008178:	461a      	mov	r2, r3
 800817a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800817e:	330d      	adds	r3, #13
 8008180:	f993 3000 	ldrsb.w	r3, [r3]
 8008184:	fb03 f202 	mul.w	r2, r3, r2
 8008188:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800818c:	4413      	add	r3, r2
 800818e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[5]*ksrc[13];
 8008192:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008196:	3305      	adds	r3, #5
 8008198:	f993 3000 	ldrsb.w	r3, [r3]
 800819c:	461a      	mov	r2, r3
 800819e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80081a2:	330d      	adds	r3, #13
 80081a4:	f993 3000 	ldrsb.w	r3, [r3]
 80081a8:	fb03 f202 	mul.w	r2, r3, r2
 80081ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081b0:	4413      	add	r3, r2
 80081b2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[4]*ksrc[14];
 80081b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081ba:	3304      	adds	r3, #4
 80081bc:	f993 3000 	ldrsb.w	r3, [r3]
 80081c0:	461a      	mov	r2, r3
 80081c2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80081c6:	330e      	adds	r3, #14
 80081c8:	f993 3000 	ldrsb.w	r3, [r3]
 80081cc:	fb03 f202 	mul.w	r2, r3, r2
 80081d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80081d4:	4413      	add	r3, r2
 80081d6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[6]*ksrc[14];
 80081da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081de:	3306      	adds	r3, #6
 80081e0:	f993 3000 	ldrsb.w	r3, [r3]
 80081e4:	461a      	mov	r2, r3
 80081e6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80081ea:	330e      	adds	r3, #14
 80081ec:	f993 3000 	ldrsb.w	r3, [r3]
 80081f0:	fb03 f202 	mul.w	r2, r3, r2
 80081f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081f8:	4413      	add	r3, r2
 80081fa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            cols_8b += column_x + 4;
 80081fe:	f8b7 3160 	ldrh.w	r3, [r7, #352]	@ 0x160
 8008202:	1d1a      	adds	r2, r3, #4
 8008204:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008208:	4413      	add	r3, r2
 800820a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
            sum0 += cols_8b[0]*ksrc[15];
 800820e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008212:	f993 3000 	ldrsb.w	r3, [r3]
 8008216:	461a      	mov	r2, r3
 8008218:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800821c:	330f      	adds	r3, #15
 800821e:	f993 3000 	ldrsb.w	r3, [r3]
 8008222:	fb03 f202 	mul.w	r2, r3, r2
 8008226:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800822a:	4413      	add	r3, r2
 800822c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[2]*ksrc[15];
 8008230:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008234:	3302      	adds	r3, #2
 8008236:	f993 3000 	ldrsb.w	r3, [r3]
 800823a:	461a      	mov	r2, r3
 800823c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008240:	330f      	adds	r3, #15
 8008242:	f993 3000 	ldrsb.w	r3, [r3]
 8008246:	fb03 f202 	mul.w	r2, r3, r2
 800824a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800824e:	4413      	add	r3, r2
 8008250:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[1]*ksrc[16];
 8008254:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008258:	3301      	adds	r3, #1
 800825a:	f993 3000 	ldrsb.w	r3, [r3]
 800825e:	461a      	mov	r2, r3
 8008260:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008264:	3310      	adds	r3, #16
 8008266:	f993 3000 	ldrsb.w	r3, [r3]
 800826a:	fb03 f202 	mul.w	r2, r3, r2
 800826e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8008272:	4413      	add	r3, r2
 8008274:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[3]*ksrc[16];
 8008278:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800827c:	3303      	adds	r3, #3
 800827e:	f993 3000 	ldrsb.w	r3, [r3]
 8008282:	461a      	mov	r2, r3
 8008284:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008288:	3310      	adds	r3, #16
 800828a:	f993 3000 	ldrsb.w	r3, [r3]
 800828e:	fb03 f202 	mul.w	r2, r3, r2
 8008292:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008296:	4413      	add	r3, r2
 8008298:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[2]*ksrc[17];
 800829c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082a0:	3302      	adds	r3, #2
 80082a2:	f993 3000 	ldrsb.w	r3, [r3]
 80082a6:	461a      	mov	r2, r3
 80082a8:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80082ac:	3311      	adds	r3, #17
 80082ae:	f993 3000 	ldrsb.w	r3, [r3]
 80082b2:	fb03 f202 	mul.w	r2, r3, r2
 80082b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80082ba:	4413      	add	r3, r2
 80082bc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[4]*ksrc[17];
 80082c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082c4:	3304      	adds	r3, #4
 80082c6:	f993 3000 	ldrsb.w	r3, [r3]
 80082ca:	461a      	mov	r2, r3
 80082cc:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80082d0:	3311      	adds	r3, #17
 80082d2:	f993 3000 	ldrsb.w	r3, [r3]
 80082d6:	fb03 f202 	mul.w	r2, r3, r2
 80082da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082de:	4413      	add	r3, r2
 80082e0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[3]*ksrc[18];
 80082e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082e8:	3303      	adds	r3, #3
 80082ea:	f993 3000 	ldrsb.w	r3, [r3]
 80082ee:	461a      	mov	r2, r3
 80082f0:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80082f4:	3312      	adds	r3, #18
 80082f6:	f993 3000 	ldrsb.w	r3, [r3]
 80082fa:	fb03 f202 	mul.w	r2, r3, r2
 80082fe:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8008302:	4413      	add	r3, r2
 8008304:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[5]*ksrc[18];
 8008308:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800830c:	3305      	adds	r3, #5
 800830e:	f993 3000 	ldrsb.w	r3, [r3]
 8008312:	461a      	mov	r2, r3
 8008314:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008318:	3312      	adds	r3, #18
 800831a:	f993 3000 	ldrsb.w	r3, [r3]
 800831e:	fb03 f202 	mul.w	r2, r3, r2
 8008322:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008326:	4413      	add	r3, r2
 8008328:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[4]*ksrc[19];
 800832c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008330:	3304      	adds	r3, #4
 8008332:	f993 3000 	ldrsb.w	r3, [r3]
 8008336:	461a      	mov	r2, r3
 8008338:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800833c:	3313      	adds	r3, #19
 800833e:	f993 3000 	ldrsb.w	r3, [r3]
 8008342:	fb03 f202 	mul.w	r2, r3, r2
 8008346:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800834a:	4413      	add	r3, r2
 800834c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[6]*ksrc[19];
 8008350:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008354:	3306      	adds	r3, #6
 8008356:	f993 3000 	ldrsb.w	r3, [r3]
 800835a:	461a      	mov	r2, r3
 800835c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008360:	3313      	adds	r3, #19
 8008362:	f993 3000 	ldrsb.w	r3, [r3]
 8008366:	fb03 f202 	mul.w	r2, r3, r2
 800836a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800836e:	4413      	add	r3, r2
 8008370:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            cols_8b += column_x + 4;
 8008374:	f8b7 3160 	ldrh.w	r3, [r7, #352]	@ 0x160
 8008378:	1d1a      	adds	r2, r3, #4
 800837a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800837e:	4413      	add	r3, r2
 8008380:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
            sum0 += cols_8b[0]*ksrc[20];
 8008384:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008388:	f993 3000 	ldrsb.w	r3, [r3]
 800838c:	461a      	mov	r2, r3
 800838e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008392:	3314      	adds	r3, #20
 8008394:	f993 3000 	ldrsb.w	r3, [r3]
 8008398:	fb03 f202 	mul.w	r2, r3, r2
 800839c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80083a0:	4413      	add	r3, r2
 80083a2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[2]*ksrc[20];
 80083a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083aa:	3302      	adds	r3, #2
 80083ac:	f993 3000 	ldrsb.w	r3, [r3]
 80083b0:	461a      	mov	r2, r3
 80083b2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80083b6:	3314      	adds	r3, #20
 80083b8:	f993 3000 	ldrsb.w	r3, [r3]
 80083bc:	fb03 f202 	mul.w	r2, r3, r2
 80083c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083c4:	4413      	add	r3, r2
 80083c6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[1]*ksrc[21];
 80083ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083ce:	3301      	adds	r3, #1
 80083d0:	f993 3000 	ldrsb.w	r3, [r3]
 80083d4:	461a      	mov	r2, r3
 80083d6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80083da:	3315      	adds	r3, #21
 80083dc:	f993 3000 	ldrsb.w	r3, [r3]
 80083e0:	fb03 f202 	mul.w	r2, r3, r2
 80083e4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80083e8:	4413      	add	r3, r2
 80083ea:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[3]*ksrc[21];
 80083ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083f2:	3303      	adds	r3, #3
 80083f4:	f993 3000 	ldrsb.w	r3, [r3]
 80083f8:	461a      	mov	r2, r3
 80083fa:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80083fe:	3315      	adds	r3, #21
 8008400:	f993 3000 	ldrsb.w	r3, [r3]
 8008404:	fb03 f202 	mul.w	r2, r3, r2
 8008408:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800840c:	4413      	add	r3, r2
 800840e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[2]*ksrc[22];
 8008412:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008416:	3302      	adds	r3, #2
 8008418:	f993 3000 	ldrsb.w	r3, [r3]
 800841c:	461a      	mov	r2, r3
 800841e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008422:	3316      	adds	r3, #22
 8008424:	f993 3000 	ldrsb.w	r3, [r3]
 8008428:	fb03 f202 	mul.w	r2, r3, r2
 800842c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8008430:	4413      	add	r3, r2
 8008432:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[4]*ksrc[22];
 8008436:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800843a:	3304      	adds	r3, #4
 800843c:	f993 3000 	ldrsb.w	r3, [r3]
 8008440:	461a      	mov	r2, r3
 8008442:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008446:	3316      	adds	r3, #22
 8008448:	f993 3000 	ldrsb.w	r3, [r3]
 800844c:	fb03 f202 	mul.w	r2, r3, r2
 8008450:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008454:	4413      	add	r3, r2
 8008456:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[3]*ksrc[23];
 800845a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800845e:	3303      	adds	r3, #3
 8008460:	f993 3000 	ldrsb.w	r3, [r3]
 8008464:	461a      	mov	r2, r3
 8008466:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800846a:	3317      	adds	r3, #23
 800846c:	f993 3000 	ldrsb.w	r3, [r3]
 8008470:	fb03 f202 	mul.w	r2, r3, r2
 8008474:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8008478:	4413      	add	r3, r2
 800847a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[5]*ksrc[23];
 800847e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008482:	3305      	adds	r3, #5
 8008484:	f993 3000 	ldrsb.w	r3, [r3]
 8008488:	461a      	mov	r2, r3
 800848a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800848e:	3317      	adds	r3, #23
 8008490:	f993 3000 	ldrsb.w	r3, [r3]
 8008494:	fb03 f202 	mul.w	r2, r3, r2
 8008498:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800849c:	4413      	add	r3, r2
 800849e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[4]*ksrc[24];
 80084a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084a6:	3304      	adds	r3, #4
 80084a8:	f993 3000 	ldrsb.w	r3, [r3]
 80084ac:	461a      	mov	r2, r3
 80084ae:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80084b2:	3318      	adds	r3, #24
 80084b4:	f993 3000 	ldrsb.w	r3, [r3]
 80084b8:	fb03 f202 	mul.w	r2, r3, r2
 80084bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80084c0:	4413      	add	r3, r2
 80084c2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[6]*ksrc[24];
 80084c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084ca:	3306      	adds	r3, #6
 80084cc:	f993 3000 	ldrsb.w	r3, [r3]
 80084d0:	461a      	mov	r2, r3
 80084d2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80084d6:	3318      	adds	r3, #24
 80084d8:	f993 3000 	ldrsb.w	r3, [r3]
 80084dc:	fb03 f202 	mul.w	r2, r3, r2
 80084e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084e4:	4413      	add	r3, r2
 80084e6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

            /* requantize */
            sum0 = arm_nn_requantize(sum0 + biasR[0], *multiplier, *shift);
 80084ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084ec:	681a      	ldr	r2, [r3, #0]
 80084ee:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80084f2:	18d1      	adds	r1, r2, r3
 80084f4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8008504:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8008508:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800850c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008510:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8008514:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008518:	4093      	lsls	r3, r2
 800851a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800851e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008522:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    q31_t result = 0;
 8008526:	2300      	movs	r3, #0
 8008528:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    mult.word.low = 1 << 30;
 800852c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008530:	66bb      	str	r3, [r7, #104]	@ 0x68
    mult.word.high = 0;
 8008532:	2300      	movs	r3, #0
 8008534:	66fb      	str	r3, [r7, #108]	@ 0x6c
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8008536:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800853a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800853e:	17da      	asrs	r2, r3, #31
 8008540:	633b      	str	r3, [r7, #48]	@ 0x30
 8008542:	637a      	str	r2, [r7, #52]	@ 0x34
 8008544:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008548:	17da      	asrs	r2, r3, #31
 800854a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800854c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800854e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008550:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008552:	fb02 f203 	mul.w	r2, r2, r3
 8008556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008558:	6b3e      	ldr	r6, [r7, #48]	@ 0x30
 800855a:	fb06 f303 	mul.w	r3, r6, r3
 800855e:	4413      	add	r3, r2
 8008560:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008562:	6abe      	ldr	r6, [r7, #40]	@ 0x28
 8008564:	fba2 8906 	umull	r8, r9, r2, r6
 8008568:	444b      	add	r3, r9
 800856a:	4699      	mov	r9, r3
 800856c:	eb10 0308 	adds.w	r3, r0, r8
 8008570:	60bb      	str	r3, [r7, #8]
 8008572:	eb41 0309 	adc.w	r3, r1, r9
 8008576:	60fb      	str	r3, [r7, #12]
 8008578:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800857c:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
    result = (int32_t)(mult.long_long >> 31);
 8008580:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8008584:	f04f 0000 	mov.w	r0, #0
 8008588:	f04f 0100 	mov.w	r1, #0
 800858c:	0fd0      	lsrs	r0, r2, #31
 800858e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8008592:	17d9      	asrs	r1, r3, #31
 8008594:	4603      	mov	r3, r0
 8008596:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    return result;
 800859a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800859e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	dc03      	bgt.n	80085ae <depthwise_kernel5x5_stride2_inplace_kernel_CHW+0x84e>
 80085a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80085aa:	425b      	negs	r3, r3
 80085ac:	e000      	b.n	80085b0 <depthwise_kernel5x5_stride2_inplace_kernel_CHW+0x850>
 80085ae:	2300      	movs	r3, #0
 80085b0:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 80085b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    q31_t result = 0;
 80085b8:	2300      	movs	r3, #0
 80085ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    const q31_t remainder_mask = (1 << exponent) - 1;
 80085be:	2201      	movs	r2, #1
 80085c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80085c4:	fa02 f303 	lsl.w	r3, r2, r3
 80085c8:	3b01      	subs	r3, #1
 80085ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    int32_t remainder = remainder_mask & dividend;
 80085ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80085d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80085d6:	4013      	ands	r3, r2
 80085d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    result = dividend >> exponent;
 80085dc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80085e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80085e4:	fa42 f303 	asr.w	r3, r2, r3
 80085e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    q31_t threshold = remainder_mask >> 1;
 80085ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80085f0:	105b      	asrs	r3, r3, #1
 80085f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (result < 0)
 80085f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	da04      	bge.n	8008608 <depthwise_kernel5x5_stride2_inplace_kernel_CHW+0x8a8>
        threshold++;
 80085fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008602:	3301      	adds	r3, #1
 8008604:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (remainder > threshold)
 8008608:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800860c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008610:	429a      	cmp	r2, r3
 8008612:	dd04      	ble.n	800861e <depthwise_kernel5x5_stride2_inplace_kernel_CHW+0x8be>
        result++;
 8008614:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008618:	3301      	adds	r3, #1
 800861a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    return result;
 800861e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8008622:	bf00      	nop
 8008624:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum0 += output_offset;
 8008628:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800862c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8008630:	4413      	add	r3, r2
 8008632:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum0 = TN_MAX(sum0, activation_min);
 8008636:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800863a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800863e:	4293      	cmp	r3, r2
 8008640:	bfb8      	it	lt
 8008642:	4613      	movlt	r3, r2
 8008644:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum0 = TN_MIN(sum0, activation_max);
 8008648:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800864c:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8008650:	4293      	cmp	r3, r2
 8008652:	bfa8      	it	ge
 8008654:	4613      	movge	r3, r2
 8008656:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 800865a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 800865e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008662:	fb03 f202 	mul.w	r2, r3, r2
 8008666:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800866a:	005b      	lsls	r3, r3, #1
 800866c:	441a      	add	r2, r3
 800866e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8008672:	fb02 f303 	mul.w	r3, r2, r3
 8008676:	461a      	mov	r2, r3
 8008678:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800867c:	441a      	add	r2, r3
 800867e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8008682:	b25b      	sxtb	r3, r3
 8008684:	7013      	strb	r3, [r2, #0]

            sum1 = arm_nn_requantize(sum1 + biasR[0], *multiplier, *shift);
 8008686:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008688:	681a      	ldr	r2, [r3, #0]
 800868a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800868e:	18d1      	adds	r1, r2, r3
 8008690:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f8c7 1100 	str.w	r1, [r7, #256]	@ 0x100
 80086a0:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 80086a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80086a8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80086ac:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 80086b0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80086b4:	4093      	lsls	r3, r2
 80086b6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80086ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80086be:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    q31_t result = 0;
 80086c2:	2300      	movs	r3, #0
 80086c4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    mult.word.low = 1 << 30;
 80086c8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80086cc:	663b      	str	r3, [r7, #96]	@ 0x60
    mult.word.high = 0;
 80086ce:	2300      	movs	r3, #0
 80086d0:	667b      	str	r3, [r7, #100]	@ 0x64
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80086d2:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 80086d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086da:	17da      	asrs	r2, r3, #31
 80086dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80086de:	647a      	str	r2, [r7, #68]	@ 0x44
 80086e0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80086e4:	17da      	asrs	r2, r3, #31
 80086e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80086e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80086ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80086ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80086ee:	fb02 f203 	mul.w	r2, r2, r3
 80086f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086f4:	6c3e      	ldr	r6, [r7, #64]	@ 0x40
 80086f6:	fb06 f303 	mul.w	r3, r6, r3
 80086fa:	4413      	add	r3, r2
 80086fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80086fe:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 8008700:	fba2 4506 	umull	r4, r5, r2, r6
 8008704:	442b      	add	r3, r5
 8008706:	461d      	mov	r5, r3
 8008708:	1903      	adds	r3, r0, r4
 800870a:	613b      	str	r3, [r7, #16]
 800870c:	eb41 0305 	adc.w	r3, r1, r5
 8008710:	617b      	str	r3, [r7, #20]
 8008712:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008716:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
    result = (int32_t)(mult.long_long >> 31);
 800871a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800871e:	f04f 0000 	mov.w	r0, #0
 8008722:	f04f 0100 	mov.w	r1, #0
 8008726:	0fd0      	lsrs	r0, r2, #31
 8008728:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800872c:	17d9      	asrs	r1, r3, #31
 800872e:	4603      	mov	r3, r0
 8008730:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    return result;
 8008734:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8008738:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800873c:	2b00      	cmp	r3, #0
 800873e:	dc03      	bgt.n	8008748 <depthwise_kernel5x5_stride2_inplace_kernel_CHW+0x9e8>
 8008740:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008744:	425b      	negs	r3, r3
 8008746:	e000      	b.n	800874a <depthwise_kernel5x5_stride2_inplace_kernel_CHW+0x9ea>
 8008748:	2300      	movs	r3, #0
 800874a:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 800874e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    q31_t result = 0;
 8008752:	2300      	movs	r3, #0
 8008754:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    const q31_t remainder_mask = (1 << exponent) - 1;
 8008758:	2201      	movs	r2, #1
 800875a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800875e:	fa02 f303 	lsl.w	r3, r2, r3
 8008762:	3b01      	subs	r3, #1
 8008764:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    int32_t remainder = remainder_mask & dividend;
 8008768:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 800876c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008770:	4013      	ands	r3, r2
 8008772:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    result = dividend >> exponent;
 8008776:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 800877a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800877e:	fa42 f303 	asr.w	r3, r2, r3
 8008782:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    q31_t threshold = remainder_mask >> 1;
 8008786:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800878a:	105b      	asrs	r3, r3, #1
 800878c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    if (result < 0)
 8008790:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008794:	2b00      	cmp	r3, #0
 8008796:	da04      	bge.n	80087a2 <depthwise_kernel5x5_stride2_inplace_kernel_CHW+0xa42>
        threshold++;
 8008798:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800879c:	3301      	adds	r3, #1
 800879e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    if (remainder > threshold)
 80087a2:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 80087a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80087aa:	429a      	cmp	r2, r3
 80087ac:	dd04      	ble.n	80087b8 <depthwise_kernel5x5_stride2_inplace_kernel_CHW+0xa58>
        result++;
 80087ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087b2:	3301      	adds	r3, #1
 80087b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    return result;
 80087b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80087bc:	bf00      	nop
 80087be:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum1 += output_offset;
 80087c2:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 80087c6:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80087ca:	4413      	add	r3, r2
 80087cc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum1 = TN_MAX(sum1, activation_min);
 80087d0:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 80087d4:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80087d8:	4293      	cmp	r3, r2
 80087da:	bfb8      	it	lt
 80087dc:	4613      	movlt	r3, r2
 80087de:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum1 = TN_MIN(sum1, activation_max);
 80087e2:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 80087e6:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80087ea:	4293      	cmp	r3, r2
 80087ec:	bfa8      	it	ge
 80087ee:	4613      	movge	r3, r2
 80087f0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;
 80087f4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 80087f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80087fc:	fb03 f202 	mul.w	r2, r3, r2
 8008800:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8008804:	005b      	lsls	r3, r3, #1
 8008806:	3301      	adds	r3, #1
 8008808:	441a      	add	r2, r3
 800880a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800880e:	fb02 f303 	mul.w	r3, r2, r3
 8008812:	461a      	mov	r2, r3
 8008814:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008818:	441a      	add	r2, r3
 800881a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800881e:	b25b      	sxtb	r3, r3
 8008820:	7013      	strb	r3, [r2, #0]

            cols_8b_iterptr += STRIDE * 2;
 8008822:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8008826:	3304      	adds	r3, #4
 8008828:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        for (j = 0; j < output_x / 2; j++) {
 800882c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8008830:	3301      	adds	r3, #1
 8008832:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8008836:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 800883a:	085b      	lsrs	r3, r3, #1
 800883c:	b29b      	uxth	r3, r3
 800883e:	461a      	mov	r2, r3
 8008840:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8008844:	4293      	cmp	r3, r2
 8008846:	f6ff aaa1 	blt.w	8007d8c <depthwise_kernel5x5_stride2_inplace_kernel_CHW+0x2c>
        }
        if (output_x & 1) {
 800884a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 800884e:	f003 0301 	and.w	r3, r3, #1
 8008852:	2b00      	cmp	r3, #0
 8008854:	f000 82b1 	beq.w	8008dba <depthwise_kernel5x5_stride2_inplace_kernel_CHW+0x105a>
            q7_t * cols_8b = cols_8b_iterptr;
 8008858:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800885c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
            q31_t sum = bias[0] + biasR[0];
 8008860:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008862:	681a      	ldr	r2, [r3, #0]
 8008864:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4413      	add	r3, r2
 800886a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[0]*ksrc[0];
 800886e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008872:	f993 3000 	ldrsb.w	r3, [r3]
 8008876:	461a      	mov	r2, r3
 8008878:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800887c:	f993 3000 	ldrsb.w	r3, [r3]
 8008880:	fb03 f202 	mul.w	r2, r3, r2
 8008884:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8008888:	4413      	add	r3, r2
 800888a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[1]*ksrc[1];
 800888e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008892:	3301      	adds	r3, #1
 8008894:	f993 3000 	ldrsb.w	r3, [r3]
 8008898:	461a      	mov	r2, r3
 800889a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800889e:	3301      	adds	r3, #1
 80088a0:	f993 3000 	ldrsb.w	r3, [r3]
 80088a4:	fb03 f202 	mul.w	r2, r3, r2
 80088a8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80088ac:	4413      	add	r3, r2
 80088ae:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[2]*ksrc[2];
 80088b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088b6:	3302      	adds	r3, #2
 80088b8:	f993 3000 	ldrsb.w	r3, [r3]
 80088bc:	461a      	mov	r2, r3
 80088be:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80088c2:	3302      	adds	r3, #2
 80088c4:	f993 3000 	ldrsb.w	r3, [r3]
 80088c8:	fb03 f202 	mul.w	r2, r3, r2
 80088cc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80088d0:	4413      	add	r3, r2
 80088d2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[3]*ksrc[3];
 80088d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088da:	3303      	adds	r3, #3
 80088dc:	f993 3000 	ldrsb.w	r3, [r3]
 80088e0:	461a      	mov	r2, r3
 80088e2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80088e6:	3303      	adds	r3, #3
 80088e8:	f993 3000 	ldrsb.w	r3, [r3]
 80088ec:	fb03 f202 	mul.w	r2, r3, r2
 80088f0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80088f4:	4413      	add	r3, r2
 80088f6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[4]*ksrc[4];
 80088fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088fe:	3304      	adds	r3, #4
 8008900:	f993 3000 	ldrsb.w	r3, [r3]
 8008904:	461a      	mov	r2, r3
 8008906:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800890a:	3304      	adds	r3, #4
 800890c:	f993 3000 	ldrsb.w	r3, [r3]
 8008910:	fb03 f202 	mul.w	r2, r3, r2
 8008914:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8008918:	4413      	add	r3, r2
 800891a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            cols_8b += column_x + 4;
 800891e:	f8b7 3160 	ldrh.w	r3, [r7, #352]	@ 0x160
 8008922:	1d1a      	adds	r2, r3, #4
 8008924:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008928:	4413      	add	r3, r2
 800892a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
            sum += cols_8b[0]*ksrc[5];
 800892e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008932:	f993 3000 	ldrsb.w	r3, [r3]
 8008936:	461a      	mov	r2, r3
 8008938:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800893c:	3305      	adds	r3, #5
 800893e:	f993 3000 	ldrsb.w	r3, [r3]
 8008942:	fb03 f202 	mul.w	r2, r3, r2
 8008946:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800894a:	4413      	add	r3, r2
 800894c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[1]*ksrc[6];
 8008950:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008954:	3301      	adds	r3, #1
 8008956:	f993 3000 	ldrsb.w	r3, [r3]
 800895a:	461a      	mov	r2, r3
 800895c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008960:	3306      	adds	r3, #6
 8008962:	f993 3000 	ldrsb.w	r3, [r3]
 8008966:	fb03 f202 	mul.w	r2, r3, r2
 800896a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800896e:	4413      	add	r3, r2
 8008970:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[2]*ksrc[7];
 8008974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008978:	3302      	adds	r3, #2
 800897a:	f993 3000 	ldrsb.w	r3, [r3]
 800897e:	461a      	mov	r2, r3
 8008980:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008984:	3307      	adds	r3, #7
 8008986:	f993 3000 	ldrsb.w	r3, [r3]
 800898a:	fb03 f202 	mul.w	r2, r3, r2
 800898e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8008992:	4413      	add	r3, r2
 8008994:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[3]*ksrc[8];
 8008998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800899c:	3303      	adds	r3, #3
 800899e:	f993 3000 	ldrsb.w	r3, [r3]
 80089a2:	461a      	mov	r2, r3
 80089a4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80089a8:	3308      	adds	r3, #8
 80089aa:	f993 3000 	ldrsb.w	r3, [r3]
 80089ae:	fb03 f202 	mul.w	r2, r3, r2
 80089b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80089b6:	4413      	add	r3, r2
 80089b8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[4]*ksrc[9];
 80089bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089c0:	3304      	adds	r3, #4
 80089c2:	f993 3000 	ldrsb.w	r3, [r3]
 80089c6:	461a      	mov	r2, r3
 80089c8:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80089cc:	3309      	adds	r3, #9
 80089ce:	f993 3000 	ldrsb.w	r3, [r3]
 80089d2:	fb03 f202 	mul.w	r2, r3, r2
 80089d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80089da:	4413      	add	r3, r2
 80089dc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            cols_8b += column_x + 4;
 80089e0:	f8b7 3160 	ldrh.w	r3, [r7, #352]	@ 0x160
 80089e4:	1d1a      	adds	r2, r3, #4
 80089e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089ea:	4413      	add	r3, r2
 80089ec:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
            sum += cols_8b[0]*ksrc[10];
 80089f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089f4:	f993 3000 	ldrsb.w	r3, [r3]
 80089f8:	461a      	mov	r2, r3
 80089fa:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80089fe:	330a      	adds	r3, #10
 8008a00:	f993 3000 	ldrsb.w	r3, [r3]
 8008a04:	fb03 f202 	mul.w	r2, r3, r2
 8008a08:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8008a0c:	4413      	add	r3, r2
 8008a0e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[1]*ksrc[11];
 8008a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a16:	3301      	adds	r3, #1
 8008a18:	f993 3000 	ldrsb.w	r3, [r3]
 8008a1c:	461a      	mov	r2, r3
 8008a1e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008a22:	330b      	adds	r3, #11
 8008a24:	f993 3000 	ldrsb.w	r3, [r3]
 8008a28:	fb03 f202 	mul.w	r2, r3, r2
 8008a2c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8008a30:	4413      	add	r3, r2
 8008a32:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[2]*ksrc[12];
 8008a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a3a:	3302      	adds	r3, #2
 8008a3c:	f993 3000 	ldrsb.w	r3, [r3]
 8008a40:	461a      	mov	r2, r3
 8008a42:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008a46:	330c      	adds	r3, #12
 8008a48:	f993 3000 	ldrsb.w	r3, [r3]
 8008a4c:	fb03 f202 	mul.w	r2, r3, r2
 8008a50:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8008a54:	4413      	add	r3, r2
 8008a56:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[3]*ksrc[13];
 8008a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a5e:	3303      	adds	r3, #3
 8008a60:	f993 3000 	ldrsb.w	r3, [r3]
 8008a64:	461a      	mov	r2, r3
 8008a66:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008a6a:	330d      	adds	r3, #13
 8008a6c:	f993 3000 	ldrsb.w	r3, [r3]
 8008a70:	fb03 f202 	mul.w	r2, r3, r2
 8008a74:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8008a78:	4413      	add	r3, r2
 8008a7a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[4]*ksrc[14];
 8008a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a82:	3304      	adds	r3, #4
 8008a84:	f993 3000 	ldrsb.w	r3, [r3]
 8008a88:	461a      	mov	r2, r3
 8008a8a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008a8e:	330e      	adds	r3, #14
 8008a90:	f993 3000 	ldrsb.w	r3, [r3]
 8008a94:	fb03 f202 	mul.w	r2, r3, r2
 8008a98:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8008a9c:	4413      	add	r3, r2
 8008a9e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            cols_8b += column_x + 4;
 8008aa2:	f8b7 3160 	ldrh.w	r3, [r7, #352]	@ 0x160
 8008aa6:	1d1a      	adds	r2, r3, #4
 8008aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008aac:	4413      	add	r3, r2
 8008aae:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
            sum += cols_8b[0]*ksrc[15];
 8008ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ab6:	f993 3000 	ldrsb.w	r3, [r3]
 8008aba:	461a      	mov	r2, r3
 8008abc:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008ac0:	330f      	adds	r3, #15
 8008ac2:	f993 3000 	ldrsb.w	r3, [r3]
 8008ac6:	fb03 f202 	mul.w	r2, r3, r2
 8008aca:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8008ace:	4413      	add	r3, r2
 8008ad0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[1]*ksrc[16];
 8008ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ad8:	3301      	adds	r3, #1
 8008ada:	f993 3000 	ldrsb.w	r3, [r3]
 8008ade:	461a      	mov	r2, r3
 8008ae0:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008ae4:	3310      	adds	r3, #16
 8008ae6:	f993 3000 	ldrsb.w	r3, [r3]
 8008aea:	fb03 f202 	mul.w	r2, r3, r2
 8008aee:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8008af2:	4413      	add	r3, r2
 8008af4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[2]*ksrc[17];
 8008af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008afc:	3302      	adds	r3, #2
 8008afe:	f993 3000 	ldrsb.w	r3, [r3]
 8008b02:	461a      	mov	r2, r3
 8008b04:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008b08:	3311      	adds	r3, #17
 8008b0a:	f993 3000 	ldrsb.w	r3, [r3]
 8008b0e:	fb03 f202 	mul.w	r2, r3, r2
 8008b12:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8008b16:	4413      	add	r3, r2
 8008b18:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[3]*ksrc[18];
 8008b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b20:	3303      	adds	r3, #3
 8008b22:	f993 3000 	ldrsb.w	r3, [r3]
 8008b26:	461a      	mov	r2, r3
 8008b28:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008b2c:	3312      	adds	r3, #18
 8008b2e:	f993 3000 	ldrsb.w	r3, [r3]
 8008b32:	fb03 f202 	mul.w	r2, r3, r2
 8008b36:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8008b3a:	4413      	add	r3, r2
 8008b3c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[4]*ksrc[19];
 8008b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b44:	3304      	adds	r3, #4
 8008b46:	f993 3000 	ldrsb.w	r3, [r3]
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008b50:	3313      	adds	r3, #19
 8008b52:	f993 3000 	ldrsb.w	r3, [r3]
 8008b56:	fb03 f202 	mul.w	r2, r3, r2
 8008b5a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8008b5e:	4413      	add	r3, r2
 8008b60:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            cols_8b += column_x + 4;
 8008b64:	f8b7 3160 	ldrh.w	r3, [r7, #352]	@ 0x160
 8008b68:	1d1a      	adds	r2, r3, #4
 8008b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b6e:	4413      	add	r3, r2
 8008b70:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
            sum += cols_8b[0]*ksrc[20];
 8008b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b78:	f993 3000 	ldrsb.w	r3, [r3]
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008b82:	3314      	adds	r3, #20
 8008b84:	f993 3000 	ldrsb.w	r3, [r3]
 8008b88:	fb03 f202 	mul.w	r2, r3, r2
 8008b8c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8008b90:	4413      	add	r3, r2
 8008b92:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[1]*ksrc[21];
 8008b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b9a:	3301      	adds	r3, #1
 8008b9c:	f993 3000 	ldrsb.w	r3, [r3]
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008ba6:	3315      	adds	r3, #21
 8008ba8:	f993 3000 	ldrsb.w	r3, [r3]
 8008bac:	fb03 f202 	mul.w	r2, r3, r2
 8008bb0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8008bb4:	4413      	add	r3, r2
 8008bb6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[2]*ksrc[22];
 8008bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bbe:	3302      	adds	r3, #2
 8008bc0:	f993 3000 	ldrsb.w	r3, [r3]
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008bca:	3316      	adds	r3, #22
 8008bcc:	f993 3000 	ldrsb.w	r3, [r3]
 8008bd0:	fb03 f202 	mul.w	r2, r3, r2
 8008bd4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8008bd8:	4413      	add	r3, r2
 8008bda:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[3]*ksrc[23];
 8008bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008be2:	3303      	adds	r3, #3
 8008be4:	f993 3000 	ldrsb.w	r3, [r3]
 8008be8:	461a      	mov	r2, r3
 8008bea:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008bee:	3317      	adds	r3, #23
 8008bf0:	f993 3000 	ldrsb.w	r3, [r3]
 8008bf4:	fb03 f202 	mul.w	r2, r3, r2
 8008bf8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8008bfc:	4413      	add	r3, r2
 8008bfe:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[4]*ksrc[24];
 8008c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c06:	3304      	adds	r3, #4
 8008c08:	f993 3000 	ldrsb.w	r3, [r3]
 8008c0c:	461a      	mov	r2, r3
 8008c0e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008c12:	3318      	adds	r3, #24
 8008c14:	f993 3000 	ldrsb.w	r3, [r3]
 8008c18:	fb03 f202 	mul.w	r2, r3, r2
 8008c1c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8008c20:	4413      	add	r3, r2
 8008c22:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

            sum = arm_nn_requantize(sum + biasR[0], *multiplier, *shift);
 8008c26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8008c2e:	18d1      	adds	r1, r2, r3
 8008c30:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008c34:	681a      	ldr	r2, [r3, #0]
 8008c36:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8008c40:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8008c44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008c48:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008c4c:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8008c50:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008c54:	4093      	lsls	r3, r2
 8008c56:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008c5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008c5e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    q31_t result = 0;
 8008c62:	2300      	movs	r3, #0
 8008c64:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    mult.word.low = 1 << 30;
 8008c68:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008c6c:	65bb      	str	r3, [r7, #88]	@ 0x58
    mult.word.high = 0;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	65fb      	str	r3, [r7, #92]	@ 0x5c
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8008c72:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8008c76:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008c7a:	17da      	asrs	r2, r3, #31
 8008c7c:	623b      	str	r3, [r7, #32]
 8008c7e:	627a      	str	r2, [r7, #36]	@ 0x24
 8008c80:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008c84:	17da      	asrs	r2, r3, #31
 8008c86:	61bb      	str	r3, [r7, #24]
 8008c88:	61fa      	str	r2, [r7, #28]
 8008c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c8c:	69ba      	ldr	r2, [r7, #24]
 8008c8e:	fb02 f203 	mul.w	r2, r2, r3
 8008c92:	69fb      	ldr	r3, [r7, #28]
 8008c94:	6a3e      	ldr	r6, [r7, #32]
 8008c96:	fb06 f303 	mul.w	r3, r6, r3
 8008c9a:	4413      	add	r3, r2
 8008c9c:	6a3a      	ldr	r2, [r7, #32]
 8008c9e:	69be      	ldr	r6, [r7, #24]
 8008ca0:	fba2 ab06 	umull	sl, fp, r2, r6
 8008ca4:	445b      	add	r3, fp
 8008ca6:	469b      	mov	fp, r3
 8008ca8:	eb10 030a 	adds.w	r3, r0, sl
 8008cac:	603b      	str	r3, [r7, #0]
 8008cae:	eb41 030b 	adc.w	r3, r1, fp
 8008cb2:	607b      	str	r3, [r7, #4]
 8008cb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cb8:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    result = (int32_t)(mult.long_long >> 31);
 8008cbc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008cc0:	f04f 0000 	mov.w	r0, #0
 8008cc4:	f04f 0100 	mov.w	r1, #0
 8008cc8:	0fd0      	lsrs	r0, r2, #31
 8008cca:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8008cce:	17d9      	asrs	r1, r3, #31
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    return result;
 8008cd6:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8008cda:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	dc03      	bgt.n	8008cea <depthwise_kernel5x5_stride2_inplace_kernel_CHW+0xf8a>
 8008ce2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008ce6:	425b      	negs	r3, r3
 8008ce8:	e000      	b.n	8008cec <depthwise_kernel5x5_stride2_inplace_kernel_CHW+0xf8c>
 8008cea:	2300      	movs	r3, #0
 8008cec:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8008cf0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    q31_t result = 0;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    const q31_t remainder_mask = (1 << exponent) - 1;
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008d00:	fa02 f303 	lsl.w	r3, r2, r3
 8008d04:	3b01      	subs	r3, #1
 8008d06:	67fb      	str	r3, [r7, #124]	@ 0x7c
    int32_t remainder = remainder_mask & dividend;
 8008d08:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8008d0c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008d0e:	4013      	ands	r3, r2
 8008d10:	67bb      	str	r3, [r7, #120]	@ 0x78
    result = dividend >> exponent;
 8008d12:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8008d16:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008d1a:	fa42 f303 	asr.w	r3, r2, r3
 8008d1e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    q31_t threshold = remainder_mask >> 1;
 8008d22:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008d24:	105b      	asrs	r3, r3, #1
 8008d26:	677b      	str	r3, [r7, #116]	@ 0x74
    if (result < 0)
 8008d28:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	da02      	bge.n	8008d36 <depthwise_kernel5x5_stride2_inplace_kernel_CHW+0xfd6>
        threshold++;
 8008d30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008d32:	3301      	adds	r3, #1
 8008d34:	677b      	str	r3, [r7, #116]	@ 0x74
    if (remainder > threshold)
 8008d36:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8008d38:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	dd04      	ble.n	8008d48 <depthwise_kernel5x5_stride2_inplace_kernel_CHW+0xfe8>
        result++;
 8008d3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008d42:	3301      	adds	r3, #1
 8008d44:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    return result;
 8008d48:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8008d4c:	bf00      	nop
 8008d4e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += output_offset;
 8008d52:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8008d56:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8008d5a:	4413      	add	r3, r2
 8008d5c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum = TN_MAX(sum, activation_min);
 8008d60:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8008d64:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	bfb8      	it	lt
 8008d6c:	4613      	movlt	r3, r2
 8008d6e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum = TN_MIN(sum, activation_max);
 8008d72:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8008d76:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	bfa8      	it	ge
 8008d7e:	4613      	movge	r3, r2
 8008d80:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 8008d84:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8008d88:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008d8c:	fb03 f202 	mul.w	r2, r3, r2
 8008d90:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8008d94:	4413      	add	r3, r2
 8008d96:	1e5a      	subs	r2, r3, #1
 8008d98:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8008d9c:	fb02 f303 	mul.w	r3, r2, r3
 8008da0:	461a      	mov	r2, r3
 8008da2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008da6:	441a      	add	r2, r3
 8008da8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8008dac:	b25b      	sxtb	r3, r3
 8008dae:	7013      	strb	r3, [r2, #0]

            cols_8b_iterptr += STRIDE;
 8008db0:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8008db4:	3302      	adds	r3, #2
 8008db6:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        }
        cols_8b_iterptr += 2 * 2 - (column_x & 1);
 8008dba:	f8b7 3160 	ldrh.w	r3, [r7, #352]	@ 0x160
 8008dbe:	f003 0301 	and.w	r3, r3, #1
 8008dc2:	f1c3 0304 	rsb	r3, r3, #4
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8008dcc:	4413      	add	r3, r2
 8008dce:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        cols_8b_iterptr += (STRIDE - 1) * (column_x + 2 * 2);
 8008dd2:	f8b7 3160 	ldrh.w	r3, [r7, #352]	@ 0x160
 8008dd6:	3304      	adds	r3, #4
 8008dd8:	461a      	mov	r2, r3
 8008dda:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8008dde:	4413      	add	r3, r2
 8008de0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    for (i = 0; i < output_y; i++) {
 8008de4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008de8:	3301      	adds	r3, #1
 8008dea:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8008dee:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 8008df2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008df6:	4293      	cmp	r3, r2
 8008df8:	f6fe afc3 	blt.w	8007d82 <depthwise_kernel5x5_stride2_inplace_kernel_CHW+0x22>
    }
}
 8008dfc:	bf00      	nop
 8008dfe:	bf00      	nop
 8008e00:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8008e04:	46bd      	mov	sp, r7
 8008e06:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008e0a:	4770      	bx	lr

08008e0c <depthwise_kernel7x7_stride1_inplace_CHW>:
                const int32_t output_offset, const int32_t input_offset,
                const int32_t output_activation_min,
                const int32_t output_activation_max, q7_t *output,
                const uint16_t output_x, const uint16_t output_y,
                const uint16_t output_ch, q15_t *runtime_buf, q7_t pad_value)
{
 8008e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e0e:	b097      	sub	sp, #92	@ 0x5c
 8008e10:	af0a      	add	r7, sp, #40	@ 0x28
 8008e12:	60f8      	str	r0, [r7, #12]
 8008e14:	4608      	mov	r0, r1
 8008e16:	4611      	mov	r1, r2
 8008e18:	461a      	mov	r2, r3
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	817b      	strh	r3, [r7, #10]
 8008e1e:	460b      	mov	r3, r1
 8008e20:	813b      	strh	r3, [r7, #8]
 8008e22:	4613      	mov	r3, r2
 8008e24:	80fb      	strh	r3, [r7, #6]

    uint16_t c,i,j;
    q7_t *cols_8b_start = (q7_t *)runtime_buf;
 8008e26:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008e28:	61bb      	str	r3, [r7, #24]
    q7_t* cols_8b = (q7_t* )cols_8b_start;
 8008e2a:	69bb      	ldr	r3, [r7, #24]
 8008e2c:	627b      	str	r3, [r7, #36]	@ 0x24

    //Set padding value
    q7_t PAD8 = pad_value;
 8008e2e:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 8008e32:	75fb      	strb	r3, [r7, #23]
    /* setup the padding regions for Im2col buffers */
    //top region: 8bit x (input_x + pad_w * 2) x pad_h: unroll by pad value
    for(i = 0; i < input_x + 6; i++){
 8008e34:	2300      	movs	r3, #0
 8008e36:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8008e38:	e011      	b.n	8008e5e <depthwise_kernel7x7_stride1_inplace_CHW+0x52>
        *cols_8b++ = PAD8;
 8008e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e3c:	1c5a      	adds	r2, r3, #1
 8008e3e:	627a      	str	r2, [r7, #36]	@ 0x24
 8008e40:	7dfa      	ldrb	r2, [r7, #23]
 8008e42:	701a      	strb	r2, [r3, #0]
        *cols_8b++ = PAD8;
 8008e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e46:	1c5a      	adds	r2, r3, #1
 8008e48:	627a      	str	r2, [r7, #36]	@ 0x24
 8008e4a:	7dfa      	ldrb	r2, [r7, #23]
 8008e4c:	701a      	strb	r2, [r3, #0]
        *cols_8b++ = PAD8;
 8008e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e50:	1c5a      	adds	r2, r3, #1
 8008e52:	627a      	str	r2, [r7, #36]	@ 0x24
 8008e54:	7dfa      	ldrb	r2, [r7, #23]
 8008e56:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < input_x + 6; i++){
 8008e58:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8008e5e:	897b      	ldrh	r3, [r7, #10]
 8008e60:	1d5a      	adds	r2, r3, #5
 8008e62:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008e64:	429a      	cmp	r2, r3
 8008e66:	dae8      	bge.n	8008e3a <depthwise_kernel7x7_stride1_inplace_CHW+0x2e>
    }

    //middle regions: left and right regions
    for(i = 0; i < input_y; i++){
 8008e68:	2300      	movs	r3, #0
 8008e6a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8008e6c:	e024      	b.n	8008eb8 <depthwise_kernel7x7_stride1_inplace_CHW+0xac>
        *cols_8b++ = PAD8;//left
 8008e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e70:	1c5a      	adds	r2, r3, #1
 8008e72:	627a      	str	r2, [r7, #36]	@ 0x24
 8008e74:	7dfa      	ldrb	r2, [r7, #23]
 8008e76:	701a      	strb	r2, [r3, #0]
        *cols_8b++ = PAD8;//left
 8008e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e7a:	1c5a      	adds	r2, r3, #1
 8008e7c:	627a      	str	r2, [r7, #36]	@ 0x24
 8008e7e:	7dfa      	ldrb	r2, [r7, #23]
 8008e80:	701a      	strb	r2, [r3, #0]
        *cols_8b++ = PAD8;//left
 8008e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e84:	1c5a      	adds	r2, r3, #1
 8008e86:	627a      	str	r2, [r7, #36]	@ 0x24
 8008e88:	7dfa      	ldrb	r2, [r7, #23]
 8008e8a:	701a      	strb	r2, [r3, #0]
        cols_8b += input_x; //skip middle
 8008e8c:	897b      	ldrh	r3, [r7, #10]
 8008e8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e90:	4413      	add	r3, r2
 8008e92:	627b      	str	r3, [r7, #36]	@ 0x24
        *cols_8b++ = PAD8;//right
 8008e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e96:	1c5a      	adds	r2, r3, #1
 8008e98:	627a      	str	r2, [r7, #36]	@ 0x24
 8008e9a:	7dfa      	ldrb	r2, [r7, #23]
 8008e9c:	701a      	strb	r2, [r3, #0]
        *cols_8b++ = PAD8;//right
 8008e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ea0:	1c5a      	adds	r2, r3, #1
 8008ea2:	627a      	str	r2, [r7, #36]	@ 0x24
 8008ea4:	7dfa      	ldrb	r2, [r7, #23]
 8008ea6:	701a      	strb	r2, [r3, #0]
        *cols_8b++ = PAD8;//right
 8008ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eaa:	1c5a      	adds	r2, r3, #1
 8008eac:	627a      	str	r2, [r7, #36]	@ 0x24
 8008eae:	7dfa      	ldrb	r2, [r7, #23]
 8008eb0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < input_y; i++){
 8008eb2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8008eb8:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8008eba:	893b      	ldrh	r3, [r7, #8]
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	d3d6      	bcc.n	8008e6e <depthwise_kernel7x7_stride1_inplace_CHW+0x62>
    }

    //bottom region: 8bit x (input_x + pad_w * 2) x pad_h: unroll by pad value
    for(i = 0; i < input_x + 6; i++){
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8008ec4:	e011      	b.n	8008eea <depthwise_kernel7x7_stride1_inplace_CHW+0xde>
        *cols_8b++ = PAD8;
 8008ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ec8:	1c5a      	adds	r2, r3, #1
 8008eca:	627a      	str	r2, [r7, #36]	@ 0x24
 8008ecc:	7dfa      	ldrb	r2, [r7, #23]
 8008ece:	701a      	strb	r2, [r3, #0]
        *cols_8b++ = PAD8;
 8008ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ed2:	1c5a      	adds	r2, r3, #1
 8008ed4:	627a      	str	r2, [r7, #36]	@ 0x24
 8008ed6:	7dfa      	ldrb	r2, [r7, #23]
 8008ed8:	701a      	strb	r2, [r3, #0]
        *cols_8b++ = PAD8;
 8008eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008edc:	1c5a      	adds	r2, r3, #1
 8008ede:	627a      	str	r2, [r7, #36]	@ 0x24
 8008ee0:	7dfa      	ldrb	r2, [r7, #23]
 8008ee2:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < input_x + 6; i++){
 8008ee4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8008eea:	897b      	ldrh	r3, [r7, #10]
 8008eec:	1d5a      	adds	r2, r3, #5
 8008eee:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	dae8      	bge.n	8008ec6 <depthwise_kernel7x7_stride1_inplace_CHW+0xba>
    }

    const q7_t *src;
    const q7_t *ksrc = kernel;
 8008ef4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ef6:	61fb      	str	r3, [r7, #28]

    for (c = 0; c < input_ch; c++){
 8008ef8:	2300      	movs	r3, #0
 8008efa:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8008efc:	e061      	b.n	8008fc2 <depthwise_kernel7x7_stride1_inplace_CHW+0x1b6>
        cols_8b = (q7_t*)(cols_8b_start + 3 * (input_x) + 18); //skip 3 rows
 8008efe:	897a      	ldrh	r2, [r7, #10]
 8008f00:	4613      	mov	r3, r2
 8008f02:	005b      	lsls	r3, r3, #1
 8008f04:	4413      	add	r3, r2
 8008f06:	3312      	adds	r3, #18
 8008f08:	69ba      	ldr	r2, [r7, #24]
 8008f0a:	4413      	add	r3, r2
 8008f0c:	627b      	str	r3, [r7, #36]	@ 0x24
        src = input;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	623b      	str	r3, [r7, #32]
        for(i = 0; i < input_y; i++){
 8008f12:	2300      	movs	r3, #0
 8008f14:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8008f16:	e01d      	b.n	8008f54 <depthwise_kernel7x7_stride1_inplace_CHW+0x148>
            cols_8b += 3;//skip front
 8008f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f1a:	3303      	adds	r3, #3
 8008f1c:	627b      	str	r3, [r7, #36]	@ 0x24
            for(j = 0; j < input_x; j++){
 8008f1e:	2300      	movs	r3, #0
 8008f20:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8008f22:	e00d      	b.n	8008f40 <depthwise_kernel7x7_stride1_inplace_CHW+0x134>
                *cols_8b++ = *src;// + input_offset;
 8008f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f26:	1c5a      	adds	r2, r3, #1
 8008f28:	627a      	str	r2, [r7, #36]	@ 0x24
 8008f2a:	6a3a      	ldr	r2, [r7, #32]
 8008f2c:	f992 2000 	ldrsb.w	r2, [r2]
 8008f30:	701a      	strb	r2, [r3, #0]
                src += input_ch;
 8008f32:	88fb      	ldrh	r3, [r7, #6]
 8008f34:	6a3a      	ldr	r2, [r7, #32]
 8008f36:	4413      	add	r3, r2
 8008f38:	623b      	str	r3, [r7, #32]
            for(j = 0; j < input_x; j++){
 8008f3a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008f3c:	3301      	adds	r3, #1
 8008f3e:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8008f40:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8008f42:	897b      	ldrh	r3, [r7, #10]
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d3ed      	bcc.n	8008f24 <depthwise_kernel7x7_stride1_inplace_CHW+0x118>
            }
            cols_8b += 3;//skip end
 8008f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f4a:	3303      	adds	r3, #3
 8008f4c:	627b      	str	r3, [r7, #36]	@ 0x24
        for(i = 0; i < input_y; i++){
 8008f4e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008f50:	3301      	adds	r3, #1
 8008f52:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8008f54:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8008f56:	893b      	ldrh	r3, [r7, #8]
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d3dd      	bcc.n	8008f18 <depthwise_kernel7x7_stride1_inplace_CHW+0x10c>
        }
        q7_t *inplace_out = input;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	613b      	str	r3, [r7, #16]
        depthwise_kernel7x7_stride1_inplace_kernel_CHW(output_y, output_x, bias++, biasR++, ksrc, output_mult++, output_shift++, inplace_out,output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 8008f60:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8008f62:	1d0b      	adds	r3, r1, #4
 8008f64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f66:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8008f68:	1d03      	adds	r3, r0, #4
 8008f6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8008f6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008f6e:	1d1a      	adds	r2, r3, #4
 8008f70:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008f72:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008f74:	1d14      	adds	r4, r2, #4
 8008f76:	657c      	str	r4, [r7, #84]	@ 0x54
 8008f78:	88fc      	ldrh	r4, [r7, #6]
 8008f7a:	f8b7 6070 	ldrh.w	r6, [r7, #112]	@ 0x70
 8008f7e:	f8b7 5074 	ldrh.w	r5, [r7, #116]	@ 0x74
 8008f82:	9409      	str	r4, [sp, #36]	@ 0x24
 8008f84:	897c      	ldrh	r4, [r7, #10]
 8008f86:	9408      	str	r4, [sp, #32]
 8008f88:	69bc      	ldr	r4, [r7, #24]
 8008f8a:	9407      	str	r4, [sp, #28]
 8008f8c:	6ebc      	ldr	r4, [r7, #104]	@ 0x68
 8008f8e:	9406      	str	r4, [sp, #24]
 8008f90:	6e7c      	ldr	r4, [r7, #100]	@ 0x64
 8008f92:	9405      	str	r4, [sp, #20]
 8008f94:	6dfc      	ldr	r4, [r7, #92]	@ 0x5c
 8008f96:	9404      	str	r4, [sp, #16]
 8008f98:	693c      	ldr	r4, [r7, #16]
 8008f9a:	9403      	str	r4, [sp, #12]
 8008f9c:	9202      	str	r2, [sp, #8]
 8008f9e:	9301      	str	r3, [sp, #4]
 8008fa0:	69fb      	ldr	r3, [r7, #28]
 8008fa2:	9300      	str	r3, [sp, #0]
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	460a      	mov	r2, r1
 8008fa8:	4631      	mov	r1, r6
 8008faa:	4628      	mov	r0, r5
 8008fac:	f000 f812 	bl	8008fd4 <depthwise_kernel7x7_stride1_inplace_kernel_CHW>
        ksrc += 49;
 8008fb0:	69fb      	ldr	r3, [r7, #28]
 8008fb2:	3331      	adds	r3, #49	@ 0x31
 8008fb4:	61fb      	str	r3, [r7, #28]
        input++;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	3301      	adds	r3, #1
 8008fba:	60fb      	str	r3, [r7, #12]
    for (c = 0; c < input_ch; c++){
 8008fbc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008fbe:	3301      	adds	r3, #1
 8008fc0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8008fc2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008fc4:	88fb      	ldrh	r3, [r7, #6]
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d399      	bcc.n	8008efe <depthwise_kernel7x7_stride1_inplace_CHW+0xf2>
    }
    return STATE_SUCCESS;
 8008fca:	2300      	movs	r3, #0
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3734      	adds	r7, #52	@ 0x34
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008fd4 <depthwise_kernel7x7_stride1_inplace_kernel_CHW>:
        const uint16_t output_y, const uint16_t output_x,
        const int32_t *bias, const int32_t *biasR, const q7_t *ksrc, const int32_t *multiplier,
        const int32_t *shift, q7_t *output, const int32_t output_offset,
        const int32_t activation_min, const int32_t activation_max,
        q7_t *cols_8b_iterptr, const uint16_t column_x, int channel_offset)
{
 8008fd4:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008fd8:	b0c8      	sub	sp, #288	@ 0x120
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	653a      	str	r2, [r7, #80]	@ 0x50
 8008fde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8008fe6:	460b      	mov	r3, r1
 8008fe8:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    #define STRIDE 1
    int i, j;
    /* MACs for each output */
    for (i = 0; i < output_y; i++) {
 8008fec:	2300      	movs	r3, #0
 8008fee:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8008ff2:	f001 bd52 	b.w	800aa9a <depthwise_kernel7x7_stride1_inplace_kernel_CHW+0x1ac6>
        for (j = 0; j < output_x / 2; j++) {
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8008ffc:	f001 b8c3 	b.w	800a186 <depthwise_kernel7x7_stride1_inplace_kernel_CHW+0x11b2>
            q7_t *cols_8b = cols_8b_iterptr;
 8009000:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8009004:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

            q31_t sum0 = bias[0] + biasR[0];
 8009008:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800900a:	681a      	ldr	r2, [r3, #0]
 800900c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4413      	add	r3, r2
 8009012:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            q31_t sum1 = bias[0] + biasR[0];
 8009016:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009018:	681a      	ldr	r2, [r3, #0]
 800901a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4413      	add	r3, r2
 8009020:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            
            /* computation */
            sum0 += cols_8b[0]*ksrc[0];
 8009024:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009028:	f993 3000 	ldrsb.w	r3, [r3]
 800902c:	461a      	mov	r2, r3
 800902e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009032:	f993 3000 	ldrsb.w	r3, [r3]
 8009036:	fb03 f202 	mul.w	r2, r3, r2
 800903a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800903e:	4413      	add	r3, r2
 8009040:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[1]*ksrc[0];
 8009044:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009048:	3301      	adds	r3, #1
 800904a:	f993 3000 	ldrsb.w	r3, [r3]
 800904e:	461a      	mov	r2, r3
 8009050:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009054:	f993 3000 	ldrsb.w	r3, [r3]
 8009058:	fb03 f202 	mul.w	r2, r3, r2
 800905c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009060:	4413      	add	r3, r2
 8009062:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[1]*ksrc[1];
 8009066:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800906a:	3301      	adds	r3, #1
 800906c:	f993 3000 	ldrsb.w	r3, [r3]
 8009070:	461a      	mov	r2, r3
 8009072:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009076:	3301      	adds	r3, #1
 8009078:	f993 3000 	ldrsb.w	r3, [r3]
 800907c:	fb03 f202 	mul.w	r2, r3, r2
 8009080:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8009084:	4413      	add	r3, r2
 8009086:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[2]*ksrc[1];
 800908a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800908e:	3302      	adds	r3, #2
 8009090:	f993 3000 	ldrsb.w	r3, [r3]
 8009094:	461a      	mov	r2, r3
 8009096:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800909a:	3301      	adds	r3, #1
 800909c:	f993 3000 	ldrsb.w	r3, [r3]
 80090a0:	fb03 f202 	mul.w	r2, r3, r2
 80090a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090a8:	4413      	add	r3, r2
 80090aa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[2]*ksrc[2];
 80090ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090b2:	3302      	adds	r3, #2
 80090b4:	f993 3000 	ldrsb.w	r3, [r3]
 80090b8:	461a      	mov	r2, r3
 80090ba:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80090be:	3302      	adds	r3, #2
 80090c0:	f993 3000 	ldrsb.w	r3, [r3]
 80090c4:	fb03 f202 	mul.w	r2, r3, r2
 80090c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80090cc:	4413      	add	r3, r2
 80090ce:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[3]*ksrc[2];
 80090d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090d6:	3303      	adds	r3, #3
 80090d8:	f993 3000 	ldrsb.w	r3, [r3]
 80090dc:	461a      	mov	r2, r3
 80090de:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80090e2:	3302      	adds	r3, #2
 80090e4:	f993 3000 	ldrsb.w	r3, [r3]
 80090e8:	fb03 f202 	mul.w	r2, r3, r2
 80090ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090f0:	4413      	add	r3, r2
 80090f2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[3]*ksrc[3];
 80090f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090fa:	3303      	adds	r3, #3
 80090fc:	f993 3000 	ldrsb.w	r3, [r3]
 8009100:	461a      	mov	r2, r3
 8009102:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009106:	3303      	adds	r3, #3
 8009108:	f993 3000 	ldrsb.w	r3, [r3]
 800910c:	fb03 f202 	mul.w	r2, r3, r2
 8009110:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8009114:	4413      	add	r3, r2
 8009116:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[4]*ksrc[3];
 800911a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800911e:	3304      	adds	r3, #4
 8009120:	f993 3000 	ldrsb.w	r3, [r3]
 8009124:	461a      	mov	r2, r3
 8009126:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800912a:	3303      	adds	r3, #3
 800912c:	f993 3000 	ldrsb.w	r3, [r3]
 8009130:	fb03 f202 	mul.w	r2, r3, r2
 8009134:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009138:	4413      	add	r3, r2
 800913a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[4]*ksrc[4];
 800913e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009142:	3304      	adds	r3, #4
 8009144:	f993 3000 	ldrsb.w	r3, [r3]
 8009148:	461a      	mov	r2, r3
 800914a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800914e:	3304      	adds	r3, #4
 8009150:	f993 3000 	ldrsb.w	r3, [r3]
 8009154:	fb03 f202 	mul.w	r2, r3, r2
 8009158:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800915c:	4413      	add	r3, r2
 800915e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[5]*ksrc[4];
 8009162:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009166:	3305      	adds	r3, #5
 8009168:	f993 3000 	ldrsb.w	r3, [r3]
 800916c:	461a      	mov	r2, r3
 800916e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009172:	3304      	adds	r3, #4
 8009174:	f993 3000 	ldrsb.w	r3, [r3]
 8009178:	fb03 f202 	mul.w	r2, r3, r2
 800917c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009180:	4413      	add	r3, r2
 8009182:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[5]*ksrc[5];
 8009186:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800918a:	3305      	adds	r3, #5
 800918c:	f993 3000 	ldrsb.w	r3, [r3]
 8009190:	461a      	mov	r2, r3
 8009192:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009196:	3305      	adds	r3, #5
 8009198:	f993 3000 	ldrsb.w	r3, [r3]
 800919c:	fb03 f202 	mul.w	r2, r3, r2
 80091a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80091a4:	4413      	add	r3, r2
 80091a6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[6]*ksrc[5];
 80091aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091ae:	3306      	adds	r3, #6
 80091b0:	f993 3000 	ldrsb.w	r3, [r3]
 80091b4:	461a      	mov	r2, r3
 80091b6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80091ba:	3305      	adds	r3, #5
 80091bc:	f993 3000 	ldrsb.w	r3, [r3]
 80091c0:	fb03 f202 	mul.w	r2, r3, r2
 80091c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091c8:	4413      	add	r3, r2
 80091ca:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[6]*ksrc[6];
 80091ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091d2:	3306      	adds	r3, #6
 80091d4:	f993 3000 	ldrsb.w	r3, [r3]
 80091d8:	461a      	mov	r2, r3
 80091da:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80091de:	3306      	adds	r3, #6
 80091e0:	f993 3000 	ldrsb.w	r3, [r3]
 80091e4:	fb03 f202 	mul.w	r2, r3, r2
 80091e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80091ec:	4413      	add	r3, r2
 80091ee:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[7]*ksrc[6];
 80091f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091f6:	3307      	adds	r3, #7
 80091f8:	f993 3000 	ldrsb.w	r3, [r3]
 80091fc:	461a      	mov	r2, r3
 80091fe:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009202:	3306      	adds	r3, #6
 8009204:	f993 3000 	ldrsb.w	r3, [r3]
 8009208:	fb03 f202 	mul.w	r2, r3, r2
 800920c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009210:	4413      	add	r3, r2
 8009212:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            cols_8b += column_x + 6;
 8009216:	f8b7 3160 	ldrh.w	r3, [r7, #352]	@ 0x160
 800921a:	1d9a      	adds	r2, r3, #6
 800921c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009220:	4413      	add	r3, r2
 8009222:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
            sum0 += cols_8b[0]*ksrc[7];
 8009226:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800922a:	f993 3000 	ldrsb.w	r3, [r3]
 800922e:	461a      	mov	r2, r3
 8009230:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009234:	3307      	adds	r3, #7
 8009236:	f993 3000 	ldrsb.w	r3, [r3]
 800923a:	fb03 f202 	mul.w	r2, r3, r2
 800923e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8009242:	4413      	add	r3, r2
 8009244:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[1]*ksrc[7];
 8009248:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800924c:	3301      	adds	r3, #1
 800924e:	f993 3000 	ldrsb.w	r3, [r3]
 8009252:	461a      	mov	r2, r3
 8009254:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009258:	3307      	adds	r3, #7
 800925a:	f993 3000 	ldrsb.w	r3, [r3]
 800925e:	fb03 f202 	mul.w	r2, r3, r2
 8009262:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009266:	4413      	add	r3, r2
 8009268:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[1]*ksrc[8];
 800926c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009270:	3301      	adds	r3, #1
 8009272:	f993 3000 	ldrsb.w	r3, [r3]
 8009276:	461a      	mov	r2, r3
 8009278:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800927c:	3308      	adds	r3, #8
 800927e:	f993 3000 	ldrsb.w	r3, [r3]
 8009282:	fb03 f202 	mul.w	r2, r3, r2
 8009286:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800928a:	4413      	add	r3, r2
 800928c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[2]*ksrc[8];
 8009290:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009294:	3302      	adds	r3, #2
 8009296:	f993 3000 	ldrsb.w	r3, [r3]
 800929a:	461a      	mov	r2, r3
 800929c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80092a0:	3308      	adds	r3, #8
 80092a2:	f993 3000 	ldrsb.w	r3, [r3]
 80092a6:	fb03 f202 	mul.w	r2, r3, r2
 80092aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092ae:	4413      	add	r3, r2
 80092b0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[2]*ksrc[9];
 80092b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092b8:	3302      	adds	r3, #2
 80092ba:	f993 3000 	ldrsb.w	r3, [r3]
 80092be:	461a      	mov	r2, r3
 80092c0:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80092c4:	3309      	adds	r3, #9
 80092c6:	f993 3000 	ldrsb.w	r3, [r3]
 80092ca:	fb03 f202 	mul.w	r2, r3, r2
 80092ce:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80092d2:	4413      	add	r3, r2
 80092d4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[3]*ksrc[9];
 80092d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092dc:	3303      	adds	r3, #3
 80092de:	f993 3000 	ldrsb.w	r3, [r3]
 80092e2:	461a      	mov	r2, r3
 80092e4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80092e8:	3309      	adds	r3, #9
 80092ea:	f993 3000 	ldrsb.w	r3, [r3]
 80092ee:	fb03 f202 	mul.w	r2, r3, r2
 80092f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092f6:	4413      	add	r3, r2
 80092f8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[3]*ksrc[10];
 80092fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009300:	3303      	adds	r3, #3
 8009302:	f993 3000 	ldrsb.w	r3, [r3]
 8009306:	461a      	mov	r2, r3
 8009308:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800930c:	330a      	adds	r3, #10
 800930e:	f993 3000 	ldrsb.w	r3, [r3]
 8009312:	fb03 f202 	mul.w	r2, r3, r2
 8009316:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800931a:	4413      	add	r3, r2
 800931c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[4]*ksrc[10];
 8009320:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009324:	3304      	adds	r3, #4
 8009326:	f993 3000 	ldrsb.w	r3, [r3]
 800932a:	461a      	mov	r2, r3
 800932c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009330:	330a      	adds	r3, #10
 8009332:	f993 3000 	ldrsb.w	r3, [r3]
 8009336:	fb03 f202 	mul.w	r2, r3, r2
 800933a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800933e:	4413      	add	r3, r2
 8009340:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[4]*ksrc[11];
 8009344:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009348:	3304      	adds	r3, #4
 800934a:	f993 3000 	ldrsb.w	r3, [r3]
 800934e:	461a      	mov	r2, r3
 8009350:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009354:	330b      	adds	r3, #11
 8009356:	f993 3000 	ldrsb.w	r3, [r3]
 800935a:	fb03 f202 	mul.w	r2, r3, r2
 800935e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8009362:	4413      	add	r3, r2
 8009364:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[5]*ksrc[11];
 8009368:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800936c:	3305      	adds	r3, #5
 800936e:	f993 3000 	ldrsb.w	r3, [r3]
 8009372:	461a      	mov	r2, r3
 8009374:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009378:	330b      	adds	r3, #11
 800937a:	f993 3000 	ldrsb.w	r3, [r3]
 800937e:	fb03 f202 	mul.w	r2, r3, r2
 8009382:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009386:	4413      	add	r3, r2
 8009388:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[5]*ksrc[12];
 800938c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009390:	3305      	adds	r3, #5
 8009392:	f993 3000 	ldrsb.w	r3, [r3]
 8009396:	461a      	mov	r2, r3
 8009398:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800939c:	330c      	adds	r3, #12
 800939e:	f993 3000 	ldrsb.w	r3, [r3]
 80093a2:	fb03 f202 	mul.w	r2, r3, r2
 80093a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80093aa:	4413      	add	r3, r2
 80093ac:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[6]*ksrc[12];
 80093b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093b4:	3306      	adds	r3, #6
 80093b6:	f993 3000 	ldrsb.w	r3, [r3]
 80093ba:	461a      	mov	r2, r3
 80093bc:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80093c0:	330c      	adds	r3, #12
 80093c2:	f993 3000 	ldrsb.w	r3, [r3]
 80093c6:	fb03 f202 	mul.w	r2, r3, r2
 80093ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093ce:	4413      	add	r3, r2
 80093d0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[6]*ksrc[13];
 80093d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093d8:	3306      	adds	r3, #6
 80093da:	f993 3000 	ldrsb.w	r3, [r3]
 80093de:	461a      	mov	r2, r3
 80093e0:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80093e4:	330d      	adds	r3, #13
 80093e6:	f993 3000 	ldrsb.w	r3, [r3]
 80093ea:	fb03 f202 	mul.w	r2, r3, r2
 80093ee:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80093f2:	4413      	add	r3, r2
 80093f4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[7]*ksrc[13];
 80093f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093fc:	3307      	adds	r3, #7
 80093fe:	f993 3000 	ldrsb.w	r3, [r3]
 8009402:	461a      	mov	r2, r3
 8009404:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009408:	330d      	adds	r3, #13
 800940a:	f993 3000 	ldrsb.w	r3, [r3]
 800940e:	fb03 f202 	mul.w	r2, r3, r2
 8009412:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009416:	4413      	add	r3, r2
 8009418:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            cols_8b += column_x + 6;
 800941c:	f8b7 3160 	ldrh.w	r3, [r7, #352]	@ 0x160
 8009420:	1d9a      	adds	r2, r3, #6
 8009422:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009426:	4413      	add	r3, r2
 8009428:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
            sum0 += cols_8b[0]*ksrc[14];
 800942c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009430:	f993 3000 	ldrsb.w	r3, [r3]
 8009434:	461a      	mov	r2, r3
 8009436:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800943a:	330e      	adds	r3, #14
 800943c:	f993 3000 	ldrsb.w	r3, [r3]
 8009440:	fb03 f202 	mul.w	r2, r3, r2
 8009444:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8009448:	4413      	add	r3, r2
 800944a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[1]*ksrc[14];
 800944e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009452:	3301      	adds	r3, #1
 8009454:	f993 3000 	ldrsb.w	r3, [r3]
 8009458:	461a      	mov	r2, r3
 800945a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800945e:	330e      	adds	r3, #14
 8009460:	f993 3000 	ldrsb.w	r3, [r3]
 8009464:	fb03 f202 	mul.w	r2, r3, r2
 8009468:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800946c:	4413      	add	r3, r2
 800946e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[1]*ksrc[15];
 8009472:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009476:	3301      	adds	r3, #1
 8009478:	f993 3000 	ldrsb.w	r3, [r3]
 800947c:	461a      	mov	r2, r3
 800947e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009482:	330f      	adds	r3, #15
 8009484:	f993 3000 	ldrsb.w	r3, [r3]
 8009488:	fb03 f202 	mul.w	r2, r3, r2
 800948c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8009490:	4413      	add	r3, r2
 8009492:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[2]*ksrc[15];
 8009496:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800949a:	3302      	adds	r3, #2
 800949c:	f993 3000 	ldrsb.w	r3, [r3]
 80094a0:	461a      	mov	r2, r3
 80094a2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80094a6:	330f      	adds	r3, #15
 80094a8:	f993 3000 	ldrsb.w	r3, [r3]
 80094ac:	fb03 f202 	mul.w	r2, r3, r2
 80094b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094b4:	4413      	add	r3, r2
 80094b6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[2]*ksrc[16];
 80094ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094be:	3302      	adds	r3, #2
 80094c0:	f993 3000 	ldrsb.w	r3, [r3]
 80094c4:	461a      	mov	r2, r3
 80094c6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80094ca:	3310      	adds	r3, #16
 80094cc:	f993 3000 	ldrsb.w	r3, [r3]
 80094d0:	fb03 f202 	mul.w	r2, r3, r2
 80094d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80094d8:	4413      	add	r3, r2
 80094da:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[3]*ksrc[16];
 80094de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094e2:	3303      	adds	r3, #3
 80094e4:	f993 3000 	ldrsb.w	r3, [r3]
 80094e8:	461a      	mov	r2, r3
 80094ea:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80094ee:	3310      	adds	r3, #16
 80094f0:	f993 3000 	ldrsb.w	r3, [r3]
 80094f4:	fb03 f202 	mul.w	r2, r3, r2
 80094f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094fc:	4413      	add	r3, r2
 80094fe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[3]*ksrc[17];
 8009502:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009506:	3303      	adds	r3, #3
 8009508:	f993 3000 	ldrsb.w	r3, [r3]
 800950c:	461a      	mov	r2, r3
 800950e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009512:	3311      	adds	r3, #17
 8009514:	f993 3000 	ldrsb.w	r3, [r3]
 8009518:	fb03 f202 	mul.w	r2, r3, r2
 800951c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8009520:	4413      	add	r3, r2
 8009522:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[4]*ksrc[17];
 8009526:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800952a:	3304      	adds	r3, #4
 800952c:	f993 3000 	ldrsb.w	r3, [r3]
 8009530:	461a      	mov	r2, r3
 8009532:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009536:	3311      	adds	r3, #17
 8009538:	f993 3000 	ldrsb.w	r3, [r3]
 800953c:	fb03 f202 	mul.w	r2, r3, r2
 8009540:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009544:	4413      	add	r3, r2
 8009546:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[4]*ksrc[18];
 800954a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800954e:	3304      	adds	r3, #4
 8009550:	f993 3000 	ldrsb.w	r3, [r3]
 8009554:	461a      	mov	r2, r3
 8009556:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800955a:	3312      	adds	r3, #18
 800955c:	f993 3000 	ldrsb.w	r3, [r3]
 8009560:	fb03 f202 	mul.w	r2, r3, r2
 8009564:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8009568:	4413      	add	r3, r2
 800956a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[5]*ksrc[18];
 800956e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009572:	3305      	adds	r3, #5
 8009574:	f993 3000 	ldrsb.w	r3, [r3]
 8009578:	461a      	mov	r2, r3
 800957a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800957e:	3312      	adds	r3, #18
 8009580:	f993 3000 	ldrsb.w	r3, [r3]
 8009584:	fb03 f202 	mul.w	r2, r3, r2
 8009588:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800958c:	4413      	add	r3, r2
 800958e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[5]*ksrc[19];
 8009592:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009596:	3305      	adds	r3, #5
 8009598:	f993 3000 	ldrsb.w	r3, [r3]
 800959c:	461a      	mov	r2, r3
 800959e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80095a2:	3313      	adds	r3, #19
 80095a4:	f993 3000 	ldrsb.w	r3, [r3]
 80095a8:	fb03 f202 	mul.w	r2, r3, r2
 80095ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80095b0:	4413      	add	r3, r2
 80095b2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[6]*ksrc[19];
 80095b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095ba:	3306      	adds	r3, #6
 80095bc:	f993 3000 	ldrsb.w	r3, [r3]
 80095c0:	461a      	mov	r2, r3
 80095c2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80095c6:	3313      	adds	r3, #19
 80095c8:	f993 3000 	ldrsb.w	r3, [r3]
 80095cc:	fb03 f202 	mul.w	r2, r3, r2
 80095d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095d4:	4413      	add	r3, r2
 80095d6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[6]*ksrc[20];
 80095da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095de:	3306      	adds	r3, #6
 80095e0:	f993 3000 	ldrsb.w	r3, [r3]
 80095e4:	461a      	mov	r2, r3
 80095e6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80095ea:	3314      	adds	r3, #20
 80095ec:	f993 3000 	ldrsb.w	r3, [r3]
 80095f0:	fb03 f202 	mul.w	r2, r3, r2
 80095f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80095f8:	4413      	add	r3, r2
 80095fa:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[7]*ksrc[20];
 80095fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009602:	3307      	adds	r3, #7
 8009604:	f993 3000 	ldrsb.w	r3, [r3]
 8009608:	461a      	mov	r2, r3
 800960a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800960e:	3314      	adds	r3, #20
 8009610:	f993 3000 	ldrsb.w	r3, [r3]
 8009614:	fb03 f202 	mul.w	r2, r3, r2
 8009618:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800961c:	4413      	add	r3, r2
 800961e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            cols_8b += column_x + 6;
 8009622:	f8b7 3160 	ldrh.w	r3, [r7, #352]	@ 0x160
 8009626:	1d9a      	adds	r2, r3, #6
 8009628:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800962c:	4413      	add	r3, r2
 800962e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
            sum0 += cols_8b[0]*ksrc[21];
 8009632:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009636:	f993 3000 	ldrsb.w	r3, [r3]
 800963a:	461a      	mov	r2, r3
 800963c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009640:	3315      	adds	r3, #21
 8009642:	f993 3000 	ldrsb.w	r3, [r3]
 8009646:	fb03 f202 	mul.w	r2, r3, r2
 800964a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800964e:	4413      	add	r3, r2
 8009650:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[1]*ksrc[21];
 8009654:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009658:	3301      	adds	r3, #1
 800965a:	f993 3000 	ldrsb.w	r3, [r3]
 800965e:	461a      	mov	r2, r3
 8009660:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009664:	3315      	adds	r3, #21
 8009666:	f993 3000 	ldrsb.w	r3, [r3]
 800966a:	fb03 f202 	mul.w	r2, r3, r2
 800966e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009672:	4413      	add	r3, r2
 8009674:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[1]*ksrc[22];
 8009678:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800967c:	3301      	adds	r3, #1
 800967e:	f993 3000 	ldrsb.w	r3, [r3]
 8009682:	461a      	mov	r2, r3
 8009684:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009688:	3316      	adds	r3, #22
 800968a:	f993 3000 	ldrsb.w	r3, [r3]
 800968e:	fb03 f202 	mul.w	r2, r3, r2
 8009692:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8009696:	4413      	add	r3, r2
 8009698:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[2]*ksrc[22];
 800969c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096a0:	3302      	adds	r3, #2
 80096a2:	f993 3000 	ldrsb.w	r3, [r3]
 80096a6:	461a      	mov	r2, r3
 80096a8:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80096ac:	3316      	adds	r3, #22
 80096ae:	f993 3000 	ldrsb.w	r3, [r3]
 80096b2:	fb03 f202 	mul.w	r2, r3, r2
 80096b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096ba:	4413      	add	r3, r2
 80096bc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[2]*ksrc[23];
 80096c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096c4:	3302      	adds	r3, #2
 80096c6:	f993 3000 	ldrsb.w	r3, [r3]
 80096ca:	461a      	mov	r2, r3
 80096cc:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80096d0:	3317      	adds	r3, #23
 80096d2:	f993 3000 	ldrsb.w	r3, [r3]
 80096d6:	fb03 f202 	mul.w	r2, r3, r2
 80096da:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80096de:	4413      	add	r3, r2
 80096e0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[3]*ksrc[23];
 80096e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096e8:	3303      	adds	r3, #3
 80096ea:	f993 3000 	ldrsb.w	r3, [r3]
 80096ee:	461a      	mov	r2, r3
 80096f0:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80096f4:	3317      	adds	r3, #23
 80096f6:	f993 3000 	ldrsb.w	r3, [r3]
 80096fa:	fb03 f202 	mul.w	r2, r3, r2
 80096fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009702:	4413      	add	r3, r2
 8009704:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[3]*ksrc[24];
 8009708:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800970c:	3303      	adds	r3, #3
 800970e:	f993 3000 	ldrsb.w	r3, [r3]
 8009712:	461a      	mov	r2, r3
 8009714:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009718:	3318      	adds	r3, #24
 800971a:	f993 3000 	ldrsb.w	r3, [r3]
 800971e:	fb03 f202 	mul.w	r2, r3, r2
 8009722:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8009726:	4413      	add	r3, r2
 8009728:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[4]*ksrc[24];
 800972c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009730:	3304      	adds	r3, #4
 8009732:	f993 3000 	ldrsb.w	r3, [r3]
 8009736:	461a      	mov	r2, r3
 8009738:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800973c:	3318      	adds	r3, #24
 800973e:	f993 3000 	ldrsb.w	r3, [r3]
 8009742:	fb03 f202 	mul.w	r2, r3, r2
 8009746:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800974a:	4413      	add	r3, r2
 800974c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[4]*ksrc[25];
 8009750:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009754:	3304      	adds	r3, #4
 8009756:	f993 3000 	ldrsb.w	r3, [r3]
 800975a:	461a      	mov	r2, r3
 800975c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009760:	3319      	adds	r3, #25
 8009762:	f993 3000 	ldrsb.w	r3, [r3]
 8009766:	fb03 f202 	mul.w	r2, r3, r2
 800976a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800976e:	4413      	add	r3, r2
 8009770:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[5]*ksrc[25];
 8009774:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009778:	3305      	adds	r3, #5
 800977a:	f993 3000 	ldrsb.w	r3, [r3]
 800977e:	461a      	mov	r2, r3
 8009780:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009784:	3319      	adds	r3, #25
 8009786:	f993 3000 	ldrsb.w	r3, [r3]
 800978a:	fb03 f202 	mul.w	r2, r3, r2
 800978e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009792:	4413      	add	r3, r2
 8009794:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[5]*ksrc[26];
 8009798:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800979c:	3305      	adds	r3, #5
 800979e:	f993 3000 	ldrsb.w	r3, [r3]
 80097a2:	461a      	mov	r2, r3
 80097a4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80097a8:	331a      	adds	r3, #26
 80097aa:	f993 3000 	ldrsb.w	r3, [r3]
 80097ae:	fb03 f202 	mul.w	r2, r3, r2
 80097b2:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80097b6:	4413      	add	r3, r2
 80097b8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[6]*ksrc[26];
 80097bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097c0:	3306      	adds	r3, #6
 80097c2:	f993 3000 	ldrsb.w	r3, [r3]
 80097c6:	461a      	mov	r2, r3
 80097c8:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80097cc:	331a      	adds	r3, #26
 80097ce:	f993 3000 	ldrsb.w	r3, [r3]
 80097d2:	fb03 f202 	mul.w	r2, r3, r2
 80097d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097da:	4413      	add	r3, r2
 80097dc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[6]*ksrc[27];
 80097e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097e4:	3306      	adds	r3, #6
 80097e6:	f993 3000 	ldrsb.w	r3, [r3]
 80097ea:	461a      	mov	r2, r3
 80097ec:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80097f0:	331b      	adds	r3, #27
 80097f2:	f993 3000 	ldrsb.w	r3, [r3]
 80097f6:	fb03 f202 	mul.w	r2, r3, r2
 80097fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80097fe:	4413      	add	r3, r2
 8009800:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[7]*ksrc[27];
 8009804:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009808:	3307      	adds	r3, #7
 800980a:	f993 3000 	ldrsb.w	r3, [r3]
 800980e:	461a      	mov	r2, r3
 8009810:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009814:	331b      	adds	r3, #27
 8009816:	f993 3000 	ldrsb.w	r3, [r3]
 800981a:	fb03 f202 	mul.w	r2, r3, r2
 800981e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009822:	4413      	add	r3, r2
 8009824:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            cols_8b += column_x + 6;
 8009828:	f8b7 3160 	ldrh.w	r3, [r7, #352]	@ 0x160
 800982c:	1d9a      	adds	r2, r3, #6
 800982e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009832:	4413      	add	r3, r2
 8009834:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
            sum0 += cols_8b[0]*ksrc[28];
 8009838:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800983c:	f993 3000 	ldrsb.w	r3, [r3]
 8009840:	461a      	mov	r2, r3
 8009842:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009846:	331c      	adds	r3, #28
 8009848:	f993 3000 	ldrsb.w	r3, [r3]
 800984c:	fb03 f202 	mul.w	r2, r3, r2
 8009850:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8009854:	4413      	add	r3, r2
 8009856:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[1]*ksrc[28];
 800985a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800985e:	3301      	adds	r3, #1
 8009860:	f993 3000 	ldrsb.w	r3, [r3]
 8009864:	461a      	mov	r2, r3
 8009866:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800986a:	331c      	adds	r3, #28
 800986c:	f993 3000 	ldrsb.w	r3, [r3]
 8009870:	fb03 f202 	mul.w	r2, r3, r2
 8009874:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009878:	4413      	add	r3, r2
 800987a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[1]*ksrc[29];
 800987e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009882:	3301      	adds	r3, #1
 8009884:	f993 3000 	ldrsb.w	r3, [r3]
 8009888:	461a      	mov	r2, r3
 800988a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800988e:	331d      	adds	r3, #29
 8009890:	f993 3000 	ldrsb.w	r3, [r3]
 8009894:	fb03 f202 	mul.w	r2, r3, r2
 8009898:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800989c:	4413      	add	r3, r2
 800989e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[2]*ksrc[29];
 80098a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098a6:	3302      	adds	r3, #2
 80098a8:	f993 3000 	ldrsb.w	r3, [r3]
 80098ac:	461a      	mov	r2, r3
 80098ae:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80098b2:	331d      	adds	r3, #29
 80098b4:	f993 3000 	ldrsb.w	r3, [r3]
 80098b8:	fb03 f202 	mul.w	r2, r3, r2
 80098bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098c0:	4413      	add	r3, r2
 80098c2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[2]*ksrc[30];
 80098c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098ca:	3302      	adds	r3, #2
 80098cc:	f993 3000 	ldrsb.w	r3, [r3]
 80098d0:	461a      	mov	r2, r3
 80098d2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80098d6:	331e      	adds	r3, #30
 80098d8:	f993 3000 	ldrsb.w	r3, [r3]
 80098dc:	fb03 f202 	mul.w	r2, r3, r2
 80098e0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80098e4:	4413      	add	r3, r2
 80098e6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[3]*ksrc[30];
 80098ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098ee:	3303      	adds	r3, #3
 80098f0:	f993 3000 	ldrsb.w	r3, [r3]
 80098f4:	461a      	mov	r2, r3
 80098f6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80098fa:	331e      	adds	r3, #30
 80098fc:	f993 3000 	ldrsb.w	r3, [r3]
 8009900:	fb03 f202 	mul.w	r2, r3, r2
 8009904:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009908:	4413      	add	r3, r2
 800990a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[3]*ksrc[31];
 800990e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009912:	3303      	adds	r3, #3
 8009914:	f993 3000 	ldrsb.w	r3, [r3]
 8009918:	461a      	mov	r2, r3
 800991a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800991e:	331f      	adds	r3, #31
 8009920:	f993 3000 	ldrsb.w	r3, [r3]
 8009924:	fb03 f202 	mul.w	r2, r3, r2
 8009928:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800992c:	4413      	add	r3, r2
 800992e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[4]*ksrc[31];
 8009932:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009936:	3304      	adds	r3, #4
 8009938:	f993 3000 	ldrsb.w	r3, [r3]
 800993c:	461a      	mov	r2, r3
 800993e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009942:	331f      	adds	r3, #31
 8009944:	f993 3000 	ldrsb.w	r3, [r3]
 8009948:	fb03 f202 	mul.w	r2, r3, r2
 800994c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009950:	4413      	add	r3, r2
 8009952:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[4]*ksrc[32];
 8009956:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800995a:	3304      	adds	r3, #4
 800995c:	f993 3000 	ldrsb.w	r3, [r3]
 8009960:	461a      	mov	r2, r3
 8009962:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009966:	3320      	adds	r3, #32
 8009968:	f993 3000 	ldrsb.w	r3, [r3]
 800996c:	fb03 f202 	mul.w	r2, r3, r2
 8009970:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8009974:	4413      	add	r3, r2
 8009976:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[5]*ksrc[32];
 800997a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800997e:	3305      	adds	r3, #5
 8009980:	f993 3000 	ldrsb.w	r3, [r3]
 8009984:	461a      	mov	r2, r3
 8009986:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800998a:	3320      	adds	r3, #32
 800998c:	f993 3000 	ldrsb.w	r3, [r3]
 8009990:	fb03 f202 	mul.w	r2, r3, r2
 8009994:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009998:	4413      	add	r3, r2
 800999a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[5]*ksrc[33];
 800999e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099a2:	3305      	adds	r3, #5
 80099a4:	f993 3000 	ldrsb.w	r3, [r3]
 80099a8:	461a      	mov	r2, r3
 80099aa:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80099ae:	3321      	adds	r3, #33	@ 0x21
 80099b0:	f993 3000 	ldrsb.w	r3, [r3]
 80099b4:	fb03 f202 	mul.w	r2, r3, r2
 80099b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80099bc:	4413      	add	r3, r2
 80099be:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[6]*ksrc[33];
 80099c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099c6:	3306      	adds	r3, #6
 80099c8:	f993 3000 	ldrsb.w	r3, [r3]
 80099cc:	461a      	mov	r2, r3
 80099ce:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80099d2:	3321      	adds	r3, #33	@ 0x21
 80099d4:	f993 3000 	ldrsb.w	r3, [r3]
 80099d8:	fb03 f202 	mul.w	r2, r3, r2
 80099dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099e0:	4413      	add	r3, r2
 80099e2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[6]*ksrc[34];
 80099e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099ea:	3306      	adds	r3, #6
 80099ec:	f993 3000 	ldrsb.w	r3, [r3]
 80099f0:	461a      	mov	r2, r3
 80099f2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80099f6:	3322      	adds	r3, #34	@ 0x22
 80099f8:	f993 3000 	ldrsb.w	r3, [r3]
 80099fc:	fb03 f202 	mul.w	r2, r3, r2
 8009a00:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8009a04:	4413      	add	r3, r2
 8009a06:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[7]*ksrc[34];
 8009a0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a0e:	3307      	adds	r3, #7
 8009a10:	f993 3000 	ldrsb.w	r3, [r3]
 8009a14:	461a      	mov	r2, r3
 8009a16:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009a1a:	3322      	adds	r3, #34	@ 0x22
 8009a1c:	f993 3000 	ldrsb.w	r3, [r3]
 8009a20:	fb03 f202 	mul.w	r2, r3, r2
 8009a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a28:	4413      	add	r3, r2
 8009a2a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            cols_8b += column_x + 6;
 8009a2e:	f8b7 3160 	ldrh.w	r3, [r7, #352]	@ 0x160
 8009a32:	1d9a      	adds	r2, r3, #6
 8009a34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a38:	4413      	add	r3, r2
 8009a3a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
            sum0 += cols_8b[0]*ksrc[35];
 8009a3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a42:	f993 3000 	ldrsb.w	r3, [r3]
 8009a46:	461a      	mov	r2, r3
 8009a48:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009a4c:	3323      	adds	r3, #35	@ 0x23
 8009a4e:	f993 3000 	ldrsb.w	r3, [r3]
 8009a52:	fb03 f202 	mul.w	r2, r3, r2
 8009a56:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8009a5a:	4413      	add	r3, r2
 8009a5c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[1]*ksrc[35];
 8009a60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a64:	3301      	adds	r3, #1
 8009a66:	f993 3000 	ldrsb.w	r3, [r3]
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009a70:	3323      	adds	r3, #35	@ 0x23
 8009a72:	f993 3000 	ldrsb.w	r3, [r3]
 8009a76:	fb03 f202 	mul.w	r2, r3, r2
 8009a7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a7e:	4413      	add	r3, r2
 8009a80:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[1]*ksrc[36];
 8009a84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a88:	3301      	adds	r3, #1
 8009a8a:	f993 3000 	ldrsb.w	r3, [r3]
 8009a8e:	461a      	mov	r2, r3
 8009a90:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009a94:	3324      	adds	r3, #36	@ 0x24
 8009a96:	f993 3000 	ldrsb.w	r3, [r3]
 8009a9a:	fb03 f202 	mul.w	r2, r3, r2
 8009a9e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8009aa2:	4413      	add	r3, r2
 8009aa4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[2]*ksrc[36];
 8009aa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009aac:	3302      	adds	r3, #2
 8009aae:	f993 3000 	ldrsb.w	r3, [r3]
 8009ab2:	461a      	mov	r2, r3
 8009ab4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009ab8:	3324      	adds	r3, #36	@ 0x24
 8009aba:	f993 3000 	ldrsb.w	r3, [r3]
 8009abe:	fb03 f202 	mul.w	r2, r3, r2
 8009ac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ac6:	4413      	add	r3, r2
 8009ac8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[2]*ksrc[37];
 8009acc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ad0:	3302      	adds	r3, #2
 8009ad2:	f993 3000 	ldrsb.w	r3, [r3]
 8009ad6:	461a      	mov	r2, r3
 8009ad8:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009adc:	3325      	adds	r3, #37	@ 0x25
 8009ade:	f993 3000 	ldrsb.w	r3, [r3]
 8009ae2:	fb03 f202 	mul.w	r2, r3, r2
 8009ae6:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8009aea:	4413      	add	r3, r2
 8009aec:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[3]*ksrc[37];
 8009af0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009af4:	3303      	adds	r3, #3
 8009af6:	f993 3000 	ldrsb.w	r3, [r3]
 8009afa:	461a      	mov	r2, r3
 8009afc:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009b00:	3325      	adds	r3, #37	@ 0x25
 8009b02:	f993 3000 	ldrsb.w	r3, [r3]
 8009b06:	fb03 f202 	mul.w	r2, r3, r2
 8009b0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b0e:	4413      	add	r3, r2
 8009b10:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[3]*ksrc[38];
 8009b14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b18:	3303      	adds	r3, #3
 8009b1a:	f993 3000 	ldrsb.w	r3, [r3]
 8009b1e:	461a      	mov	r2, r3
 8009b20:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009b24:	3326      	adds	r3, #38	@ 0x26
 8009b26:	f993 3000 	ldrsb.w	r3, [r3]
 8009b2a:	fb03 f202 	mul.w	r2, r3, r2
 8009b2e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8009b32:	4413      	add	r3, r2
 8009b34:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[4]*ksrc[38];
 8009b38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b3c:	3304      	adds	r3, #4
 8009b3e:	f993 3000 	ldrsb.w	r3, [r3]
 8009b42:	461a      	mov	r2, r3
 8009b44:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009b48:	3326      	adds	r3, #38	@ 0x26
 8009b4a:	f993 3000 	ldrsb.w	r3, [r3]
 8009b4e:	fb03 f202 	mul.w	r2, r3, r2
 8009b52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b56:	4413      	add	r3, r2
 8009b58:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[4]*ksrc[39];
 8009b5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b60:	3304      	adds	r3, #4
 8009b62:	f993 3000 	ldrsb.w	r3, [r3]
 8009b66:	461a      	mov	r2, r3
 8009b68:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009b6c:	3327      	adds	r3, #39	@ 0x27
 8009b6e:	f993 3000 	ldrsb.w	r3, [r3]
 8009b72:	fb03 f202 	mul.w	r2, r3, r2
 8009b76:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8009b7a:	4413      	add	r3, r2
 8009b7c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[5]*ksrc[39];
 8009b80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b84:	3305      	adds	r3, #5
 8009b86:	f993 3000 	ldrsb.w	r3, [r3]
 8009b8a:	461a      	mov	r2, r3
 8009b8c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009b90:	3327      	adds	r3, #39	@ 0x27
 8009b92:	f993 3000 	ldrsb.w	r3, [r3]
 8009b96:	fb03 f202 	mul.w	r2, r3, r2
 8009b9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b9e:	4413      	add	r3, r2
 8009ba0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[5]*ksrc[40];
 8009ba4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ba8:	3305      	adds	r3, #5
 8009baa:	f993 3000 	ldrsb.w	r3, [r3]
 8009bae:	461a      	mov	r2, r3
 8009bb0:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009bb4:	3328      	adds	r3, #40	@ 0x28
 8009bb6:	f993 3000 	ldrsb.w	r3, [r3]
 8009bba:	fb03 f202 	mul.w	r2, r3, r2
 8009bbe:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8009bc2:	4413      	add	r3, r2
 8009bc4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[6]*ksrc[40];
 8009bc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bcc:	3306      	adds	r3, #6
 8009bce:	f993 3000 	ldrsb.w	r3, [r3]
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009bd8:	3328      	adds	r3, #40	@ 0x28
 8009bda:	f993 3000 	ldrsb.w	r3, [r3]
 8009bde:	fb03 f202 	mul.w	r2, r3, r2
 8009be2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009be6:	4413      	add	r3, r2
 8009be8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[6]*ksrc[41];
 8009bec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bf0:	3306      	adds	r3, #6
 8009bf2:	f993 3000 	ldrsb.w	r3, [r3]
 8009bf6:	461a      	mov	r2, r3
 8009bf8:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009bfc:	3329      	adds	r3, #41	@ 0x29
 8009bfe:	f993 3000 	ldrsb.w	r3, [r3]
 8009c02:	fb03 f202 	mul.w	r2, r3, r2
 8009c06:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8009c0a:	4413      	add	r3, r2
 8009c0c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[7]*ksrc[41];
 8009c10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c14:	3307      	adds	r3, #7
 8009c16:	f993 3000 	ldrsb.w	r3, [r3]
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009c20:	3329      	adds	r3, #41	@ 0x29
 8009c22:	f993 3000 	ldrsb.w	r3, [r3]
 8009c26:	fb03 f202 	mul.w	r2, r3, r2
 8009c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c2e:	4413      	add	r3, r2
 8009c30:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            cols_8b += column_x + 6;
 8009c34:	f8b7 3160 	ldrh.w	r3, [r7, #352]	@ 0x160
 8009c38:	1d9a      	adds	r2, r3, #6
 8009c3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c3e:	4413      	add	r3, r2
 8009c40:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
            sum0 += cols_8b[0]*ksrc[42];
 8009c44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c48:	f993 3000 	ldrsb.w	r3, [r3]
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009c52:	332a      	adds	r3, #42	@ 0x2a
 8009c54:	f993 3000 	ldrsb.w	r3, [r3]
 8009c58:	fb03 f202 	mul.w	r2, r3, r2
 8009c5c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8009c60:	4413      	add	r3, r2
 8009c62:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[1]*ksrc[42];
 8009c66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c6a:	3301      	adds	r3, #1
 8009c6c:	f993 3000 	ldrsb.w	r3, [r3]
 8009c70:	461a      	mov	r2, r3
 8009c72:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009c76:	332a      	adds	r3, #42	@ 0x2a
 8009c78:	f993 3000 	ldrsb.w	r3, [r3]
 8009c7c:	fb03 f202 	mul.w	r2, r3, r2
 8009c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c84:	4413      	add	r3, r2
 8009c86:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[1]*ksrc[43];
 8009c8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c8e:	3301      	adds	r3, #1
 8009c90:	f993 3000 	ldrsb.w	r3, [r3]
 8009c94:	461a      	mov	r2, r3
 8009c96:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009c9a:	332b      	adds	r3, #43	@ 0x2b
 8009c9c:	f993 3000 	ldrsb.w	r3, [r3]
 8009ca0:	fb03 f202 	mul.w	r2, r3, r2
 8009ca4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8009ca8:	4413      	add	r3, r2
 8009caa:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[2]*ksrc[43];
 8009cae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009cb2:	3302      	adds	r3, #2
 8009cb4:	f993 3000 	ldrsb.w	r3, [r3]
 8009cb8:	461a      	mov	r2, r3
 8009cba:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009cbe:	332b      	adds	r3, #43	@ 0x2b
 8009cc0:	f993 3000 	ldrsb.w	r3, [r3]
 8009cc4:	fb03 f202 	mul.w	r2, r3, r2
 8009cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ccc:	4413      	add	r3, r2
 8009cce:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[2]*ksrc[44];
 8009cd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009cd6:	3302      	adds	r3, #2
 8009cd8:	f993 3000 	ldrsb.w	r3, [r3]
 8009cdc:	461a      	mov	r2, r3
 8009cde:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009ce2:	332c      	adds	r3, #44	@ 0x2c
 8009ce4:	f993 3000 	ldrsb.w	r3, [r3]
 8009ce8:	fb03 f202 	mul.w	r2, r3, r2
 8009cec:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8009cf0:	4413      	add	r3, r2
 8009cf2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[3]*ksrc[44];
 8009cf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009cfa:	3303      	adds	r3, #3
 8009cfc:	f993 3000 	ldrsb.w	r3, [r3]
 8009d00:	461a      	mov	r2, r3
 8009d02:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009d06:	332c      	adds	r3, #44	@ 0x2c
 8009d08:	f993 3000 	ldrsb.w	r3, [r3]
 8009d0c:	fb03 f202 	mul.w	r2, r3, r2
 8009d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d14:	4413      	add	r3, r2
 8009d16:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[3]*ksrc[45];
 8009d1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d1e:	3303      	adds	r3, #3
 8009d20:	f993 3000 	ldrsb.w	r3, [r3]
 8009d24:	461a      	mov	r2, r3
 8009d26:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009d2a:	332d      	adds	r3, #45	@ 0x2d
 8009d2c:	f993 3000 	ldrsb.w	r3, [r3]
 8009d30:	fb03 f202 	mul.w	r2, r3, r2
 8009d34:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8009d38:	4413      	add	r3, r2
 8009d3a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[4]*ksrc[45];
 8009d3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d42:	3304      	adds	r3, #4
 8009d44:	f993 3000 	ldrsb.w	r3, [r3]
 8009d48:	461a      	mov	r2, r3
 8009d4a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009d4e:	332d      	adds	r3, #45	@ 0x2d
 8009d50:	f993 3000 	ldrsb.w	r3, [r3]
 8009d54:	fb03 f202 	mul.w	r2, r3, r2
 8009d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d5c:	4413      	add	r3, r2
 8009d5e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[4]*ksrc[46];
 8009d62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d66:	3304      	adds	r3, #4
 8009d68:	f993 3000 	ldrsb.w	r3, [r3]
 8009d6c:	461a      	mov	r2, r3
 8009d6e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009d72:	332e      	adds	r3, #46	@ 0x2e
 8009d74:	f993 3000 	ldrsb.w	r3, [r3]
 8009d78:	fb03 f202 	mul.w	r2, r3, r2
 8009d7c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8009d80:	4413      	add	r3, r2
 8009d82:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[5]*ksrc[46];
 8009d86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d8a:	3305      	adds	r3, #5
 8009d8c:	f993 3000 	ldrsb.w	r3, [r3]
 8009d90:	461a      	mov	r2, r3
 8009d92:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009d96:	332e      	adds	r3, #46	@ 0x2e
 8009d98:	f993 3000 	ldrsb.w	r3, [r3]
 8009d9c:	fb03 f202 	mul.w	r2, r3, r2
 8009da0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009da4:	4413      	add	r3, r2
 8009da6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[5]*ksrc[47];
 8009daa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009dae:	3305      	adds	r3, #5
 8009db0:	f993 3000 	ldrsb.w	r3, [r3]
 8009db4:	461a      	mov	r2, r3
 8009db6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009dba:	332f      	adds	r3, #47	@ 0x2f
 8009dbc:	f993 3000 	ldrsb.w	r3, [r3]
 8009dc0:	fb03 f202 	mul.w	r2, r3, r2
 8009dc4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8009dc8:	4413      	add	r3, r2
 8009dca:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[6]*ksrc[47];
 8009dce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009dd2:	3306      	adds	r3, #6
 8009dd4:	f993 3000 	ldrsb.w	r3, [r3]
 8009dd8:	461a      	mov	r2, r3
 8009dda:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009dde:	332f      	adds	r3, #47	@ 0x2f
 8009de0:	f993 3000 	ldrsb.w	r3, [r3]
 8009de4:	fb03 f202 	mul.w	r2, r3, r2
 8009de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dec:	4413      	add	r3, r2
 8009dee:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[6]*ksrc[48];
 8009df2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009df6:	3306      	adds	r3, #6
 8009df8:	f993 3000 	ldrsb.w	r3, [r3]
 8009dfc:	461a      	mov	r2, r3
 8009dfe:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009e02:	3330      	adds	r3, #48	@ 0x30
 8009e04:	f993 3000 	ldrsb.w	r3, [r3]
 8009e08:	fb03 f202 	mul.w	r2, r3, r2
 8009e0c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8009e10:	4413      	add	r3, r2
 8009e12:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[7]*ksrc[48];
 8009e16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e1a:	3307      	adds	r3, #7
 8009e1c:	f993 3000 	ldrsb.w	r3, [r3]
 8009e20:	461a      	mov	r2, r3
 8009e22:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009e26:	3330      	adds	r3, #48	@ 0x30
 8009e28:	f993 3000 	ldrsb.w	r3, [r3]
 8009e2c:	fb03 f202 	mul.w	r2, r3, r2
 8009e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e34:	4413      	add	r3, r2
 8009e36:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

            /* requantize */
            sum0 = arm_nn_requantize(sum0 + biasR[0], *multiplier, *shift);
 8009e3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e3c:	681a      	ldr	r2, [r3, #0]
 8009e3e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8009e42:	18d1      	adds	r1, r2, r3
 8009e44:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009e48:	681a      	ldr	r2, [r3, #0]
 8009e4a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8009e54:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8009e58:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009e5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009e60:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8009e64:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8009e68:	4093      	lsls	r3, r2
 8009e6a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009e6e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009e72:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    q31_t result = 0;
 8009e76:	2300      	movs	r3, #0
 8009e78:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    mult.word.low = 1 << 30;
 8009e7c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009e80:	66bb      	str	r3, [r7, #104]	@ 0x68
    mult.word.high = 0;
 8009e82:	2300      	movs	r3, #0
 8009e84:	66fb      	str	r3, [r7, #108]	@ 0x6c
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8009e86:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009e8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009e8e:	17da      	asrs	r2, r3, #31
 8009e90:	633b      	str	r3, [r7, #48]	@ 0x30
 8009e92:	637a      	str	r2, [r7, #52]	@ 0x34
 8009e94:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009e98:	17da      	asrs	r2, r3, #31
 8009e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009e9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009e9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ea0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009ea2:	fb02 f203 	mul.w	r2, r2, r3
 8009ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ea8:	6b3e      	ldr	r6, [r7, #48]	@ 0x30
 8009eaa:	fb06 f303 	mul.w	r3, r6, r3
 8009eae:	4413      	add	r3, r2
 8009eb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009eb2:	6abe      	ldr	r6, [r7, #40]	@ 0x28
 8009eb4:	fba2 8906 	umull	r8, r9, r2, r6
 8009eb8:	444b      	add	r3, r9
 8009eba:	4699      	mov	r9, r3
 8009ebc:	eb10 0308 	adds.w	r3, r0, r8
 8009ec0:	60bb      	str	r3, [r7, #8]
 8009ec2:	eb41 0309 	adc.w	r3, r1, r9
 8009ec6:	60fb      	str	r3, [r7, #12]
 8009ec8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009ecc:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
    result = (int32_t)(mult.long_long >> 31);
 8009ed0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8009ed4:	f04f 0000 	mov.w	r0, #0
 8009ed8:	f04f 0100 	mov.w	r1, #0
 8009edc:	0fd0      	lsrs	r0, r2, #31
 8009ede:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8009ee2:	17d9      	asrs	r1, r3, #31
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    return result;
 8009eea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8009eee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	dc03      	bgt.n	8009efe <depthwise_kernel7x7_stride1_inplace_kernel_CHW+0xf2a>
 8009ef6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009efa:	425b      	negs	r3, r3
 8009efc:	e000      	b.n	8009f00 <depthwise_kernel7x7_stride1_inplace_kernel_CHW+0xf2c>
 8009efe:	2300      	movs	r3, #0
 8009f00:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 8009f04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    q31_t result = 0;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    const q31_t remainder_mask = (1 << exponent) - 1;
 8009f0e:	2201      	movs	r2, #1
 8009f10:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009f14:	fa02 f303 	lsl.w	r3, r2, r3
 8009f18:	3b01      	subs	r3, #1
 8009f1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    int32_t remainder = remainder_mask & dividend;
 8009f1e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009f22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f26:	4013      	ands	r3, r2
 8009f28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    result = dividend >> exponent;
 8009f2c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009f30:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009f34:	fa42 f303 	asr.w	r3, r2, r3
 8009f38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    q31_t threshold = remainder_mask >> 1;
 8009f3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f40:	105b      	asrs	r3, r3, #1
 8009f42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (result < 0)
 8009f46:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	da04      	bge.n	8009f58 <depthwise_kernel7x7_stride1_inplace_kernel_CHW+0xf84>
        threshold++;
 8009f4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009f52:	3301      	adds	r3, #1
 8009f54:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (remainder > threshold)
 8009f58:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009f5c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009f60:	429a      	cmp	r2, r3
 8009f62:	dd04      	ble.n	8009f6e <depthwise_kernel7x7_stride1_inplace_kernel_CHW+0xf9a>
        result++;
 8009f64:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009f68:	3301      	adds	r3, #1
 8009f6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    return result;
 8009f6e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8009f72:	bf00      	nop
 8009f74:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum0 += output_offset;
 8009f78:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8009f7c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8009f80:	4413      	add	r3, r2
 8009f82:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum0 = TN_MAX(sum0, activation_min);
 8009f86:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8009f8a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	bfb8      	it	lt
 8009f92:	4613      	movlt	r3, r2
 8009f94:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum0 = TN_MIN(sum0, activation_max);
 8009f98:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8009f9c:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	bfa8      	it	ge
 8009fa4:	4613      	movge	r3, r2
 8009fa6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 8009faa:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8009fae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009fb2:	fb03 f202 	mul.w	r2, r3, r2
 8009fb6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009fba:	005b      	lsls	r3, r3, #1
 8009fbc:	441a      	add	r2, r3
 8009fbe:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8009fc2:	fb02 f303 	mul.w	r3, r2, r3
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009fcc:	441a      	add	r2, r3
 8009fce:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8009fd2:	b25b      	sxtb	r3, r3
 8009fd4:	7013      	strb	r3, [r2, #0]

            sum1 = arm_nn_requantize(sum1 + biasR[0], *multiplier, *shift);
 8009fd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009fd8:	681a      	ldr	r2, [r3, #0]
 8009fda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fde:	18d1      	adds	r1, r2, r3
 8009fe0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009fe4:	681a      	ldr	r2, [r3, #0]
 8009fe6:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f8c7 1100 	str.w	r1, [r7, #256]	@ 0x100
 8009ff0:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8009ff4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009ff8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009ffc:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 800a000:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800a004:	4093      	lsls	r3, r2
 800a006:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a00a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a00e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    q31_t result = 0;
 800a012:	2300      	movs	r3, #0
 800a014:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    mult.word.low = 1 << 30;
 800a018:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a01c:	663b      	str	r3, [r7, #96]	@ 0x60
    mult.word.high = 0;
 800a01e:	2300      	movs	r3, #0
 800a020:	667b      	str	r3, [r7, #100]	@ 0x64
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800a022:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800a026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a02a:	17da      	asrs	r2, r3, #31
 800a02c:	643b      	str	r3, [r7, #64]	@ 0x40
 800a02e:	647a      	str	r2, [r7, #68]	@ 0x44
 800a030:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a034:	17da      	asrs	r2, r3, #31
 800a036:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a038:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800a03a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a03c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a03e:	fb02 f203 	mul.w	r2, r2, r3
 800a042:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a044:	6c3e      	ldr	r6, [r7, #64]	@ 0x40
 800a046:	fb06 f303 	mul.w	r3, r6, r3
 800a04a:	4413      	add	r3, r2
 800a04c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a04e:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 800a050:	fba2 4506 	umull	r4, r5, r2, r6
 800a054:	442b      	add	r3, r5
 800a056:	461d      	mov	r5, r3
 800a058:	1903      	adds	r3, r0, r4
 800a05a:	613b      	str	r3, [r7, #16]
 800a05c:	eb41 0305 	adc.w	r3, r1, r5
 800a060:	617b      	str	r3, [r7, #20]
 800a062:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a066:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
    result = (int32_t)(mult.long_long >> 31);
 800a06a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800a06e:	f04f 0000 	mov.w	r0, #0
 800a072:	f04f 0100 	mov.w	r1, #0
 800a076:	0fd0      	lsrs	r0, r2, #31
 800a078:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800a07c:	17d9      	asrs	r1, r3, #31
 800a07e:	4603      	mov	r3, r0
 800a080:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    return result;
 800a084:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800a088:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	dc03      	bgt.n	800a098 <depthwise_kernel7x7_stride1_inplace_kernel_CHW+0x10c4>
 800a090:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a094:	425b      	negs	r3, r3
 800a096:	e000      	b.n	800a09a <depthwise_kernel7x7_stride1_inplace_kernel_CHW+0x10c6>
 800a098:	2300      	movs	r3, #0
 800a09a:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 800a09e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    q31_t result = 0;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    const q31_t remainder_mask = (1 << exponent) - 1;
 800a0a8:	2201      	movs	r2, #1
 800a0aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0ae:	fa02 f303 	lsl.w	r3, r2, r3
 800a0b2:	3b01      	subs	r3, #1
 800a0b4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    int32_t remainder = remainder_mask & dividend;
 800a0b8:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 800a0bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a0c0:	4013      	ands	r3, r2
 800a0c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    result = dividend >> exponent;
 800a0c6:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 800a0ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0ce:	fa42 f303 	asr.w	r3, r2, r3
 800a0d2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    q31_t threshold = remainder_mask >> 1;
 800a0d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a0da:	105b      	asrs	r3, r3, #1
 800a0dc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    if (result < 0)
 800a0e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	da04      	bge.n	800a0f2 <depthwise_kernel7x7_stride1_inplace_kernel_CHW+0x111e>
        threshold++;
 800a0e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a0ec:	3301      	adds	r3, #1
 800a0ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    if (remainder > threshold)
 800a0f2:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800a0f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a0fa:	429a      	cmp	r2, r3
 800a0fc:	dd04      	ble.n	800a108 <depthwise_kernel7x7_stride1_inplace_kernel_CHW+0x1134>
        result++;
 800a0fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a102:	3301      	adds	r3, #1
 800a104:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    return result;
 800a108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800a10c:	bf00      	nop
 800a10e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum1 += output_offset;
 800a112:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800a116:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800a11a:	4413      	add	r3, r2
 800a11c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum1 = TN_MAX(sum1, activation_min);
 800a120:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800a124:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800a128:	4293      	cmp	r3, r2
 800a12a:	bfb8      	it	lt
 800a12c:	4613      	movlt	r3, r2
 800a12e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum1 = TN_MIN(sum1, activation_max);
 800a132:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800a136:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800a13a:	4293      	cmp	r3, r2
 800a13c:	bfa8      	it	ge
 800a13e:	4613      	movge	r3, r2
 800a140:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;
 800a144:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 800a148:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a14c:	fb03 f202 	mul.w	r2, r3, r2
 800a150:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800a154:	005b      	lsls	r3, r3, #1
 800a156:	3301      	adds	r3, #1
 800a158:	441a      	add	r2, r3
 800a15a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800a15e:	fb02 f303 	mul.w	r3, r2, r3
 800a162:	461a      	mov	r2, r3
 800a164:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a168:	441a      	add	r2, r3
 800a16a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a16e:	b25b      	sxtb	r3, r3
 800a170:	7013      	strb	r3, [r2, #0]

            cols_8b_iterptr += STRIDE * 2;
 800a172:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800a176:	3302      	adds	r3, #2
 800a178:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        for (j = 0; j < output_x / 2; j++) {
 800a17c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800a180:	3301      	adds	r3, #1
 800a182:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800a186:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 800a18a:	085b      	lsrs	r3, r3, #1
 800a18c:	b29b      	uxth	r3, r3
 800a18e:	461a      	mov	r2, r3
 800a190:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800a194:	4293      	cmp	r3, r2
 800a196:	f6fe af33 	blt.w	8009000 <depthwise_kernel7x7_stride1_inplace_kernel_CHW+0x2c>
        }
        if (output_x & 1) {
 800a19a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 800a19e:	f003 0301 	and.w	r3, r3, #1
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	f000 846f 	beq.w	800aa86 <depthwise_kernel7x7_stride1_inplace_kernel_CHW+0x1ab2>
            q7_t * cols_8b = cols_8b_iterptr;
 800a1a8:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800a1ac:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
            q31_t sum = bias[0] + biasR[0];
 800a1b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a1b2:	681a      	ldr	r2, [r3, #0]
 800a1b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4413      	add	r3, r2
 800a1ba:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[0]*ksrc[0];
 800a1be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1c2:	f993 3000 	ldrsb.w	r3, [r3]
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800a1cc:	f993 3000 	ldrsb.w	r3, [r3]
 800a1d0:	fb03 f202 	mul.w	r2, r3, r2
 800a1d4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a1d8:	4413      	add	r3, r2
 800a1da:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[1]*ksrc[1];
 800a1de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1e2:	3301      	adds	r3, #1
 800a1e4:	f993 3000 	ldrsb.w	r3, [r3]
 800a1e8:	461a      	mov	r2, r3
 800a1ea:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800a1ee:	3301      	adds	r3, #1
 800a1f0:	f993 3000 	ldrsb.w	r3, [r3]
 800a1f4:	fb03 f202 	mul.w	r2, r3, r2
 800a1f8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a1fc:	4413      	add	r3, r2
 800a1fe:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[2]*ksrc[2];
 800a202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a206:	3302      	adds	r3, #2
 800a208:	f993 3000 	ldrsb.w	r3, [r3]
 800a20c:	461a      	mov	r2, r3
 800a20e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800a212:	3302      	adds	r3, #2
 800a214:	f993 3000 	ldrsb.w	r3, [r3]
 800a218:	fb03 f202 	mul.w	r2, r3, r2
 800a21c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a220:	4413      	add	r3, r2
 800a222:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[3]*ksrc[3];
 800a226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a22a:	3303      	adds	r3, #3
 800a22c:	f993 3000 	ldrsb.w	r3, [r3]
 800a230:	461a      	mov	r2, r3
 800a232:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800a236:	3303      	adds	r3, #3
 800a238:	f993 3000 	ldrsb.w	r3, [r3]
 800a23c:	fb03 f202 	mul.w	r2, r3, r2
 800a240:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a244:	4413      	add	r3, r2
 800a246:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[4]*ksrc[4];
 800a24a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a24e:	3304      	adds	r3, #4
 800a250:	f993 3000 	ldrsb.w	r3, [r3]
 800a254:	461a      	mov	r2, r3
 800a256:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800a25a:	3304      	adds	r3, #4
 800a25c:	f993 3000 	ldrsb.w	r3, [r3]
 800a260:	fb03 f202 	mul.w	r2, r3, r2
 800a264:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a268:	4413      	add	r3, r2
 800a26a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[5]*ksrc[5];
 800a26e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a272:	3305      	adds	r3, #5
 800a274:	f993 3000 	ldrsb.w	r3, [r3]
 800a278:	461a      	mov	r2, r3
 800a27a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800a27e:	3305      	adds	r3, #5
 800a280:	f993 3000 	ldrsb.w	r3, [r3]
 800a284:	fb03 f202 	mul.w	r2, r3, r2
 800a288:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a28c:	4413      	add	r3, r2
 800a28e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[6]*ksrc[6];
 800a292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a296:	3306      	adds	r3, #6
 800a298:	f993 3000 	ldrsb.w	r3, [r3]
 800a29c:	461a      	mov	r2, r3
 800a29e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800a2a2:	3306      	adds	r3, #6
 800a2a4:	f993 3000 	ldrsb.w	r3, [r3]
 800a2a8:	fb03 f202 	mul.w	r2, r3, r2
 800a2ac:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a2b0:	4413      	add	r3, r2
 800a2b2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            cols_8b += column_x + 6;
 800a2b6:	f8b7 3160 	ldrh.w	r3, [r7, #352]	@ 0x160
 800a2ba:	1d9a      	adds	r2, r3, #6
 800a2bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2c0:	4413      	add	r3, r2
 800a2c2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
            sum += cols_8b[0]*ksrc[7];
 800a2c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2ca:	f993 3000 	ldrsb.w	r3, [r3]
 800a2ce:	461a      	mov	r2, r3
 800a2d0:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800a2d4:	3307      	adds	r3, #7
 800a2d6:	f993 3000 	ldrsb.w	r3, [r3]
 800a2da:	fb03 f202 	mul.w	r2, r3, r2
 800a2de:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a2e2:	4413      	add	r3, r2
 800a2e4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[1]*ksrc[8];
 800a2e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2ec:	3301      	adds	r3, #1
 800a2ee:	f993 3000 	ldrsb.w	r3, [r3]
 800a2f2:	461a      	mov	r2, r3
 800a2f4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800a2f8:	3308      	adds	r3, #8
 800a2fa:	f993 3000 	ldrsb.w	r3, [r3]
 800a2fe:	fb03 f202 	mul.w	r2, r3, r2
 800a302:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a306:	4413      	add	r3, r2
 800a308:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[2]*ksrc[9];
 800a30c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a310:	3302      	adds	r3, #2
 800a312:	f993 3000 	ldrsb.w	r3, [r3]
 800a316:	461a      	mov	r2, r3
 800a318:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800a31c:	3309      	adds	r3, #9
 800a31e:	f993 3000 	ldrsb.w	r3, [r3]
 800a322:	fb03 f202 	mul.w	r2, r3, r2
 800a326:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a32a:	4413      	add	r3, r2
 800a32c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[3]*ksrc[10];
 800a330:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a334:	3303      	adds	r3, #3
 800a336:	f993 3000 	ldrsb.w	r3, [r3]
 800a33a:	461a      	mov	r2, r3
 800a33c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800a340:	330a      	adds	r3, #10
 800a342:	f993 3000 	ldrsb.w	r3, [r3]
 800a346:	fb03 f202 	mul.w	r2, r3, r2
 800a34a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a34e:	4413      	add	r3, r2
 800a350:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[4]*ksrc[11];
 800a354:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a358:	3304      	adds	r3, #4
 800a35a:	f993 3000 	ldrsb.w	r3, [r3]
 800a35e:	461a      	mov	r2, r3
 800a360:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800a364:	330b      	adds	r3, #11
 800a366:	f993 3000 	ldrsb.w	r3, [r3]
 800a36a:	fb03 f202 	mul.w	r2, r3, r2
 800a36e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a372:	4413      	add	r3, r2
 800a374:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[5]*ksrc[12];
 800a378:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a37c:	3305      	adds	r3, #5
 800a37e:	f993 3000 	ldrsb.w	r3, [r3]
 800a382:	461a      	mov	r2, r3
 800a384:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800a388:	330c      	adds	r3, #12
 800a38a:	f993 3000 	ldrsb.w	r3, [r3]
 800a38e:	fb03 f202 	mul.w	r2, r3, r2
 800a392:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a396:	4413      	add	r3, r2
 800a398:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[6]*ksrc[13];
 800a39c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3a0:	3306      	adds	r3, #6
 800a3a2:	f993 3000 	ldrsb.w	r3, [r3]
 800a3a6:	461a      	mov	r2, r3
 800a3a8:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800a3ac:	330d      	adds	r3, #13
 800a3ae:	f993 3000 	ldrsb.w	r3, [r3]
 800a3b2:	fb03 f202 	mul.w	r2, r3, r2
 800a3b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a3ba:	4413      	add	r3, r2
 800a3bc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            cols_8b += column_x + 6;
 800a3c0:	f8b7 3160 	ldrh.w	r3, [r7, #352]	@ 0x160
 800a3c4:	1d9a      	adds	r2, r3, #6
 800a3c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3ca:	4413      	add	r3, r2
 800a3cc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
            sum += cols_8b[0]*ksrc[14];
 800a3d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3d4:	f993 3000 	ldrsb.w	r3, [r3]
 800a3d8:	461a      	mov	r2, r3
 800a3da:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800a3de:	330e      	adds	r3, #14
 800a3e0:	f993 3000 	ldrsb.w	r3, [r3]
 800a3e4:	fb03 f202 	mul.w	r2, r3, r2
 800a3e8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a3ec:	4413      	add	r3, r2
 800a3ee:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[1]*ksrc[15];
 800a3f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3f6:	3301      	adds	r3, #1
 800a3f8:	f993 3000 	ldrsb.w	r3, [r3]
 800a3fc:	461a      	mov	r2, r3
 800a3fe:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800a402:	330f      	adds	r3, #15
 800a404:	f993 3000 	ldrsb.w	r3, [r3]
 800a408:	fb03 f202 	mul.w	r2, r3, r2
 800a40c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a410:	4413      	add	r3, r2
 800a412:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[2]*ksrc[16];
 800a416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a41a:	3302      	adds	r3, #2
 800a41c:	f993 3000 	ldrsb.w	r3, [r3]
 800a420:	461a      	mov	r2, r3
 800a422:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800a426:	3310      	adds	r3, #16
 800a428:	f993 3000 	ldrsb.w	r3, [r3]
 800a42c:	fb03 f202 	mul.w	r2, r3, r2
 800a430:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a434:	4413      	add	r3, r2
 800a436:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[3]*ksrc[17];
 800a43a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a43e:	3303      	adds	r3, #3
 800a440:	f993 3000 	ldrsb.w	r3, [r3]
 800a444:	461a      	mov	r2, r3
 800a446:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800a44a:	3311      	adds	r3, #17
 800a44c:	f993 3000 	ldrsb.w	r3, [r3]
 800a450:	fb03 f202 	mul.w	r2, r3, r2
 800a454:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a458:	4413      	add	r3, r2
 800a45a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[4]*ksrc[18];
 800a45e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a462:	3304      	adds	r3, #4
 800a464:	f993 3000 	ldrsb.w	r3, [r3]
 800a468:	461a      	mov	r2, r3
 800a46a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800a46e:	3312      	adds	r3, #18
 800a470:	f993 3000 	ldrsb.w	r3, [r3]
 800a474:	fb03 f202 	mul.w	r2, r3, r2
 800a478:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a47c:	4413      	add	r3, r2
 800a47e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[5]*ksrc[19];
 800a482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a486:	3305      	adds	r3, #5
 800a488:	f993 3000 	ldrsb.w	r3, [r3]
 800a48c:	461a      	mov	r2, r3
 800a48e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800a492:	3313      	adds	r3, #19
 800a494:	f993 3000 	ldrsb.w	r3, [r3]
 800a498:	fb03 f202 	mul.w	r2, r3, r2
 800a49c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a4a0:	4413      	add	r3, r2
 800a4a2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[6]*ksrc[20];
 800a4a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4aa:	3306      	adds	r3, #6
 800a4ac:	f993 3000 	ldrsb.w	r3, [r3]
 800a4b0:	461a      	mov	r2, r3
 800a4b2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800a4b6:	3314      	adds	r3, #20
 800a4b8:	f993 3000 	ldrsb.w	r3, [r3]
 800a4bc:	fb03 f202 	mul.w	r2, r3, r2
 800a4c0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a4c4:	4413      	add	r3, r2
 800a4c6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            cols_8b += column_x + 6;
 800a4ca:	f8b7 3160 	ldrh.w	r3, [r7, #352]	@ 0x160
 800a4ce:	1d9a      	adds	r2, r3, #6
 800a4d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4d4:	4413      	add	r3, r2
 800a4d6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
            sum += cols_8b[0]*ksrc[21];
 800a4da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4de:	f993 3000 	ldrsb.w	r3, [r3]
 800a4e2:	461a      	mov	r2, r3
 800a4e4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800a4e8:	3315      	adds	r3, #21
 800a4ea:	f993 3000 	ldrsb.w	r3, [r3]
 800a4ee:	fb03 f202 	mul.w	r2, r3, r2
 800a4f2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a4f6:	4413      	add	r3, r2
 800a4f8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[1]*ksrc[22];
 800a4fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a500:	3301      	adds	r3, #1
 800a502:	f993 3000 	ldrsb.w	r3, [r3]
 800a506:	461a      	mov	r2, r3
 800a508:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800a50c:	3316      	adds	r3, #22
 800a50e:	f993 3000 	ldrsb.w	r3, [r3]
 800a512:	fb03 f202 	mul.w	r2, r3, r2
 800a516:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a51a:	4413      	add	r3, r2
 800a51c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[2]*ksrc[23];
 800a520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a524:	3302      	adds	r3, #2
 800a526:	f993 3000 	ldrsb.w	r3, [r3]
 800a52a:	461a      	mov	r2, r3
 800a52c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800a530:	3317      	adds	r3, #23
 800a532:	f993 3000 	ldrsb.w	r3, [r3]
 800a536:	fb03 f202 	mul.w	r2, r3, r2
 800a53a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a53e:	4413      	add	r3, r2
 800a540:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[3]*ksrc[24];
 800a544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a548:	3303      	adds	r3, #3
 800a54a:	f993 3000 	ldrsb.w	r3, [r3]
 800a54e:	461a      	mov	r2, r3
 800a550:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800a554:	3318      	adds	r3, #24
 800a556:	f993 3000 	ldrsb.w	r3, [r3]
 800a55a:	fb03 f202 	mul.w	r2, r3, r2
 800a55e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a562:	4413      	add	r3, r2
 800a564:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[4]*ksrc[25];
 800a568:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a56c:	3304      	adds	r3, #4
 800a56e:	f993 3000 	ldrsb.w	r3, [r3]
 800a572:	461a      	mov	r2, r3
 800a574:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800a578:	3319      	adds	r3, #25
 800a57a:	f993 3000 	ldrsb.w	r3, [r3]
 800a57e:	fb03 f202 	mul.w	r2, r3, r2
 800a582:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a586:	4413      	add	r3, r2
 800a588:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[5]*ksrc[26];
 800a58c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a590:	3305      	adds	r3, #5
 800a592:	f993 3000 	ldrsb.w	r3, [r3]
 800a596:	461a      	mov	r2, r3
 800a598:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800a59c:	331a      	adds	r3, #26
 800a59e:	f993 3000 	ldrsb.w	r3, [r3]
 800a5a2:	fb03 f202 	mul.w	r2, r3, r2
 800a5a6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a5aa:	4413      	add	r3, r2
 800a5ac:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[6]*ksrc[27];
 800a5b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5b4:	3306      	adds	r3, #6
 800a5b6:	f993 3000 	ldrsb.w	r3, [r3]
 800a5ba:	461a      	mov	r2, r3
 800a5bc:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800a5c0:	331b      	adds	r3, #27
 800a5c2:	f993 3000 	ldrsb.w	r3, [r3]
 800a5c6:	fb03 f202 	mul.w	r2, r3, r2
 800a5ca:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a5ce:	4413      	add	r3, r2
 800a5d0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            cols_8b += column_x + 6;
 800a5d4:	f8b7 3160 	ldrh.w	r3, [r7, #352]	@ 0x160
 800a5d8:	1d9a      	adds	r2, r3, #6
 800a5da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5de:	4413      	add	r3, r2
 800a5e0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
            sum += cols_8b[0]*ksrc[28];
 800a5e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5e8:	f993 3000 	ldrsb.w	r3, [r3]
 800a5ec:	461a      	mov	r2, r3
 800a5ee:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800a5f2:	331c      	adds	r3, #28
 800a5f4:	f993 3000 	ldrsb.w	r3, [r3]
 800a5f8:	fb03 f202 	mul.w	r2, r3, r2
 800a5fc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a600:	4413      	add	r3, r2
 800a602:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[1]*ksrc[29];
 800a606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a60a:	3301      	adds	r3, #1
 800a60c:	f993 3000 	ldrsb.w	r3, [r3]
 800a610:	461a      	mov	r2, r3
 800a612:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800a616:	331d      	adds	r3, #29
 800a618:	f993 3000 	ldrsb.w	r3, [r3]
 800a61c:	fb03 f202 	mul.w	r2, r3, r2
 800a620:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a624:	4413      	add	r3, r2
 800a626:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[2]*ksrc[30];
 800a62a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a62e:	3302      	adds	r3, #2
 800a630:	f993 3000 	ldrsb.w	r3, [r3]
 800a634:	461a      	mov	r2, r3
 800a636:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800a63a:	331e      	adds	r3, #30
 800a63c:	f993 3000 	ldrsb.w	r3, [r3]
 800a640:	fb03 f202 	mul.w	r2, r3, r2
 800a644:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a648:	4413      	add	r3, r2
 800a64a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[3]*ksrc[31];
 800a64e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a652:	3303      	adds	r3, #3
 800a654:	f993 3000 	ldrsb.w	r3, [r3]
 800a658:	461a      	mov	r2, r3
 800a65a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800a65e:	331f      	adds	r3, #31
 800a660:	f993 3000 	ldrsb.w	r3, [r3]
 800a664:	fb03 f202 	mul.w	r2, r3, r2
 800a668:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a66c:	4413      	add	r3, r2
 800a66e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[4]*ksrc[32];
 800a672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a676:	3304      	adds	r3, #4
 800a678:	f993 3000 	ldrsb.w	r3, [r3]
 800a67c:	461a      	mov	r2, r3
 800a67e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800a682:	3320      	adds	r3, #32
 800a684:	f993 3000 	ldrsb.w	r3, [r3]
 800a688:	fb03 f202 	mul.w	r2, r3, r2
 800a68c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a690:	4413      	add	r3, r2
 800a692:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[5]*ksrc[33];
 800a696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a69a:	3305      	adds	r3, #5
 800a69c:	f993 3000 	ldrsb.w	r3, [r3]
 800a6a0:	461a      	mov	r2, r3
 800a6a2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800a6a6:	3321      	adds	r3, #33	@ 0x21
 800a6a8:	f993 3000 	ldrsb.w	r3, [r3]
 800a6ac:	fb03 f202 	mul.w	r2, r3, r2
 800a6b0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a6b4:	4413      	add	r3, r2
 800a6b6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[6]*ksrc[34];
 800a6ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6be:	3306      	adds	r3, #6
 800a6c0:	f993 3000 	ldrsb.w	r3, [r3]
 800a6c4:	461a      	mov	r2, r3
 800a6c6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800a6ca:	3322      	adds	r3, #34	@ 0x22
 800a6cc:	f993 3000 	ldrsb.w	r3, [r3]
 800a6d0:	fb03 f202 	mul.w	r2, r3, r2
 800a6d4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a6d8:	4413      	add	r3, r2
 800a6da:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            cols_8b += column_x + 6;
 800a6de:	f8b7 3160 	ldrh.w	r3, [r7, #352]	@ 0x160
 800a6e2:	1d9a      	adds	r2, r3, #6
 800a6e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6e8:	4413      	add	r3, r2
 800a6ea:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
            sum += cols_8b[0]*ksrc[35];
 800a6ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6f2:	f993 3000 	ldrsb.w	r3, [r3]
 800a6f6:	461a      	mov	r2, r3
 800a6f8:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800a6fc:	3323      	adds	r3, #35	@ 0x23
 800a6fe:	f993 3000 	ldrsb.w	r3, [r3]
 800a702:	fb03 f202 	mul.w	r2, r3, r2
 800a706:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a70a:	4413      	add	r3, r2
 800a70c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[1]*ksrc[36];
 800a710:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a714:	3301      	adds	r3, #1
 800a716:	f993 3000 	ldrsb.w	r3, [r3]
 800a71a:	461a      	mov	r2, r3
 800a71c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800a720:	3324      	adds	r3, #36	@ 0x24
 800a722:	f993 3000 	ldrsb.w	r3, [r3]
 800a726:	fb03 f202 	mul.w	r2, r3, r2
 800a72a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a72e:	4413      	add	r3, r2
 800a730:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[2]*ksrc[37];
 800a734:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a738:	3302      	adds	r3, #2
 800a73a:	f993 3000 	ldrsb.w	r3, [r3]
 800a73e:	461a      	mov	r2, r3
 800a740:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800a744:	3325      	adds	r3, #37	@ 0x25
 800a746:	f993 3000 	ldrsb.w	r3, [r3]
 800a74a:	fb03 f202 	mul.w	r2, r3, r2
 800a74e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a752:	4413      	add	r3, r2
 800a754:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[3]*ksrc[38];
 800a758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a75c:	3303      	adds	r3, #3
 800a75e:	f993 3000 	ldrsb.w	r3, [r3]
 800a762:	461a      	mov	r2, r3
 800a764:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800a768:	3326      	adds	r3, #38	@ 0x26
 800a76a:	f993 3000 	ldrsb.w	r3, [r3]
 800a76e:	fb03 f202 	mul.w	r2, r3, r2
 800a772:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a776:	4413      	add	r3, r2
 800a778:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[4]*ksrc[39];
 800a77c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a780:	3304      	adds	r3, #4
 800a782:	f993 3000 	ldrsb.w	r3, [r3]
 800a786:	461a      	mov	r2, r3
 800a788:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800a78c:	3327      	adds	r3, #39	@ 0x27
 800a78e:	f993 3000 	ldrsb.w	r3, [r3]
 800a792:	fb03 f202 	mul.w	r2, r3, r2
 800a796:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a79a:	4413      	add	r3, r2
 800a79c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[5]*ksrc[40];
 800a7a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7a4:	3305      	adds	r3, #5
 800a7a6:	f993 3000 	ldrsb.w	r3, [r3]
 800a7aa:	461a      	mov	r2, r3
 800a7ac:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800a7b0:	3328      	adds	r3, #40	@ 0x28
 800a7b2:	f993 3000 	ldrsb.w	r3, [r3]
 800a7b6:	fb03 f202 	mul.w	r2, r3, r2
 800a7ba:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a7be:	4413      	add	r3, r2
 800a7c0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[6]*ksrc[41];
 800a7c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7c8:	3306      	adds	r3, #6
 800a7ca:	f993 3000 	ldrsb.w	r3, [r3]
 800a7ce:	461a      	mov	r2, r3
 800a7d0:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800a7d4:	3329      	adds	r3, #41	@ 0x29
 800a7d6:	f993 3000 	ldrsb.w	r3, [r3]
 800a7da:	fb03 f202 	mul.w	r2, r3, r2
 800a7de:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a7e2:	4413      	add	r3, r2
 800a7e4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            cols_8b += column_x + 6;
 800a7e8:	f8b7 3160 	ldrh.w	r3, [r7, #352]	@ 0x160
 800a7ec:	1d9a      	adds	r2, r3, #6
 800a7ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7f2:	4413      	add	r3, r2
 800a7f4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
            sum += cols_8b[0]*ksrc[42];
 800a7f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7fc:	f993 3000 	ldrsb.w	r3, [r3]
 800a800:	461a      	mov	r2, r3
 800a802:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800a806:	332a      	adds	r3, #42	@ 0x2a
 800a808:	f993 3000 	ldrsb.w	r3, [r3]
 800a80c:	fb03 f202 	mul.w	r2, r3, r2
 800a810:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a814:	4413      	add	r3, r2
 800a816:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[1]*ksrc[43];
 800a81a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a81e:	3301      	adds	r3, #1
 800a820:	f993 3000 	ldrsb.w	r3, [r3]
 800a824:	461a      	mov	r2, r3
 800a826:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800a82a:	332b      	adds	r3, #43	@ 0x2b
 800a82c:	f993 3000 	ldrsb.w	r3, [r3]
 800a830:	fb03 f202 	mul.w	r2, r3, r2
 800a834:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a838:	4413      	add	r3, r2
 800a83a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[2]*ksrc[44];
 800a83e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a842:	3302      	adds	r3, #2
 800a844:	f993 3000 	ldrsb.w	r3, [r3]
 800a848:	461a      	mov	r2, r3
 800a84a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800a84e:	332c      	adds	r3, #44	@ 0x2c
 800a850:	f993 3000 	ldrsb.w	r3, [r3]
 800a854:	fb03 f202 	mul.w	r2, r3, r2
 800a858:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a85c:	4413      	add	r3, r2
 800a85e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[3]*ksrc[45];
 800a862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a866:	3303      	adds	r3, #3
 800a868:	f993 3000 	ldrsb.w	r3, [r3]
 800a86c:	461a      	mov	r2, r3
 800a86e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800a872:	332d      	adds	r3, #45	@ 0x2d
 800a874:	f993 3000 	ldrsb.w	r3, [r3]
 800a878:	fb03 f202 	mul.w	r2, r3, r2
 800a87c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a880:	4413      	add	r3, r2
 800a882:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[4]*ksrc[46];
 800a886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a88a:	3304      	adds	r3, #4
 800a88c:	f993 3000 	ldrsb.w	r3, [r3]
 800a890:	461a      	mov	r2, r3
 800a892:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800a896:	332e      	adds	r3, #46	@ 0x2e
 800a898:	f993 3000 	ldrsb.w	r3, [r3]
 800a89c:	fb03 f202 	mul.w	r2, r3, r2
 800a8a0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a8a4:	4413      	add	r3, r2
 800a8a6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[5]*ksrc[47];
 800a8aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8ae:	3305      	adds	r3, #5
 800a8b0:	f993 3000 	ldrsb.w	r3, [r3]
 800a8b4:	461a      	mov	r2, r3
 800a8b6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800a8ba:	332f      	adds	r3, #47	@ 0x2f
 800a8bc:	f993 3000 	ldrsb.w	r3, [r3]
 800a8c0:	fb03 f202 	mul.w	r2, r3, r2
 800a8c4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a8c8:	4413      	add	r3, r2
 800a8ca:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[6]*ksrc[48];
 800a8ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8d2:	3306      	adds	r3, #6
 800a8d4:	f993 3000 	ldrsb.w	r3, [r3]
 800a8d8:	461a      	mov	r2, r3
 800a8da:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800a8de:	3330      	adds	r3, #48	@ 0x30
 800a8e0:	f993 3000 	ldrsb.w	r3, [r3]
 800a8e4:	fb03 f202 	mul.w	r2, r3, r2
 800a8e8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a8ec:	4413      	add	r3, r2
 800a8ee:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

            sum = arm_nn_requantize(sum + biasR[0], *multiplier, *shift);
 800a8f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a8f4:	681a      	ldr	r2, [r3, #0]
 800a8f6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a8fa:	18d1      	adds	r1, r2, r3
 800a8fc:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800a900:	681a      	ldr	r2, [r3, #0]
 800a902:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 800a90c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800a910:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a914:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a918:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 800a91c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a920:	4093      	lsls	r3, r2
 800a922:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a926:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a92a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    q31_t result = 0;
 800a92e:	2300      	movs	r3, #0
 800a930:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    mult.word.low = 1 << 30;
 800a934:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a938:	65bb      	str	r3, [r7, #88]	@ 0x58
    mult.word.high = 0;
 800a93a:	2300      	movs	r3, #0
 800a93c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800a93e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 800a942:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a946:	17da      	asrs	r2, r3, #31
 800a948:	623b      	str	r3, [r7, #32]
 800a94a:	627a      	str	r2, [r7, #36]	@ 0x24
 800a94c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a950:	17da      	asrs	r2, r3, #31
 800a952:	61bb      	str	r3, [r7, #24]
 800a954:	61fa      	str	r2, [r7, #28]
 800a956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a958:	69ba      	ldr	r2, [r7, #24]
 800a95a:	fb02 f203 	mul.w	r2, r2, r3
 800a95e:	69fb      	ldr	r3, [r7, #28]
 800a960:	6a3e      	ldr	r6, [r7, #32]
 800a962:	fb06 f303 	mul.w	r3, r6, r3
 800a966:	4413      	add	r3, r2
 800a968:	6a3a      	ldr	r2, [r7, #32]
 800a96a:	69be      	ldr	r6, [r7, #24]
 800a96c:	fba2 ab06 	umull	sl, fp, r2, r6
 800a970:	445b      	add	r3, fp
 800a972:	469b      	mov	fp, r3
 800a974:	eb10 030a 	adds.w	r3, r0, sl
 800a978:	603b      	str	r3, [r7, #0]
 800a97a:	eb41 030b 	adc.w	r3, r1, fp
 800a97e:	607b      	str	r3, [r7, #4]
 800a980:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a984:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    result = (int32_t)(mult.long_long >> 31);
 800a988:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a98c:	f04f 0000 	mov.w	r0, #0
 800a990:	f04f 0100 	mov.w	r1, #0
 800a994:	0fd0      	lsrs	r0, r2, #31
 800a996:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800a99a:	17d9      	asrs	r1, r3, #31
 800a99c:	4603      	mov	r3, r0
 800a99e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    return result;
 800a9a2:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800a9a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	dc03      	bgt.n	800a9b6 <depthwise_kernel7x7_stride1_inplace_kernel_CHW+0x19e2>
 800a9ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a9b2:	425b      	negs	r3, r3
 800a9b4:	e000      	b.n	800a9b8 <depthwise_kernel7x7_stride1_inplace_kernel_CHW+0x19e4>
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 800a9bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    q31_t result = 0;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    const q31_t remainder_mask = (1 << exponent) - 1;
 800a9c6:	2201      	movs	r2, #1
 800a9c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a9cc:	fa02 f303 	lsl.w	r3, r2, r3
 800a9d0:	3b01      	subs	r3, #1
 800a9d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    int32_t remainder = remainder_mask & dividend;
 800a9d4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a9d8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a9da:	4013      	ands	r3, r2
 800a9dc:	67bb      	str	r3, [r7, #120]	@ 0x78
    result = dividend >> exponent;
 800a9de:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a9e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a9e6:	fa42 f303 	asr.w	r3, r2, r3
 800a9ea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    q31_t threshold = remainder_mask >> 1;
 800a9ee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a9f0:	105b      	asrs	r3, r3, #1
 800a9f2:	677b      	str	r3, [r7, #116]	@ 0x74
    if (result < 0)
 800a9f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	da02      	bge.n	800aa02 <depthwise_kernel7x7_stride1_inplace_kernel_CHW+0x1a2e>
        threshold++;
 800a9fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a9fe:	3301      	adds	r3, #1
 800aa00:	677b      	str	r3, [r7, #116]	@ 0x74
    if (remainder > threshold)
 800aa02:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800aa04:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800aa06:	429a      	cmp	r2, r3
 800aa08:	dd04      	ble.n	800aa14 <depthwise_kernel7x7_stride1_inplace_kernel_CHW+0x1a40>
        result++;
 800aa0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800aa0e:	3301      	adds	r3, #1
 800aa10:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    return result;
 800aa14:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800aa18:	bf00      	nop
 800aa1a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += output_offset;
 800aa1e:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 800aa22:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800aa26:	4413      	add	r3, r2
 800aa28:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum = TN_MAX(sum, activation_min);
 800aa2c:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 800aa30:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800aa34:	4293      	cmp	r3, r2
 800aa36:	bfb8      	it	lt
 800aa38:	4613      	movlt	r3, r2
 800aa3a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum = TN_MIN(sum, activation_max);
 800aa3e:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 800aa42:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800aa46:	4293      	cmp	r3, r2
 800aa48:	bfa8      	it	ge
 800aa4a:	4613      	movge	r3, r2
 800aa4c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 800aa50:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 800aa54:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800aa58:	fb03 f202 	mul.w	r2, r3, r2
 800aa5c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 800aa60:	4413      	add	r3, r2
 800aa62:	1e5a      	subs	r2, r3, #1
 800aa64:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800aa68:	fb02 f303 	mul.w	r3, r2, r3
 800aa6c:	461a      	mov	r2, r3
 800aa6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800aa72:	441a      	add	r2, r3
 800aa74:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800aa78:	b25b      	sxtb	r3, r3
 800aa7a:	7013      	strb	r3, [r2, #0]

            cols_8b_iterptr += STRIDE;
 800aa7c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800aa80:	3301      	adds	r3, #1
 800aa82:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        }
        cols_8b_iterptr += 3 * 2;
 800aa86:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800aa8a:	3306      	adds	r3, #6
 800aa8c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    for (i = 0; i < output_y; i++) {
 800aa90:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800aa94:	3301      	adds	r3, #1
 800aa96:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800aa9a:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 800aa9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	f6fe aaa7 	blt.w	8008ff6 <depthwise_kernel7x7_stride1_inplace_kernel_CHW+0x22>
    }
}
 800aaa8:	bf00      	nop
 800aaaa:	bf00      	nop
 800aaac:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800aab0:	46bd      	mov	sp, r7
 800aab2:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800aab6:	4770      	bx	lr

0800aab8 <depthwise_kernel7x7_stride2_inplace_CHW>:
                const int32_t output_offset, const int32_t input_offset,
                const int32_t output_activation_min,
                const int32_t output_activation_max, q7_t *output,
                const uint16_t output_x, const uint16_t output_y,
                const uint16_t output_ch, q15_t *runtime_buf, q7_t pad_value)
{
 800aab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aaba:	b097      	sub	sp, #92	@ 0x5c
 800aabc:	af0a      	add	r7, sp, #40	@ 0x28
 800aabe:	60f8      	str	r0, [r7, #12]
 800aac0:	4608      	mov	r0, r1
 800aac2:	4611      	mov	r1, r2
 800aac4:	461a      	mov	r2, r3
 800aac6:	4603      	mov	r3, r0
 800aac8:	817b      	strh	r3, [r7, #10]
 800aaca:	460b      	mov	r3, r1
 800aacc:	813b      	strh	r3, [r7, #8]
 800aace:	4613      	mov	r3, r2
 800aad0:	80fb      	strh	r3, [r7, #6]

    uint16_t c,i,j;
    q7_t *cols_8b_start = (q7_t *)runtime_buf;
 800aad2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800aad4:	61bb      	str	r3, [r7, #24]
    q7_t* cols_8b = (q7_t* )cols_8b_start;
 800aad6:	69bb      	ldr	r3, [r7, #24]
 800aad8:	627b      	str	r3, [r7, #36]	@ 0x24

    //Set padding value
    q7_t PAD8 = pad_value;
 800aada:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 800aade:	75fb      	strb	r3, [r7, #23]
    /* setup the padding regions for Im2col buffers */
    //top region: 8bit x (input_x + pad_w * 2) x pad_h: unroll by pad value
    for(i = 0; i < input_x + 6; i++){
 800aae0:	2300      	movs	r3, #0
 800aae2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800aae4:	e011      	b.n	800ab0a <depthwise_kernel7x7_stride2_inplace_CHW+0x52>
        *cols_8b++ = PAD8;
 800aae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aae8:	1c5a      	adds	r2, r3, #1
 800aaea:	627a      	str	r2, [r7, #36]	@ 0x24
 800aaec:	7dfa      	ldrb	r2, [r7, #23]
 800aaee:	701a      	strb	r2, [r3, #0]
        *cols_8b++ = PAD8;
 800aaf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaf2:	1c5a      	adds	r2, r3, #1
 800aaf4:	627a      	str	r2, [r7, #36]	@ 0x24
 800aaf6:	7dfa      	ldrb	r2, [r7, #23]
 800aaf8:	701a      	strb	r2, [r3, #0]
        *cols_8b++ = PAD8;
 800aafa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aafc:	1c5a      	adds	r2, r3, #1
 800aafe:	627a      	str	r2, [r7, #36]	@ 0x24
 800ab00:	7dfa      	ldrb	r2, [r7, #23]
 800ab02:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < input_x + 6; i++){
 800ab04:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800ab06:	3301      	adds	r3, #1
 800ab08:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800ab0a:	897b      	ldrh	r3, [r7, #10]
 800ab0c:	1d5a      	adds	r2, r3, #5
 800ab0e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800ab10:	429a      	cmp	r2, r3
 800ab12:	dae8      	bge.n	800aae6 <depthwise_kernel7x7_stride2_inplace_CHW+0x2e>
    }

    //middle regions: left and right regions
    for(i = 0; i < input_y; i++){
 800ab14:	2300      	movs	r3, #0
 800ab16:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800ab18:	e024      	b.n	800ab64 <depthwise_kernel7x7_stride2_inplace_CHW+0xac>
        *cols_8b++ = PAD8;//left
 800ab1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab1c:	1c5a      	adds	r2, r3, #1
 800ab1e:	627a      	str	r2, [r7, #36]	@ 0x24
 800ab20:	7dfa      	ldrb	r2, [r7, #23]
 800ab22:	701a      	strb	r2, [r3, #0]
        *cols_8b++ = PAD8;//left
 800ab24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab26:	1c5a      	adds	r2, r3, #1
 800ab28:	627a      	str	r2, [r7, #36]	@ 0x24
 800ab2a:	7dfa      	ldrb	r2, [r7, #23]
 800ab2c:	701a      	strb	r2, [r3, #0]
        *cols_8b++ = PAD8;//left
 800ab2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab30:	1c5a      	adds	r2, r3, #1
 800ab32:	627a      	str	r2, [r7, #36]	@ 0x24
 800ab34:	7dfa      	ldrb	r2, [r7, #23]
 800ab36:	701a      	strb	r2, [r3, #0]
        cols_8b += input_x; //skip middle
 800ab38:	897b      	ldrh	r3, [r7, #10]
 800ab3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab3c:	4413      	add	r3, r2
 800ab3e:	627b      	str	r3, [r7, #36]	@ 0x24
        *cols_8b++ = PAD8;//right
 800ab40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab42:	1c5a      	adds	r2, r3, #1
 800ab44:	627a      	str	r2, [r7, #36]	@ 0x24
 800ab46:	7dfa      	ldrb	r2, [r7, #23]
 800ab48:	701a      	strb	r2, [r3, #0]
        *cols_8b++ = PAD8;//right
 800ab4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab4c:	1c5a      	adds	r2, r3, #1
 800ab4e:	627a      	str	r2, [r7, #36]	@ 0x24
 800ab50:	7dfa      	ldrb	r2, [r7, #23]
 800ab52:	701a      	strb	r2, [r3, #0]
        *cols_8b++ = PAD8;//right
 800ab54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab56:	1c5a      	adds	r2, r3, #1
 800ab58:	627a      	str	r2, [r7, #36]	@ 0x24
 800ab5a:	7dfa      	ldrb	r2, [r7, #23]
 800ab5c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < input_y; i++){
 800ab5e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800ab60:	3301      	adds	r3, #1
 800ab62:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800ab64:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800ab66:	893b      	ldrh	r3, [r7, #8]
 800ab68:	429a      	cmp	r2, r3
 800ab6a:	d3d6      	bcc.n	800ab1a <depthwise_kernel7x7_stride2_inplace_CHW+0x62>
    }

    //bottom region: 8bit x (input_x + pad_w * 2) x pad_h: unroll by pad value
    for(i = 0; i < input_x + 6; i++){
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800ab70:	e011      	b.n	800ab96 <depthwise_kernel7x7_stride2_inplace_CHW+0xde>
        *cols_8b++ = PAD8;
 800ab72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab74:	1c5a      	adds	r2, r3, #1
 800ab76:	627a      	str	r2, [r7, #36]	@ 0x24
 800ab78:	7dfa      	ldrb	r2, [r7, #23]
 800ab7a:	701a      	strb	r2, [r3, #0]
        *cols_8b++ = PAD8;
 800ab7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab7e:	1c5a      	adds	r2, r3, #1
 800ab80:	627a      	str	r2, [r7, #36]	@ 0x24
 800ab82:	7dfa      	ldrb	r2, [r7, #23]
 800ab84:	701a      	strb	r2, [r3, #0]
        *cols_8b++ = PAD8;
 800ab86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab88:	1c5a      	adds	r2, r3, #1
 800ab8a:	627a      	str	r2, [r7, #36]	@ 0x24
 800ab8c:	7dfa      	ldrb	r2, [r7, #23]
 800ab8e:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < input_x + 6; i++){
 800ab90:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800ab92:	3301      	adds	r3, #1
 800ab94:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800ab96:	897b      	ldrh	r3, [r7, #10]
 800ab98:	1d5a      	adds	r2, r3, #5
 800ab9a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800ab9c:	429a      	cmp	r2, r3
 800ab9e:	dae8      	bge.n	800ab72 <depthwise_kernel7x7_stride2_inplace_CHW+0xba>
    }

    const q7_t *src;
    const q7_t *ksrc = kernel;
 800aba0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aba2:	61fb      	str	r3, [r7, #28]

    for (c = 0; c < input_ch; c++){
 800aba4:	2300      	movs	r3, #0
 800aba6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800aba8:	e061      	b.n	800ac6e <depthwise_kernel7x7_stride2_inplace_CHW+0x1b6>
        cols_8b = (q7_t*)(cols_8b_start + 3 * (input_x) + 18); //skip 3 rows
 800abaa:	897a      	ldrh	r2, [r7, #10]
 800abac:	4613      	mov	r3, r2
 800abae:	005b      	lsls	r3, r3, #1
 800abb0:	4413      	add	r3, r2
 800abb2:	3312      	adds	r3, #18
 800abb4:	69ba      	ldr	r2, [r7, #24]
 800abb6:	4413      	add	r3, r2
 800abb8:	627b      	str	r3, [r7, #36]	@ 0x24
        src = input;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	623b      	str	r3, [r7, #32]
        for(i = 0; i < input_y; i++){
 800abbe:	2300      	movs	r3, #0
 800abc0:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800abc2:	e01d      	b.n	800ac00 <depthwise_kernel7x7_stride2_inplace_CHW+0x148>
            cols_8b += 3;//skip front
 800abc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abc6:	3303      	adds	r3, #3
 800abc8:	627b      	str	r3, [r7, #36]	@ 0x24
            for(j = 0; j < input_x; j++){
 800abca:	2300      	movs	r3, #0
 800abcc:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800abce:	e00d      	b.n	800abec <depthwise_kernel7x7_stride2_inplace_CHW+0x134>
                *cols_8b++ = *src;// + input_offset;
 800abd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abd2:	1c5a      	adds	r2, r3, #1
 800abd4:	627a      	str	r2, [r7, #36]	@ 0x24
 800abd6:	6a3a      	ldr	r2, [r7, #32]
 800abd8:	f992 2000 	ldrsb.w	r2, [r2]
 800abdc:	701a      	strb	r2, [r3, #0]
                src += input_ch;
 800abde:	88fb      	ldrh	r3, [r7, #6]
 800abe0:	6a3a      	ldr	r2, [r7, #32]
 800abe2:	4413      	add	r3, r2
 800abe4:	623b      	str	r3, [r7, #32]
            for(j = 0; j < input_x; j++){
 800abe6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800abe8:	3301      	adds	r3, #1
 800abea:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800abec:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800abee:	897b      	ldrh	r3, [r7, #10]
 800abf0:	429a      	cmp	r2, r3
 800abf2:	d3ed      	bcc.n	800abd0 <depthwise_kernel7x7_stride2_inplace_CHW+0x118>
            }
            cols_8b += 3;//skip end
 800abf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abf6:	3303      	adds	r3, #3
 800abf8:	627b      	str	r3, [r7, #36]	@ 0x24
        for(i = 0; i < input_y; i++){
 800abfa:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800abfc:	3301      	adds	r3, #1
 800abfe:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800ac00:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800ac02:	893b      	ldrh	r3, [r7, #8]
 800ac04:	429a      	cmp	r2, r3
 800ac06:	d3dd      	bcc.n	800abc4 <depthwise_kernel7x7_stride2_inplace_CHW+0x10c>
        }
        q7_t *inplace_out = input;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	613b      	str	r3, [r7, #16]
        depthwise_kernel7x7_stride2_inplace_kernel_CHW(output_y, output_x, bias++, biasR++, ksrc, output_mult++, output_shift++, inplace_out,output_offset,output_activation_min, output_activation_max,cols_8b_start, input_x, input_ch);
 800ac0c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800ac0e:	1d0b      	adds	r3, r1, #4
 800ac10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ac12:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800ac14:	1d03      	adds	r3, r0, #4
 800ac16:	653b      	str	r3, [r7, #80]	@ 0x50
 800ac18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ac1a:	1d1a      	adds	r2, r3, #4
 800ac1c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800ac1e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ac20:	1d14      	adds	r4, r2, #4
 800ac22:	657c      	str	r4, [r7, #84]	@ 0x54
 800ac24:	88fc      	ldrh	r4, [r7, #6]
 800ac26:	f8b7 6070 	ldrh.w	r6, [r7, #112]	@ 0x70
 800ac2a:	f8b7 5074 	ldrh.w	r5, [r7, #116]	@ 0x74
 800ac2e:	9409      	str	r4, [sp, #36]	@ 0x24
 800ac30:	897c      	ldrh	r4, [r7, #10]
 800ac32:	9408      	str	r4, [sp, #32]
 800ac34:	69bc      	ldr	r4, [r7, #24]
 800ac36:	9407      	str	r4, [sp, #28]
 800ac38:	6ebc      	ldr	r4, [r7, #104]	@ 0x68
 800ac3a:	9406      	str	r4, [sp, #24]
 800ac3c:	6e7c      	ldr	r4, [r7, #100]	@ 0x64
 800ac3e:	9405      	str	r4, [sp, #20]
 800ac40:	6dfc      	ldr	r4, [r7, #92]	@ 0x5c
 800ac42:	9404      	str	r4, [sp, #16]
 800ac44:	693c      	ldr	r4, [r7, #16]
 800ac46:	9403      	str	r4, [sp, #12]
 800ac48:	9202      	str	r2, [sp, #8]
 800ac4a:	9301      	str	r3, [sp, #4]
 800ac4c:	69fb      	ldr	r3, [r7, #28]
 800ac4e:	9300      	str	r3, [sp, #0]
 800ac50:	4603      	mov	r3, r0
 800ac52:	460a      	mov	r2, r1
 800ac54:	4631      	mov	r1, r6
 800ac56:	4628      	mov	r0, r5
 800ac58:	f000 f812 	bl	800ac80 <depthwise_kernel7x7_stride2_inplace_kernel_CHW>
        ksrc += 49;
 800ac5c:	69fb      	ldr	r3, [r7, #28]
 800ac5e:	3331      	adds	r3, #49	@ 0x31
 800ac60:	61fb      	str	r3, [r7, #28]
        input++;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	3301      	adds	r3, #1
 800ac66:	60fb      	str	r3, [r7, #12]
    for (c = 0; c < input_ch; c++){
 800ac68:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ac6a:	3301      	adds	r3, #1
 800ac6c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800ac6e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800ac70:	88fb      	ldrh	r3, [r7, #6]
 800ac72:	429a      	cmp	r2, r3
 800ac74:	d399      	bcc.n	800abaa <depthwise_kernel7x7_stride2_inplace_CHW+0xf2>
    }
    return STATE_SUCCESS;
 800ac76:	2300      	movs	r3, #0
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	3734      	adds	r7, #52	@ 0x34
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ac80 <depthwise_kernel7x7_stride2_inplace_kernel_CHW>:
        const uint16_t output_y, const uint16_t output_x,
        const int32_t *bias, const int32_t *biasR, const q7_t *ksrc, const int32_t *multiplier,
        const int32_t *shift, q7_t *output, const int32_t output_offset,
        const int32_t activation_min, const int32_t activation_max,
        q7_t *cols_8b_iterptr, const uint16_t column_x, int channel_offset)
{
 800ac80:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ac84:	b0c8      	sub	sp, #288	@ 0x120
 800ac86:	af00      	add	r7, sp, #0
 800ac88:	653a      	str	r2, [r7, #80]	@ 0x50
 800ac8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800ac92:	460b      	mov	r3, r1
 800ac94:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    #define STRIDE 2
    int i, j;
    /* MACs for each output */
    for (i = 0; i < output_y; i++) {
 800ac98:	2300      	movs	r3, #0
 800ac9a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800ac9e:	f001 bd62 	b.w	800c766 <depthwise_kernel7x7_stride2_inplace_kernel_CHW+0x1ae6>
        for (j = 0; j < output_x / 2; j++) {
 800aca2:	2300      	movs	r3, #0
 800aca4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800aca8:	f001 b8c3 	b.w	800be32 <depthwise_kernel7x7_stride2_inplace_kernel_CHW+0x11b2>
            q7_t *cols_8b = cols_8b_iterptr;
 800acac:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800acb0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

            q31_t sum0 = bias[0] + biasR[0];
 800acb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800acb6:	681a      	ldr	r2, [r3, #0]
 800acb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	4413      	add	r3, r2
 800acbe:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            q31_t sum1 = bias[0] + biasR[0];
 800acc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800acc4:	681a      	ldr	r2, [r3, #0]
 800acc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	4413      	add	r3, r2
 800accc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            
            /* computation */
            sum0 += cols_8b[0]*ksrc[0];
 800acd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acd4:	f993 3000 	ldrsb.w	r3, [r3]
 800acd8:	461a      	mov	r2, r3
 800acda:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800acde:	f993 3000 	ldrsb.w	r3, [r3]
 800ace2:	fb03 f202 	mul.w	r2, r3, r2
 800ace6:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800acea:	4413      	add	r3, r2
 800acec:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[2]*ksrc[0];
 800acf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acf4:	3302      	adds	r3, #2
 800acf6:	f993 3000 	ldrsb.w	r3, [r3]
 800acfa:	461a      	mov	r2, r3
 800acfc:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800ad00:	f993 3000 	ldrsb.w	r3, [r3]
 800ad04:	fb03 f202 	mul.w	r2, r3, r2
 800ad08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad0c:	4413      	add	r3, r2
 800ad0e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[1]*ksrc[1];
 800ad12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad16:	3301      	adds	r3, #1
 800ad18:	f993 3000 	ldrsb.w	r3, [r3]
 800ad1c:	461a      	mov	r2, r3
 800ad1e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800ad22:	3301      	adds	r3, #1
 800ad24:	f993 3000 	ldrsb.w	r3, [r3]
 800ad28:	fb03 f202 	mul.w	r2, r3, r2
 800ad2c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800ad30:	4413      	add	r3, r2
 800ad32:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[3]*ksrc[1];
 800ad36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad3a:	3303      	adds	r3, #3
 800ad3c:	f993 3000 	ldrsb.w	r3, [r3]
 800ad40:	461a      	mov	r2, r3
 800ad42:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800ad46:	3301      	adds	r3, #1
 800ad48:	f993 3000 	ldrsb.w	r3, [r3]
 800ad4c:	fb03 f202 	mul.w	r2, r3, r2
 800ad50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad54:	4413      	add	r3, r2
 800ad56:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[2]*ksrc[2];
 800ad5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad5e:	3302      	adds	r3, #2
 800ad60:	f993 3000 	ldrsb.w	r3, [r3]
 800ad64:	461a      	mov	r2, r3
 800ad66:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800ad6a:	3302      	adds	r3, #2
 800ad6c:	f993 3000 	ldrsb.w	r3, [r3]
 800ad70:	fb03 f202 	mul.w	r2, r3, r2
 800ad74:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800ad78:	4413      	add	r3, r2
 800ad7a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[4]*ksrc[2];
 800ad7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad82:	3304      	adds	r3, #4
 800ad84:	f993 3000 	ldrsb.w	r3, [r3]
 800ad88:	461a      	mov	r2, r3
 800ad8a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800ad8e:	3302      	adds	r3, #2
 800ad90:	f993 3000 	ldrsb.w	r3, [r3]
 800ad94:	fb03 f202 	mul.w	r2, r3, r2
 800ad98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad9c:	4413      	add	r3, r2
 800ad9e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[3]*ksrc[3];
 800ada2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ada6:	3303      	adds	r3, #3
 800ada8:	f993 3000 	ldrsb.w	r3, [r3]
 800adac:	461a      	mov	r2, r3
 800adae:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800adb2:	3303      	adds	r3, #3
 800adb4:	f993 3000 	ldrsb.w	r3, [r3]
 800adb8:	fb03 f202 	mul.w	r2, r3, r2
 800adbc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800adc0:	4413      	add	r3, r2
 800adc2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[5]*ksrc[3];
 800adc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800adca:	3305      	adds	r3, #5
 800adcc:	f993 3000 	ldrsb.w	r3, [r3]
 800add0:	461a      	mov	r2, r3
 800add2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800add6:	3303      	adds	r3, #3
 800add8:	f993 3000 	ldrsb.w	r3, [r3]
 800addc:	fb03 f202 	mul.w	r2, r3, r2
 800ade0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ade4:	4413      	add	r3, r2
 800ade6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[4]*ksrc[4];
 800adea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800adee:	3304      	adds	r3, #4
 800adf0:	f993 3000 	ldrsb.w	r3, [r3]
 800adf4:	461a      	mov	r2, r3
 800adf6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800adfa:	3304      	adds	r3, #4
 800adfc:	f993 3000 	ldrsb.w	r3, [r3]
 800ae00:	fb03 f202 	mul.w	r2, r3, r2
 800ae04:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800ae08:	4413      	add	r3, r2
 800ae0a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[6]*ksrc[4];
 800ae0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae12:	3306      	adds	r3, #6
 800ae14:	f993 3000 	ldrsb.w	r3, [r3]
 800ae18:	461a      	mov	r2, r3
 800ae1a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800ae1e:	3304      	adds	r3, #4
 800ae20:	f993 3000 	ldrsb.w	r3, [r3]
 800ae24:	fb03 f202 	mul.w	r2, r3, r2
 800ae28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae2c:	4413      	add	r3, r2
 800ae2e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[5]*ksrc[5];
 800ae32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae36:	3305      	adds	r3, #5
 800ae38:	f993 3000 	ldrsb.w	r3, [r3]
 800ae3c:	461a      	mov	r2, r3
 800ae3e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800ae42:	3305      	adds	r3, #5
 800ae44:	f993 3000 	ldrsb.w	r3, [r3]
 800ae48:	fb03 f202 	mul.w	r2, r3, r2
 800ae4c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800ae50:	4413      	add	r3, r2
 800ae52:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[7]*ksrc[5];
 800ae56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae5a:	3307      	adds	r3, #7
 800ae5c:	f993 3000 	ldrsb.w	r3, [r3]
 800ae60:	461a      	mov	r2, r3
 800ae62:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800ae66:	3305      	adds	r3, #5
 800ae68:	f993 3000 	ldrsb.w	r3, [r3]
 800ae6c:	fb03 f202 	mul.w	r2, r3, r2
 800ae70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae74:	4413      	add	r3, r2
 800ae76:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[6]*ksrc[6];
 800ae7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae7e:	3306      	adds	r3, #6
 800ae80:	f993 3000 	ldrsb.w	r3, [r3]
 800ae84:	461a      	mov	r2, r3
 800ae86:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800ae8a:	3306      	adds	r3, #6
 800ae8c:	f993 3000 	ldrsb.w	r3, [r3]
 800ae90:	fb03 f202 	mul.w	r2, r3, r2
 800ae94:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800ae98:	4413      	add	r3, r2
 800ae9a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[8]*ksrc[6];
 800ae9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aea2:	3308      	adds	r3, #8
 800aea4:	f993 3000 	ldrsb.w	r3, [r3]
 800aea8:	461a      	mov	r2, r3
 800aeaa:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800aeae:	3306      	adds	r3, #6
 800aeb0:	f993 3000 	ldrsb.w	r3, [r3]
 800aeb4:	fb03 f202 	mul.w	r2, r3, r2
 800aeb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aebc:	4413      	add	r3, r2
 800aebe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            cols_8b += column_x + 6;
 800aec2:	f8b7 3160 	ldrh.w	r3, [r7, #352]	@ 0x160
 800aec6:	1d9a      	adds	r2, r3, #6
 800aec8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aecc:	4413      	add	r3, r2
 800aece:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
            sum0 += cols_8b[0]*ksrc[7];
 800aed2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aed6:	f993 3000 	ldrsb.w	r3, [r3]
 800aeda:	461a      	mov	r2, r3
 800aedc:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800aee0:	3307      	adds	r3, #7
 800aee2:	f993 3000 	ldrsb.w	r3, [r3]
 800aee6:	fb03 f202 	mul.w	r2, r3, r2
 800aeea:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800aeee:	4413      	add	r3, r2
 800aef0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[2]*ksrc[7];
 800aef4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aef8:	3302      	adds	r3, #2
 800aefa:	f993 3000 	ldrsb.w	r3, [r3]
 800aefe:	461a      	mov	r2, r3
 800af00:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800af04:	3307      	adds	r3, #7
 800af06:	f993 3000 	ldrsb.w	r3, [r3]
 800af0a:	fb03 f202 	mul.w	r2, r3, r2
 800af0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af12:	4413      	add	r3, r2
 800af14:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[1]*ksrc[8];
 800af18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af1c:	3301      	adds	r3, #1
 800af1e:	f993 3000 	ldrsb.w	r3, [r3]
 800af22:	461a      	mov	r2, r3
 800af24:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800af28:	3308      	adds	r3, #8
 800af2a:	f993 3000 	ldrsb.w	r3, [r3]
 800af2e:	fb03 f202 	mul.w	r2, r3, r2
 800af32:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800af36:	4413      	add	r3, r2
 800af38:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[3]*ksrc[8];
 800af3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af40:	3303      	adds	r3, #3
 800af42:	f993 3000 	ldrsb.w	r3, [r3]
 800af46:	461a      	mov	r2, r3
 800af48:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800af4c:	3308      	adds	r3, #8
 800af4e:	f993 3000 	ldrsb.w	r3, [r3]
 800af52:	fb03 f202 	mul.w	r2, r3, r2
 800af56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af5a:	4413      	add	r3, r2
 800af5c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[2]*ksrc[9];
 800af60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af64:	3302      	adds	r3, #2
 800af66:	f993 3000 	ldrsb.w	r3, [r3]
 800af6a:	461a      	mov	r2, r3
 800af6c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800af70:	3309      	adds	r3, #9
 800af72:	f993 3000 	ldrsb.w	r3, [r3]
 800af76:	fb03 f202 	mul.w	r2, r3, r2
 800af7a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800af7e:	4413      	add	r3, r2
 800af80:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[4]*ksrc[9];
 800af84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af88:	3304      	adds	r3, #4
 800af8a:	f993 3000 	ldrsb.w	r3, [r3]
 800af8e:	461a      	mov	r2, r3
 800af90:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800af94:	3309      	adds	r3, #9
 800af96:	f993 3000 	ldrsb.w	r3, [r3]
 800af9a:	fb03 f202 	mul.w	r2, r3, r2
 800af9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afa2:	4413      	add	r3, r2
 800afa4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[3]*ksrc[10];
 800afa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afac:	3303      	adds	r3, #3
 800afae:	f993 3000 	ldrsb.w	r3, [r3]
 800afb2:	461a      	mov	r2, r3
 800afb4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800afb8:	330a      	adds	r3, #10
 800afba:	f993 3000 	ldrsb.w	r3, [r3]
 800afbe:	fb03 f202 	mul.w	r2, r3, r2
 800afc2:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800afc6:	4413      	add	r3, r2
 800afc8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[5]*ksrc[10];
 800afcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afd0:	3305      	adds	r3, #5
 800afd2:	f993 3000 	ldrsb.w	r3, [r3]
 800afd6:	461a      	mov	r2, r3
 800afd8:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800afdc:	330a      	adds	r3, #10
 800afde:	f993 3000 	ldrsb.w	r3, [r3]
 800afe2:	fb03 f202 	mul.w	r2, r3, r2
 800afe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afea:	4413      	add	r3, r2
 800afec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[4]*ksrc[11];
 800aff0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aff4:	3304      	adds	r3, #4
 800aff6:	f993 3000 	ldrsb.w	r3, [r3]
 800affa:	461a      	mov	r2, r3
 800affc:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b000:	330b      	adds	r3, #11
 800b002:	f993 3000 	ldrsb.w	r3, [r3]
 800b006:	fb03 f202 	mul.w	r2, r3, r2
 800b00a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800b00e:	4413      	add	r3, r2
 800b010:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[6]*ksrc[11];
 800b014:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b018:	3306      	adds	r3, #6
 800b01a:	f993 3000 	ldrsb.w	r3, [r3]
 800b01e:	461a      	mov	r2, r3
 800b020:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b024:	330b      	adds	r3, #11
 800b026:	f993 3000 	ldrsb.w	r3, [r3]
 800b02a:	fb03 f202 	mul.w	r2, r3, r2
 800b02e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b032:	4413      	add	r3, r2
 800b034:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[5]*ksrc[12];
 800b038:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b03c:	3305      	adds	r3, #5
 800b03e:	f993 3000 	ldrsb.w	r3, [r3]
 800b042:	461a      	mov	r2, r3
 800b044:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b048:	330c      	adds	r3, #12
 800b04a:	f993 3000 	ldrsb.w	r3, [r3]
 800b04e:	fb03 f202 	mul.w	r2, r3, r2
 800b052:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800b056:	4413      	add	r3, r2
 800b058:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[7]*ksrc[12];
 800b05c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b060:	3307      	adds	r3, #7
 800b062:	f993 3000 	ldrsb.w	r3, [r3]
 800b066:	461a      	mov	r2, r3
 800b068:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b06c:	330c      	adds	r3, #12
 800b06e:	f993 3000 	ldrsb.w	r3, [r3]
 800b072:	fb03 f202 	mul.w	r2, r3, r2
 800b076:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b07a:	4413      	add	r3, r2
 800b07c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[6]*ksrc[13];
 800b080:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b084:	3306      	adds	r3, #6
 800b086:	f993 3000 	ldrsb.w	r3, [r3]
 800b08a:	461a      	mov	r2, r3
 800b08c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b090:	330d      	adds	r3, #13
 800b092:	f993 3000 	ldrsb.w	r3, [r3]
 800b096:	fb03 f202 	mul.w	r2, r3, r2
 800b09a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800b09e:	4413      	add	r3, r2
 800b0a0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[8]*ksrc[13];
 800b0a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0a8:	3308      	adds	r3, #8
 800b0aa:	f993 3000 	ldrsb.w	r3, [r3]
 800b0ae:	461a      	mov	r2, r3
 800b0b0:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b0b4:	330d      	adds	r3, #13
 800b0b6:	f993 3000 	ldrsb.w	r3, [r3]
 800b0ba:	fb03 f202 	mul.w	r2, r3, r2
 800b0be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b0c2:	4413      	add	r3, r2
 800b0c4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            cols_8b += column_x + 6;
 800b0c8:	f8b7 3160 	ldrh.w	r3, [r7, #352]	@ 0x160
 800b0cc:	1d9a      	adds	r2, r3, #6
 800b0ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0d2:	4413      	add	r3, r2
 800b0d4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
            sum0 += cols_8b[0]*ksrc[14];
 800b0d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0dc:	f993 3000 	ldrsb.w	r3, [r3]
 800b0e0:	461a      	mov	r2, r3
 800b0e2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b0e6:	330e      	adds	r3, #14
 800b0e8:	f993 3000 	ldrsb.w	r3, [r3]
 800b0ec:	fb03 f202 	mul.w	r2, r3, r2
 800b0f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800b0f4:	4413      	add	r3, r2
 800b0f6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[2]*ksrc[14];
 800b0fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0fe:	3302      	adds	r3, #2
 800b100:	f993 3000 	ldrsb.w	r3, [r3]
 800b104:	461a      	mov	r2, r3
 800b106:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b10a:	330e      	adds	r3, #14
 800b10c:	f993 3000 	ldrsb.w	r3, [r3]
 800b110:	fb03 f202 	mul.w	r2, r3, r2
 800b114:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b118:	4413      	add	r3, r2
 800b11a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[1]*ksrc[15];
 800b11e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b122:	3301      	adds	r3, #1
 800b124:	f993 3000 	ldrsb.w	r3, [r3]
 800b128:	461a      	mov	r2, r3
 800b12a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b12e:	330f      	adds	r3, #15
 800b130:	f993 3000 	ldrsb.w	r3, [r3]
 800b134:	fb03 f202 	mul.w	r2, r3, r2
 800b138:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800b13c:	4413      	add	r3, r2
 800b13e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[3]*ksrc[15];
 800b142:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b146:	3303      	adds	r3, #3
 800b148:	f993 3000 	ldrsb.w	r3, [r3]
 800b14c:	461a      	mov	r2, r3
 800b14e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b152:	330f      	adds	r3, #15
 800b154:	f993 3000 	ldrsb.w	r3, [r3]
 800b158:	fb03 f202 	mul.w	r2, r3, r2
 800b15c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b160:	4413      	add	r3, r2
 800b162:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[2]*ksrc[16];
 800b166:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b16a:	3302      	adds	r3, #2
 800b16c:	f993 3000 	ldrsb.w	r3, [r3]
 800b170:	461a      	mov	r2, r3
 800b172:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b176:	3310      	adds	r3, #16
 800b178:	f993 3000 	ldrsb.w	r3, [r3]
 800b17c:	fb03 f202 	mul.w	r2, r3, r2
 800b180:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800b184:	4413      	add	r3, r2
 800b186:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[4]*ksrc[16];
 800b18a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b18e:	3304      	adds	r3, #4
 800b190:	f993 3000 	ldrsb.w	r3, [r3]
 800b194:	461a      	mov	r2, r3
 800b196:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b19a:	3310      	adds	r3, #16
 800b19c:	f993 3000 	ldrsb.w	r3, [r3]
 800b1a0:	fb03 f202 	mul.w	r2, r3, r2
 800b1a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1a8:	4413      	add	r3, r2
 800b1aa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[3]*ksrc[17];
 800b1ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1b2:	3303      	adds	r3, #3
 800b1b4:	f993 3000 	ldrsb.w	r3, [r3]
 800b1b8:	461a      	mov	r2, r3
 800b1ba:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b1be:	3311      	adds	r3, #17
 800b1c0:	f993 3000 	ldrsb.w	r3, [r3]
 800b1c4:	fb03 f202 	mul.w	r2, r3, r2
 800b1c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800b1cc:	4413      	add	r3, r2
 800b1ce:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[5]*ksrc[17];
 800b1d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1d6:	3305      	adds	r3, #5
 800b1d8:	f993 3000 	ldrsb.w	r3, [r3]
 800b1dc:	461a      	mov	r2, r3
 800b1de:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b1e2:	3311      	adds	r3, #17
 800b1e4:	f993 3000 	ldrsb.w	r3, [r3]
 800b1e8:	fb03 f202 	mul.w	r2, r3, r2
 800b1ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1f0:	4413      	add	r3, r2
 800b1f2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[4]*ksrc[18];
 800b1f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1fa:	3304      	adds	r3, #4
 800b1fc:	f993 3000 	ldrsb.w	r3, [r3]
 800b200:	461a      	mov	r2, r3
 800b202:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b206:	3312      	adds	r3, #18
 800b208:	f993 3000 	ldrsb.w	r3, [r3]
 800b20c:	fb03 f202 	mul.w	r2, r3, r2
 800b210:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800b214:	4413      	add	r3, r2
 800b216:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[6]*ksrc[18];
 800b21a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b21e:	3306      	adds	r3, #6
 800b220:	f993 3000 	ldrsb.w	r3, [r3]
 800b224:	461a      	mov	r2, r3
 800b226:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b22a:	3312      	adds	r3, #18
 800b22c:	f993 3000 	ldrsb.w	r3, [r3]
 800b230:	fb03 f202 	mul.w	r2, r3, r2
 800b234:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b238:	4413      	add	r3, r2
 800b23a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[5]*ksrc[19];
 800b23e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b242:	3305      	adds	r3, #5
 800b244:	f993 3000 	ldrsb.w	r3, [r3]
 800b248:	461a      	mov	r2, r3
 800b24a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b24e:	3313      	adds	r3, #19
 800b250:	f993 3000 	ldrsb.w	r3, [r3]
 800b254:	fb03 f202 	mul.w	r2, r3, r2
 800b258:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800b25c:	4413      	add	r3, r2
 800b25e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[7]*ksrc[19];
 800b262:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b266:	3307      	adds	r3, #7
 800b268:	f993 3000 	ldrsb.w	r3, [r3]
 800b26c:	461a      	mov	r2, r3
 800b26e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b272:	3313      	adds	r3, #19
 800b274:	f993 3000 	ldrsb.w	r3, [r3]
 800b278:	fb03 f202 	mul.w	r2, r3, r2
 800b27c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b280:	4413      	add	r3, r2
 800b282:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[6]*ksrc[20];
 800b286:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b28a:	3306      	adds	r3, #6
 800b28c:	f993 3000 	ldrsb.w	r3, [r3]
 800b290:	461a      	mov	r2, r3
 800b292:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b296:	3314      	adds	r3, #20
 800b298:	f993 3000 	ldrsb.w	r3, [r3]
 800b29c:	fb03 f202 	mul.w	r2, r3, r2
 800b2a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800b2a4:	4413      	add	r3, r2
 800b2a6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[8]*ksrc[20];
 800b2aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2ae:	3308      	adds	r3, #8
 800b2b0:	f993 3000 	ldrsb.w	r3, [r3]
 800b2b4:	461a      	mov	r2, r3
 800b2b6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b2ba:	3314      	adds	r3, #20
 800b2bc:	f993 3000 	ldrsb.w	r3, [r3]
 800b2c0:	fb03 f202 	mul.w	r2, r3, r2
 800b2c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2c8:	4413      	add	r3, r2
 800b2ca:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            cols_8b += column_x + 6;
 800b2ce:	f8b7 3160 	ldrh.w	r3, [r7, #352]	@ 0x160
 800b2d2:	1d9a      	adds	r2, r3, #6
 800b2d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2d8:	4413      	add	r3, r2
 800b2da:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
            sum0 += cols_8b[0]*ksrc[21];
 800b2de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2e2:	f993 3000 	ldrsb.w	r3, [r3]
 800b2e6:	461a      	mov	r2, r3
 800b2e8:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b2ec:	3315      	adds	r3, #21
 800b2ee:	f993 3000 	ldrsb.w	r3, [r3]
 800b2f2:	fb03 f202 	mul.w	r2, r3, r2
 800b2f6:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800b2fa:	4413      	add	r3, r2
 800b2fc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[2]*ksrc[21];
 800b300:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b304:	3302      	adds	r3, #2
 800b306:	f993 3000 	ldrsb.w	r3, [r3]
 800b30a:	461a      	mov	r2, r3
 800b30c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b310:	3315      	adds	r3, #21
 800b312:	f993 3000 	ldrsb.w	r3, [r3]
 800b316:	fb03 f202 	mul.w	r2, r3, r2
 800b31a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b31e:	4413      	add	r3, r2
 800b320:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[1]*ksrc[22];
 800b324:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b328:	3301      	adds	r3, #1
 800b32a:	f993 3000 	ldrsb.w	r3, [r3]
 800b32e:	461a      	mov	r2, r3
 800b330:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b334:	3316      	adds	r3, #22
 800b336:	f993 3000 	ldrsb.w	r3, [r3]
 800b33a:	fb03 f202 	mul.w	r2, r3, r2
 800b33e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800b342:	4413      	add	r3, r2
 800b344:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[3]*ksrc[22];
 800b348:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b34c:	3303      	adds	r3, #3
 800b34e:	f993 3000 	ldrsb.w	r3, [r3]
 800b352:	461a      	mov	r2, r3
 800b354:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b358:	3316      	adds	r3, #22
 800b35a:	f993 3000 	ldrsb.w	r3, [r3]
 800b35e:	fb03 f202 	mul.w	r2, r3, r2
 800b362:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b366:	4413      	add	r3, r2
 800b368:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[2]*ksrc[23];
 800b36c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b370:	3302      	adds	r3, #2
 800b372:	f993 3000 	ldrsb.w	r3, [r3]
 800b376:	461a      	mov	r2, r3
 800b378:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b37c:	3317      	adds	r3, #23
 800b37e:	f993 3000 	ldrsb.w	r3, [r3]
 800b382:	fb03 f202 	mul.w	r2, r3, r2
 800b386:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800b38a:	4413      	add	r3, r2
 800b38c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[4]*ksrc[23];
 800b390:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b394:	3304      	adds	r3, #4
 800b396:	f993 3000 	ldrsb.w	r3, [r3]
 800b39a:	461a      	mov	r2, r3
 800b39c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b3a0:	3317      	adds	r3, #23
 800b3a2:	f993 3000 	ldrsb.w	r3, [r3]
 800b3a6:	fb03 f202 	mul.w	r2, r3, r2
 800b3aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b3ae:	4413      	add	r3, r2
 800b3b0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[3]*ksrc[24];
 800b3b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3b8:	3303      	adds	r3, #3
 800b3ba:	f993 3000 	ldrsb.w	r3, [r3]
 800b3be:	461a      	mov	r2, r3
 800b3c0:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b3c4:	3318      	adds	r3, #24
 800b3c6:	f993 3000 	ldrsb.w	r3, [r3]
 800b3ca:	fb03 f202 	mul.w	r2, r3, r2
 800b3ce:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800b3d2:	4413      	add	r3, r2
 800b3d4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[5]*ksrc[24];
 800b3d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3dc:	3305      	adds	r3, #5
 800b3de:	f993 3000 	ldrsb.w	r3, [r3]
 800b3e2:	461a      	mov	r2, r3
 800b3e4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b3e8:	3318      	adds	r3, #24
 800b3ea:	f993 3000 	ldrsb.w	r3, [r3]
 800b3ee:	fb03 f202 	mul.w	r2, r3, r2
 800b3f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b3f6:	4413      	add	r3, r2
 800b3f8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[4]*ksrc[25];
 800b3fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b400:	3304      	adds	r3, #4
 800b402:	f993 3000 	ldrsb.w	r3, [r3]
 800b406:	461a      	mov	r2, r3
 800b408:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b40c:	3319      	adds	r3, #25
 800b40e:	f993 3000 	ldrsb.w	r3, [r3]
 800b412:	fb03 f202 	mul.w	r2, r3, r2
 800b416:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800b41a:	4413      	add	r3, r2
 800b41c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[6]*ksrc[25];
 800b420:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b424:	3306      	adds	r3, #6
 800b426:	f993 3000 	ldrsb.w	r3, [r3]
 800b42a:	461a      	mov	r2, r3
 800b42c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b430:	3319      	adds	r3, #25
 800b432:	f993 3000 	ldrsb.w	r3, [r3]
 800b436:	fb03 f202 	mul.w	r2, r3, r2
 800b43a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b43e:	4413      	add	r3, r2
 800b440:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[5]*ksrc[26];
 800b444:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b448:	3305      	adds	r3, #5
 800b44a:	f993 3000 	ldrsb.w	r3, [r3]
 800b44e:	461a      	mov	r2, r3
 800b450:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b454:	331a      	adds	r3, #26
 800b456:	f993 3000 	ldrsb.w	r3, [r3]
 800b45a:	fb03 f202 	mul.w	r2, r3, r2
 800b45e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800b462:	4413      	add	r3, r2
 800b464:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[7]*ksrc[26];
 800b468:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b46c:	3307      	adds	r3, #7
 800b46e:	f993 3000 	ldrsb.w	r3, [r3]
 800b472:	461a      	mov	r2, r3
 800b474:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b478:	331a      	adds	r3, #26
 800b47a:	f993 3000 	ldrsb.w	r3, [r3]
 800b47e:	fb03 f202 	mul.w	r2, r3, r2
 800b482:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b486:	4413      	add	r3, r2
 800b488:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[6]*ksrc[27];
 800b48c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b490:	3306      	adds	r3, #6
 800b492:	f993 3000 	ldrsb.w	r3, [r3]
 800b496:	461a      	mov	r2, r3
 800b498:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b49c:	331b      	adds	r3, #27
 800b49e:	f993 3000 	ldrsb.w	r3, [r3]
 800b4a2:	fb03 f202 	mul.w	r2, r3, r2
 800b4a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800b4aa:	4413      	add	r3, r2
 800b4ac:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[8]*ksrc[27];
 800b4b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4b4:	3308      	adds	r3, #8
 800b4b6:	f993 3000 	ldrsb.w	r3, [r3]
 800b4ba:	461a      	mov	r2, r3
 800b4bc:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b4c0:	331b      	adds	r3, #27
 800b4c2:	f993 3000 	ldrsb.w	r3, [r3]
 800b4c6:	fb03 f202 	mul.w	r2, r3, r2
 800b4ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4ce:	4413      	add	r3, r2
 800b4d0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            cols_8b += column_x + 6;
 800b4d4:	f8b7 3160 	ldrh.w	r3, [r7, #352]	@ 0x160
 800b4d8:	1d9a      	adds	r2, r3, #6
 800b4da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4de:	4413      	add	r3, r2
 800b4e0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
            sum0 += cols_8b[0]*ksrc[28];
 800b4e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4e8:	f993 3000 	ldrsb.w	r3, [r3]
 800b4ec:	461a      	mov	r2, r3
 800b4ee:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b4f2:	331c      	adds	r3, #28
 800b4f4:	f993 3000 	ldrsb.w	r3, [r3]
 800b4f8:	fb03 f202 	mul.w	r2, r3, r2
 800b4fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800b500:	4413      	add	r3, r2
 800b502:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[2]*ksrc[28];
 800b506:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b50a:	3302      	adds	r3, #2
 800b50c:	f993 3000 	ldrsb.w	r3, [r3]
 800b510:	461a      	mov	r2, r3
 800b512:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b516:	331c      	adds	r3, #28
 800b518:	f993 3000 	ldrsb.w	r3, [r3]
 800b51c:	fb03 f202 	mul.w	r2, r3, r2
 800b520:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b524:	4413      	add	r3, r2
 800b526:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[1]*ksrc[29];
 800b52a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b52e:	3301      	adds	r3, #1
 800b530:	f993 3000 	ldrsb.w	r3, [r3]
 800b534:	461a      	mov	r2, r3
 800b536:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b53a:	331d      	adds	r3, #29
 800b53c:	f993 3000 	ldrsb.w	r3, [r3]
 800b540:	fb03 f202 	mul.w	r2, r3, r2
 800b544:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800b548:	4413      	add	r3, r2
 800b54a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[3]*ksrc[29];
 800b54e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b552:	3303      	adds	r3, #3
 800b554:	f993 3000 	ldrsb.w	r3, [r3]
 800b558:	461a      	mov	r2, r3
 800b55a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b55e:	331d      	adds	r3, #29
 800b560:	f993 3000 	ldrsb.w	r3, [r3]
 800b564:	fb03 f202 	mul.w	r2, r3, r2
 800b568:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b56c:	4413      	add	r3, r2
 800b56e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[2]*ksrc[30];
 800b572:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b576:	3302      	adds	r3, #2
 800b578:	f993 3000 	ldrsb.w	r3, [r3]
 800b57c:	461a      	mov	r2, r3
 800b57e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b582:	331e      	adds	r3, #30
 800b584:	f993 3000 	ldrsb.w	r3, [r3]
 800b588:	fb03 f202 	mul.w	r2, r3, r2
 800b58c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800b590:	4413      	add	r3, r2
 800b592:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[4]*ksrc[30];
 800b596:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b59a:	3304      	adds	r3, #4
 800b59c:	f993 3000 	ldrsb.w	r3, [r3]
 800b5a0:	461a      	mov	r2, r3
 800b5a2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b5a6:	331e      	adds	r3, #30
 800b5a8:	f993 3000 	ldrsb.w	r3, [r3]
 800b5ac:	fb03 f202 	mul.w	r2, r3, r2
 800b5b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5b4:	4413      	add	r3, r2
 800b5b6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[3]*ksrc[31];
 800b5ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5be:	3303      	adds	r3, #3
 800b5c0:	f993 3000 	ldrsb.w	r3, [r3]
 800b5c4:	461a      	mov	r2, r3
 800b5c6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b5ca:	331f      	adds	r3, #31
 800b5cc:	f993 3000 	ldrsb.w	r3, [r3]
 800b5d0:	fb03 f202 	mul.w	r2, r3, r2
 800b5d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800b5d8:	4413      	add	r3, r2
 800b5da:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[5]*ksrc[31];
 800b5de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5e2:	3305      	adds	r3, #5
 800b5e4:	f993 3000 	ldrsb.w	r3, [r3]
 800b5e8:	461a      	mov	r2, r3
 800b5ea:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b5ee:	331f      	adds	r3, #31
 800b5f0:	f993 3000 	ldrsb.w	r3, [r3]
 800b5f4:	fb03 f202 	mul.w	r2, r3, r2
 800b5f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5fc:	4413      	add	r3, r2
 800b5fe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[4]*ksrc[32];
 800b602:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b606:	3304      	adds	r3, #4
 800b608:	f993 3000 	ldrsb.w	r3, [r3]
 800b60c:	461a      	mov	r2, r3
 800b60e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b612:	3320      	adds	r3, #32
 800b614:	f993 3000 	ldrsb.w	r3, [r3]
 800b618:	fb03 f202 	mul.w	r2, r3, r2
 800b61c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800b620:	4413      	add	r3, r2
 800b622:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[6]*ksrc[32];
 800b626:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b62a:	3306      	adds	r3, #6
 800b62c:	f993 3000 	ldrsb.w	r3, [r3]
 800b630:	461a      	mov	r2, r3
 800b632:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b636:	3320      	adds	r3, #32
 800b638:	f993 3000 	ldrsb.w	r3, [r3]
 800b63c:	fb03 f202 	mul.w	r2, r3, r2
 800b640:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b644:	4413      	add	r3, r2
 800b646:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[5]*ksrc[33];
 800b64a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b64e:	3305      	adds	r3, #5
 800b650:	f993 3000 	ldrsb.w	r3, [r3]
 800b654:	461a      	mov	r2, r3
 800b656:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b65a:	3321      	adds	r3, #33	@ 0x21
 800b65c:	f993 3000 	ldrsb.w	r3, [r3]
 800b660:	fb03 f202 	mul.w	r2, r3, r2
 800b664:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800b668:	4413      	add	r3, r2
 800b66a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[7]*ksrc[33];
 800b66e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b672:	3307      	adds	r3, #7
 800b674:	f993 3000 	ldrsb.w	r3, [r3]
 800b678:	461a      	mov	r2, r3
 800b67a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b67e:	3321      	adds	r3, #33	@ 0x21
 800b680:	f993 3000 	ldrsb.w	r3, [r3]
 800b684:	fb03 f202 	mul.w	r2, r3, r2
 800b688:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b68c:	4413      	add	r3, r2
 800b68e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[6]*ksrc[34];
 800b692:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b696:	3306      	adds	r3, #6
 800b698:	f993 3000 	ldrsb.w	r3, [r3]
 800b69c:	461a      	mov	r2, r3
 800b69e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b6a2:	3322      	adds	r3, #34	@ 0x22
 800b6a4:	f993 3000 	ldrsb.w	r3, [r3]
 800b6a8:	fb03 f202 	mul.w	r2, r3, r2
 800b6ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800b6b0:	4413      	add	r3, r2
 800b6b2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[8]*ksrc[34];
 800b6b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6ba:	3308      	adds	r3, #8
 800b6bc:	f993 3000 	ldrsb.w	r3, [r3]
 800b6c0:	461a      	mov	r2, r3
 800b6c2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b6c6:	3322      	adds	r3, #34	@ 0x22
 800b6c8:	f993 3000 	ldrsb.w	r3, [r3]
 800b6cc:	fb03 f202 	mul.w	r2, r3, r2
 800b6d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6d4:	4413      	add	r3, r2
 800b6d6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            cols_8b += column_x + 6;
 800b6da:	f8b7 3160 	ldrh.w	r3, [r7, #352]	@ 0x160
 800b6de:	1d9a      	adds	r2, r3, #6
 800b6e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6e4:	4413      	add	r3, r2
 800b6e6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
            sum0 += cols_8b[0]*ksrc[35];
 800b6ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6ee:	f993 3000 	ldrsb.w	r3, [r3]
 800b6f2:	461a      	mov	r2, r3
 800b6f4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b6f8:	3323      	adds	r3, #35	@ 0x23
 800b6fa:	f993 3000 	ldrsb.w	r3, [r3]
 800b6fe:	fb03 f202 	mul.w	r2, r3, r2
 800b702:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800b706:	4413      	add	r3, r2
 800b708:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[2]*ksrc[35];
 800b70c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b710:	3302      	adds	r3, #2
 800b712:	f993 3000 	ldrsb.w	r3, [r3]
 800b716:	461a      	mov	r2, r3
 800b718:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b71c:	3323      	adds	r3, #35	@ 0x23
 800b71e:	f993 3000 	ldrsb.w	r3, [r3]
 800b722:	fb03 f202 	mul.w	r2, r3, r2
 800b726:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b72a:	4413      	add	r3, r2
 800b72c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[1]*ksrc[36];
 800b730:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b734:	3301      	adds	r3, #1
 800b736:	f993 3000 	ldrsb.w	r3, [r3]
 800b73a:	461a      	mov	r2, r3
 800b73c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b740:	3324      	adds	r3, #36	@ 0x24
 800b742:	f993 3000 	ldrsb.w	r3, [r3]
 800b746:	fb03 f202 	mul.w	r2, r3, r2
 800b74a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800b74e:	4413      	add	r3, r2
 800b750:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[3]*ksrc[36];
 800b754:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b758:	3303      	adds	r3, #3
 800b75a:	f993 3000 	ldrsb.w	r3, [r3]
 800b75e:	461a      	mov	r2, r3
 800b760:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b764:	3324      	adds	r3, #36	@ 0x24
 800b766:	f993 3000 	ldrsb.w	r3, [r3]
 800b76a:	fb03 f202 	mul.w	r2, r3, r2
 800b76e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b772:	4413      	add	r3, r2
 800b774:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[2]*ksrc[37];
 800b778:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b77c:	3302      	adds	r3, #2
 800b77e:	f993 3000 	ldrsb.w	r3, [r3]
 800b782:	461a      	mov	r2, r3
 800b784:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b788:	3325      	adds	r3, #37	@ 0x25
 800b78a:	f993 3000 	ldrsb.w	r3, [r3]
 800b78e:	fb03 f202 	mul.w	r2, r3, r2
 800b792:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800b796:	4413      	add	r3, r2
 800b798:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[4]*ksrc[37];
 800b79c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7a0:	3304      	adds	r3, #4
 800b7a2:	f993 3000 	ldrsb.w	r3, [r3]
 800b7a6:	461a      	mov	r2, r3
 800b7a8:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b7ac:	3325      	adds	r3, #37	@ 0x25
 800b7ae:	f993 3000 	ldrsb.w	r3, [r3]
 800b7b2:	fb03 f202 	mul.w	r2, r3, r2
 800b7b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7ba:	4413      	add	r3, r2
 800b7bc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[3]*ksrc[38];
 800b7c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7c4:	3303      	adds	r3, #3
 800b7c6:	f993 3000 	ldrsb.w	r3, [r3]
 800b7ca:	461a      	mov	r2, r3
 800b7cc:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b7d0:	3326      	adds	r3, #38	@ 0x26
 800b7d2:	f993 3000 	ldrsb.w	r3, [r3]
 800b7d6:	fb03 f202 	mul.w	r2, r3, r2
 800b7da:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800b7de:	4413      	add	r3, r2
 800b7e0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[5]*ksrc[38];
 800b7e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7e8:	3305      	adds	r3, #5
 800b7ea:	f993 3000 	ldrsb.w	r3, [r3]
 800b7ee:	461a      	mov	r2, r3
 800b7f0:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b7f4:	3326      	adds	r3, #38	@ 0x26
 800b7f6:	f993 3000 	ldrsb.w	r3, [r3]
 800b7fa:	fb03 f202 	mul.w	r2, r3, r2
 800b7fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b802:	4413      	add	r3, r2
 800b804:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[4]*ksrc[39];
 800b808:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b80c:	3304      	adds	r3, #4
 800b80e:	f993 3000 	ldrsb.w	r3, [r3]
 800b812:	461a      	mov	r2, r3
 800b814:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b818:	3327      	adds	r3, #39	@ 0x27
 800b81a:	f993 3000 	ldrsb.w	r3, [r3]
 800b81e:	fb03 f202 	mul.w	r2, r3, r2
 800b822:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800b826:	4413      	add	r3, r2
 800b828:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[6]*ksrc[39];
 800b82c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b830:	3306      	adds	r3, #6
 800b832:	f993 3000 	ldrsb.w	r3, [r3]
 800b836:	461a      	mov	r2, r3
 800b838:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b83c:	3327      	adds	r3, #39	@ 0x27
 800b83e:	f993 3000 	ldrsb.w	r3, [r3]
 800b842:	fb03 f202 	mul.w	r2, r3, r2
 800b846:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b84a:	4413      	add	r3, r2
 800b84c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[5]*ksrc[40];
 800b850:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b854:	3305      	adds	r3, #5
 800b856:	f993 3000 	ldrsb.w	r3, [r3]
 800b85a:	461a      	mov	r2, r3
 800b85c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b860:	3328      	adds	r3, #40	@ 0x28
 800b862:	f993 3000 	ldrsb.w	r3, [r3]
 800b866:	fb03 f202 	mul.w	r2, r3, r2
 800b86a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800b86e:	4413      	add	r3, r2
 800b870:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[7]*ksrc[40];
 800b874:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b878:	3307      	adds	r3, #7
 800b87a:	f993 3000 	ldrsb.w	r3, [r3]
 800b87e:	461a      	mov	r2, r3
 800b880:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b884:	3328      	adds	r3, #40	@ 0x28
 800b886:	f993 3000 	ldrsb.w	r3, [r3]
 800b88a:	fb03 f202 	mul.w	r2, r3, r2
 800b88e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b892:	4413      	add	r3, r2
 800b894:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[6]*ksrc[41];
 800b898:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b89c:	3306      	adds	r3, #6
 800b89e:	f993 3000 	ldrsb.w	r3, [r3]
 800b8a2:	461a      	mov	r2, r3
 800b8a4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b8a8:	3329      	adds	r3, #41	@ 0x29
 800b8aa:	f993 3000 	ldrsb.w	r3, [r3]
 800b8ae:	fb03 f202 	mul.w	r2, r3, r2
 800b8b2:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800b8b6:	4413      	add	r3, r2
 800b8b8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[8]*ksrc[41];
 800b8bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8c0:	3308      	adds	r3, #8
 800b8c2:	f993 3000 	ldrsb.w	r3, [r3]
 800b8c6:	461a      	mov	r2, r3
 800b8c8:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b8cc:	3329      	adds	r3, #41	@ 0x29
 800b8ce:	f993 3000 	ldrsb.w	r3, [r3]
 800b8d2:	fb03 f202 	mul.w	r2, r3, r2
 800b8d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8da:	4413      	add	r3, r2
 800b8dc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            cols_8b += column_x + 6;
 800b8e0:	f8b7 3160 	ldrh.w	r3, [r7, #352]	@ 0x160
 800b8e4:	1d9a      	adds	r2, r3, #6
 800b8e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8ea:	4413      	add	r3, r2
 800b8ec:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
            sum0 += cols_8b[0]*ksrc[42];
 800b8f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8f4:	f993 3000 	ldrsb.w	r3, [r3]
 800b8f8:	461a      	mov	r2, r3
 800b8fa:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b8fe:	332a      	adds	r3, #42	@ 0x2a
 800b900:	f993 3000 	ldrsb.w	r3, [r3]
 800b904:	fb03 f202 	mul.w	r2, r3, r2
 800b908:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800b90c:	4413      	add	r3, r2
 800b90e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[2]*ksrc[42];
 800b912:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b916:	3302      	adds	r3, #2
 800b918:	f993 3000 	ldrsb.w	r3, [r3]
 800b91c:	461a      	mov	r2, r3
 800b91e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b922:	332a      	adds	r3, #42	@ 0x2a
 800b924:	f993 3000 	ldrsb.w	r3, [r3]
 800b928:	fb03 f202 	mul.w	r2, r3, r2
 800b92c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b930:	4413      	add	r3, r2
 800b932:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[1]*ksrc[43];
 800b936:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b93a:	3301      	adds	r3, #1
 800b93c:	f993 3000 	ldrsb.w	r3, [r3]
 800b940:	461a      	mov	r2, r3
 800b942:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b946:	332b      	adds	r3, #43	@ 0x2b
 800b948:	f993 3000 	ldrsb.w	r3, [r3]
 800b94c:	fb03 f202 	mul.w	r2, r3, r2
 800b950:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800b954:	4413      	add	r3, r2
 800b956:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[3]*ksrc[43];
 800b95a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b95e:	3303      	adds	r3, #3
 800b960:	f993 3000 	ldrsb.w	r3, [r3]
 800b964:	461a      	mov	r2, r3
 800b966:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b96a:	332b      	adds	r3, #43	@ 0x2b
 800b96c:	f993 3000 	ldrsb.w	r3, [r3]
 800b970:	fb03 f202 	mul.w	r2, r3, r2
 800b974:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b978:	4413      	add	r3, r2
 800b97a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[2]*ksrc[44];
 800b97e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b982:	3302      	adds	r3, #2
 800b984:	f993 3000 	ldrsb.w	r3, [r3]
 800b988:	461a      	mov	r2, r3
 800b98a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b98e:	332c      	adds	r3, #44	@ 0x2c
 800b990:	f993 3000 	ldrsb.w	r3, [r3]
 800b994:	fb03 f202 	mul.w	r2, r3, r2
 800b998:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800b99c:	4413      	add	r3, r2
 800b99e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[4]*ksrc[44];
 800b9a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9a6:	3304      	adds	r3, #4
 800b9a8:	f993 3000 	ldrsb.w	r3, [r3]
 800b9ac:	461a      	mov	r2, r3
 800b9ae:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b9b2:	332c      	adds	r3, #44	@ 0x2c
 800b9b4:	f993 3000 	ldrsb.w	r3, [r3]
 800b9b8:	fb03 f202 	mul.w	r2, r3, r2
 800b9bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9c0:	4413      	add	r3, r2
 800b9c2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[3]*ksrc[45];
 800b9c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9ca:	3303      	adds	r3, #3
 800b9cc:	f993 3000 	ldrsb.w	r3, [r3]
 800b9d0:	461a      	mov	r2, r3
 800b9d2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b9d6:	332d      	adds	r3, #45	@ 0x2d
 800b9d8:	f993 3000 	ldrsb.w	r3, [r3]
 800b9dc:	fb03 f202 	mul.w	r2, r3, r2
 800b9e0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800b9e4:	4413      	add	r3, r2
 800b9e6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[5]*ksrc[45];
 800b9ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9ee:	3305      	adds	r3, #5
 800b9f0:	f993 3000 	ldrsb.w	r3, [r3]
 800b9f4:	461a      	mov	r2, r3
 800b9f6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800b9fa:	332d      	adds	r3, #45	@ 0x2d
 800b9fc:	f993 3000 	ldrsb.w	r3, [r3]
 800ba00:	fb03 f202 	mul.w	r2, r3, r2
 800ba04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba08:	4413      	add	r3, r2
 800ba0a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[4]*ksrc[46];
 800ba0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba12:	3304      	adds	r3, #4
 800ba14:	f993 3000 	ldrsb.w	r3, [r3]
 800ba18:	461a      	mov	r2, r3
 800ba1a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800ba1e:	332e      	adds	r3, #46	@ 0x2e
 800ba20:	f993 3000 	ldrsb.w	r3, [r3]
 800ba24:	fb03 f202 	mul.w	r2, r3, r2
 800ba28:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800ba2c:	4413      	add	r3, r2
 800ba2e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[6]*ksrc[46];
 800ba32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba36:	3306      	adds	r3, #6
 800ba38:	f993 3000 	ldrsb.w	r3, [r3]
 800ba3c:	461a      	mov	r2, r3
 800ba3e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800ba42:	332e      	adds	r3, #46	@ 0x2e
 800ba44:	f993 3000 	ldrsb.w	r3, [r3]
 800ba48:	fb03 f202 	mul.w	r2, r3, r2
 800ba4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba50:	4413      	add	r3, r2
 800ba52:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[5]*ksrc[47];
 800ba56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba5a:	3305      	adds	r3, #5
 800ba5c:	f993 3000 	ldrsb.w	r3, [r3]
 800ba60:	461a      	mov	r2, r3
 800ba62:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800ba66:	332f      	adds	r3, #47	@ 0x2f
 800ba68:	f993 3000 	ldrsb.w	r3, [r3]
 800ba6c:	fb03 f202 	mul.w	r2, r3, r2
 800ba70:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800ba74:	4413      	add	r3, r2
 800ba76:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[7]*ksrc[47];
 800ba7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba7e:	3307      	adds	r3, #7
 800ba80:	f993 3000 	ldrsb.w	r3, [r3]
 800ba84:	461a      	mov	r2, r3
 800ba86:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800ba8a:	332f      	adds	r3, #47	@ 0x2f
 800ba8c:	f993 3000 	ldrsb.w	r3, [r3]
 800ba90:	fb03 f202 	mul.w	r2, r3, r2
 800ba94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba98:	4413      	add	r3, r2
 800ba9a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum0 += cols_8b[6]*ksrc[48];
 800ba9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800baa2:	3306      	adds	r3, #6
 800baa4:	f993 3000 	ldrsb.w	r3, [r3]
 800baa8:	461a      	mov	r2, r3
 800baaa:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800baae:	3330      	adds	r3, #48	@ 0x30
 800bab0:	f993 3000 	ldrsb.w	r3, [r3]
 800bab4:	fb03 f202 	mul.w	r2, r3, r2
 800bab8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800babc:	4413      	add	r3, r2
 800babe:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum1 += cols_8b[8]*ksrc[48];
 800bac2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bac6:	3308      	adds	r3, #8
 800bac8:	f993 3000 	ldrsb.w	r3, [r3]
 800bacc:	461a      	mov	r2, r3
 800bace:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800bad2:	3330      	adds	r3, #48	@ 0x30
 800bad4:	f993 3000 	ldrsb.w	r3, [r3]
 800bad8:	fb03 f202 	mul.w	r2, r3, r2
 800badc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bae0:	4413      	add	r3, r2
 800bae2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

            /* requantize */
            sum0 = arm_nn_requantize(sum0 + biasR[0], *multiplier, *shift);
 800bae6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bae8:	681a      	ldr	r2, [r3, #0]
 800baea:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800baee:	18d1      	adds	r1, r2, r3
 800baf0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800baf4:	681a      	ldr	r2, [r3, #0]
 800baf6:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 800bb00:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800bb04:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bb08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bb0c:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 800bb10:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800bb14:	4093      	lsls	r3, r2
 800bb16:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800bb1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800bb1e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    q31_t result = 0;
 800bb22:	2300      	movs	r3, #0
 800bb24:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    mult.word.low = 1 << 30;
 800bb28:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bb2c:	66bb      	str	r3, [r7, #104]	@ 0x68
    mult.word.high = 0;
 800bb2e:	2300      	movs	r3, #0
 800bb30:	66fb      	str	r3, [r7, #108]	@ 0x6c
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800bb32:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800bb36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bb3a:	17da      	asrs	r2, r3, #31
 800bb3c:	633b      	str	r3, [r7, #48]	@ 0x30
 800bb3e:	637a      	str	r2, [r7, #52]	@ 0x34
 800bb40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800bb44:	17da      	asrs	r2, r3, #31
 800bb46:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bb48:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bb4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bb4e:	fb02 f203 	mul.w	r2, r2, r3
 800bb52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb54:	6b3e      	ldr	r6, [r7, #48]	@ 0x30
 800bb56:	fb06 f303 	mul.w	r3, r6, r3
 800bb5a:	4413      	add	r3, r2
 800bb5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb5e:	6abe      	ldr	r6, [r7, #40]	@ 0x28
 800bb60:	fba2 8906 	umull	r8, r9, r2, r6
 800bb64:	444b      	add	r3, r9
 800bb66:	4699      	mov	r9, r3
 800bb68:	eb10 0308 	adds.w	r3, r0, r8
 800bb6c:	60bb      	str	r3, [r7, #8]
 800bb6e:	eb41 0309 	adc.w	r3, r1, r9
 800bb72:	60fb      	str	r3, [r7, #12]
 800bb74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bb78:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
    result = (int32_t)(mult.long_long >> 31);
 800bb7c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800bb80:	f04f 0000 	mov.w	r0, #0
 800bb84:	f04f 0100 	mov.w	r1, #0
 800bb88:	0fd0      	lsrs	r0, r2, #31
 800bb8a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800bb8e:	17d9      	asrs	r1, r3, #31
 800bb90:	4603      	mov	r3, r0
 800bb92:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    return result;
 800bb96:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800bb9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	dc03      	bgt.n	800bbaa <depthwise_kernel7x7_stride2_inplace_kernel_CHW+0xf2a>
 800bba2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bba6:	425b      	negs	r3, r3
 800bba8:	e000      	b.n	800bbac <depthwise_kernel7x7_stride2_inplace_kernel_CHW+0xf2c>
 800bbaa:	2300      	movs	r3, #0
 800bbac:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 800bbb0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    q31_t result = 0;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    const q31_t remainder_mask = (1 << exponent) - 1;
 800bbba:	2201      	movs	r2, #1
 800bbbc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bbc0:	fa02 f303 	lsl.w	r3, r2, r3
 800bbc4:	3b01      	subs	r3, #1
 800bbc6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    int32_t remainder = remainder_mask & dividend;
 800bbca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800bbce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bbd2:	4013      	ands	r3, r2
 800bbd4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    result = dividend >> exponent;
 800bbd8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800bbdc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bbe0:	fa42 f303 	asr.w	r3, r2, r3
 800bbe4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    q31_t threshold = remainder_mask >> 1;
 800bbe8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bbec:	105b      	asrs	r3, r3, #1
 800bbee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (result < 0)
 800bbf2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	da04      	bge.n	800bc04 <depthwise_kernel7x7_stride2_inplace_kernel_CHW+0xf84>
        threshold++;
 800bbfa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bbfe:	3301      	adds	r3, #1
 800bc00:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (remainder > threshold)
 800bc04:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800bc08:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bc0c:	429a      	cmp	r2, r3
 800bc0e:	dd04      	ble.n	800bc1a <depthwise_kernel7x7_stride2_inplace_kernel_CHW+0xf9a>
        result++;
 800bc10:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800bc14:	3301      	adds	r3, #1
 800bc16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    return result;
 800bc1a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800bc1e:	bf00      	nop
 800bc20:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum0 += output_offset;
 800bc24:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800bc28:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800bc2c:	4413      	add	r3, r2
 800bc2e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum0 = TN_MAX(sum0, activation_min);
 800bc32:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800bc36:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800bc3a:	4293      	cmp	r3, r2
 800bc3c:	bfb8      	it	lt
 800bc3e:	4613      	movlt	r3, r2
 800bc40:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            sum0 = TN_MIN(sum0, activation_max);
 800bc44:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800bc48:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800bc4c:	4293      	cmp	r3, r2
 800bc4e:	bfa8      	it	ge
 800bc50:	4613      	movge	r3, r2
 800bc52:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            output[(i * output_x + j * 2) * channel_offset] = sum0;
 800bc56:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 800bc5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800bc5e:	fb03 f202 	mul.w	r2, r3, r2
 800bc62:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800bc66:	005b      	lsls	r3, r3, #1
 800bc68:	441a      	add	r2, r3
 800bc6a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800bc6e:	fb02 f303 	mul.w	r3, r2, r3
 800bc72:	461a      	mov	r2, r3
 800bc74:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bc78:	441a      	add	r2, r3
 800bc7a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800bc7e:	b25b      	sxtb	r3, r3
 800bc80:	7013      	strb	r3, [r2, #0]

            sum1 = arm_nn_requantize(sum1 + biasR[0], *multiplier, *shift);
 800bc82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc84:	681a      	ldr	r2, [r3, #0]
 800bc86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc8a:	18d1      	adds	r1, r2, r3
 800bc8c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800bc90:	681a      	ldr	r2, [r3, #0]
 800bc92:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	f8c7 1100 	str.w	r1, [r7, #256]	@ 0x100
 800bc9c:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 800bca0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800bca4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800bca8:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 800bcac:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800bcb0:	4093      	lsls	r3, r2
 800bcb2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800bcb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bcba:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    q31_t result = 0;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    mult.word.low = 1 << 30;
 800bcc4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bcc8:	663b      	str	r3, [r7, #96]	@ 0x60
    mult.word.high = 0;
 800bcca:	2300      	movs	r3, #0
 800bccc:	667b      	str	r3, [r7, #100]	@ 0x64
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800bcce:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800bcd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bcd6:	17da      	asrs	r2, r3, #31
 800bcd8:	643b      	str	r3, [r7, #64]	@ 0x40
 800bcda:	647a      	str	r2, [r7, #68]	@ 0x44
 800bcdc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800bce0:	17da      	asrs	r2, r3, #31
 800bce2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bce4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800bce6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bce8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bcea:	fb02 f203 	mul.w	r2, r2, r3
 800bcee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcf0:	6c3e      	ldr	r6, [r7, #64]	@ 0x40
 800bcf2:	fb06 f303 	mul.w	r3, r6, r3
 800bcf6:	4413      	add	r3, r2
 800bcf8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bcfa:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 800bcfc:	fba2 4506 	umull	r4, r5, r2, r6
 800bd00:	442b      	add	r3, r5
 800bd02:	461d      	mov	r5, r3
 800bd04:	1903      	adds	r3, r0, r4
 800bd06:	613b      	str	r3, [r7, #16]
 800bd08:	eb41 0305 	adc.w	r3, r1, r5
 800bd0c:	617b      	str	r3, [r7, #20]
 800bd0e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bd12:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
    result = (int32_t)(mult.long_long >> 31);
 800bd16:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800bd1a:	f04f 0000 	mov.w	r0, #0
 800bd1e:	f04f 0100 	mov.w	r1, #0
 800bd22:	0fd0      	lsrs	r0, r2, #31
 800bd24:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800bd28:	17d9      	asrs	r1, r3, #31
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    return result;
 800bd30:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800bd34:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	dc03      	bgt.n	800bd44 <depthwise_kernel7x7_stride2_inplace_kernel_CHW+0x10c4>
 800bd3c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800bd40:	425b      	negs	r3, r3
 800bd42:	e000      	b.n	800bd46 <depthwise_kernel7x7_stride2_inplace_kernel_CHW+0x10c6>
 800bd44:	2300      	movs	r3, #0
 800bd46:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 800bd4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    q31_t result = 0;
 800bd4e:	2300      	movs	r3, #0
 800bd50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    const q31_t remainder_mask = (1 << exponent) - 1;
 800bd54:	2201      	movs	r2, #1
 800bd56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bd5a:	fa02 f303 	lsl.w	r3, r2, r3
 800bd5e:	3b01      	subs	r3, #1
 800bd60:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    int32_t remainder = remainder_mask & dividend;
 800bd64:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 800bd68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bd6c:	4013      	ands	r3, r2
 800bd6e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    result = dividend >> exponent;
 800bd72:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 800bd76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bd7a:	fa42 f303 	asr.w	r3, r2, r3
 800bd7e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    q31_t threshold = remainder_mask >> 1;
 800bd82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bd86:	105b      	asrs	r3, r3, #1
 800bd88:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    if (result < 0)
 800bd8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	da04      	bge.n	800bd9e <depthwise_kernel7x7_stride2_inplace_kernel_CHW+0x111e>
        threshold++;
 800bd94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bd98:	3301      	adds	r3, #1
 800bd9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    if (remainder > threshold)
 800bd9e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800bda2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bda6:	429a      	cmp	r2, r3
 800bda8:	dd04      	ble.n	800bdb4 <depthwise_kernel7x7_stride2_inplace_kernel_CHW+0x1134>
        result++;
 800bdaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bdae:	3301      	adds	r3, #1
 800bdb0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    return result;
 800bdb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800bdb8:	bf00      	nop
 800bdba:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum1 += output_offset;
 800bdbe:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800bdc2:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800bdc6:	4413      	add	r3, r2
 800bdc8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum1 = TN_MAX(sum1, activation_min);
 800bdcc:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800bdd0:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800bdd4:	4293      	cmp	r3, r2
 800bdd6:	bfb8      	it	lt
 800bdd8:	4613      	movlt	r3, r2
 800bdda:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            sum1 = TN_MIN(sum1, activation_max);
 800bdde:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800bde2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800bde6:	4293      	cmp	r3, r2
 800bde8:	bfa8      	it	ge
 800bdea:	4613      	movge	r3, r2
 800bdec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            output[(i * output_x + (j * 2 + 1)) * channel_offset] = sum1;
 800bdf0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 800bdf4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800bdf8:	fb03 f202 	mul.w	r2, r3, r2
 800bdfc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800be00:	005b      	lsls	r3, r3, #1
 800be02:	3301      	adds	r3, #1
 800be04:	441a      	add	r2, r3
 800be06:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800be0a:	fb02 f303 	mul.w	r3, r2, r3
 800be0e:	461a      	mov	r2, r3
 800be10:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800be14:	441a      	add	r2, r3
 800be16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be1a:	b25b      	sxtb	r3, r3
 800be1c:	7013      	strb	r3, [r2, #0]

            cols_8b_iterptr += STRIDE * 2;
 800be1e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800be22:	3304      	adds	r3, #4
 800be24:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        for (j = 0; j < output_x / 2; j++) {
 800be28:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800be2c:	3301      	adds	r3, #1
 800be2e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800be32:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 800be36:	085b      	lsrs	r3, r3, #1
 800be38:	b29b      	uxth	r3, r3
 800be3a:	461a      	mov	r2, r3
 800be3c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800be40:	4293      	cmp	r3, r2
 800be42:	f6fe af33 	blt.w	800acac <depthwise_kernel7x7_stride2_inplace_kernel_CHW+0x2c>
        }
        if (output_x & 1) {
 800be46:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 800be4a:	f003 0301 	and.w	r3, r3, #1
 800be4e:	2b00      	cmp	r3, #0
 800be50:	f000 846f 	beq.w	800c732 <depthwise_kernel7x7_stride2_inplace_kernel_CHW+0x1ab2>
            q7_t * cols_8b = cols_8b_iterptr;
 800be54:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800be58:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
            q31_t sum = bias[0] + biasR[0];
 800be5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be5e:	681a      	ldr	r2, [r3, #0]
 800be60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	4413      	add	r3, r2
 800be66:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[0]*ksrc[0];
 800be6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800be6e:	f993 3000 	ldrsb.w	r3, [r3]
 800be72:	461a      	mov	r2, r3
 800be74:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800be78:	f993 3000 	ldrsb.w	r3, [r3]
 800be7c:	fb03 f202 	mul.w	r2, r3, r2
 800be80:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800be84:	4413      	add	r3, r2
 800be86:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[1]*ksrc[1];
 800be8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800be8e:	3301      	adds	r3, #1
 800be90:	f993 3000 	ldrsb.w	r3, [r3]
 800be94:	461a      	mov	r2, r3
 800be96:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800be9a:	3301      	adds	r3, #1
 800be9c:	f993 3000 	ldrsb.w	r3, [r3]
 800bea0:	fb03 f202 	mul.w	r2, r3, r2
 800bea4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800bea8:	4413      	add	r3, r2
 800beaa:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[2]*ksrc[2];
 800beae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800beb2:	3302      	adds	r3, #2
 800beb4:	f993 3000 	ldrsb.w	r3, [r3]
 800beb8:	461a      	mov	r2, r3
 800beba:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800bebe:	3302      	adds	r3, #2
 800bec0:	f993 3000 	ldrsb.w	r3, [r3]
 800bec4:	fb03 f202 	mul.w	r2, r3, r2
 800bec8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800becc:	4413      	add	r3, r2
 800bece:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[3]*ksrc[3];
 800bed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bed6:	3303      	adds	r3, #3
 800bed8:	f993 3000 	ldrsb.w	r3, [r3]
 800bedc:	461a      	mov	r2, r3
 800bede:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800bee2:	3303      	adds	r3, #3
 800bee4:	f993 3000 	ldrsb.w	r3, [r3]
 800bee8:	fb03 f202 	mul.w	r2, r3, r2
 800beec:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800bef0:	4413      	add	r3, r2
 800bef2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[4]*ksrc[4];
 800bef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800befa:	3304      	adds	r3, #4
 800befc:	f993 3000 	ldrsb.w	r3, [r3]
 800bf00:	461a      	mov	r2, r3
 800bf02:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800bf06:	3304      	adds	r3, #4
 800bf08:	f993 3000 	ldrsb.w	r3, [r3]
 800bf0c:	fb03 f202 	mul.w	r2, r3, r2
 800bf10:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800bf14:	4413      	add	r3, r2
 800bf16:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[5]*ksrc[5];
 800bf1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bf1e:	3305      	adds	r3, #5
 800bf20:	f993 3000 	ldrsb.w	r3, [r3]
 800bf24:	461a      	mov	r2, r3
 800bf26:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800bf2a:	3305      	adds	r3, #5
 800bf2c:	f993 3000 	ldrsb.w	r3, [r3]
 800bf30:	fb03 f202 	mul.w	r2, r3, r2
 800bf34:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800bf38:	4413      	add	r3, r2
 800bf3a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[6]*ksrc[6];
 800bf3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bf42:	3306      	adds	r3, #6
 800bf44:	f993 3000 	ldrsb.w	r3, [r3]
 800bf48:	461a      	mov	r2, r3
 800bf4a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800bf4e:	3306      	adds	r3, #6
 800bf50:	f993 3000 	ldrsb.w	r3, [r3]
 800bf54:	fb03 f202 	mul.w	r2, r3, r2
 800bf58:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800bf5c:	4413      	add	r3, r2
 800bf5e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            cols_8b += column_x + 6;
 800bf62:	f8b7 3160 	ldrh.w	r3, [r7, #352]	@ 0x160
 800bf66:	1d9a      	adds	r2, r3, #6
 800bf68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bf6c:	4413      	add	r3, r2
 800bf6e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
            sum += cols_8b[0]*ksrc[7];
 800bf72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bf76:	f993 3000 	ldrsb.w	r3, [r3]
 800bf7a:	461a      	mov	r2, r3
 800bf7c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800bf80:	3307      	adds	r3, #7
 800bf82:	f993 3000 	ldrsb.w	r3, [r3]
 800bf86:	fb03 f202 	mul.w	r2, r3, r2
 800bf8a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800bf8e:	4413      	add	r3, r2
 800bf90:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[1]*ksrc[8];
 800bf94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bf98:	3301      	adds	r3, #1
 800bf9a:	f993 3000 	ldrsb.w	r3, [r3]
 800bf9e:	461a      	mov	r2, r3
 800bfa0:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800bfa4:	3308      	adds	r3, #8
 800bfa6:	f993 3000 	ldrsb.w	r3, [r3]
 800bfaa:	fb03 f202 	mul.w	r2, r3, r2
 800bfae:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800bfb2:	4413      	add	r3, r2
 800bfb4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[2]*ksrc[9];
 800bfb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bfbc:	3302      	adds	r3, #2
 800bfbe:	f993 3000 	ldrsb.w	r3, [r3]
 800bfc2:	461a      	mov	r2, r3
 800bfc4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800bfc8:	3309      	adds	r3, #9
 800bfca:	f993 3000 	ldrsb.w	r3, [r3]
 800bfce:	fb03 f202 	mul.w	r2, r3, r2
 800bfd2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800bfd6:	4413      	add	r3, r2
 800bfd8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[3]*ksrc[10];
 800bfdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bfe0:	3303      	adds	r3, #3
 800bfe2:	f993 3000 	ldrsb.w	r3, [r3]
 800bfe6:	461a      	mov	r2, r3
 800bfe8:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800bfec:	330a      	adds	r3, #10
 800bfee:	f993 3000 	ldrsb.w	r3, [r3]
 800bff2:	fb03 f202 	mul.w	r2, r3, r2
 800bff6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800bffa:	4413      	add	r3, r2
 800bffc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[4]*ksrc[11];
 800c000:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c004:	3304      	adds	r3, #4
 800c006:	f993 3000 	ldrsb.w	r3, [r3]
 800c00a:	461a      	mov	r2, r3
 800c00c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800c010:	330b      	adds	r3, #11
 800c012:	f993 3000 	ldrsb.w	r3, [r3]
 800c016:	fb03 f202 	mul.w	r2, r3, r2
 800c01a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c01e:	4413      	add	r3, r2
 800c020:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[5]*ksrc[12];
 800c024:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c028:	3305      	adds	r3, #5
 800c02a:	f993 3000 	ldrsb.w	r3, [r3]
 800c02e:	461a      	mov	r2, r3
 800c030:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800c034:	330c      	adds	r3, #12
 800c036:	f993 3000 	ldrsb.w	r3, [r3]
 800c03a:	fb03 f202 	mul.w	r2, r3, r2
 800c03e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c042:	4413      	add	r3, r2
 800c044:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[6]*ksrc[13];
 800c048:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c04c:	3306      	adds	r3, #6
 800c04e:	f993 3000 	ldrsb.w	r3, [r3]
 800c052:	461a      	mov	r2, r3
 800c054:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800c058:	330d      	adds	r3, #13
 800c05a:	f993 3000 	ldrsb.w	r3, [r3]
 800c05e:	fb03 f202 	mul.w	r2, r3, r2
 800c062:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c066:	4413      	add	r3, r2
 800c068:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            cols_8b += column_x + 6;
 800c06c:	f8b7 3160 	ldrh.w	r3, [r7, #352]	@ 0x160
 800c070:	1d9a      	adds	r2, r3, #6
 800c072:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c076:	4413      	add	r3, r2
 800c078:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
            sum += cols_8b[0]*ksrc[14];
 800c07c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c080:	f993 3000 	ldrsb.w	r3, [r3]
 800c084:	461a      	mov	r2, r3
 800c086:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800c08a:	330e      	adds	r3, #14
 800c08c:	f993 3000 	ldrsb.w	r3, [r3]
 800c090:	fb03 f202 	mul.w	r2, r3, r2
 800c094:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c098:	4413      	add	r3, r2
 800c09a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[1]*ksrc[15];
 800c09e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c0a2:	3301      	adds	r3, #1
 800c0a4:	f993 3000 	ldrsb.w	r3, [r3]
 800c0a8:	461a      	mov	r2, r3
 800c0aa:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800c0ae:	330f      	adds	r3, #15
 800c0b0:	f993 3000 	ldrsb.w	r3, [r3]
 800c0b4:	fb03 f202 	mul.w	r2, r3, r2
 800c0b8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c0bc:	4413      	add	r3, r2
 800c0be:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[2]*ksrc[16];
 800c0c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c0c6:	3302      	adds	r3, #2
 800c0c8:	f993 3000 	ldrsb.w	r3, [r3]
 800c0cc:	461a      	mov	r2, r3
 800c0ce:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800c0d2:	3310      	adds	r3, #16
 800c0d4:	f993 3000 	ldrsb.w	r3, [r3]
 800c0d8:	fb03 f202 	mul.w	r2, r3, r2
 800c0dc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c0e0:	4413      	add	r3, r2
 800c0e2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[3]*ksrc[17];
 800c0e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c0ea:	3303      	adds	r3, #3
 800c0ec:	f993 3000 	ldrsb.w	r3, [r3]
 800c0f0:	461a      	mov	r2, r3
 800c0f2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800c0f6:	3311      	adds	r3, #17
 800c0f8:	f993 3000 	ldrsb.w	r3, [r3]
 800c0fc:	fb03 f202 	mul.w	r2, r3, r2
 800c100:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c104:	4413      	add	r3, r2
 800c106:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[4]*ksrc[18];
 800c10a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c10e:	3304      	adds	r3, #4
 800c110:	f993 3000 	ldrsb.w	r3, [r3]
 800c114:	461a      	mov	r2, r3
 800c116:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800c11a:	3312      	adds	r3, #18
 800c11c:	f993 3000 	ldrsb.w	r3, [r3]
 800c120:	fb03 f202 	mul.w	r2, r3, r2
 800c124:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c128:	4413      	add	r3, r2
 800c12a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[5]*ksrc[19];
 800c12e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c132:	3305      	adds	r3, #5
 800c134:	f993 3000 	ldrsb.w	r3, [r3]
 800c138:	461a      	mov	r2, r3
 800c13a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800c13e:	3313      	adds	r3, #19
 800c140:	f993 3000 	ldrsb.w	r3, [r3]
 800c144:	fb03 f202 	mul.w	r2, r3, r2
 800c148:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c14c:	4413      	add	r3, r2
 800c14e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[6]*ksrc[20];
 800c152:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c156:	3306      	adds	r3, #6
 800c158:	f993 3000 	ldrsb.w	r3, [r3]
 800c15c:	461a      	mov	r2, r3
 800c15e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800c162:	3314      	adds	r3, #20
 800c164:	f993 3000 	ldrsb.w	r3, [r3]
 800c168:	fb03 f202 	mul.w	r2, r3, r2
 800c16c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c170:	4413      	add	r3, r2
 800c172:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            cols_8b += column_x + 6;
 800c176:	f8b7 3160 	ldrh.w	r3, [r7, #352]	@ 0x160
 800c17a:	1d9a      	adds	r2, r3, #6
 800c17c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c180:	4413      	add	r3, r2
 800c182:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
            sum += cols_8b[0]*ksrc[21];
 800c186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c18a:	f993 3000 	ldrsb.w	r3, [r3]
 800c18e:	461a      	mov	r2, r3
 800c190:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800c194:	3315      	adds	r3, #21
 800c196:	f993 3000 	ldrsb.w	r3, [r3]
 800c19a:	fb03 f202 	mul.w	r2, r3, r2
 800c19e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c1a2:	4413      	add	r3, r2
 800c1a4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[1]*ksrc[22];
 800c1a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c1ac:	3301      	adds	r3, #1
 800c1ae:	f993 3000 	ldrsb.w	r3, [r3]
 800c1b2:	461a      	mov	r2, r3
 800c1b4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800c1b8:	3316      	adds	r3, #22
 800c1ba:	f993 3000 	ldrsb.w	r3, [r3]
 800c1be:	fb03 f202 	mul.w	r2, r3, r2
 800c1c2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c1c6:	4413      	add	r3, r2
 800c1c8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[2]*ksrc[23];
 800c1cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c1d0:	3302      	adds	r3, #2
 800c1d2:	f993 3000 	ldrsb.w	r3, [r3]
 800c1d6:	461a      	mov	r2, r3
 800c1d8:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800c1dc:	3317      	adds	r3, #23
 800c1de:	f993 3000 	ldrsb.w	r3, [r3]
 800c1e2:	fb03 f202 	mul.w	r2, r3, r2
 800c1e6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c1ea:	4413      	add	r3, r2
 800c1ec:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[3]*ksrc[24];
 800c1f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c1f4:	3303      	adds	r3, #3
 800c1f6:	f993 3000 	ldrsb.w	r3, [r3]
 800c1fa:	461a      	mov	r2, r3
 800c1fc:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800c200:	3318      	adds	r3, #24
 800c202:	f993 3000 	ldrsb.w	r3, [r3]
 800c206:	fb03 f202 	mul.w	r2, r3, r2
 800c20a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c20e:	4413      	add	r3, r2
 800c210:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[4]*ksrc[25];
 800c214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c218:	3304      	adds	r3, #4
 800c21a:	f993 3000 	ldrsb.w	r3, [r3]
 800c21e:	461a      	mov	r2, r3
 800c220:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800c224:	3319      	adds	r3, #25
 800c226:	f993 3000 	ldrsb.w	r3, [r3]
 800c22a:	fb03 f202 	mul.w	r2, r3, r2
 800c22e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c232:	4413      	add	r3, r2
 800c234:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[5]*ksrc[26];
 800c238:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c23c:	3305      	adds	r3, #5
 800c23e:	f993 3000 	ldrsb.w	r3, [r3]
 800c242:	461a      	mov	r2, r3
 800c244:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800c248:	331a      	adds	r3, #26
 800c24a:	f993 3000 	ldrsb.w	r3, [r3]
 800c24e:	fb03 f202 	mul.w	r2, r3, r2
 800c252:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c256:	4413      	add	r3, r2
 800c258:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[6]*ksrc[27];
 800c25c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c260:	3306      	adds	r3, #6
 800c262:	f993 3000 	ldrsb.w	r3, [r3]
 800c266:	461a      	mov	r2, r3
 800c268:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800c26c:	331b      	adds	r3, #27
 800c26e:	f993 3000 	ldrsb.w	r3, [r3]
 800c272:	fb03 f202 	mul.w	r2, r3, r2
 800c276:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c27a:	4413      	add	r3, r2
 800c27c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            cols_8b += column_x + 6;
 800c280:	f8b7 3160 	ldrh.w	r3, [r7, #352]	@ 0x160
 800c284:	1d9a      	adds	r2, r3, #6
 800c286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c28a:	4413      	add	r3, r2
 800c28c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
            sum += cols_8b[0]*ksrc[28];
 800c290:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c294:	f993 3000 	ldrsb.w	r3, [r3]
 800c298:	461a      	mov	r2, r3
 800c29a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800c29e:	331c      	adds	r3, #28
 800c2a0:	f993 3000 	ldrsb.w	r3, [r3]
 800c2a4:	fb03 f202 	mul.w	r2, r3, r2
 800c2a8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c2ac:	4413      	add	r3, r2
 800c2ae:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[1]*ksrc[29];
 800c2b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c2b6:	3301      	adds	r3, #1
 800c2b8:	f993 3000 	ldrsb.w	r3, [r3]
 800c2bc:	461a      	mov	r2, r3
 800c2be:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800c2c2:	331d      	adds	r3, #29
 800c2c4:	f993 3000 	ldrsb.w	r3, [r3]
 800c2c8:	fb03 f202 	mul.w	r2, r3, r2
 800c2cc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c2d0:	4413      	add	r3, r2
 800c2d2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[2]*ksrc[30];
 800c2d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c2da:	3302      	adds	r3, #2
 800c2dc:	f993 3000 	ldrsb.w	r3, [r3]
 800c2e0:	461a      	mov	r2, r3
 800c2e2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800c2e6:	331e      	adds	r3, #30
 800c2e8:	f993 3000 	ldrsb.w	r3, [r3]
 800c2ec:	fb03 f202 	mul.w	r2, r3, r2
 800c2f0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c2f4:	4413      	add	r3, r2
 800c2f6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[3]*ksrc[31];
 800c2fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c2fe:	3303      	adds	r3, #3
 800c300:	f993 3000 	ldrsb.w	r3, [r3]
 800c304:	461a      	mov	r2, r3
 800c306:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800c30a:	331f      	adds	r3, #31
 800c30c:	f993 3000 	ldrsb.w	r3, [r3]
 800c310:	fb03 f202 	mul.w	r2, r3, r2
 800c314:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c318:	4413      	add	r3, r2
 800c31a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[4]*ksrc[32];
 800c31e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c322:	3304      	adds	r3, #4
 800c324:	f993 3000 	ldrsb.w	r3, [r3]
 800c328:	461a      	mov	r2, r3
 800c32a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800c32e:	3320      	adds	r3, #32
 800c330:	f993 3000 	ldrsb.w	r3, [r3]
 800c334:	fb03 f202 	mul.w	r2, r3, r2
 800c338:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c33c:	4413      	add	r3, r2
 800c33e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[5]*ksrc[33];
 800c342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c346:	3305      	adds	r3, #5
 800c348:	f993 3000 	ldrsb.w	r3, [r3]
 800c34c:	461a      	mov	r2, r3
 800c34e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800c352:	3321      	adds	r3, #33	@ 0x21
 800c354:	f993 3000 	ldrsb.w	r3, [r3]
 800c358:	fb03 f202 	mul.w	r2, r3, r2
 800c35c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c360:	4413      	add	r3, r2
 800c362:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[6]*ksrc[34];
 800c366:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c36a:	3306      	adds	r3, #6
 800c36c:	f993 3000 	ldrsb.w	r3, [r3]
 800c370:	461a      	mov	r2, r3
 800c372:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800c376:	3322      	adds	r3, #34	@ 0x22
 800c378:	f993 3000 	ldrsb.w	r3, [r3]
 800c37c:	fb03 f202 	mul.w	r2, r3, r2
 800c380:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c384:	4413      	add	r3, r2
 800c386:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            cols_8b += column_x + 6;
 800c38a:	f8b7 3160 	ldrh.w	r3, [r7, #352]	@ 0x160
 800c38e:	1d9a      	adds	r2, r3, #6
 800c390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c394:	4413      	add	r3, r2
 800c396:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
            sum += cols_8b[0]*ksrc[35];
 800c39a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c39e:	f993 3000 	ldrsb.w	r3, [r3]
 800c3a2:	461a      	mov	r2, r3
 800c3a4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800c3a8:	3323      	adds	r3, #35	@ 0x23
 800c3aa:	f993 3000 	ldrsb.w	r3, [r3]
 800c3ae:	fb03 f202 	mul.w	r2, r3, r2
 800c3b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c3b6:	4413      	add	r3, r2
 800c3b8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[1]*ksrc[36];
 800c3bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c3c0:	3301      	adds	r3, #1
 800c3c2:	f993 3000 	ldrsb.w	r3, [r3]
 800c3c6:	461a      	mov	r2, r3
 800c3c8:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800c3cc:	3324      	adds	r3, #36	@ 0x24
 800c3ce:	f993 3000 	ldrsb.w	r3, [r3]
 800c3d2:	fb03 f202 	mul.w	r2, r3, r2
 800c3d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c3da:	4413      	add	r3, r2
 800c3dc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[2]*ksrc[37];
 800c3e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c3e4:	3302      	adds	r3, #2
 800c3e6:	f993 3000 	ldrsb.w	r3, [r3]
 800c3ea:	461a      	mov	r2, r3
 800c3ec:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800c3f0:	3325      	adds	r3, #37	@ 0x25
 800c3f2:	f993 3000 	ldrsb.w	r3, [r3]
 800c3f6:	fb03 f202 	mul.w	r2, r3, r2
 800c3fa:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c3fe:	4413      	add	r3, r2
 800c400:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[3]*ksrc[38];
 800c404:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c408:	3303      	adds	r3, #3
 800c40a:	f993 3000 	ldrsb.w	r3, [r3]
 800c40e:	461a      	mov	r2, r3
 800c410:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800c414:	3326      	adds	r3, #38	@ 0x26
 800c416:	f993 3000 	ldrsb.w	r3, [r3]
 800c41a:	fb03 f202 	mul.w	r2, r3, r2
 800c41e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c422:	4413      	add	r3, r2
 800c424:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[4]*ksrc[39];
 800c428:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c42c:	3304      	adds	r3, #4
 800c42e:	f993 3000 	ldrsb.w	r3, [r3]
 800c432:	461a      	mov	r2, r3
 800c434:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800c438:	3327      	adds	r3, #39	@ 0x27
 800c43a:	f993 3000 	ldrsb.w	r3, [r3]
 800c43e:	fb03 f202 	mul.w	r2, r3, r2
 800c442:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c446:	4413      	add	r3, r2
 800c448:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[5]*ksrc[40];
 800c44c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c450:	3305      	adds	r3, #5
 800c452:	f993 3000 	ldrsb.w	r3, [r3]
 800c456:	461a      	mov	r2, r3
 800c458:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800c45c:	3328      	adds	r3, #40	@ 0x28
 800c45e:	f993 3000 	ldrsb.w	r3, [r3]
 800c462:	fb03 f202 	mul.w	r2, r3, r2
 800c466:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c46a:	4413      	add	r3, r2
 800c46c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[6]*ksrc[41];
 800c470:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c474:	3306      	adds	r3, #6
 800c476:	f993 3000 	ldrsb.w	r3, [r3]
 800c47a:	461a      	mov	r2, r3
 800c47c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800c480:	3329      	adds	r3, #41	@ 0x29
 800c482:	f993 3000 	ldrsb.w	r3, [r3]
 800c486:	fb03 f202 	mul.w	r2, r3, r2
 800c48a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c48e:	4413      	add	r3, r2
 800c490:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            cols_8b += column_x + 6;
 800c494:	f8b7 3160 	ldrh.w	r3, [r7, #352]	@ 0x160
 800c498:	1d9a      	adds	r2, r3, #6
 800c49a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c49e:	4413      	add	r3, r2
 800c4a0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
            sum += cols_8b[0]*ksrc[42];
 800c4a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c4a8:	f993 3000 	ldrsb.w	r3, [r3]
 800c4ac:	461a      	mov	r2, r3
 800c4ae:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800c4b2:	332a      	adds	r3, #42	@ 0x2a
 800c4b4:	f993 3000 	ldrsb.w	r3, [r3]
 800c4b8:	fb03 f202 	mul.w	r2, r3, r2
 800c4bc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c4c0:	4413      	add	r3, r2
 800c4c2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[1]*ksrc[43];
 800c4c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c4ca:	3301      	adds	r3, #1
 800c4cc:	f993 3000 	ldrsb.w	r3, [r3]
 800c4d0:	461a      	mov	r2, r3
 800c4d2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800c4d6:	332b      	adds	r3, #43	@ 0x2b
 800c4d8:	f993 3000 	ldrsb.w	r3, [r3]
 800c4dc:	fb03 f202 	mul.w	r2, r3, r2
 800c4e0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c4e4:	4413      	add	r3, r2
 800c4e6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[2]*ksrc[44];
 800c4ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c4ee:	3302      	adds	r3, #2
 800c4f0:	f993 3000 	ldrsb.w	r3, [r3]
 800c4f4:	461a      	mov	r2, r3
 800c4f6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800c4fa:	332c      	adds	r3, #44	@ 0x2c
 800c4fc:	f993 3000 	ldrsb.w	r3, [r3]
 800c500:	fb03 f202 	mul.w	r2, r3, r2
 800c504:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c508:	4413      	add	r3, r2
 800c50a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[3]*ksrc[45];
 800c50e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c512:	3303      	adds	r3, #3
 800c514:	f993 3000 	ldrsb.w	r3, [r3]
 800c518:	461a      	mov	r2, r3
 800c51a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800c51e:	332d      	adds	r3, #45	@ 0x2d
 800c520:	f993 3000 	ldrsb.w	r3, [r3]
 800c524:	fb03 f202 	mul.w	r2, r3, r2
 800c528:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c52c:	4413      	add	r3, r2
 800c52e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[4]*ksrc[46];
 800c532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c536:	3304      	adds	r3, #4
 800c538:	f993 3000 	ldrsb.w	r3, [r3]
 800c53c:	461a      	mov	r2, r3
 800c53e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800c542:	332e      	adds	r3, #46	@ 0x2e
 800c544:	f993 3000 	ldrsb.w	r3, [r3]
 800c548:	fb03 f202 	mul.w	r2, r3, r2
 800c54c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c550:	4413      	add	r3, r2
 800c552:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[5]*ksrc[47];
 800c556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c55a:	3305      	adds	r3, #5
 800c55c:	f993 3000 	ldrsb.w	r3, [r3]
 800c560:	461a      	mov	r2, r3
 800c562:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800c566:	332f      	adds	r3, #47	@ 0x2f
 800c568:	f993 3000 	ldrsb.w	r3, [r3]
 800c56c:	fb03 f202 	mul.w	r2, r3, r2
 800c570:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c574:	4413      	add	r3, r2
 800c576:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += cols_8b[6]*ksrc[48];
 800c57a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c57e:	3306      	adds	r3, #6
 800c580:	f993 3000 	ldrsb.w	r3, [r3]
 800c584:	461a      	mov	r2, r3
 800c586:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800c58a:	3330      	adds	r3, #48	@ 0x30
 800c58c:	f993 3000 	ldrsb.w	r3, [r3]
 800c590:	fb03 f202 	mul.w	r2, r3, r2
 800c594:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c598:	4413      	add	r3, r2
 800c59a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

            sum = arm_nn_requantize(sum + biasR[0], *multiplier, *shift);
 800c59e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c5a0:	681a      	ldr	r2, [r3, #0]
 800c5a2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c5a6:	18d1      	adds	r1, r2, r3
 800c5a8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800c5ac:	681a      	ldr	r2, [r3, #0]
 800c5ae:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 800c5b8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800c5bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c5c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c5c4:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 800c5c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c5cc:	4093      	lsls	r3, r2
 800c5ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c5d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c5d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    q31_t result = 0;
 800c5da:	2300      	movs	r3, #0
 800c5dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    mult.word.low = 1 << 30;
 800c5e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c5e4:	65bb      	str	r3, [r7, #88]	@ 0x58
    mult.word.high = 0;
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800c5ea:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 800c5ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c5f2:	17da      	asrs	r2, r3, #31
 800c5f4:	623b      	str	r3, [r7, #32]
 800c5f6:	627a      	str	r2, [r7, #36]	@ 0x24
 800c5f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c5fc:	17da      	asrs	r2, r3, #31
 800c5fe:	61bb      	str	r3, [r7, #24]
 800c600:	61fa      	str	r2, [r7, #28]
 800c602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c604:	69ba      	ldr	r2, [r7, #24]
 800c606:	fb02 f203 	mul.w	r2, r2, r3
 800c60a:	69fb      	ldr	r3, [r7, #28]
 800c60c:	6a3e      	ldr	r6, [r7, #32]
 800c60e:	fb06 f303 	mul.w	r3, r6, r3
 800c612:	4413      	add	r3, r2
 800c614:	6a3a      	ldr	r2, [r7, #32]
 800c616:	69be      	ldr	r6, [r7, #24]
 800c618:	fba2 ab06 	umull	sl, fp, r2, r6
 800c61c:	445b      	add	r3, fp
 800c61e:	469b      	mov	fp, r3
 800c620:	eb10 030a 	adds.w	r3, r0, sl
 800c624:	603b      	str	r3, [r7, #0]
 800c626:	eb41 030b 	adc.w	r3, r1, fp
 800c62a:	607b      	str	r3, [r7, #4]
 800c62c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c630:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    result = (int32_t)(mult.long_long >> 31);
 800c634:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800c638:	f04f 0000 	mov.w	r0, #0
 800c63c:	f04f 0100 	mov.w	r1, #0
 800c640:	0fd0      	lsrs	r0, r2, #31
 800c642:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800c646:	17d9      	asrs	r1, r3, #31
 800c648:	4603      	mov	r3, r0
 800c64a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    return result;
 800c64e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800c652:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c656:	2b00      	cmp	r3, #0
 800c658:	dc03      	bgt.n	800c662 <depthwise_kernel7x7_stride2_inplace_kernel_CHW+0x19e2>
 800c65a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c65e:	425b      	negs	r3, r3
 800c660:	e000      	b.n	800c664 <depthwise_kernel7x7_stride2_inplace_kernel_CHW+0x19e4>
 800c662:	2300      	movs	r3, #0
 800c664:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 800c668:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    q31_t result = 0;
 800c66c:	2300      	movs	r3, #0
 800c66e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    const q31_t remainder_mask = (1 << exponent) - 1;
 800c672:	2201      	movs	r2, #1
 800c674:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c678:	fa02 f303 	lsl.w	r3, r2, r3
 800c67c:	3b01      	subs	r3, #1
 800c67e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    int32_t remainder = remainder_mask & dividend;
 800c680:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800c684:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c686:	4013      	ands	r3, r2
 800c688:	67bb      	str	r3, [r7, #120]	@ 0x78
    result = dividend >> exponent;
 800c68a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800c68e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c692:	fa42 f303 	asr.w	r3, r2, r3
 800c696:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    q31_t threshold = remainder_mask >> 1;
 800c69a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c69c:	105b      	asrs	r3, r3, #1
 800c69e:	677b      	str	r3, [r7, #116]	@ 0x74
    if (result < 0)
 800c6a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	da02      	bge.n	800c6ae <depthwise_kernel7x7_stride2_inplace_kernel_CHW+0x1a2e>
        threshold++;
 800c6a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c6aa:	3301      	adds	r3, #1
 800c6ac:	677b      	str	r3, [r7, #116]	@ 0x74
    if (remainder > threshold)
 800c6ae:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800c6b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c6b2:	429a      	cmp	r2, r3
 800c6b4:	dd04      	ble.n	800c6c0 <depthwise_kernel7x7_stride2_inplace_kernel_CHW+0x1a40>
        result++;
 800c6b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c6ba:	3301      	adds	r3, #1
 800c6bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    return result;
 800c6c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800c6c4:	bf00      	nop
 800c6c6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum += output_offset;
 800c6ca:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 800c6ce:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800c6d2:	4413      	add	r3, r2
 800c6d4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum = TN_MAX(sum, activation_min);
 800c6d8:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 800c6dc:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800c6e0:	4293      	cmp	r3, r2
 800c6e2:	bfb8      	it	lt
 800c6e4:	4613      	movlt	r3, r2
 800c6e6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            sum = TN_MIN(sum, activation_max);
 800c6ea:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 800c6ee:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800c6f2:	4293      	cmp	r3, r2
 800c6f4:	bfa8      	it	ge
 800c6f6:	4613      	movge	r3, r2
 800c6f8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
            output[(i * output_x + output_x - 1) * channel_offset] = sum;
 800c6fc:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 800c700:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c704:	fb03 f202 	mul.w	r2, r3, r2
 800c708:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 800c70c:	4413      	add	r3, r2
 800c70e:	1e5a      	subs	r2, r3, #1
 800c710:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800c714:	fb02 f303 	mul.w	r3, r2, r3
 800c718:	461a      	mov	r2, r3
 800c71a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800c71e:	441a      	add	r2, r3
 800c720:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c724:	b25b      	sxtb	r3, r3
 800c726:	7013      	strb	r3, [r2, #0]

            cols_8b_iterptr += STRIDE;
 800c728:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800c72c:	3302      	adds	r3, #2
 800c72e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        }
        cols_8b_iterptr += 3 * 2 - (column_x & 1);
 800c732:	f8b7 3160 	ldrh.w	r3, [r7, #352]	@ 0x160
 800c736:	f003 0301 	and.w	r3, r3, #1
 800c73a:	f1c3 0306 	rsb	r3, r3, #6
 800c73e:	461a      	mov	r2, r3
 800c740:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800c744:	4413      	add	r3, r2
 800c746:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        cols_8b_iterptr += (STRIDE - 1) * (column_x + 3 * 2);
 800c74a:	f8b7 3160 	ldrh.w	r3, [r7, #352]	@ 0x160
 800c74e:	3306      	adds	r3, #6
 800c750:	461a      	mov	r2, r3
 800c752:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800c756:	4413      	add	r3, r2
 800c758:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    for (i = 0; i < output_y; i++) {
 800c75c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c760:	3301      	adds	r3, #1
 800c762:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800c766:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 800c76a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c76e:	4293      	cmp	r3, r2
 800c770:	f6fe aa97 	blt.w	800aca2 <depthwise_kernel7x7_stride2_inplace_kernel_CHW+0x22>
    }
}
 800c774:	bf00      	nop
 800c776:	bf00      	nop
 800c778:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800c77c:	46bd      	mov	sp, r7
 800c77e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c782:	4770      	bx	lr

0800c784 <getInput>:
int32_t *int32ptr;
float *fptr,*fptr2,*fptr3;

void invoke_1patch(uint16_t,  uint16_t,  uint16_t,  uint16_t);

signed char* getInput() {
 800c784:	b480      	push	{r7}
 800c786:	af00      	add	r7, sp, #0
    return &buffer0[8464];
 800c788:	4b04      	ldr	r3, [pc, #16]	@ (800c79c <getInput+0x18>)
 800c78a:	681a      	ldr	r2, [r3, #0]
 800c78c:	f242 1310 	movw	r3, #8464	@ 0x2110
 800c790:	4413      	add	r3, r2
}
 800c792:	4618      	mov	r0, r3
 800c794:	46bd      	mov	sp, r7
 800c796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79a:	4770      	bx	lr
 800c79c:	20000008 	.word	0x20000008

0800c7a0 <getOutput>:
signed char* getOutput() {
 800c7a0:	b480      	push	{r7}
 800c7a2:	af00      	add	r7, sp, #0
    return NNoutput;
 800c7a4:	4b03      	ldr	r3, [pc, #12]	@ (800c7b4 <getOutput+0x14>)
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	33a0      	adds	r3, #160	@ 0xa0
}
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b2:	4770      	bx	lr
 800c7b4:	20000008 	.word	0x20000008

0800c7b8 <invoke>:
/* layer 4:DEPTHWISE_CONV_2D */
patchpadding_depthwise_kernel3x3_stride2_inplace_CHW(&buffer0[0],21,21,48,(const q7_t*) CHWweight4,offsetBias4,offsetRBias4,shift4,multiplier4,-128,128,-128,127,&buffer0[0],10,10,48,sbuf,-128, pad_t, pad_b, pad_l, pad_r);
pad_t /= 2;pad_b /= 2;pad_l /= 2;pad_r /= 2;
}

void invoke(float* labels){
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b092      	sub	sp, #72	@ 0x48
 800c7bc:	af10      	add	r7, sp, #64	@ 0x40
 800c7be:	6078      	str	r0, [r7, #4]
/* layer 0:CONV_2D */
convolve_1x1_s8_ch48(&buffer0[21168],20,20,48,(const q7_t*) weight5,bias5,shift5,multiplier5,-22,128,-128,127,&buffer0[40368],20,20,16,sbuf);
 800c7c0:	4ba4      	ldr	r3, [pc, #656]	@ (800ca54 <invoke+0x29c>)
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	f245 20b0 	movw	r0, #21168	@ 0x52b0
 800c7c8:	4418      	add	r0, r3
 800c7ca:	4ba2      	ldr	r3, [pc, #648]	@ (800ca54 <invoke+0x29c>)
 800c7cc:	681a      	ldr	r2, [r3, #0]
 800c7ce:	f649 53b0 	movw	r3, #40368	@ 0x9db0
 800c7d2:	4413      	add	r3, r2
 800c7d4:	4aa0      	ldr	r2, [pc, #640]	@ (800ca58 <invoke+0x2a0>)
 800c7d6:	6812      	ldr	r2, [r2, #0]
 800c7d8:	920c      	str	r2, [sp, #48]	@ 0x30
 800c7da:	2210      	movs	r2, #16
 800c7dc:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c7de:	2214      	movs	r2, #20
 800c7e0:	920a      	str	r2, [sp, #40]	@ 0x28
 800c7e2:	2214      	movs	r2, #20
 800c7e4:	9209      	str	r2, [sp, #36]	@ 0x24
 800c7e6:	9308      	str	r3, [sp, #32]
 800c7e8:	237f      	movs	r3, #127	@ 0x7f
 800c7ea:	9307      	str	r3, [sp, #28]
 800c7ec:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800c7f0:	9306      	str	r3, [sp, #24]
 800c7f2:	2380      	movs	r3, #128	@ 0x80
 800c7f4:	9305      	str	r3, [sp, #20]
 800c7f6:	f06f 0315 	mvn.w	r3, #21
 800c7fa:	9304      	str	r3, [sp, #16]
 800c7fc:	4b97      	ldr	r3, [pc, #604]	@ (800ca5c <invoke+0x2a4>)
 800c7fe:	9303      	str	r3, [sp, #12]
 800c800:	4b97      	ldr	r3, [pc, #604]	@ (800ca60 <invoke+0x2a8>)
 800c802:	9302      	str	r3, [sp, #8]
 800c804:	4b97      	ldr	r3, [pc, #604]	@ (800ca64 <invoke+0x2ac>)
 800c806:	9301      	str	r3, [sp, #4]
 800c808:	4b97      	ldr	r3, [pc, #604]	@ (800ca68 <invoke+0x2b0>)
 800c80a:	9300      	str	r3, [sp, #0]
 800c80c:	2330      	movs	r3, #48	@ 0x30
 800c80e:	2214      	movs	r2, #20
 800c810:	2114      	movs	r1, #20
 800c812:	f7f8 fced 	bl	80051f0 <convolve_1x1_s8_ch48>
/* layer 1:CONV_2D */
convolve_1x1_s8_ch16(&buffer0[40368],20,20,16,(const q7_t*) weight6,bias6,shift6,multiplier6,-128,22,-128,127,&buffer0[0],20,20,48,sbuf);
 800c816:	4b8f      	ldr	r3, [pc, #572]	@ (800ca54 <invoke+0x29c>)
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	f649 50b0 	movw	r0, #40368	@ 0x9db0
 800c81e:	4418      	add	r0, r3
 800c820:	4b8c      	ldr	r3, [pc, #560]	@ (800ca54 <invoke+0x29c>)
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	4a8c      	ldr	r2, [pc, #560]	@ (800ca58 <invoke+0x2a0>)
 800c826:	6812      	ldr	r2, [r2, #0]
 800c828:	920c      	str	r2, [sp, #48]	@ 0x30
 800c82a:	2230      	movs	r2, #48	@ 0x30
 800c82c:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c82e:	2214      	movs	r2, #20
 800c830:	920a      	str	r2, [sp, #40]	@ 0x28
 800c832:	2214      	movs	r2, #20
 800c834:	9209      	str	r2, [sp, #36]	@ 0x24
 800c836:	9308      	str	r3, [sp, #32]
 800c838:	237f      	movs	r3, #127	@ 0x7f
 800c83a:	9307      	str	r3, [sp, #28]
 800c83c:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800c840:	9306      	str	r3, [sp, #24]
 800c842:	2316      	movs	r3, #22
 800c844:	9305      	str	r3, [sp, #20]
 800c846:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800c84a:	9304      	str	r3, [sp, #16]
 800c84c:	4b87      	ldr	r3, [pc, #540]	@ (800ca6c <invoke+0x2b4>)
 800c84e:	9303      	str	r3, [sp, #12]
 800c850:	4b87      	ldr	r3, [pc, #540]	@ (800ca70 <invoke+0x2b8>)
 800c852:	9302      	str	r3, [sp, #8]
 800c854:	4b87      	ldr	r3, [pc, #540]	@ (800ca74 <invoke+0x2bc>)
 800c856:	9301      	str	r3, [sp, #4]
 800c858:	4b87      	ldr	r3, [pc, #540]	@ (800ca78 <invoke+0x2c0>)
 800c85a:	9300      	str	r3, [sp, #0]
 800c85c:	2310      	movs	r3, #16
 800c85e:	2214      	movs	r2, #20
 800c860:	2114      	movs	r1, #20
 800c862:	f7f7 f81d 	bl	80038a0 <convolve_1x1_s8_ch16>
/* layer 2:DEPTHWISE_CONV_2D */
depthwise_kernel3x3_stride1_inplace_CHW(&buffer0[0],20,20,48,(const q7_t*) CHWweight7,offsetBias7,offsetRBias7,shift7,multiplier7,-128,128,-128,127,&buffer0[0],20,20,48,sbuf,-128);
 800c866:	4b7b      	ldr	r3, [pc, #492]	@ (800ca54 <invoke+0x29c>)
 800c868:	6818      	ldr	r0, [r3, #0]
 800c86a:	4b7a      	ldr	r3, [pc, #488]	@ (800ca54 <invoke+0x29c>)
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	4a7a      	ldr	r2, [pc, #488]	@ (800ca58 <invoke+0x2a0>)
 800c870:	6812      	ldr	r2, [r2, #0]
 800c872:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 800c876:	910e      	str	r1, [sp, #56]	@ 0x38
 800c878:	920d      	str	r2, [sp, #52]	@ 0x34
 800c87a:	2230      	movs	r2, #48	@ 0x30
 800c87c:	920c      	str	r2, [sp, #48]	@ 0x30
 800c87e:	2214      	movs	r2, #20
 800c880:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c882:	2214      	movs	r2, #20
 800c884:	920a      	str	r2, [sp, #40]	@ 0x28
 800c886:	9309      	str	r3, [sp, #36]	@ 0x24
 800c888:	237f      	movs	r3, #127	@ 0x7f
 800c88a:	9308      	str	r3, [sp, #32]
 800c88c:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800c890:	9307      	str	r3, [sp, #28]
 800c892:	2380      	movs	r3, #128	@ 0x80
 800c894:	9306      	str	r3, [sp, #24]
 800c896:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800c89a:	9305      	str	r3, [sp, #20]
 800c89c:	4b77      	ldr	r3, [pc, #476]	@ (800ca7c <invoke+0x2c4>)
 800c89e:	9304      	str	r3, [sp, #16]
 800c8a0:	4b77      	ldr	r3, [pc, #476]	@ (800ca80 <invoke+0x2c8>)
 800c8a2:	9303      	str	r3, [sp, #12]
 800c8a4:	4b77      	ldr	r3, [pc, #476]	@ (800ca84 <invoke+0x2cc>)
 800c8a6:	9302      	str	r3, [sp, #8]
 800c8a8:	4b77      	ldr	r3, [pc, #476]	@ (800ca88 <invoke+0x2d0>)
 800c8aa:	9301      	str	r3, [sp, #4]
 800c8ac:	4b77      	ldr	r3, [pc, #476]	@ (800ca8c <invoke+0x2d4>)
 800c8ae:	9300      	str	r3, [sp, #0]
 800c8b0:	2330      	movs	r3, #48	@ 0x30
 800c8b2:	2214      	movs	r2, #20
 800c8b4:	2114      	movs	r1, #20
 800c8b6:	f7f9 faef 	bl	8005e98 <depthwise_kernel3x3_stride1_inplace_CHW>
/* layer 3:CONV_2D */
convolve_1x1_s8_ch48(&buffer0[0],20,20,48,(const q7_t*) weight8,bias8,shift8,multiplier8,8,128,-128,127,&buffer0[46768],20,20,16,sbuf);
 800c8ba:	4b66      	ldr	r3, [pc, #408]	@ (800ca54 <invoke+0x29c>)
 800c8bc:	6818      	ldr	r0, [r3, #0]
 800c8be:	4b65      	ldr	r3, [pc, #404]	@ (800ca54 <invoke+0x29c>)
 800c8c0:	681a      	ldr	r2, [r3, #0]
 800c8c2:	f24b 63b0 	movw	r3, #46768	@ 0xb6b0
 800c8c6:	4413      	add	r3, r2
 800c8c8:	4a63      	ldr	r2, [pc, #396]	@ (800ca58 <invoke+0x2a0>)
 800c8ca:	6812      	ldr	r2, [r2, #0]
 800c8cc:	920c      	str	r2, [sp, #48]	@ 0x30
 800c8ce:	2210      	movs	r2, #16
 800c8d0:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c8d2:	2214      	movs	r2, #20
 800c8d4:	920a      	str	r2, [sp, #40]	@ 0x28
 800c8d6:	2214      	movs	r2, #20
 800c8d8:	9209      	str	r2, [sp, #36]	@ 0x24
 800c8da:	9308      	str	r3, [sp, #32]
 800c8dc:	237f      	movs	r3, #127	@ 0x7f
 800c8de:	9307      	str	r3, [sp, #28]
 800c8e0:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800c8e4:	9306      	str	r3, [sp, #24]
 800c8e6:	2380      	movs	r3, #128	@ 0x80
 800c8e8:	9305      	str	r3, [sp, #20]
 800c8ea:	2308      	movs	r3, #8
 800c8ec:	9304      	str	r3, [sp, #16]
 800c8ee:	4b68      	ldr	r3, [pc, #416]	@ (800ca90 <invoke+0x2d8>)
 800c8f0:	9303      	str	r3, [sp, #12]
 800c8f2:	4b68      	ldr	r3, [pc, #416]	@ (800ca94 <invoke+0x2dc>)
 800c8f4:	9302      	str	r3, [sp, #8]
 800c8f6:	4b68      	ldr	r3, [pc, #416]	@ (800ca98 <invoke+0x2e0>)
 800c8f8:	9301      	str	r3, [sp, #4]
 800c8fa:	4b68      	ldr	r3, [pc, #416]	@ (800ca9c <invoke+0x2e4>)
 800c8fc:	9300      	str	r3, [sp, #0]
 800c8fe:	2330      	movs	r3, #48	@ 0x30
 800c900:	2214      	movs	r2, #20
 800c902:	2114      	movs	r1, #20
 800c904:	f7f8 fc74 	bl	80051f0 <convolve_1x1_s8_ch48>
/* layer 4:ADD */
add_fpreq(6400, &buffer0[46768],0.07699620723724365,8,&buffer0[40368],0.08598089963197708,-22,0.10197763890028,-20,&buffer0[53168]);
 800c908:	4b52      	ldr	r3, [pc, #328]	@ (800ca54 <invoke+0x29c>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	f24b 61b0 	movw	r1, #46768	@ 0xb6b0
 800c910:	4419      	add	r1, r3
 800c912:	4b50      	ldr	r3, [pc, #320]	@ (800ca54 <invoke+0x29c>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	f649 52b0 	movw	r2, #40368	@ 0x9db0
 800c91a:	441a      	add	r2, r3
 800c91c:	4b4d      	ldr	r3, [pc, #308]	@ (800ca54 <invoke+0x29c>)
 800c91e:	6818      	ldr	r0, [r3, #0]
 800c920:	f64c 73b0 	movw	r3, #53168	@ 0xcfb0
 800c924:	4403      	add	r3, r0
 800c926:	eefb 2a04 	vmov.f32	s5, #180	@ 0xc1a00000 -20.0
 800c92a:	ed9f 2a6d 	vldr	s4, [pc, #436]	@ 800cae0 <invoke+0x328>
 800c92e:	eefb 1a06 	vmov.f32	s3, #182	@ 0xc1b00000 -22.0
 800c932:	ed9f 1a5b 	vldr	s2, [pc, #364]	@ 800caa0 <invoke+0x2e8>
 800c936:	eef2 0a00 	vmov.f32	s1, #32	@ 0x41000000  8.0
 800c93a:	ed9f 0a5a 	vldr	s0, [pc, #360]	@ 800caa4 <invoke+0x2ec>
 800c93e:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 800c942:	f7f4 fbe7 	bl	8001114 <add_fpreq>
/* layer 5:CONV_2D */
convolve_1x1_s8_ch16(&buffer0[53168],20,20,16,(const q7_t*) weight9,bias9,shift9,multiplier9,-128,20,-128,127,&buffer0[0],20,20,48,sbuf);
 800c946:	4b43      	ldr	r3, [pc, #268]	@ (800ca54 <invoke+0x29c>)
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	f64c 70b0 	movw	r0, #53168	@ 0xcfb0
 800c94e:	4418      	add	r0, r3
 800c950:	4b40      	ldr	r3, [pc, #256]	@ (800ca54 <invoke+0x29c>)
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	4a40      	ldr	r2, [pc, #256]	@ (800ca58 <invoke+0x2a0>)
 800c956:	6812      	ldr	r2, [r2, #0]
 800c958:	920c      	str	r2, [sp, #48]	@ 0x30
 800c95a:	2230      	movs	r2, #48	@ 0x30
 800c95c:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c95e:	2214      	movs	r2, #20
 800c960:	920a      	str	r2, [sp, #40]	@ 0x28
 800c962:	2214      	movs	r2, #20
 800c964:	9209      	str	r2, [sp, #36]	@ 0x24
 800c966:	9308      	str	r3, [sp, #32]
 800c968:	237f      	movs	r3, #127	@ 0x7f
 800c96a:	9307      	str	r3, [sp, #28]
 800c96c:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800c970:	9306      	str	r3, [sp, #24]
 800c972:	2314      	movs	r3, #20
 800c974:	9305      	str	r3, [sp, #20]
 800c976:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800c97a:	9304      	str	r3, [sp, #16]
 800c97c:	4b4a      	ldr	r3, [pc, #296]	@ (800caa8 <invoke+0x2f0>)
 800c97e:	9303      	str	r3, [sp, #12]
 800c980:	4b4a      	ldr	r3, [pc, #296]	@ (800caac <invoke+0x2f4>)
 800c982:	9302      	str	r3, [sp, #8]
 800c984:	4b4a      	ldr	r3, [pc, #296]	@ (800cab0 <invoke+0x2f8>)
 800c986:	9301      	str	r3, [sp, #4]
 800c988:	4b4a      	ldr	r3, [pc, #296]	@ (800cab4 <invoke+0x2fc>)
 800c98a:	9300      	str	r3, [sp, #0]
 800c98c:	2310      	movs	r3, #16
 800c98e:	2214      	movs	r2, #20
 800c990:	2114      	movs	r1, #20
 800c992:	f7f6 ff85 	bl	80038a0 <convolve_1x1_s8_ch16>
/* layer 6:DEPTHWISE_CONV_2D */
depthwise_kernel3x3_stride1_inplace_CHW(&buffer0[0],20,20,48,(const q7_t*) CHWweight10,offsetBias10,offsetRBias10,shift10,multiplier10,-128,128,-128,127,&buffer0[0],20,20,48,sbuf,-128);
 800c996:	4b2f      	ldr	r3, [pc, #188]	@ (800ca54 <invoke+0x29c>)
 800c998:	6818      	ldr	r0, [r3, #0]
 800c99a:	4b2e      	ldr	r3, [pc, #184]	@ (800ca54 <invoke+0x29c>)
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	4a2e      	ldr	r2, [pc, #184]	@ (800ca58 <invoke+0x2a0>)
 800c9a0:	6812      	ldr	r2, [r2, #0]
 800c9a2:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 800c9a6:	910e      	str	r1, [sp, #56]	@ 0x38
 800c9a8:	920d      	str	r2, [sp, #52]	@ 0x34
 800c9aa:	2230      	movs	r2, #48	@ 0x30
 800c9ac:	920c      	str	r2, [sp, #48]	@ 0x30
 800c9ae:	2214      	movs	r2, #20
 800c9b0:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c9b2:	2214      	movs	r2, #20
 800c9b4:	920a      	str	r2, [sp, #40]	@ 0x28
 800c9b6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c9b8:	237f      	movs	r3, #127	@ 0x7f
 800c9ba:	9308      	str	r3, [sp, #32]
 800c9bc:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800c9c0:	9307      	str	r3, [sp, #28]
 800c9c2:	2380      	movs	r3, #128	@ 0x80
 800c9c4:	9306      	str	r3, [sp, #24]
 800c9c6:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800c9ca:	9305      	str	r3, [sp, #20]
 800c9cc:	4b3a      	ldr	r3, [pc, #232]	@ (800cab8 <invoke+0x300>)
 800c9ce:	9304      	str	r3, [sp, #16]
 800c9d0:	4b3a      	ldr	r3, [pc, #232]	@ (800cabc <invoke+0x304>)
 800c9d2:	9303      	str	r3, [sp, #12]
 800c9d4:	4b3a      	ldr	r3, [pc, #232]	@ (800cac0 <invoke+0x308>)
 800c9d6:	9302      	str	r3, [sp, #8]
 800c9d8:	4b3a      	ldr	r3, [pc, #232]	@ (800cac4 <invoke+0x30c>)
 800c9da:	9301      	str	r3, [sp, #4]
 800c9dc:	4b3a      	ldr	r3, [pc, #232]	@ (800cac8 <invoke+0x310>)
 800c9de:	9300      	str	r3, [sp, #0]
 800c9e0:	2330      	movs	r3, #48	@ 0x30
 800c9e2:	2214      	movs	r2, #20
 800c9e4:	2114      	movs	r1, #20
 800c9e6:	f7f9 fa57 	bl	8005e98 <depthwise_kernel3x3_stride1_inplace_CHW>
/* layer 7:CONV_2D */
convolve_1x1_s8_ch48(&buffer0[0],20,20,48,(const q7_t*) weight11,bias11,shift11,multiplier11,-4,128,-128,127,&buffer0[40368],20,20,16,sbuf);
 800c9ea:	4b1a      	ldr	r3, [pc, #104]	@ (800ca54 <invoke+0x29c>)
 800c9ec:	6818      	ldr	r0, [r3, #0]
 800c9ee:	4b19      	ldr	r3, [pc, #100]	@ (800ca54 <invoke+0x29c>)
 800c9f0:	681a      	ldr	r2, [r3, #0]
 800c9f2:	f649 53b0 	movw	r3, #40368	@ 0x9db0
 800c9f6:	4413      	add	r3, r2
 800c9f8:	4a17      	ldr	r2, [pc, #92]	@ (800ca58 <invoke+0x2a0>)
 800c9fa:	6812      	ldr	r2, [r2, #0]
 800c9fc:	920c      	str	r2, [sp, #48]	@ 0x30
 800c9fe:	2210      	movs	r2, #16
 800ca00:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ca02:	2214      	movs	r2, #20
 800ca04:	920a      	str	r2, [sp, #40]	@ 0x28
 800ca06:	2214      	movs	r2, #20
 800ca08:	9209      	str	r2, [sp, #36]	@ 0x24
 800ca0a:	9308      	str	r3, [sp, #32]
 800ca0c:	237f      	movs	r3, #127	@ 0x7f
 800ca0e:	9307      	str	r3, [sp, #28]
 800ca10:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800ca14:	9306      	str	r3, [sp, #24]
 800ca16:	2380      	movs	r3, #128	@ 0x80
 800ca18:	9305      	str	r3, [sp, #20]
 800ca1a:	f06f 0303 	mvn.w	r3, #3
 800ca1e:	9304      	str	r3, [sp, #16]
 800ca20:	4b2a      	ldr	r3, [pc, #168]	@ (800cacc <invoke+0x314>)
 800ca22:	9303      	str	r3, [sp, #12]
 800ca24:	4b2a      	ldr	r3, [pc, #168]	@ (800cad0 <invoke+0x318>)
 800ca26:	9302      	str	r3, [sp, #8]
 800ca28:	4b2a      	ldr	r3, [pc, #168]	@ (800cad4 <invoke+0x31c>)
 800ca2a:	9301      	str	r3, [sp, #4]
 800ca2c:	4b2a      	ldr	r3, [pc, #168]	@ (800cad8 <invoke+0x320>)
 800ca2e:	9300      	str	r3, [sp, #0]
 800ca30:	2330      	movs	r3, #48	@ 0x30
 800ca32:	2214      	movs	r2, #20
 800ca34:	2114      	movs	r1, #20
 800ca36:	f7f8 fbdb 	bl	80051f0 <convolve_1x1_s8_ch48>
/* layer 8:ADD */
add_fpreq(6400, &buffer0[40368],0.024848325178027153,-4,&buffer0[53168],0.10197763890028,-20,0.10464993864297867,-15,&buffer0[46768]);
 800ca3a:	4b06      	ldr	r3, [pc, #24]	@ (800ca54 <invoke+0x29c>)
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	f649 51b0 	movw	r1, #40368	@ 0x9db0
 800ca42:	4419      	add	r1, r3
 800ca44:	4b03      	ldr	r3, [pc, #12]	@ (800ca54 <invoke+0x29c>)
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	f64c 72b0 	movw	r2, #53168	@ 0xcfb0
 800ca4c:	441a      	add	r2, r3
 800ca4e:	4b01      	ldr	r3, [pc, #4]	@ (800ca54 <invoke+0x29c>)
 800ca50:	6818      	ldr	r0, [r3, #0]
 800ca52:	e049      	b.n	800cae8 <invoke+0x330>
 800ca54:	20000008 	.word	0x20000008
 800ca58:	2000000c 	.word	0x2000000c
 800ca5c:	08017610 	.word	0x08017610
 800ca60:	080175d0 	.word	0x080175d0
 800ca64:	08017590 	.word	0x08017590
 800ca68:	08017290 	.word	0x08017290
 800ca6c:	08017ad0 	.word	0x08017ad0
 800ca70:	08017a10 	.word	0x08017a10
 800ca74:	08017950 	.word	0x08017950
 800ca78:	08017650 	.word	0x08017650
 800ca7c:	08017f80 	.word	0x08017f80
 800ca80:	08017ec0 	.word	0x08017ec0
 800ca84:	08017e00 	.word	0x08017e00
 800ca88:	08017d40 	.word	0x08017d40
 800ca8c:	08017b90 	.word	0x08017b90
 800ca90:	080183c0 	.word	0x080183c0
 800ca94:	08018380 	.word	0x08018380
 800ca98:	08018340 	.word	0x08018340
 800ca9c:	08018040 	.word	0x08018040
 800caa0:	3db016c1 	.word	0x3db016c1
 800caa4:	3d9db030 	.word	0x3d9db030
 800caa8:	08018880 	.word	0x08018880
 800caac:	080187c0 	.word	0x080187c0
 800cab0:	08018700 	.word	0x08018700
 800cab4:	08018400 	.word	0x08018400
 800cab8:	08018d30 	.word	0x08018d30
 800cabc:	08018c70 	.word	0x08018c70
 800cac0:	08018bb0 	.word	0x08018bb0
 800cac4:	08018af0 	.word	0x08018af0
 800cac8:	08018940 	.word	0x08018940
 800cacc:	08019170 	.word	0x08019170
 800cad0:	08019130 	.word	0x08019130
 800cad4:	080190f0 	.word	0x080190f0
 800cad8:	08018df0 	.word	0x08018df0
 800cadc:	3dd652b5 	.word	0x3dd652b5
 800cae0:	3dd0d9a7 	.word	0x3dd0d9a7
 800cae4:	3ccb8eb7 	.word	0x3ccb8eb7
 800cae8:	f24b 63b0 	movw	r3, #46768	@ 0xb6b0
 800caec:	4403      	add	r3, r0
 800caee:	eefa 2a0e 	vmov.f32	s5, #174	@ 0xc1700000 -15.0
 800caf2:	ed1f 2a06 	vldr	s4, [pc, #-24]	@ 800cadc <invoke+0x324>
 800caf6:	eefb 1a04 	vmov.f32	s3, #180	@ 0xc1a00000 -20.0
 800cafa:	ed1f 1a07 	vldr	s2, [pc, #-28]	@ 800cae0 <invoke+0x328>
 800cafe:	eef9 0a00 	vmov.f32	s1, #144	@ 0xc0800000 -4.0
 800cb02:	ed1f 0a08 	vldr	s0, [pc, #-32]	@ 800cae4 <invoke+0x32c>
 800cb06:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 800cb0a:	f7f4 fb03 	bl	8001114 <add_fpreq>
/* layer 9:CONV_2D */
convolve_1x1_s8_ch16(&buffer0[46768],20,20,16,(const q7_t*) weight12,bias12,shift12,multiplier12,-128,15,-128,127,&buffer0[0],20,20,48,sbuf);
 800cb0e:	4ba3      	ldr	r3, [pc, #652]	@ (800cd9c <invoke+0x5e4>)
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	f24b 60b0 	movw	r0, #46768	@ 0xb6b0
 800cb16:	4418      	add	r0, r3
 800cb18:	4ba0      	ldr	r3, [pc, #640]	@ (800cd9c <invoke+0x5e4>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	4aa0      	ldr	r2, [pc, #640]	@ (800cda0 <invoke+0x5e8>)
 800cb1e:	6812      	ldr	r2, [r2, #0]
 800cb20:	920c      	str	r2, [sp, #48]	@ 0x30
 800cb22:	2230      	movs	r2, #48	@ 0x30
 800cb24:	920b      	str	r2, [sp, #44]	@ 0x2c
 800cb26:	2214      	movs	r2, #20
 800cb28:	920a      	str	r2, [sp, #40]	@ 0x28
 800cb2a:	2214      	movs	r2, #20
 800cb2c:	9209      	str	r2, [sp, #36]	@ 0x24
 800cb2e:	9308      	str	r3, [sp, #32]
 800cb30:	237f      	movs	r3, #127	@ 0x7f
 800cb32:	9307      	str	r3, [sp, #28]
 800cb34:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800cb38:	9306      	str	r3, [sp, #24]
 800cb3a:	230f      	movs	r3, #15
 800cb3c:	9305      	str	r3, [sp, #20]
 800cb3e:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800cb42:	9304      	str	r3, [sp, #16]
 800cb44:	4b97      	ldr	r3, [pc, #604]	@ (800cda4 <invoke+0x5ec>)
 800cb46:	9303      	str	r3, [sp, #12]
 800cb48:	4b97      	ldr	r3, [pc, #604]	@ (800cda8 <invoke+0x5f0>)
 800cb4a:	9302      	str	r3, [sp, #8]
 800cb4c:	4b97      	ldr	r3, [pc, #604]	@ (800cdac <invoke+0x5f4>)
 800cb4e:	9301      	str	r3, [sp, #4]
 800cb50:	4b97      	ldr	r3, [pc, #604]	@ (800cdb0 <invoke+0x5f8>)
 800cb52:	9300      	str	r3, [sp, #0]
 800cb54:	2310      	movs	r3, #16
 800cb56:	2214      	movs	r2, #20
 800cb58:	2114      	movs	r1, #20
 800cb5a:	f7f6 fea1 	bl	80038a0 <convolve_1x1_s8_ch16>
/* layer 10:DEPTHWISE_CONV_2D */
depthwise_kernel7x7_stride2_inplace_CHW(&buffer0[0],20,20,48,(const q7_t*) CHWweight13,offsetBias13,offsetRBias13,shift13,multiplier13,-128,128,-128,127,&buffer0[0],10,10,48,sbuf,-128);
 800cb5e:	4b8f      	ldr	r3, [pc, #572]	@ (800cd9c <invoke+0x5e4>)
 800cb60:	6818      	ldr	r0, [r3, #0]
 800cb62:	4b8e      	ldr	r3, [pc, #568]	@ (800cd9c <invoke+0x5e4>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	4a8e      	ldr	r2, [pc, #568]	@ (800cda0 <invoke+0x5e8>)
 800cb68:	6812      	ldr	r2, [r2, #0]
 800cb6a:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 800cb6e:	910e      	str	r1, [sp, #56]	@ 0x38
 800cb70:	920d      	str	r2, [sp, #52]	@ 0x34
 800cb72:	2230      	movs	r2, #48	@ 0x30
 800cb74:	920c      	str	r2, [sp, #48]	@ 0x30
 800cb76:	220a      	movs	r2, #10
 800cb78:	920b      	str	r2, [sp, #44]	@ 0x2c
 800cb7a:	220a      	movs	r2, #10
 800cb7c:	920a      	str	r2, [sp, #40]	@ 0x28
 800cb7e:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb80:	237f      	movs	r3, #127	@ 0x7f
 800cb82:	9308      	str	r3, [sp, #32]
 800cb84:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800cb88:	9307      	str	r3, [sp, #28]
 800cb8a:	2380      	movs	r3, #128	@ 0x80
 800cb8c:	9306      	str	r3, [sp, #24]
 800cb8e:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800cb92:	9305      	str	r3, [sp, #20]
 800cb94:	4b87      	ldr	r3, [pc, #540]	@ (800cdb4 <invoke+0x5fc>)
 800cb96:	9304      	str	r3, [sp, #16]
 800cb98:	4b87      	ldr	r3, [pc, #540]	@ (800cdb8 <invoke+0x600>)
 800cb9a:	9303      	str	r3, [sp, #12]
 800cb9c:	4b87      	ldr	r3, [pc, #540]	@ (800cdbc <invoke+0x604>)
 800cb9e:	9302      	str	r3, [sp, #8]
 800cba0:	4b87      	ldr	r3, [pc, #540]	@ (800cdc0 <invoke+0x608>)
 800cba2:	9301      	str	r3, [sp, #4]
 800cba4:	4b87      	ldr	r3, [pc, #540]	@ (800cdc4 <invoke+0x60c>)
 800cba6:	9300      	str	r3, [sp, #0]
 800cba8:	2330      	movs	r3, #48	@ 0x30
 800cbaa:	2214      	movs	r2, #20
 800cbac:	2114      	movs	r1, #20
 800cbae:	f7fd ff83 	bl	800aab8 <depthwise_kernel7x7_stride2_inplace_CHW>
/* layer 11:CONV_2D */
convolve_1x1_s8_ch48(&buffer0[0],10,10,48,(const q7_t*) weight14,bias14,shift14,multiplier14,-16,128,-128,127,&buffer0[14400],10,10,24,sbuf);
 800cbb2:	4b7a      	ldr	r3, [pc, #488]	@ (800cd9c <invoke+0x5e4>)
 800cbb4:	6818      	ldr	r0, [r3, #0]
 800cbb6:	4b79      	ldr	r3, [pc, #484]	@ (800cd9c <invoke+0x5e4>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	f503 5361 	add.w	r3, r3, #14400	@ 0x3840
 800cbbe:	4a78      	ldr	r2, [pc, #480]	@ (800cda0 <invoke+0x5e8>)
 800cbc0:	6812      	ldr	r2, [r2, #0]
 800cbc2:	920c      	str	r2, [sp, #48]	@ 0x30
 800cbc4:	2218      	movs	r2, #24
 800cbc6:	920b      	str	r2, [sp, #44]	@ 0x2c
 800cbc8:	220a      	movs	r2, #10
 800cbca:	920a      	str	r2, [sp, #40]	@ 0x28
 800cbcc:	220a      	movs	r2, #10
 800cbce:	9209      	str	r2, [sp, #36]	@ 0x24
 800cbd0:	9308      	str	r3, [sp, #32]
 800cbd2:	237f      	movs	r3, #127	@ 0x7f
 800cbd4:	9307      	str	r3, [sp, #28]
 800cbd6:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800cbda:	9306      	str	r3, [sp, #24]
 800cbdc:	2380      	movs	r3, #128	@ 0x80
 800cbde:	9305      	str	r3, [sp, #20]
 800cbe0:	f06f 030f 	mvn.w	r3, #15
 800cbe4:	9304      	str	r3, [sp, #16]
 800cbe6:	4b78      	ldr	r3, [pc, #480]	@ (800cdc8 <invoke+0x610>)
 800cbe8:	9303      	str	r3, [sp, #12]
 800cbea:	4b78      	ldr	r3, [pc, #480]	@ (800cdcc <invoke+0x614>)
 800cbec:	9302      	str	r3, [sp, #8]
 800cbee:	4b78      	ldr	r3, [pc, #480]	@ (800cdd0 <invoke+0x618>)
 800cbf0:	9301      	str	r3, [sp, #4]
 800cbf2:	4b78      	ldr	r3, [pc, #480]	@ (800cdd4 <invoke+0x61c>)
 800cbf4:	9300      	str	r3, [sp, #0]
 800cbf6:	2330      	movs	r3, #48	@ 0x30
 800cbf8:	220a      	movs	r2, #10
 800cbfa:	210a      	movs	r1, #10
 800cbfc:	f7f8 faf8 	bl	80051f0 <convolve_1x1_s8_ch48>
/* layer 12:CONV_2D */
convolve_1x1_s8_ch24(&buffer0[14400],10,10,24,(const q7_t*) weight15,bias15,shift15,multiplier15,-128,16,-128,127,&buffer0[0],10,10,144,sbuf);
 800cc00:	4b66      	ldr	r3, [pc, #408]	@ (800cd9c <invoke+0x5e4>)
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	f503 5061 	add.w	r0, r3, #14400	@ 0x3840
 800cc08:	4b64      	ldr	r3, [pc, #400]	@ (800cd9c <invoke+0x5e4>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	4a64      	ldr	r2, [pc, #400]	@ (800cda0 <invoke+0x5e8>)
 800cc0e:	6812      	ldr	r2, [r2, #0]
 800cc10:	920c      	str	r2, [sp, #48]	@ 0x30
 800cc12:	2290      	movs	r2, #144	@ 0x90
 800cc14:	920b      	str	r2, [sp, #44]	@ 0x2c
 800cc16:	220a      	movs	r2, #10
 800cc18:	920a      	str	r2, [sp, #40]	@ 0x28
 800cc1a:	220a      	movs	r2, #10
 800cc1c:	9209      	str	r2, [sp, #36]	@ 0x24
 800cc1e:	9308      	str	r3, [sp, #32]
 800cc20:	237f      	movs	r3, #127	@ 0x7f
 800cc22:	9307      	str	r3, [sp, #28]
 800cc24:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800cc28:	9306      	str	r3, [sp, #24]
 800cc2a:	2310      	movs	r3, #16
 800cc2c:	9305      	str	r3, [sp, #20]
 800cc2e:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800cc32:	9304      	str	r3, [sp, #16]
 800cc34:	4b68      	ldr	r3, [pc, #416]	@ (800cdd8 <invoke+0x620>)
 800cc36:	9303      	str	r3, [sp, #12]
 800cc38:	4b68      	ldr	r3, [pc, #416]	@ (800cddc <invoke+0x624>)
 800cc3a:	9302      	str	r3, [sp, #8]
 800cc3c:	4b68      	ldr	r3, [pc, #416]	@ (800cde0 <invoke+0x628>)
 800cc3e:	9301      	str	r3, [sp, #4]
 800cc40:	4b68      	ldr	r3, [pc, #416]	@ (800cde4 <invoke+0x62c>)
 800cc42:	9300      	str	r3, [sp, #0]
 800cc44:	2318      	movs	r3, #24
 800cc46:	220a      	movs	r2, #10
 800cc48:	210a      	movs	r1, #10
 800cc4a:	f7f7 fc7d 	bl	8004548 <convolve_1x1_s8_ch24>
/* layer 13:DEPTHWISE_CONV_2D */
depthwise_kernel3x3_stride1_inplace_CHW(&buffer0[0],10,10,144,(const q7_t*) CHWweight16,offsetBias16,offsetRBias16,shift16,multiplier16,-128,128,-128,127,&buffer0[0],10,10,144,sbuf,-128);
 800cc4e:	4b53      	ldr	r3, [pc, #332]	@ (800cd9c <invoke+0x5e4>)
 800cc50:	6818      	ldr	r0, [r3, #0]
 800cc52:	4b52      	ldr	r3, [pc, #328]	@ (800cd9c <invoke+0x5e4>)
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	4a52      	ldr	r2, [pc, #328]	@ (800cda0 <invoke+0x5e8>)
 800cc58:	6812      	ldr	r2, [r2, #0]
 800cc5a:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 800cc5e:	910e      	str	r1, [sp, #56]	@ 0x38
 800cc60:	920d      	str	r2, [sp, #52]	@ 0x34
 800cc62:	2290      	movs	r2, #144	@ 0x90
 800cc64:	920c      	str	r2, [sp, #48]	@ 0x30
 800cc66:	220a      	movs	r2, #10
 800cc68:	920b      	str	r2, [sp, #44]	@ 0x2c
 800cc6a:	220a      	movs	r2, #10
 800cc6c:	920a      	str	r2, [sp, #40]	@ 0x28
 800cc6e:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc70:	237f      	movs	r3, #127	@ 0x7f
 800cc72:	9308      	str	r3, [sp, #32]
 800cc74:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800cc78:	9307      	str	r3, [sp, #28]
 800cc7a:	2380      	movs	r3, #128	@ 0x80
 800cc7c:	9306      	str	r3, [sp, #24]
 800cc7e:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800cc82:	9305      	str	r3, [sp, #20]
 800cc84:	4b58      	ldr	r3, [pc, #352]	@ (800cde8 <invoke+0x630>)
 800cc86:	9304      	str	r3, [sp, #16]
 800cc88:	4b58      	ldr	r3, [pc, #352]	@ (800cdec <invoke+0x634>)
 800cc8a:	9303      	str	r3, [sp, #12]
 800cc8c:	4b58      	ldr	r3, [pc, #352]	@ (800cdf0 <invoke+0x638>)
 800cc8e:	9302      	str	r3, [sp, #8]
 800cc90:	4b58      	ldr	r3, [pc, #352]	@ (800cdf4 <invoke+0x63c>)
 800cc92:	9301      	str	r3, [sp, #4]
 800cc94:	4b58      	ldr	r3, [pc, #352]	@ (800cdf8 <invoke+0x640>)
 800cc96:	9300      	str	r3, [sp, #0]
 800cc98:	2390      	movs	r3, #144	@ 0x90
 800cc9a:	220a      	movs	r2, #10
 800cc9c:	210a      	movs	r1, #10
 800cc9e:	f7f9 f8fb 	bl	8005e98 <depthwise_kernel3x3_stride1_inplace_CHW>
/* layer 14:CONV_2D */
convolve_1x1_s8(&buffer0[0],10,10,144,(const q7_t*) weight17,bias17,shift17,multiplier17,-14,128,-128,127,&buffer0[16800],10,10,24,sbuf);
 800cca2:	4b3e      	ldr	r3, [pc, #248]	@ (800cd9c <invoke+0x5e4>)
 800cca4:	6818      	ldr	r0, [r3, #0]
 800cca6:	4b3d      	ldr	r3, [pc, #244]	@ (800cd9c <invoke+0x5e4>)
 800cca8:	681a      	ldr	r2, [r3, #0]
 800ccaa:	f244 13a0 	movw	r3, #16800	@ 0x41a0
 800ccae:	4413      	add	r3, r2
 800ccb0:	4a3b      	ldr	r2, [pc, #236]	@ (800cda0 <invoke+0x5e8>)
 800ccb2:	6812      	ldr	r2, [r2, #0]
 800ccb4:	920c      	str	r2, [sp, #48]	@ 0x30
 800ccb6:	2218      	movs	r2, #24
 800ccb8:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ccba:	220a      	movs	r2, #10
 800ccbc:	920a      	str	r2, [sp, #40]	@ 0x28
 800ccbe:	220a      	movs	r2, #10
 800ccc0:	9209      	str	r2, [sp, #36]	@ 0x24
 800ccc2:	9308      	str	r3, [sp, #32]
 800ccc4:	237f      	movs	r3, #127	@ 0x7f
 800ccc6:	9307      	str	r3, [sp, #28]
 800ccc8:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800cccc:	9306      	str	r3, [sp, #24]
 800ccce:	2380      	movs	r3, #128	@ 0x80
 800ccd0:	9305      	str	r3, [sp, #20]
 800ccd2:	f06f 030d 	mvn.w	r3, #13
 800ccd6:	9304      	str	r3, [sp, #16]
 800ccd8:	4b48      	ldr	r3, [pc, #288]	@ (800cdfc <invoke+0x644>)
 800ccda:	9303      	str	r3, [sp, #12]
 800ccdc:	4b48      	ldr	r3, [pc, #288]	@ (800ce00 <invoke+0x648>)
 800ccde:	9302      	str	r3, [sp, #8]
 800cce0:	4b48      	ldr	r3, [pc, #288]	@ (800ce04 <invoke+0x64c>)
 800cce2:	9301      	str	r3, [sp, #4]
 800cce4:	4b48      	ldr	r3, [pc, #288]	@ (800ce08 <invoke+0x650>)
 800cce6:	9300      	str	r3, [sp, #0]
 800cce8:	2390      	movs	r3, #144	@ 0x90
 800ccea:	220a      	movs	r2, #10
 800ccec:	210a      	movs	r1, #10
 800ccee:	f7f5 ff6b 	bl	8002bc8 <convolve_1x1_s8>
/* layer 15:ADD */
add_fpreq(2400, &buffer0[16800],0.06462342292070389,-14,&buffer0[14400],0.06311018764972687,-16,0.07023955136537552,-3,&buffer0[12000]);
 800ccf2:	4b2a      	ldr	r3, [pc, #168]	@ (800cd9c <invoke+0x5e4>)
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	f244 11a0 	movw	r1, #16800	@ 0x41a0
 800ccfa:	4419      	add	r1, r3
 800ccfc:	4b27      	ldr	r3, [pc, #156]	@ (800cd9c <invoke+0x5e4>)
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	f503 5061 	add.w	r0, r3, #14400	@ 0x3840
 800cd04:	4b25      	ldr	r3, [pc, #148]	@ (800cd9c <invoke+0x5e4>)
 800cd06:	681a      	ldr	r2, [r3, #0]
 800cd08:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 800cd0c:	4413      	add	r3, r2
 800cd0e:	eef8 2a08 	vmov.f32	s5, #136	@ 0xc0400000 -3.0
 800cd12:	ed9f 2a3e 	vldr	s4, [pc, #248]	@ 800ce0c <invoke+0x654>
 800cd16:	eefb 1a00 	vmov.f32	s3, #176	@ 0xc1800000 -16.0
 800cd1a:	ed9f 1a3d 	vldr	s2, [pc, #244]	@ 800ce10 <invoke+0x658>
 800cd1e:	4602      	mov	r2, r0
 800cd20:	eefa 0a0c 	vmov.f32	s1, #172	@ 0xc1600000 -14.0
 800cd24:	ed9f 0a3b 	vldr	s0, [pc, #236]	@ 800ce14 <invoke+0x65c>
 800cd28:	f44f 6016 	mov.w	r0, #2400	@ 0x960
 800cd2c:	f7f4 f9f2 	bl	8001114 <add_fpreq>
/* layer 16:CONV_2D */
convolve_1x1_s8_ch24(&buffer0[12000],10,10,24,(const q7_t*) weight18,bias18,shift18,multiplier18,-128,3,-128,127,&buffer0[0],10,10,120,sbuf);
 800cd30:	4b1a      	ldr	r3, [pc, #104]	@ (800cd9c <invoke+0x5e4>)
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	f642 60e0 	movw	r0, #12000	@ 0x2ee0
 800cd38:	4418      	add	r0, r3
 800cd3a:	4b18      	ldr	r3, [pc, #96]	@ (800cd9c <invoke+0x5e4>)
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	4a18      	ldr	r2, [pc, #96]	@ (800cda0 <invoke+0x5e8>)
 800cd40:	6812      	ldr	r2, [r2, #0]
 800cd42:	920c      	str	r2, [sp, #48]	@ 0x30
 800cd44:	2278      	movs	r2, #120	@ 0x78
 800cd46:	920b      	str	r2, [sp, #44]	@ 0x2c
 800cd48:	220a      	movs	r2, #10
 800cd4a:	920a      	str	r2, [sp, #40]	@ 0x28
 800cd4c:	220a      	movs	r2, #10
 800cd4e:	9209      	str	r2, [sp, #36]	@ 0x24
 800cd50:	9308      	str	r3, [sp, #32]
 800cd52:	237f      	movs	r3, #127	@ 0x7f
 800cd54:	9307      	str	r3, [sp, #28]
 800cd56:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800cd5a:	9306      	str	r3, [sp, #24]
 800cd5c:	2303      	movs	r3, #3
 800cd5e:	9305      	str	r3, [sp, #20]
 800cd60:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800cd64:	9304      	str	r3, [sp, #16]
 800cd66:	4b2c      	ldr	r3, [pc, #176]	@ (800ce18 <invoke+0x660>)
 800cd68:	9303      	str	r3, [sp, #12]
 800cd6a:	4b2c      	ldr	r3, [pc, #176]	@ (800ce1c <invoke+0x664>)
 800cd6c:	9302      	str	r3, [sp, #8]
 800cd6e:	4b2c      	ldr	r3, [pc, #176]	@ (800ce20 <invoke+0x668>)
 800cd70:	9301      	str	r3, [sp, #4]
 800cd72:	4b2c      	ldr	r3, [pc, #176]	@ (800ce24 <invoke+0x66c>)
 800cd74:	9300      	str	r3, [sp, #0]
 800cd76:	2318      	movs	r3, #24
 800cd78:	220a      	movs	r2, #10
 800cd7a:	210a      	movs	r1, #10
 800cd7c:	f7f7 fbe4 	bl	8004548 <convolve_1x1_s8_ch24>
/* layer 17:DEPTHWISE_CONV_2D */
depthwise_kernel5x5_stride1_inplace_CHW(&buffer0[0],10,10,120,(const q7_t*) CHWweight19,offsetBias19,offsetRBias19,shift19,multiplier19,-128,128,-128,127,&buffer0[0],10,10,120,sbuf,-128);
 800cd80:	4b06      	ldr	r3, [pc, #24]	@ (800cd9c <invoke+0x5e4>)
 800cd82:	6818      	ldr	r0, [r3, #0]
 800cd84:	4b05      	ldr	r3, [pc, #20]	@ (800cd9c <invoke+0x5e4>)
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	4a05      	ldr	r2, [pc, #20]	@ (800cda0 <invoke+0x5e8>)
 800cd8a:	6812      	ldr	r2, [r2, #0]
 800cd8c:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 800cd90:	910e      	str	r1, [sp, #56]	@ 0x38
 800cd92:	920d      	str	r2, [sp, #52]	@ 0x34
 800cd94:	2278      	movs	r2, #120	@ 0x78
 800cd96:	920c      	str	r2, [sp, #48]	@ 0x30
 800cd98:	220a      	movs	r2, #10
 800cd9a:	e045      	b.n	800ce28 <invoke+0x670>
 800cd9c:	20000008 	.word	0x20000008
 800cda0:	2000000c 	.word	0x2000000c
 800cda4:	08019630 	.word	0x08019630
 800cda8:	08019570 	.word	0x08019570
 800cdac:	080194b0 	.word	0x080194b0
 800cdb0:	080191b0 	.word	0x080191b0
 800cdb4:	0801a260 	.word	0x0801a260
 800cdb8:	0801a1a0 	.word	0x0801a1a0
 800cdbc:	0801a0e0 	.word	0x0801a0e0
 800cdc0:	0801a020 	.word	0x0801a020
 800cdc4:	080196f0 	.word	0x080196f0
 800cdc8:	0801a860 	.word	0x0801a860
 800cdcc:	0801a800 	.word	0x0801a800
 800cdd0:	0801a7a0 	.word	0x0801a7a0
 800cdd4:	0801a320 	.word	0x0801a320
 800cdd8:	0801bac0 	.word	0x0801bac0
 800cddc:	0801b880 	.word	0x0801b880
 800cde0:	0801b640 	.word	0x0801b640
 800cde4:	0801a8c0 	.word	0x0801a8c0
 800cde8:	0801c8d0 	.word	0x0801c8d0
 800cdec:	0801c690 	.word	0x0801c690
 800cdf0:	0801c450 	.word	0x0801c450
 800cdf4:	0801c210 	.word	0x0801c210
 800cdf8:	0801bd00 	.word	0x0801bd00
 800cdfc:	0801d950 	.word	0x0801d950
 800ce00:	0801d8f0 	.word	0x0801d8f0
 800ce04:	0801d890 	.word	0x0801d890
 800ce08:	0801cb10 	.word	0x0801cb10
 800ce0c:	3d8fd9c1 	.word	0x3d8fd9c1
 800ce10:	3d813fea 	.word	0x3d813fea
 800ce14:	3d845949 	.word	0x3d845949
 800ce18:	0801e8b0 	.word	0x0801e8b0
 800ce1c:	0801e6d0 	.word	0x0801e6d0
 800ce20:	0801e4f0 	.word	0x0801e4f0
 800ce24:	0801d9b0 	.word	0x0801d9b0
 800ce28:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ce2a:	220a      	movs	r2, #10
 800ce2c:	920a      	str	r2, [sp, #40]	@ 0x28
 800ce2e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce30:	237f      	movs	r3, #127	@ 0x7f
 800ce32:	9308      	str	r3, [sp, #32]
 800ce34:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800ce38:	9307      	str	r3, [sp, #28]
 800ce3a:	2380      	movs	r3, #128	@ 0x80
 800ce3c:	9306      	str	r3, [sp, #24]
 800ce3e:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800ce42:	9305      	str	r3, [sp, #20]
 800ce44:	4ba2      	ldr	r3, [pc, #648]	@ (800d0d0 <invoke+0x918>)
 800ce46:	9304      	str	r3, [sp, #16]
 800ce48:	4ba2      	ldr	r3, [pc, #648]	@ (800d0d4 <invoke+0x91c>)
 800ce4a:	9303      	str	r3, [sp, #12]
 800ce4c:	4ba2      	ldr	r3, [pc, #648]	@ (800d0d8 <invoke+0x920>)
 800ce4e:	9302      	str	r3, [sp, #8]
 800ce50:	4ba2      	ldr	r3, [pc, #648]	@ (800d0dc <invoke+0x924>)
 800ce52:	9301      	str	r3, [sp, #4]
 800ce54:	4ba2      	ldr	r3, [pc, #648]	@ (800d0e0 <invoke+0x928>)
 800ce56:	9300      	str	r3, [sp, #0]
 800ce58:	2378      	movs	r3, #120	@ 0x78
 800ce5a:	220a      	movs	r2, #10
 800ce5c:	210a      	movs	r1, #10
 800ce5e:	f7f9 fd9d 	bl	800699c <depthwise_kernel5x5_stride1_inplace_CHW>
/* layer 18:CONV_2D */
convolve_1x1_s8(&buffer0[0],10,10,120,(const q7_t*) weight20,bias20,shift20,multiplier20,-3,128,-128,127,&buffer0[14400],10,10,24,sbuf);
 800ce62:	4ba0      	ldr	r3, [pc, #640]	@ (800d0e4 <invoke+0x92c>)
 800ce64:	6818      	ldr	r0, [r3, #0]
 800ce66:	4b9f      	ldr	r3, [pc, #636]	@ (800d0e4 <invoke+0x92c>)
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	f503 5361 	add.w	r3, r3, #14400	@ 0x3840
 800ce6e:	4a9e      	ldr	r2, [pc, #632]	@ (800d0e8 <invoke+0x930>)
 800ce70:	6812      	ldr	r2, [r2, #0]
 800ce72:	920c      	str	r2, [sp, #48]	@ 0x30
 800ce74:	2218      	movs	r2, #24
 800ce76:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ce78:	220a      	movs	r2, #10
 800ce7a:	920a      	str	r2, [sp, #40]	@ 0x28
 800ce7c:	220a      	movs	r2, #10
 800ce7e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ce80:	9308      	str	r3, [sp, #32]
 800ce82:	237f      	movs	r3, #127	@ 0x7f
 800ce84:	9307      	str	r3, [sp, #28]
 800ce86:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800ce8a:	9306      	str	r3, [sp, #24]
 800ce8c:	2380      	movs	r3, #128	@ 0x80
 800ce8e:	9305      	str	r3, [sp, #20]
 800ce90:	f06f 0302 	mvn.w	r3, #2
 800ce94:	9304      	str	r3, [sp, #16]
 800ce96:	4b95      	ldr	r3, [pc, #596]	@ (800d0ec <invoke+0x934>)
 800ce98:	9303      	str	r3, [sp, #12]
 800ce9a:	4b95      	ldr	r3, [pc, #596]	@ (800d0f0 <invoke+0x938>)
 800ce9c:	9302      	str	r3, [sp, #8]
 800ce9e:	4b95      	ldr	r3, [pc, #596]	@ (800d0f4 <invoke+0x93c>)
 800cea0:	9301      	str	r3, [sp, #4]
 800cea2:	4b95      	ldr	r3, [pc, #596]	@ (800d0f8 <invoke+0x940>)
 800cea4:	9300      	str	r3, [sp, #0]
 800cea6:	2378      	movs	r3, #120	@ 0x78
 800cea8:	220a      	movs	r2, #10
 800ceaa:	210a      	movs	r1, #10
 800ceac:	f7f5 fe8c 	bl	8002bc8 <convolve_1x1_s8>
/* layer 19:ADD */
add_fpreq(2400, &buffer0[14400],0.018893597647547722,-3,&buffer0[12000],0.07023955136537552,-3,0.07366174459457397,-1,&buffer0[16800]);
 800ceb0:	4b8c      	ldr	r3, [pc, #560]	@ (800d0e4 <invoke+0x92c>)
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	f503 5061 	add.w	r0, r3, #14400	@ 0x3840
 800ceb8:	4b8a      	ldr	r3, [pc, #552]	@ (800d0e4 <invoke+0x92c>)
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 800cec0:	441a      	add	r2, r3
 800cec2:	4b88      	ldr	r3, [pc, #544]	@ (800d0e4 <invoke+0x92c>)
 800cec4:	6819      	ldr	r1, [r3, #0]
 800cec6:	f244 13a0 	movw	r3, #16800	@ 0x41a0
 800ceca:	440b      	add	r3, r1
 800cecc:	eeff 2a00 	vmov.f32	s5, #240	@ 0xbf800000 -1.0
 800ced0:	ed9f 2a8a 	vldr	s4, [pc, #552]	@ 800d0fc <invoke+0x944>
 800ced4:	eef8 1a08 	vmov.f32	s3, #136	@ 0xc0400000 -3.0
 800ced8:	ed9f 1a89 	vldr	s2, [pc, #548]	@ 800d100 <invoke+0x948>
 800cedc:	eef8 0a08 	vmov.f32	s1, #136	@ 0xc0400000 -3.0
 800cee0:	ed9f 0a88 	vldr	s0, [pc, #544]	@ 800d104 <invoke+0x94c>
 800cee4:	4601      	mov	r1, r0
 800cee6:	f44f 6016 	mov.w	r0, #2400	@ 0x960
 800ceea:	f7f4 f913 	bl	8001114 <add_fpreq>
/* layer 20:CONV_2D */
convolve_1x1_s8_ch24(&buffer0[16800],10,10,24,(const q7_t*) weight21,bias21,shift21,multiplier21,-128,1,-128,127,&buffer0[0],10,10,144,sbuf);
 800ceee:	4b7d      	ldr	r3, [pc, #500]	@ (800d0e4 <invoke+0x92c>)
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	f244 10a0 	movw	r0, #16800	@ 0x41a0
 800cef6:	4418      	add	r0, r3
 800cef8:	4b7a      	ldr	r3, [pc, #488]	@ (800d0e4 <invoke+0x92c>)
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	4a7a      	ldr	r2, [pc, #488]	@ (800d0e8 <invoke+0x930>)
 800cefe:	6812      	ldr	r2, [r2, #0]
 800cf00:	920c      	str	r2, [sp, #48]	@ 0x30
 800cf02:	2290      	movs	r2, #144	@ 0x90
 800cf04:	920b      	str	r2, [sp, #44]	@ 0x2c
 800cf06:	220a      	movs	r2, #10
 800cf08:	920a      	str	r2, [sp, #40]	@ 0x28
 800cf0a:	220a      	movs	r2, #10
 800cf0c:	9209      	str	r2, [sp, #36]	@ 0x24
 800cf0e:	9308      	str	r3, [sp, #32]
 800cf10:	237f      	movs	r3, #127	@ 0x7f
 800cf12:	9307      	str	r3, [sp, #28]
 800cf14:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800cf18:	9306      	str	r3, [sp, #24]
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	9305      	str	r3, [sp, #20]
 800cf1e:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800cf22:	9304      	str	r3, [sp, #16]
 800cf24:	4b78      	ldr	r3, [pc, #480]	@ (800d108 <invoke+0x950>)
 800cf26:	9303      	str	r3, [sp, #12]
 800cf28:	4b78      	ldr	r3, [pc, #480]	@ (800d10c <invoke+0x954>)
 800cf2a:	9302      	str	r3, [sp, #8]
 800cf2c:	4b78      	ldr	r3, [pc, #480]	@ (800d110 <invoke+0x958>)
 800cf2e:	9301      	str	r3, [sp, #4]
 800cf30:	4b78      	ldr	r3, [pc, #480]	@ (800d114 <invoke+0x95c>)
 800cf32:	9300      	str	r3, [sp, #0]
 800cf34:	2318      	movs	r3, #24
 800cf36:	220a      	movs	r2, #10
 800cf38:	210a      	movs	r1, #10
 800cf3a:	f7f7 fb05 	bl	8004548 <convolve_1x1_s8_ch24>
/* layer 21:DEPTHWISE_CONV_2D */
depthwise_kernel7x7_stride2_inplace_CHW(&buffer0[0],10,10,144,(const q7_t*) CHWweight22,offsetBias22,offsetRBias22,shift22,multiplier22,-128,128,-128,127,&buffer0[0],5,5,144,sbuf,-128);
 800cf3e:	4b69      	ldr	r3, [pc, #420]	@ (800d0e4 <invoke+0x92c>)
 800cf40:	6818      	ldr	r0, [r3, #0]
 800cf42:	4b68      	ldr	r3, [pc, #416]	@ (800d0e4 <invoke+0x92c>)
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	4a68      	ldr	r2, [pc, #416]	@ (800d0e8 <invoke+0x930>)
 800cf48:	6812      	ldr	r2, [r2, #0]
 800cf4a:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 800cf4e:	910e      	str	r1, [sp, #56]	@ 0x38
 800cf50:	920d      	str	r2, [sp, #52]	@ 0x34
 800cf52:	2290      	movs	r2, #144	@ 0x90
 800cf54:	920c      	str	r2, [sp, #48]	@ 0x30
 800cf56:	2205      	movs	r2, #5
 800cf58:	920b      	str	r2, [sp, #44]	@ 0x2c
 800cf5a:	2205      	movs	r2, #5
 800cf5c:	920a      	str	r2, [sp, #40]	@ 0x28
 800cf5e:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf60:	237f      	movs	r3, #127	@ 0x7f
 800cf62:	9308      	str	r3, [sp, #32]
 800cf64:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800cf68:	9307      	str	r3, [sp, #28]
 800cf6a:	2380      	movs	r3, #128	@ 0x80
 800cf6c:	9306      	str	r3, [sp, #24]
 800cf6e:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800cf72:	9305      	str	r3, [sp, #20]
 800cf74:	4b68      	ldr	r3, [pc, #416]	@ (800d118 <invoke+0x960>)
 800cf76:	9304      	str	r3, [sp, #16]
 800cf78:	4b68      	ldr	r3, [pc, #416]	@ (800d11c <invoke+0x964>)
 800cf7a:	9303      	str	r3, [sp, #12]
 800cf7c:	4b68      	ldr	r3, [pc, #416]	@ (800d120 <invoke+0x968>)
 800cf7e:	9302      	str	r3, [sp, #8]
 800cf80:	4b68      	ldr	r3, [pc, #416]	@ (800d124 <invoke+0x96c>)
 800cf82:	9301      	str	r3, [sp, #4]
 800cf84:	4b68      	ldr	r3, [pc, #416]	@ (800d128 <invoke+0x970>)
 800cf86:	9300      	str	r3, [sp, #0]
 800cf88:	2390      	movs	r3, #144	@ 0x90
 800cf8a:	220a      	movs	r2, #10
 800cf8c:	210a      	movs	r1, #10
 800cf8e:	f7fd fd93 	bl	800aab8 <depthwise_kernel7x7_stride2_inplace_CHW>
/* layer 22:CONV_2D */
convolve_1x1_s8(&buffer0[0],5,5,144,(const q7_t*) weight23,bias23,shift23,multiplier23,-11,128,-128,127,&buffer0[6000],5,5,40,sbuf);
 800cf92:	4b54      	ldr	r3, [pc, #336]	@ (800d0e4 <invoke+0x92c>)
 800cf94:	6818      	ldr	r0, [r3, #0]
 800cf96:	4b53      	ldr	r3, [pc, #332]	@ (800d0e4 <invoke+0x92c>)
 800cf98:	681a      	ldr	r2, [r3, #0]
 800cf9a:	f241 7370 	movw	r3, #6000	@ 0x1770
 800cf9e:	4413      	add	r3, r2
 800cfa0:	4a51      	ldr	r2, [pc, #324]	@ (800d0e8 <invoke+0x930>)
 800cfa2:	6812      	ldr	r2, [r2, #0]
 800cfa4:	920c      	str	r2, [sp, #48]	@ 0x30
 800cfa6:	2228      	movs	r2, #40	@ 0x28
 800cfa8:	920b      	str	r2, [sp, #44]	@ 0x2c
 800cfaa:	2205      	movs	r2, #5
 800cfac:	920a      	str	r2, [sp, #40]	@ 0x28
 800cfae:	2205      	movs	r2, #5
 800cfb0:	9209      	str	r2, [sp, #36]	@ 0x24
 800cfb2:	9308      	str	r3, [sp, #32]
 800cfb4:	237f      	movs	r3, #127	@ 0x7f
 800cfb6:	9307      	str	r3, [sp, #28]
 800cfb8:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800cfbc:	9306      	str	r3, [sp, #24]
 800cfbe:	2380      	movs	r3, #128	@ 0x80
 800cfc0:	9305      	str	r3, [sp, #20]
 800cfc2:	f06f 030a 	mvn.w	r3, #10
 800cfc6:	9304      	str	r3, [sp, #16]
 800cfc8:	4b58      	ldr	r3, [pc, #352]	@ (800d12c <invoke+0x974>)
 800cfca:	9303      	str	r3, [sp, #12]
 800cfcc:	4b58      	ldr	r3, [pc, #352]	@ (800d130 <invoke+0x978>)
 800cfce:	9302      	str	r3, [sp, #8]
 800cfd0:	4b58      	ldr	r3, [pc, #352]	@ (800d134 <invoke+0x97c>)
 800cfd2:	9301      	str	r3, [sp, #4]
 800cfd4:	4b58      	ldr	r3, [pc, #352]	@ (800d138 <invoke+0x980>)
 800cfd6:	9300      	str	r3, [sp, #0]
 800cfd8:	2390      	movs	r3, #144	@ 0x90
 800cfda:	2205      	movs	r2, #5
 800cfdc:	2105      	movs	r1, #5
 800cfde:	f7f5 fdf3 	bl	8002bc8 <convolve_1x1_s8>
/* layer 23:CONV_2D */
convolve_1x1_s8(&buffer0[6000],5,5,40,(const q7_t*) weight24,bias24,shift24,multiplier24,-128,11,-128,127,&buffer0[0],5,5,240,sbuf);
 800cfe2:	4b40      	ldr	r3, [pc, #256]	@ (800d0e4 <invoke+0x92c>)
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	f241 7070 	movw	r0, #6000	@ 0x1770
 800cfea:	4418      	add	r0, r3
 800cfec:	4b3d      	ldr	r3, [pc, #244]	@ (800d0e4 <invoke+0x92c>)
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	4a3d      	ldr	r2, [pc, #244]	@ (800d0e8 <invoke+0x930>)
 800cff2:	6812      	ldr	r2, [r2, #0]
 800cff4:	920c      	str	r2, [sp, #48]	@ 0x30
 800cff6:	22f0      	movs	r2, #240	@ 0xf0
 800cff8:	920b      	str	r2, [sp, #44]	@ 0x2c
 800cffa:	2205      	movs	r2, #5
 800cffc:	920a      	str	r2, [sp, #40]	@ 0x28
 800cffe:	2205      	movs	r2, #5
 800d000:	9209      	str	r2, [sp, #36]	@ 0x24
 800d002:	9308      	str	r3, [sp, #32]
 800d004:	237f      	movs	r3, #127	@ 0x7f
 800d006:	9307      	str	r3, [sp, #28]
 800d008:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800d00c:	9306      	str	r3, [sp, #24]
 800d00e:	230b      	movs	r3, #11
 800d010:	9305      	str	r3, [sp, #20]
 800d012:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800d016:	9304      	str	r3, [sp, #16]
 800d018:	4b48      	ldr	r3, [pc, #288]	@ (800d13c <invoke+0x984>)
 800d01a:	9303      	str	r3, [sp, #12]
 800d01c:	4b48      	ldr	r3, [pc, #288]	@ (800d140 <invoke+0x988>)
 800d01e:	9302      	str	r3, [sp, #8]
 800d020:	4b48      	ldr	r3, [pc, #288]	@ (800d144 <invoke+0x98c>)
 800d022:	9301      	str	r3, [sp, #4]
 800d024:	4b48      	ldr	r3, [pc, #288]	@ (800d148 <invoke+0x990>)
 800d026:	9300      	str	r3, [sp, #0]
 800d028:	2328      	movs	r3, #40	@ 0x28
 800d02a:	2205      	movs	r2, #5
 800d02c:	2105      	movs	r1, #5
 800d02e:	f7f5 fdcb 	bl	8002bc8 <convolve_1x1_s8>
/* layer 24:DEPTHWISE_CONV_2D */
depthwise_kernel7x7_stride1_inplace_CHW(&buffer0[0],5,5,240,(const q7_t*) CHWweight25,offsetBias25,offsetRBias25,shift25,multiplier25,-128,128,-128,127,&buffer0[0],5,5,240,sbuf,-128);
 800d032:	4b2c      	ldr	r3, [pc, #176]	@ (800d0e4 <invoke+0x92c>)
 800d034:	6818      	ldr	r0, [r3, #0]
 800d036:	4b2b      	ldr	r3, [pc, #172]	@ (800d0e4 <invoke+0x92c>)
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	4a2b      	ldr	r2, [pc, #172]	@ (800d0e8 <invoke+0x930>)
 800d03c:	6812      	ldr	r2, [r2, #0]
 800d03e:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 800d042:	910e      	str	r1, [sp, #56]	@ 0x38
 800d044:	920d      	str	r2, [sp, #52]	@ 0x34
 800d046:	22f0      	movs	r2, #240	@ 0xf0
 800d048:	920c      	str	r2, [sp, #48]	@ 0x30
 800d04a:	2205      	movs	r2, #5
 800d04c:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d04e:	2205      	movs	r2, #5
 800d050:	920a      	str	r2, [sp, #40]	@ 0x28
 800d052:	9309      	str	r3, [sp, #36]	@ 0x24
 800d054:	237f      	movs	r3, #127	@ 0x7f
 800d056:	9308      	str	r3, [sp, #32]
 800d058:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800d05c:	9307      	str	r3, [sp, #28]
 800d05e:	2380      	movs	r3, #128	@ 0x80
 800d060:	9306      	str	r3, [sp, #24]
 800d062:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800d066:	9305      	str	r3, [sp, #20]
 800d068:	4b38      	ldr	r3, [pc, #224]	@ (800d14c <invoke+0x994>)
 800d06a:	9304      	str	r3, [sp, #16]
 800d06c:	4b38      	ldr	r3, [pc, #224]	@ (800d150 <invoke+0x998>)
 800d06e:	9303      	str	r3, [sp, #12]
 800d070:	4b38      	ldr	r3, [pc, #224]	@ (800d154 <invoke+0x99c>)
 800d072:	9302      	str	r3, [sp, #8]
 800d074:	4b38      	ldr	r3, [pc, #224]	@ (800d158 <invoke+0x9a0>)
 800d076:	9301      	str	r3, [sp, #4]
 800d078:	4b38      	ldr	r3, [pc, #224]	@ (800d15c <invoke+0x9a4>)
 800d07a:	9300      	str	r3, [sp, #0]
 800d07c:	23f0      	movs	r3, #240	@ 0xf0
 800d07e:	2205      	movs	r2, #5
 800d080:	2105      	movs	r1, #5
 800d082:	f7fb fec3 	bl	8008e0c <depthwise_kernel7x7_stride1_inplace_CHW>
/* layer 25:CONV_2D */
convolve_1x1_s8(&buffer0[0],5,5,240,(const q7_t*) weight26,bias26,shift26,multiplier26,1,128,-128,127,&buffer0[7000],5,5,40,sbuf);
 800d086:	4b17      	ldr	r3, [pc, #92]	@ (800d0e4 <invoke+0x92c>)
 800d088:	6818      	ldr	r0, [r3, #0]
 800d08a:	4b16      	ldr	r3, [pc, #88]	@ (800d0e4 <invoke+0x92c>)
 800d08c:	681a      	ldr	r2, [r3, #0]
 800d08e:	f641 3358 	movw	r3, #7000	@ 0x1b58
 800d092:	4413      	add	r3, r2
 800d094:	4a14      	ldr	r2, [pc, #80]	@ (800d0e8 <invoke+0x930>)
 800d096:	6812      	ldr	r2, [r2, #0]
 800d098:	920c      	str	r2, [sp, #48]	@ 0x30
 800d09a:	2228      	movs	r2, #40	@ 0x28
 800d09c:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d09e:	2205      	movs	r2, #5
 800d0a0:	920a      	str	r2, [sp, #40]	@ 0x28
 800d0a2:	2205      	movs	r2, #5
 800d0a4:	9209      	str	r2, [sp, #36]	@ 0x24
 800d0a6:	9308      	str	r3, [sp, #32]
 800d0a8:	237f      	movs	r3, #127	@ 0x7f
 800d0aa:	9307      	str	r3, [sp, #28]
 800d0ac:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800d0b0:	9306      	str	r3, [sp, #24]
 800d0b2:	2380      	movs	r3, #128	@ 0x80
 800d0b4:	9305      	str	r3, [sp, #20]
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	9304      	str	r3, [sp, #16]
 800d0ba:	4b29      	ldr	r3, [pc, #164]	@ (800d160 <invoke+0x9a8>)
 800d0bc:	9303      	str	r3, [sp, #12]
 800d0be:	4b29      	ldr	r3, [pc, #164]	@ (800d164 <invoke+0x9ac>)
 800d0c0:	9302      	str	r3, [sp, #8]
 800d0c2:	4b29      	ldr	r3, [pc, #164]	@ (800d168 <invoke+0x9b0>)
 800d0c4:	9301      	str	r3, [sp, #4]
 800d0c6:	4b29      	ldr	r3, [pc, #164]	@ (800d16c <invoke+0x9b4>)
 800d0c8:	9300      	str	r3, [sp, #0]
 800d0ca:	23f0      	movs	r3, #240	@ 0xf0
 800d0cc:	2205      	movs	r2, #5
 800d0ce:	e04f      	b.n	800d170 <invoke+0x9b8>
 800d0d0:	0801fbe8 	.word	0x0801fbe8
 800d0d4:	0801fa08 	.word	0x0801fa08
 800d0d8:	0801f828 	.word	0x0801f828
 800d0dc:	0801f648 	.word	0x0801f648
 800d0e0:	0801ea90 	.word	0x0801ea90
 800d0e4:	20000008 	.word	0x20000008
 800d0e8:	2000000c 	.word	0x2000000c
 800d0ec:	080209c8 	.word	0x080209c8
 800d0f0:	08020968 	.word	0x08020968
 800d0f4:	08020908 	.word	0x08020908
 800d0f8:	0801fdc8 	.word	0x0801fdc8
 800d0fc:	3d96dbf8 	.word	0x3d96dbf8
 800d100:	3d8fd9c1 	.word	0x3d8fd9c1
 800d104:	3c9ac6bf 	.word	0x3c9ac6bf
 800d108:	08021c28 	.word	0x08021c28
 800d10c:	080219e8 	.word	0x080219e8
 800d110:	080217a8 	.word	0x080217a8
 800d114:	08020a28 	.word	0x08020a28
 800d118:	080240b8 	.word	0x080240b8
 800d11c:	08023e78 	.word	0x08023e78
 800d120:	08023c38 	.word	0x08023c38
 800d124:	080239f8 	.word	0x080239f8
 800d128:	08021e68 	.word	0x08021e68
 800d12c:	08025ab8 	.word	0x08025ab8
 800d130:	08025a18 	.word	0x08025a18
 800d134:	08025978 	.word	0x08025978
 800d138:	080242f8 	.word	0x080242f8
 800d13c:	08028858 	.word	0x08028858
 800d140:	08028498 	.word	0x08028498
 800d144:	080280d8 	.word	0x080280d8
 800d148:	08025b58 	.word	0x08025b58
 800d14c:	0802c548 	.word	0x0802c548
 800d150:	0802c188 	.word	0x0802c188
 800d154:	0802bdc8 	.word	0x0802bdc8
 800d158:	0802ba08 	.word	0x0802ba08
 800d15c:	08028c18 	.word	0x08028c18
 800d160:	0802efc8 	.word	0x0802efc8
 800d164:	0802ef28 	.word	0x0802ef28
 800d168:	0802ee88 	.word	0x0802ee88
 800d16c:	0802c908 	.word	0x0802c908
 800d170:	2105      	movs	r1, #5
 800d172:	f7f5 fd29 	bl	8002bc8 <convolve_1x1_s8>
/* layer 26:ADD */
add_fpreq(1000, &buffer0[7000],0.04340619966387749,1,&buffer0[6000],0.0489354208111763,-11,0.04974109306931496,-3,&buffer0[8000]);
 800d176:	4ba6      	ldr	r3, [pc, #664]	@ (800d410 <invoke+0xc58>)
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	f641 3158 	movw	r1, #7000	@ 0x1b58
 800d17e:	4419      	add	r1, r3
 800d180:	4ba3      	ldr	r3, [pc, #652]	@ (800d410 <invoke+0xc58>)
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	f241 7270 	movw	r2, #6000	@ 0x1770
 800d188:	441a      	add	r2, r3
 800d18a:	4ba1      	ldr	r3, [pc, #644]	@ (800d410 <invoke+0xc58>)
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	f503 53fa 	add.w	r3, r3, #8000	@ 0x1f40
 800d192:	eef8 2a08 	vmov.f32	s5, #136	@ 0xc0400000 -3.0
 800d196:	ed9f 2a9f 	vldr	s4, [pc, #636]	@ 800d414 <invoke+0xc5c>
 800d19a:	eefa 1a06 	vmov.f32	s3, #166	@ 0xc1300000 -11.0
 800d19e:	ed9f 1a9e 	vldr	s2, [pc, #632]	@ 800d418 <invoke+0xc60>
 800d1a2:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800d1a6:	ed9f 0a9d 	vldr	s0, [pc, #628]	@ 800d41c <invoke+0xc64>
 800d1aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800d1ae:	f7f3 ffb1 	bl	8001114 <add_fpreq>
/* layer 27:CONV_2D */
convolve_1x1_s8(&buffer0[8000],5,5,40,(const q7_t*) weight27,bias27,shift27,multiplier27,-128,3,-128,127,&buffer0[0],5,5,240,sbuf);
 800d1b2:	4b97      	ldr	r3, [pc, #604]	@ (800d410 <invoke+0xc58>)
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	f503 50fa 	add.w	r0, r3, #8000	@ 0x1f40
 800d1ba:	4b95      	ldr	r3, [pc, #596]	@ (800d410 <invoke+0xc58>)
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	4a98      	ldr	r2, [pc, #608]	@ (800d420 <invoke+0xc68>)
 800d1c0:	6812      	ldr	r2, [r2, #0]
 800d1c2:	920c      	str	r2, [sp, #48]	@ 0x30
 800d1c4:	22f0      	movs	r2, #240	@ 0xf0
 800d1c6:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d1c8:	2205      	movs	r2, #5
 800d1ca:	920a      	str	r2, [sp, #40]	@ 0x28
 800d1cc:	2205      	movs	r2, #5
 800d1ce:	9209      	str	r2, [sp, #36]	@ 0x24
 800d1d0:	9308      	str	r3, [sp, #32]
 800d1d2:	237f      	movs	r3, #127	@ 0x7f
 800d1d4:	9307      	str	r3, [sp, #28]
 800d1d6:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800d1da:	9306      	str	r3, [sp, #24]
 800d1dc:	2303      	movs	r3, #3
 800d1de:	9305      	str	r3, [sp, #20]
 800d1e0:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800d1e4:	9304      	str	r3, [sp, #16]
 800d1e6:	4b8f      	ldr	r3, [pc, #572]	@ (800d424 <invoke+0xc6c>)
 800d1e8:	9303      	str	r3, [sp, #12]
 800d1ea:	4b8f      	ldr	r3, [pc, #572]	@ (800d428 <invoke+0xc70>)
 800d1ec:	9302      	str	r3, [sp, #8]
 800d1ee:	4b8f      	ldr	r3, [pc, #572]	@ (800d42c <invoke+0xc74>)
 800d1f0:	9301      	str	r3, [sp, #4]
 800d1f2:	4b8f      	ldr	r3, [pc, #572]	@ (800d430 <invoke+0xc78>)
 800d1f4:	9300      	str	r3, [sp, #0]
 800d1f6:	2328      	movs	r3, #40	@ 0x28
 800d1f8:	2205      	movs	r2, #5
 800d1fa:	2105      	movs	r1, #5
 800d1fc:	f7f5 fce4 	bl	8002bc8 <convolve_1x1_s8>
/* layer 28:DEPTHWISE_CONV_2D */
depthwise_kernel3x3_stride1_inplace_CHW(&buffer0[0],5,5,240,(const q7_t*) CHWweight28,offsetBias28,offsetRBias28,shift28,multiplier28,-128,128,-128,127,&buffer0[0],5,5,240,sbuf,-128);
 800d200:	4b83      	ldr	r3, [pc, #524]	@ (800d410 <invoke+0xc58>)
 800d202:	6818      	ldr	r0, [r3, #0]
 800d204:	4b82      	ldr	r3, [pc, #520]	@ (800d410 <invoke+0xc58>)
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	4a85      	ldr	r2, [pc, #532]	@ (800d420 <invoke+0xc68>)
 800d20a:	6812      	ldr	r2, [r2, #0]
 800d20c:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 800d210:	910e      	str	r1, [sp, #56]	@ 0x38
 800d212:	920d      	str	r2, [sp, #52]	@ 0x34
 800d214:	22f0      	movs	r2, #240	@ 0xf0
 800d216:	920c      	str	r2, [sp, #48]	@ 0x30
 800d218:	2205      	movs	r2, #5
 800d21a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d21c:	2205      	movs	r2, #5
 800d21e:	920a      	str	r2, [sp, #40]	@ 0x28
 800d220:	9309      	str	r3, [sp, #36]	@ 0x24
 800d222:	237f      	movs	r3, #127	@ 0x7f
 800d224:	9308      	str	r3, [sp, #32]
 800d226:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800d22a:	9307      	str	r3, [sp, #28]
 800d22c:	2380      	movs	r3, #128	@ 0x80
 800d22e:	9306      	str	r3, [sp, #24]
 800d230:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800d234:	9305      	str	r3, [sp, #20]
 800d236:	4b7f      	ldr	r3, [pc, #508]	@ (800d434 <invoke+0xc7c>)
 800d238:	9304      	str	r3, [sp, #16]
 800d23a:	4b7f      	ldr	r3, [pc, #508]	@ (800d438 <invoke+0xc80>)
 800d23c:	9303      	str	r3, [sp, #12]
 800d23e:	4b7f      	ldr	r3, [pc, #508]	@ (800d43c <invoke+0xc84>)
 800d240:	9302      	str	r3, [sp, #8]
 800d242:	4b7f      	ldr	r3, [pc, #508]	@ (800d440 <invoke+0xc88>)
 800d244:	9301      	str	r3, [sp, #4]
 800d246:	4b7f      	ldr	r3, [pc, #508]	@ (800d444 <invoke+0xc8c>)
 800d248:	9300      	str	r3, [sp, #0]
 800d24a:	23f0      	movs	r3, #240	@ 0xf0
 800d24c:	2205      	movs	r2, #5
 800d24e:	2105      	movs	r1, #5
 800d250:	f7f8 fe22 	bl	8005e98 <depthwise_kernel3x3_stride1_inplace_CHW>
/* layer 29:CONV_2D */
convolve_1x1_s8(&buffer0[0],5,5,240,(const q7_t*) weight29,bias29,shift29,multiplier29,15,128,-128,127,&buffer0[6000],5,5,48,sbuf);
 800d254:	4b6e      	ldr	r3, [pc, #440]	@ (800d410 <invoke+0xc58>)
 800d256:	6818      	ldr	r0, [r3, #0]
 800d258:	4b6d      	ldr	r3, [pc, #436]	@ (800d410 <invoke+0xc58>)
 800d25a:	681a      	ldr	r2, [r3, #0]
 800d25c:	f241 7370 	movw	r3, #6000	@ 0x1770
 800d260:	4413      	add	r3, r2
 800d262:	4a6f      	ldr	r2, [pc, #444]	@ (800d420 <invoke+0xc68>)
 800d264:	6812      	ldr	r2, [r2, #0]
 800d266:	920c      	str	r2, [sp, #48]	@ 0x30
 800d268:	2230      	movs	r2, #48	@ 0x30
 800d26a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d26c:	2205      	movs	r2, #5
 800d26e:	920a      	str	r2, [sp, #40]	@ 0x28
 800d270:	2205      	movs	r2, #5
 800d272:	9209      	str	r2, [sp, #36]	@ 0x24
 800d274:	9308      	str	r3, [sp, #32]
 800d276:	237f      	movs	r3, #127	@ 0x7f
 800d278:	9307      	str	r3, [sp, #28]
 800d27a:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800d27e:	9306      	str	r3, [sp, #24]
 800d280:	2380      	movs	r3, #128	@ 0x80
 800d282:	9305      	str	r3, [sp, #20]
 800d284:	230f      	movs	r3, #15
 800d286:	9304      	str	r3, [sp, #16]
 800d288:	4b6f      	ldr	r3, [pc, #444]	@ (800d448 <invoke+0xc90>)
 800d28a:	9303      	str	r3, [sp, #12]
 800d28c:	4b6f      	ldr	r3, [pc, #444]	@ (800d44c <invoke+0xc94>)
 800d28e:	9302      	str	r3, [sp, #8]
 800d290:	4b6f      	ldr	r3, [pc, #444]	@ (800d450 <invoke+0xc98>)
 800d292:	9301      	str	r3, [sp, #4]
 800d294:	4b6f      	ldr	r3, [pc, #444]	@ (800d454 <invoke+0xc9c>)
 800d296:	9300      	str	r3, [sp, #0]
 800d298:	23f0      	movs	r3, #240	@ 0xf0
 800d29a:	2205      	movs	r2, #5
 800d29c:	2105      	movs	r1, #5
 800d29e:	f7f5 fc93 	bl	8002bc8 <convolve_1x1_s8>
/* layer 30:CONV_2D */
convolve_1x1_s8_ch48(&buffer0[6000],5,5,48,(const q7_t*) weight30,bias30,shift30,multiplier30,-128,-15,-128,127,&buffer0[0],5,5,192,sbuf);
 800d2a2:	4b5b      	ldr	r3, [pc, #364]	@ (800d410 <invoke+0xc58>)
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	f241 7070 	movw	r0, #6000	@ 0x1770
 800d2aa:	4418      	add	r0, r3
 800d2ac:	4b58      	ldr	r3, [pc, #352]	@ (800d410 <invoke+0xc58>)
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	4a5b      	ldr	r2, [pc, #364]	@ (800d420 <invoke+0xc68>)
 800d2b2:	6812      	ldr	r2, [r2, #0]
 800d2b4:	920c      	str	r2, [sp, #48]	@ 0x30
 800d2b6:	22c0      	movs	r2, #192	@ 0xc0
 800d2b8:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d2ba:	2205      	movs	r2, #5
 800d2bc:	920a      	str	r2, [sp, #40]	@ 0x28
 800d2be:	2205      	movs	r2, #5
 800d2c0:	9209      	str	r2, [sp, #36]	@ 0x24
 800d2c2:	9308      	str	r3, [sp, #32]
 800d2c4:	237f      	movs	r3, #127	@ 0x7f
 800d2c6:	9307      	str	r3, [sp, #28]
 800d2c8:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800d2cc:	9306      	str	r3, [sp, #24]
 800d2ce:	f06f 030e 	mvn.w	r3, #14
 800d2d2:	9305      	str	r3, [sp, #20]
 800d2d4:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800d2d8:	9304      	str	r3, [sp, #16]
 800d2da:	4b5f      	ldr	r3, [pc, #380]	@ (800d458 <invoke+0xca0>)
 800d2dc:	9303      	str	r3, [sp, #12]
 800d2de:	4b5f      	ldr	r3, [pc, #380]	@ (800d45c <invoke+0xca4>)
 800d2e0:	9302      	str	r3, [sp, #8]
 800d2e2:	4b5f      	ldr	r3, [pc, #380]	@ (800d460 <invoke+0xca8>)
 800d2e4:	9301      	str	r3, [sp, #4]
 800d2e6:	4b5f      	ldr	r3, [pc, #380]	@ (800d464 <invoke+0xcac>)
 800d2e8:	9300      	str	r3, [sp, #0]
 800d2ea:	2330      	movs	r3, #48	@ 0x30
 800d2ec:	2205      	movs	r2, #5
 800d2ee:	2105      	movs	r1, #5
 800d2f0:	f7f7 ff7e 	bl	80051f0 <convolve_1x1_s8_ch48>
/* layer 31:DEPTHWISE_CONV_2D */
depthwise_kernel3x3_stride1_inplace_CHW(&buffer0[0],5,5,192,(const q7_t*) CHWweight31,offsetBias31,offsetRBias31,shift31,multiplier31,-128,128,-128,127,&buffer0[0],5,5,192,sbuf,-128);
 800d2f4:	4b46      	ldr	r3, [pc, #280]	@ (800d410 <invoke+0xc58>)
 800d2f6:	6818      	ldr	r0, [r3, #0]
 800d2f8:	4b45      	ldr	r3, [pc, #276]	@ (800d410 <invoke+0xc58>)
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	4a48      	ldr	r2, [pc, #288]	@ (800d420 <invoke+0xc68>)
 800d2fe:	6812      	ldr	r2, [r2, #0]
 800d300:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 800d304:	910e      	str	r1, [sp, #56]	@ 0x38
 800d306:	920d      	str	r2, [sp, #52]	@ 0x34
 800d308:	22c0      	movs	r2, #192	@ 0xc0
 800d30a:	920c      	str	r2, [sp, #48]	@ 0x30
 800d30c:	2205      	movs	r2, #5
 800d30e:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d310:	2205      	movs	r2, #5
 800d312:	920a      	str	r2, [sp, #40]	@ 0x28
 800d314:	9309      	str	r3, [sp, #36]	@ 0x24
 800d316:	237f      	movs	r3, #127	@ 0x7f
 800d318:	9308      	str	r3, [sp, #32]
 800d31a:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800d31e:	9307      	str	r3, [sp, #28]
 800d320:	2380      	movs	r3, #128	@ 0x80
 800d322:	9306      	str	r3, [sp, #24]
 800d324:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800d328:	9305      	str	r3, [sp, #20]
 800d32a:	4b4f      	ldr	r3, [pc, #316]	@ (800d468 <invoke+0xcb0>)
 800d32c:	9304      	str	r3, [sp, #16]
 800d32e:	4b4f      	ldr	r3, [pc, #316]	@ (800d46c <invoke+0xcb4>)
 800d330:	9303      	str	r3, [sp, #12]
 800d332:	4b4f      	ldr	r3, [pc, #316]	@ (800d470 <invoke+0xcb8>)
 800d334:	9302      	str	r3, [sp, #8]
 800d336:	4b4f      	ldr	r3, [pc, #316]	@ (800d474 <invoke+0xcbc>)
 800d338:	9301      	str	r3, [sp, #4]
 800d33a:	4b4f      	ldr	r3, [pc, #316]	@ (800d478 <invoke+0xcc0>)
 800d33c:	9300      	str	r3, [sp, #0]
 800d33e:	23c0      	movs	r3, #192	@ 0xc0
 800d340:	2205      	movs	r2, #5
 800d342:	2105      	movs	r1, #5
 800d344:	f7f8 fda8 	bl	8005e98 <depthwise_kernel3x3_stride1_inplace_CHW>
/* layer 32:CONV_2D */
convolve_1x1_s8(&buffer0[0],5,5,192,(const q7_t*) weight32,bias32,shift32,multiplier32,-11,128,-128,127,&buffer0[4800],5,5,48,sbuf);
 800d348:	4b31      	ldr	r3, [pc, #196]	@ (800d410 <invoke+0xc58>)
 800d34a:	6818      	ldr	r0, [r3, #0]
 800d34c:	4b30      	ldr	r3, [pc, #192]	@ (800d410 <invoke+0xc58>)
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	f503 5396 	add.w	r3, r3, #4800	@ 0x12c0
 800d354:	4a32      	ldr	r2, [pc, #200]	@ (800d420 <invoke+0xc68>)
 800d356:	6812      	ldr	r2, [r2, #0]
 800d358:	920c      	str	r2, [sp, #48]	@ 0x30
 800d35a:	2230      	movs	r2, #48	@ 0x30
 800d35c:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d35e:	2205      	movs	r2, #5
 800d360:	920a      	str	r2, [sp, #40]	@ 0x28
 800d362:	2205      	movs	r2, #5
 800d364:	9209      	str	r2, [sp, #36]	@ 0x24
 800d366:	9308      	str	r3, [sp, #32]
 800d368:	237f      	movs	r3, #127	@ 0x7f
 800d36a:	9307      	str	r3, [sp, #28]
 800d36c:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800d370:	9306      	str	r3, [sp, #24]
 800d372:	2380      	movs	r3, #128	@ 0x80
 800d374:	9305      	str	r3, [sp, #20]
 800d376:	f06f 030a 	mvn.w	r3, #10
 800d37a:	9304      	str	r3, [sp, #16]
 800d37c:	4b3f      	ldr	r3, [pc, #252]	@ (800d47c <invoke+0xcc4>)
 800d37e:	9303      	str	r3, [sp, #12]
 800d380:	4b3f      	ldr	r3, [pc, #252]	@ (800d480 <invoke+0xcc8>)
 800d382:	9302      	str	r3, [sp, #8]
 800d384:	4b3f      	ldr	r3, [pc, #252]	@ (800d484 <invoke+0xccc>)
 800d386:	9301      	str	r3, [sp, #4]
 800d388:	4b3f      	ldr	r3, [pc, #252]	@ (800d488 <invoke+0xcd0>)
 800d38a:	9300      	str	r3, [sp, #0]
 800d38c:	23c0      	movs	r3, #192	@ 0xc0
 800d38e:	2205      	movs	r2, #5
 800d390:	2105      	movs	r1, #5
 800d392:	f7f5 fc19 	bl	8002bc8 <convolve_1x1_s8>
/* layer 33:ADD */
add_fpreq(1200, &buffer0[4800],0.04923376813530922,-11,&buffer0[6000],0.04425579309463501,15,0.05336926504969597,5,&buffer0[7200]);
 800d396:	4b1e      	ldr	r3, [pc, #120]	@ (800d410 <invoke+0xc58>)
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	f503 5196 	add.w	r1, r3, #4800	@ 0x12c0
 800d39e:	4b1c      	ldr	r3, [pc, #112]	@ (800d410 <invoke+0xc58>)
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	f241 7270 	movw	r2, #6000	@ 0x1770
 800d3a6:	441a      	add	r2, r3
 800d3a8:	4b19      	ldr	r3, [pc, #100]	@ (800d410 <invoke+0xc58>)
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	f503 53e1 	add.w	r3, r3, #7200	@ 0x1c20
 800d3b0:	eef1 2a04 	vmov.f32	s5, #20	@ 0x40a00000  5.0
 800d3b4:	ed9f 2a35 	vldr	s4, [pc, #212]	@ 800d48c <invoke+0xcd4>
 800d3b8:	eef2 1a0e 	vmov.f32	s3, #46	@ 0x41700000  15.0
 800d3bc:	ed9f 1a34 	vldr	s2, [pc, #208]	@ 800d490 <invoke+0xcd8>
 800d3c0:	eefa 0a06 	vmov.f32	s1, #166	@ 0xc1300000 -11.0
 800d3c4:	ed9f 0a33 	vldr	s0, [pc, #204]	@ 800d494 <invoke+0xcdc>
 800d3c8:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 800d3cc:	f7f3 fea2 	bl	8001114 <add_fpreq>
/* layer 34:CONV_2D */
convolve_1x1_s8_ch48(&buffer0[7200],5,5,48,(const q7_t*) weight33,bias33,shift33,multiplier33,-128,-5,-128,127,&buffer0[0],5,5,240,sbuf);
 800d3d0:	4b0f      	ldr	r3, [pc, #60]	@ (800d410 <invoke+0xc58>)
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	f503 50e1 	add.w	r0, r3, #7200	@ 0x1c20
 800d3d8:	4b0d      	ldr	r3, [pc, #52]	@ (800d410 <invoke+0xc58>)
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	4a10      	ldr	r2, [pc, #64]	@ (800d420 <invoke+0xc68>)
 800d3de:	6812      	ldr	r2, [r2, #0]
 800d3e0:	920c      	str	r2, [sp, #48]	@ 0x30
 800d3e2:	22f0      	movs	r2, #240	@ 0xf0
 800d3e4:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d3e6:	2205      	movs	r2, #5
 800d3e8:	920a      	str	r2, [sp, #40]	@ 0x28
 800d3ea:	2205      	movs	r2, #5
 800d3ec:	9209      	str	r2, [sp, #36]	@ 0x24
 800d3ee:	9308      	str	r3, [sp, #32]
 800d3f0:	237f      	movs	r3, #127	@ 0x7f
 800d3f2:	9307      	str	r3, [sp, #28]
 800d3f4:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800d3f8:	9306      	str	r3, [sp, #24]
 800d3fa:	f06f 0304 	mvn.w	r3, #4
 800d3fe:	9305      	str	r3, [sp, #20]
 800d400:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800d404:	9304      	str	r3, [sp, #16]
 800d406:	4b24      	ldr	r3, [pc, #144]	@ (800d498 <invoke+0xce0>)
 800d408:	9303      	str	r3, [sp, #12]
 800d40a:	4b24      	ldr	r3, [pc, #144]	@ (800d49c <invoke+0xce4>)
 800d40c:	9302      	str	r3, [sp, #8]
 800d40e:	e047      	b.n	800d4a0 <invoke+0xce8>
 800d410:	20000008 	.word	0x20000008
 800d414:	3d4bbd51 	.word	0x3d4bbd51
 800d418:	3d487082 	.word	0x3d487082
 800d41c:	3d31cab3 	.word	0x3d31cab3
 800d420:	2000000c 	.word	0x2000000c
 800d424:	08031d68 	.word	0x08031d68
 800d428:	080319a8 	.word	0x080319a8
 800d42c:	080315e8 	.word	0x080315e8
 800d430:	0802f068 	.word	0x0802f068
 800d434:	080334d8 	.word	0x080334d8
 800d438:	08033118 	.word	0x08033118
 800d43c:	08032d58 	.word	0x08032d58
 800d440:	08032998 	.word	0x08032998
 800d444:	08032128 	.word	0x08032128
 800d448:	08036718 	.word	0x08036718
 800d44c:	08036658 	.word	0x08036658
 800d450:	08036598 	.word	0x08036598
 800d454:	08033898 	.word	0x08033898
 800d458:	080391d8 	.word	0x080391d8
 800d45c:	08038ed8 	.word	0x08038ed8
 800d460:	08038bd8 	.word	0x08038bd8
 800d464:	080367d8 	.word	0x080367d8
 800d468:	0803a498 	.word	0x0803a498
 800d46c:	0803a198 	.word	0x0803a198
 800d470:	08039e98 	.word	0x08039e98
 800d474:	08039b98 	.word	0x08039b98
 800d478:	080394d8 	.word	0x080394d8
 800d47c:	0803cd18 	.word	0x0803cd18
 800d480:	0803cc58 	.word	0x0803cc58
 800d484:	0803cb98 	.word	0x0803cb98
 800d488:	0803a798 	.word	0x0803a798
 800d48c:	3d5a99bb 	.word	0x3d5a99bb
 800d490:	3d354590 	.word	0x3d354590
 800d494:	3d49a959 	.word	0x3d49a959
 800d498:	08040258 	.word	0x08040258
 800d49c:	0803fe98 	.word	0x0803fe98
 800d4a0:	4ba3      	ldr	r3, [pc, #652]	@ (800d730 <invoke+0xf78>)
 800d4a2:	9301      	str	r3, [sp, #4]
 800d4a4:	4ba3      	ldr	r3, [pc, #652]	@ (800d734 <invoke+0xf7c>)
 800d4a6:	9300      	str	r3, [sp, #0]
 800d4a8:	2330      	movs	r3, #48	@ 0x30
 800d4aa:	2205      	movs	r2, #5
 800d4ac:	2105      	movs	r1, #5
 800d4ae:	f7f7 fe9f 	bl	80051f0 <convolve_1x1_s8_ch48>
/* layer 35:DEPTHWISE_CONV_2D */
depthwise_kernel5x5_stride2_inplace_CHW(&buffer0[0],5,5,240,(const q7_t*) CHWweight34,offsetBias34,offsetRBias34,shift34,multiplier34,-128,128,-128,127,&buffer0[0],3,3,240,sbuf,-128);
 800d4b2:	4ba1      	ldr	r3, [pc, #644]	@ (800d738 <invoke+0xf80>)
 800d4b4:	6818      	ldr	r0, [r3, #0]
 800d4b6:	4ba0      	ldr	r3, [pc, #640]	@ (800d738 <invoke+0xf80>)
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	4aa0      	ldr	r2, [pc, #640]	@ (800d73c <invoke+0xf84>)
 800d4bc:	6812      	ldr	r2, [r2, #0]
 800d4be:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 800d4c2:	910e      	str	r1, [sp, #56]	@ 0x38
 800d4c4:	920d      	str	r2, [sp, #52]	@ 0x34
 800d4c6:	22f0      	movs	r2, #240	@ 0xf0
 800d4c8:	920c      	str	r2, [sp, #48]	@ 0x30
 800d4ca:	2203      	movs	r2, #3
 800d4cc:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d4ce:	2203      	movs	r2, #3
 800d4d0:	920a      	str	r2, [sp, #40]	@ 0x28
 800d4d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d4d4:	237f      	movs	r3, #127	@ 0x7f
 800d4d6:	9308      	str	r3, [sp, #32]
 800d4d8:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800d4dc:	9307      	str	r3, [sp, #28]
 800d4de:	2380      	movs	r3, #128	@ 0x80
 800d4e0:	9306      	str	r3, [sp, #24]
 800d4e2:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800d4e6:	9305      	str	r3, [sp, #20]
 800d4e8:	4b95      	ldr	r3, [pc, #596]	@ (800d740 <invoke+0xf88>)
 800d4ea:	9304      	str	r3, [sp, #16]
 800d4ec:	4b95      	ldr	r3, [pc, #596]	@ (800d744 <invoke+0xf8c>)
 800d4ee:	9303      	str	r3, [sp, #12]
 800d4f0:	4b95      	ldr	r3, [pc, #596]	@ (800d748 <invoke+0xf90>)
 800d4f2:	9302      	str	r3, [sp, #8]
 800d4f4:	4b95      	ldr	r3, [pc, #596]	@ (800d74c <invoke+0xf94>)
 800d4f6:	9301      	str	r3, [sp, #4]
 800d4f8:	4b95      	ldr	r3, [pc, #596]	@ (800d750 <invoke+0xf98>)
 800d4fa:	9300      	str	r3, [sp, #0]
 800d4fc:	23f0      	movs	r3, #240	@ 0xf0
 800d4fe:	2205      	movs	r2, #5
 800d500:	2105      	movs	r1, #5
 800d502:	f7fa fb5f 	bl	8007bc4 <depthwise_kernel5x5_stride2_inplace_CHW>
/* layer 36:CONV_2D */
convolve_1x1_s8(&buffer0[0],3,3,240,(const q7_t*) weight35,bias35,shift35,multiplier35,-7,128,-128,127,&buffer0[4320],3,3,96,sbuf);
 800d506:	4b8c      	ldr	r3, [pc, #560]	@ (800d738 <invoke+0xf80>)
 800d508:	6818      	ldr	r0, [r3, #0]
 800d50a:	4b8b      	ldr	r3, [pc, #556]	@ (800d738 <invoke+0xf80>)
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	f503 5387 	add.w	r3, r3, #4320	@ 0x10e0
 800d512:	4a8a      	ldr	r2, [pc, #552]	@ (800d73c <invoke+0xf84>)
 800d514:	6812      	ldr	r2, [r2, #0]
 800d516:	920c      	str	r2, [sp, #48]	@ 0x30
 800d518:	2260      	movs	r2, #96	@ 0x60
 800d51a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d51c:	2203      	movs	r2, #3
 800d51e:	920a      	str	r2, [sp, #40]	@ 0x28
 800d520:	2203      	movs	r2, #3
 800d522:	9209      	str	r2, [sp, #36]	@ 0x24
 800d524:	9308      	str	r3, [sp, #32]
 800d526:	237f      	movs	r3, #127	@ 0x7f
 800d528:	9307      	str	r3, [sp, #28]
 800d52a:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800d52e:	9306      	str	r3, [sp, #24]
 800d530:	2380      	movs	r3, #128	@ 0x80
 800d532:	9305      	str	r3, [sp, #20]
 800d534:	f06f 0306 	mvn.w	r3, #6
 800d538:	9304      	str	r3, [sp, #16]
 800d53a:	4b86      	ldr	r3, [pc, #536]	@ (800d754 <invoke+0xf9c>)
 800d53c:	9303      	str	r3, [sp, #12]
 800d53e:	4b86      	ldr	r3, [pc, #536]	@ (800d758 <invoke+0xfa0>)
 800d540:	9302      	str	r3, [sp, #8]
 800d542:	4b86      	ldr	r3, [pc, #536]	@ (800d75c <invoke+0xfa4>)
 800d544:	9301      	str	r3, [sp, #4]
 800d546:	4b86      	ldr	r3, [pc, #536]	@ (800d760 <invoke+0xfa8>)
 800d548:	9300      	str	r3, [sp, #0]
 800d54a:	23f0      	movs	r3, #240	@ 0xf0
 800d54c:	2203      	movs	r2, #3
 800d54e:	2103      	movs	r1, #3
 800d550:	f7f5 fb3a 	bl	8002bc8 <convolve_1x1_s8>
/* layer 37:CONV_2D */
convolve_1x1_s8(&buffer0[4320],3,3,96,(const q7_t*) weight36,bias36,shift36,multiplier36,-128,7,-128,127,&buffer0[0],3,3,480,sbuf);
 800d554:	4b78      	ldr	r3, [pc, #480]	@ (800d738 <invoke+0xf80>)
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	f503 5087 	add.w	r0, r3, #4320	@ 0x10e0
 800d55c:	4b76      	ldr	r3, [pc, #472]	@ (800d738 <invoke+0xf80>)
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	4a76      	ldr	r2, [pc, #472]	@ (800d73c <invoke+0xf84>)
 800d562:	6812      	ldr	r2, [r2, #0]
 800d564:	920c      	str	r2, [sp, #48]	@ 0x30
 800d566:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800d56a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d56c:	2203      	movs	r2, #3
 800d56e:	920a      	str	r2, [sp, #40]	@ 0x28
 800d570:	2203      	movs	r2, #3
 800d572:	9209      	str	r2, [sp, #36]	@ 0x24
 800d574:	9308      	str	r3, [sp, #32]
 800d576:	237f      	movs	r3, #127	@ 0x7f
 800d578:	9307      	str	r3, [sp, #28]
 800d57a:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800d57e:	9306      	str	r3, [sp, #24]
 800d580:	2307      	movs	r3, #7
 800d582:	9305      	str	r3, [sp, #20]
 800d584:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800d588:	9304      	str	r3, [sp, #16]
 800d58a:	4b76      	ldr	r3, [pc, #472]	@ (800d764 <invoke+0xfac>)
 800d58c:	9303      	str	r3, [sp, #12]
 800d58e:	4b76      	ldr	r3, [pc, #472]	@ (800d768 <invoke+0xfb0>)
 800d590:	9302      	str	r3, [sp, #8]
 800d592:	4b76      	ldr	r3, [pc, #472]	@ (800d76c <invoke+0xfb4>)
 800d594:	9301      	str	r3, [sp, #4]
 800d596:	4b76      	ldr	r3, [pc, #472]	@ (800d770 <invoke+0xfb8>)
 800d598:	9300      	str	r3, [sp, #0]
 800d59a:	2360      	movs	r3, #96	@ 0x60
 800d59c:	2203      	movs	r2, #3
 800d59e:	2103      	movs	r1, #3
 800d5a0:	f7f5 fb12 	bl	8002bc8 <convolve_1x1_s8>
/* layer 38:DEPTHWISE_CONV_2D */
depthwise_kernel3x3_stride1_inplace_CHW(&buffer0[0],3,3,480,(const q7_t*) CHWweight37,offsetBias37,offsetRBias37,shift37,multiplier37,-128,128,-128,127,&buffer0[0],3,3,480,sbuf,-128);
 800d5a4:	4b64      	ldr	r3, [pc, #400]	@ (800d738 <invoke+0xf80>)
 800d5a6:	6818      	ldr	r0, [r3, #0]
 800d5a8:	4b63      	ldr	r3, [pc, #396]	@ (800d738 <invoke+0xf80>)
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	4a63      	ldr	r2, [pc, #396]	@ (800d73c <invoke+0xf84>)
 800d5ae:	6812      	ldr	r2, [r2, #0]
 800d5b0:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 800d5b4:	910e      	str	r1, [sp, #56]	@ 0x38
 800d5b6:	920d      	str	r2, [sp, #52]	@ 0x34
 800d5b8:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800d5bc:	920c      	str	r2, [sp, #48]	@ 0x30
 800d5be:	2203      	movs	r2, #3
 800d5c0:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d5c2:	2203      	movs	r2, #3
 800d5c4:	920a      	str	r2, [sp, #40]	@ 0x28
 800d5c6:	9309      	str	r3, [sp, #36]	@ 0x24
 800d5c8:	237f      	movs	r3, #127	@ 0x7f
 800d5ca:	9308      	str	r3, [sp, #32]
 800d5cc:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800d5d0:	9307      	str	r3, [sp, #28]
 800d5d2:	2380      	movs	r3, #128	@ 0x80
 800d5d4:	9306      	str	r3, [sp, #24]
 800d5d6:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800d5da:	9305      	str	r3, [sp, #20]
 800d5dc:	4b65      	ldr	r3, [pc, #404]	@ (800d774 <invoke+0xfbc>)
 800d5de:	9304      	str	r3, [sp, #16]
 800d5e0:	4b65      	ldr	r3, [pc, #404]	@ (800d778 <invoke+0xfc0>)
 800d5e2:	9303      	str	r3, [sp, #12]
 800d5e4:	4b65      	ldr	r3, [pc, #404]	@ (800d77c <invoke+0xfc4>)
 800d5e6:	9302      	str	r3, [sp, #8]
 800d5e8:	4b65      	ldr	r3, [pc, #404]	@ (800d780 <invoke+0xfc8>)
 800d5ea:	9301      	str	r3, [sp, #4]
 800d5ec:	4b65      	ldr	r3, [pc, #404]	@ (800d784 <invoke+0xfcc>)
 800d5ee:	9300      	str	r3, [sp, #0]
 800d5f0:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800d5f4:	2203      	movs	r2, #3
 800d5f6:	2103      	movs	r1, #3
 800d5f8:	f7f8 fc4e 	bl	8005e98 <depthwise_kernel3x3_stride1_inplace_CHW>
/* layer 39:CONV_2D */
convolve_1x1_s8(&buffer0[0],3,3,480,(const q7_t*) weight38,bias38,shift38,multiplier38,-2,128,-128,127,&buffer0[5184],3,3,96,sbuf);
 800d5fc:	4b4e      	ldr	r3, [pc, #312]	@ (800d738 <invoke+0xf80>)
 800d5fe:	6818      	ldr	r0, [r3, #0]
 800d600:	4b4d      	ldr	r3, [pc, #308]	@ (800d738 <invoke+0xf80>)
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	f503 53a2 	add.w	r3, r3, #5184	@ 0x1440
 800d608:	4a4c      	ldr	r2, [pc, #304]	@ (800d73c <invoke+0xf84>)
 800d60a:	6812      	ldr	r2, [r2, #0]
 800d60c:	920c      	str	r2, [sp, #48]	@ 0x30
 800d60e:	2260      	movs	r2, #96	@ 0x60
 800d610:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d612:	2203      	movs	r2, #3
 800d614:	920a      	str	r2, [sp, #40]	@ 0x28
 800d616:	2203      	movs	r2, #3
 800d618:	9209      	str	r2, [sp, #36]	@ 0x24
 800d61a:	9308      	str	r3, [sp, #32]
 800d61c:	237f      	movs	r3, #127	@ 0x7f
 800d61e:	9307      	str	r3, [sp, #28]
 800d620:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800d624:	9306      	str	r3, [sp, #24]
 800d626:	2380      	movs	r3, #128	@ 0x80
 800d628:	9305      	str	r3, [sp, #20]
 800d62a:	f06f 0301 	mvn.w	r3, #1
 800d62e:	9304      	str	r3, [sp, #16]
 800d630:	4b55      	ldr	r3, [pc, #340]	@ (800d788 <invoke+0xfd0>)
 800d632:	9303      	str	r3, [sp, #12]
 800d634:	4b55      	ldr	r3, [pc, #340]	@ (800d78c <invoke+0xfd4>)
 800d636:	9302      	str	r3, [sp, #8]
 800d638:	4b55      	ldr	r3, [pc, #340]	@ (800d790 <invoke+0xfd8>)
 800d63a:	9301      	str	r3, [sp, #4]
 800d63c:	4b55      	ldr	r3, [pc, #340]	@ (800d794 <invoke+0xfdc>)
 800d63e:	9300      	str	r3, [sp, #0]
 800d640:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800d644:	2203      	movs	r2, #3
 800d646:	2103      	movs	r1, #3
 800d648:	f7f5 fabe 	bl	8002bc8 <convolve_1x1_s8>
/* layer 40:ADD */
add_fpreq(864, &buffer0[5184],0.04011229798197746,-2,&buffer0[4320],0.042191825807094574,-7,0.03923744335770607,-9,&buffer0[3456]);
 800d64c:	4b3a      	ldr	r3, [pc, #232]	@ (800d738 <invoke+0xf80>)
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	f503 51a2 	add.w	r1, r3, #5184	@ 0x1440
 800d654:	4b38      	ldr	r3, [pc, #224]	@ (800d738 <invoke+0xf80>)
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	f503 5287 	add.w	r2, r3, #4320	@ 0x10e0
 800d65c:	4b36      	ldr	r3, [pc, #216]	@ (800d738 <invoke+0xf80>)
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	f503 6358 	add.w	r3, r3, #3456	@ 0xd80
 800d664:	eefa 2a02 	vmov.f32	s5, #162	@ 0xc1100000 -9.0
 800d668:	ed9f 2a4b 	vldr	s4, [pc, #300]	@ 800d798 <invoke+0xfe0>
 800d66c:	eef9 1a0c 	vmov.f32	s3, #156	@ 0xc0e00000 -7.0
 800d670:	ed9f 1a4a 	vldr	s2, [pc, #296]	@ 800d79c <invoke+0xfe4>
 800d674:	eef8 0a00 	vmov.f32	s1, #128	@ 0xc0000000 -2.0
 800d678:	ed9f 0a49 	vldr	s0, [pc, #292]	@ 800d7a0 <invoke+0xfe8>
 800d67c:	f44f 7058 	mov.w	r0, #864	@ 0x360
 800d680:	f7f3 fd48 	bl	8001114 <add_fpreq>
/* layer 41:CONV_2D */
convolve_1x1_s8(&buffer0[3456],3,3,96,(const q7_t*) weight39,bias39,shift39,multiplier39,-128,9,-128,127,&buffer0[0],3,3,384,sbuf);
 800d684:	4b2c      	ldr	r3, [pc, #176]	@ (800d738 <invoke+0xf80>)
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	f503 6058 	add.w	r0, r3, #3456	@ 0xd80
 800d68c:	4b2a      	ldr	r3, [pc, #168]	@ (800d738 <invoke+0xf80>)
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	4a2a      	ldr	r2, [pc, #168]	@ (800d73c <invoke+0xf84>)
 800d692:	6812      	ldr	r2, [r2, #0]
 800d694:	920c      	str	r2, [sp, #48]	@ 0x30
 800d696:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800d69a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d69c:	2203      	movs	r2, #3
 800d69e:	920a      	str	r2, [sp, #40]	@ 0x28
 800d6a0:	2203      	movs	r2, #3
 800d6a2:	9209      	str	r2, [sp, #36]	@ 0x24
 800d6a4:	9308      	str	r3, [sp, #32]
 800d6a6:	237f      	movs	r3, #127	@ 0x7f
 800d6a8:	9307      	str	r3, [sp, #28]
 800d6aa:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800d6ae:	9306      	str	r3, [sp, #24]
 800d6b0:	2309      	movs	r3, #9
 800d6b2:	9305      	str	r3, [sp, #20]
 800d6b4:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800d6b8:	9304      	str	r3, [sp, #16]
 800d6ba:	4b3a      	ldr	r3, [pc, #232]	@ (800d7a4 <invoke+0xfec>)
 800d6bc:	9303      	str	r3, [sp, #12]
 800d6be:	4b3a      	ldr	r3, [pc, #232]	@ (800d7a8 <invoke+0xff0>)
 800d6c0:	9302      	str	r3, [sp, #8]
 800d6c2:	4b3a      	ldr	r3, [pc, #232]	@ (800d7ac <invoke+0xff4>)
 800d6c4:	9301      	str	r3, [sp, #4]
 800d6c6:	4b3a      	ldr	r3, [pc, #232]	@ (800d7b0 <invoke+0xff8>)
 800d6c8:	9300      	str	r3, [sp, #0]
 800d6ca:	2360      	movs	r3, #96	@ 0x60
 800d6cc:	2203      	movs	r2, #3
 800d6ce:	2103      	movs	r1, #3
 800d6d0:	f7f5 fa7a 	bl	8002bc8 <convolve_1x1_s8>
/* layer 42:DEPTHWISE_CONV_2D */
depthwise_kernel3x3_stride1_inplace_CHW(&buffer0[0],3,3,384,(const q7_t*) CHWweight40,offsetBias40,offsetRBias40,shift40,multiplier40,-128,128,-128,127,&buffer0[0],3,3,384,sbuf,-128);
 800d6d4:	4b18      	ldr	r3, [pc, #96]	@ (800d738 <invoke+0xf80>)
 800d6d6:	6818      	ldr	r0, [r3, #0]
 800d6d8:	4b17      	ldr	r3, [pc, #92]	@ (800d738 <invoke+0xf80>)
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	4a17      	ldr	r2, [pc, #92]	@ (800d73c <invoke+0xf84>)
 800d6de:	6812      	ldr	r2, [r2, #0]
 800d6e0:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 800d6e4:	910e      	str	r1, [sp, #56]	@ 0x38
 800d6e6:	920d      	str	r2, [sp, #52]	@ 0x34
 800d6e8:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800d6ec:	920c      	str	r2, [sp, #48]	@ 0x30
 800d6ee:	2203      	movs	r2, #3
 800d6f0:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d6f2:	2203      	movs	r2, #3
 800d6f4:	920a      	str	r2, [sp, #40]	@ 0x28
 800d6f6:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6f8:	237f      	movs	r3, #127	@ 0x7f
 800d6fa:	9308      	str	r3, [sp, #32]
 800d6fc:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800d700:	9307      	str	r3, [sp, #28]
 800d702:	2380      	movs	r3, #128	@ 0x80
 800d704:	9306      	str	r3, [sp, #24]
 800d706:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800d70a:	9305      	str	r3, [sp, #20]
 800d70c:	4b29      	ldr	r3, [pc, #164]	@ (800d7b4 <invoke+0xffc>)
 800d70e:	9304      	str	r3, [sp, #16]
 800d710:	4b29      	ldr	r3, [pc, #164]	@ (800d7b8 <invoke+0x1000>)
 800d712:	9303      	str	r3, [sp, #12]
 800d714:	4b29      	ldr	r3, [pc, #164]	@ (800d7bc <invoke+0x1004>)
 800d716:	9302      	str	r3, [sp, #8]
 800d718:	4b29      	ldr	r3, [pc, #164]	@ (800d7c0 <invoke+0x1008>)
 800d71a:	9301      	str	r3, [sp, #4]
 800d71c:	4b29      	ldr	r3, [pc, #164]	@ (800d7c4 <invoke+0x100c>)
 800d71e:	9300      	str	r3, [sp, #0]
 800d720:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800d724:	2203      	movs	r2, #3
 800d726:	2103      	movs	r1, #3
 800d728:	f7f8 fbb6 	bl	8005e98 <depthwise_kernel3x3_stride1_inplace_CHW>
 800d72c:	e04c      	b.n	800d7c8 <invoke+0x1010>
 800d72e:	bf00      	nop
 800d730:	0803fad8 	.word	0x0803fad8
 800d734:	0803cdd8 	.word	0x0803cdd8
 800d738:	20000008 	.word	0x20000008
 800d73c:	2000000c 	.word	0x2000000c
 800d740:	080428c8 	.word	0x080428c8
 800d744:	08042508 	.word	0x08042508
 800d748:	08042148 	.word	0x08042148
 800d74c:	08041d88 	.word	0x08041d88
 800d750:	08040618 	.word	0x08040618
 800d754:	08048988 	.word	0x08048988
 800d758:	08048808 	.word	0x08048808
 800d75c:	08048688 	.word	0x08048688
 800d760:	08042c88 	.word	0x08042c88
 800d764:	08054e08 	.word	0x08054e08
 800d768:	08054688 	.word	0x08054688
 800d76c:	08053f08 	.word	0x08053f08
 800d770:	08048b08 	.word	0x08048b08
 800d774:	08057ce8 	.word	0x08057ce8
 800d778:	08057568 	.word	0x08057568
 800d77c:	08056de8 	.word	0x08056de8
 800d780:	08056668 	.word	0x08056668
 800d784:	08055588 	.word	0x08055588
 800d788:	08063b68 	.word	0x08063b68
 800d78c:	080639e8 	.word	0x080639e8
 800d790:	08063868 	.word	0x08063868
 800d794:	08058468 	.word	0x08058468
 800d798:	3d20b771 	.word	0x3d20b771
 800d79c:	3d2cd156 	.word	0x3d2cd156
 800d7a0:	3d244ccb 	.word	0x3d244ccb
 800d7a4:	0806d8e8 	.word	0x0806d8e8
 800d7a8:	0806d2e8 	.word	0x0806d2e8
 800d7ac:	0806cce8 	.word	0x0806cce8
 800d7b0:	08063ce8 	.word	0x08063ce8
 800d7b4:	0806fe68 	.word	0x0806fe68
 800d7b8:	0806f868 	.word	0x0806f868
 800d7bc:	0806f268 	.word	0x0806f268
 800d7c0:	0806ec68 	.word	0x0806ec68
 800d7c4:	0806dee8 	.word	0x0806dee8
/* layer 43:CONV_2D */
convolve_1x1_s8(&buffer0[0],3,3,384,(const q7_t*) weight41,bias41,shift41,multiplier41,-6,128,-128,127,&buffer0[4320],3,3,96,sbuf);
 800d7c8:	4b81      	ldr	r3, [pc, #516]	@ (800d9d0 <invoke+0x1218>)
 800d7ca:	6818      	ldr	r0, [r3, #0]
 800d7cc:	4b80      	ldr	r3, [pc, #512]	@ (800d9d0 <invoke+0x1218>)
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	f503 5387 	add.w	r3, r3, #4320	@ 0x10e0
 800d7d4:	4a7f      	ldr	r2, [pc, #508]	@ (800d9d4 <invoke+0x121c>)
 800d7d6:	6812      	ldr	r2, [r2, #0]
 800d7d8:	920c      	str	r2, [sp, #48]	@ 0x30
 800d7da:	2260      	movs	r2, #96	@ 0x60
 800d7dc:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d7de:	2203      	movs	r2, #3
 800d7e0:	920a      	str	r2, [sp, #40]	@ 0x28
 800d7e2:	2203      	movs	r2, #3
 800d7e4:	9209      	str	r2, [sp, #36]	@ 0x24
 800d7e6:	9308      	str	r3, [sp, #32]
 800d7e8:	237f      	movs	r3, #127	@ 0x7f
 800d7ea:	9307      	str	r3, [sp, #28]
 800d7ec:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800d7f0:	9306      	str	r3, [sp, #24]
 800d7f2:	2380      	movs	r3, #128	@ 0x80
 800d7f4:	9305      	str	r3, [sp, #20]
 800d7f6:	f06f 0305 	mvn.w	r3, #5
 800d7fa:	9304      	str	r3, [sp, #16]
 800d7fc:	4b76      	ldr	r3, [pc, #472]	@ (800d9d8 <invoke+0x1220>)
 800d7fe:	9303      	str	r3, [sp, #12]
 800d800:	4b76      	ldr	r3, [pc, #472]	@ (800d9dc <invoke+0x1224>)
 800d802:	9302      	str	r3, [sp, #8]
 800d804:	4b76      	ldr	r3, [pc, #472]	@ (800d9e0 <invoke+0x1228>)
 800d806:	9301      	str	r3, [sp, #4]
 800d808:	4b76      	ldr	r3, [pc, #472]	@ (800d9e4 <invoke+0x122c>)
 800d80a:	9300      	str	r3, [sp, #0]
 800d80c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800d810:	2203      	movs	r2, #3
 800d812:	2103      	movs	r1, #3
 800d814:	f7f5 f9d8 	bl	8002bc8 <convolve_1x1_s8>
/* layer 44:ADD */
add_fpreq(864, &buffer0[4320],0.019318707287311554,-6,&buffer0[3456],0.03923744335770607,-9,0.0419764444231987,-12,&buffer0[2592]);
 800d818:	4b6d      	ldr	r3, [pc, #436]	@ (800d9d0 <invoke+0x1218>)
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	f503 5187 	add.w	r1, r3, #4320	@ 0x10e0
 800d820:	4b6b      	ldr	r3, [pc, #428]	@ (800d9d0 <invoke+0x1218>)
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	f503 6258 	add.w	r2, r3, #3456	@ 0xd80
 800d828:	4b69      	ldr	r3, [pc, #420]	@ (800d9d0 <invoke+0x1218>)
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	f503 6322 	add.w	r3, r3, #2592	@ 0xa20
 800d830:	eefa 2a08 	vmov.f32	s5, #168	@ 0xc1400000 -12.0
 800d834:	ed9f 2a6c 	vldr	s4, [pc, #432]	@ 800d9e8 <invoke+0x1230>
 800d838:	eefa 1a02 	vmov.f32	s3, #162	@ 0xc1100000 -9.0
 800d83c:	ed9f 1a6b 	vldr	s2, [pc, #428]	@ 800d9ec <invoke+0x1234>
 800d840:	eef9 0a08 	vmov.f32	s1, #152	@ 0xc0c00000 -6.0
 800d844:	ed9f 0a6a 	vldr	s0, [pc, #424]	@ 800d9f0 <invoke+0x1238>
 800d848:	f44f 7058 	mov.w	r0, #864	@ 0x360
 800d84c:	f7f3 fc62 	bl	8001114 <add_fpreq>
/* layer 45:CONV_2D */
convolve_1x1_s8(&buffer0[2592],3,3,96,(const q7_t*) weight42,bias42,shift42,multiplier42,-128,12,-128,127,&buffer0[0],3,3,288,sbuf);
 800d850:	4b5f      	ldr	r3, [pc, #380]	@ (800d9d0 <invoke+0x1218>)
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	f503 6022 	add.w	r0, r3, #2592	@ 0xa20
 800d858:	4b5d      	ldr	r3, [pc, #372]	@ (800d9d0 <invoke+0x1218>)
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	4a5d      	ldr	r2, [pc, #372]	@ (800d9d4 <invoke+0x121c>)
 800d85e:	6812      	ldr	r2, [r2, #0]
 800d860:	920c      	str	r2, [sp, #48]	@ 0x30
 800d862:	f44f 7290 	mov.w	r2, #288	@ 0x120
 800d866:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d868:	2203      	movs	r2, #3
 800d86a:	920a      	str	r2, [sp, #40]	@ 0x28
 800d86c:	2203      	movs	r2, #3
 800d86e:	9209      	str	r2, [sp, #36]	@ 0x24
 800d870:	9308      	str	r3, [sp, #32]
 800d872:	237f      	movs	r3, #127	@ 0x7f
 800d874:	9307      	str	r3, [sp, #28]
 800d876:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800d87a:	9306      	str	r3, [sp, #24]
 800d87c:	230c      	movs	r3, #12
 800d87e:	9305      	str	r3, [sp, #20]
 800d880:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800d884:	9304      	str	r3, [sp, #16]
 800d886:	4b5b      	ldr	r3, [pc, #364]	@ (800d9f4 <invoke+0x123c>)
 800d888:	9303      	str	r3, [sp, #12]
 800d88a:	4b5b      	ldr	r3, [pc, #364]	@ (800d9f8 <invoke+0x1240>)
 800d88c:	9302      	str	r3, [sp, #8]
 800d88e:	4b5b      	ldr	r3, [pc, #364]	@ (800d9fc <invoke+0x1244>)
 800d890:	9301      	str	r3, [sp, #4]
 800d892:	4b5b      	ldr	r3, [pc, #364]	@ (800da00 <invoke+0x1248>)
 800d894:	9300      	str	r3, [sp, #0]
 800d896:	2360      	movs	r3, #96	@ 0x60
 800d898:	2203      	movs	r2, #3
 800d89a:	2103      	movs	r1, #3
 800d89c:	f7f5 f994 	bl	8002bc8 <convolve_1x1_s8>
/* layer 46:DEPTHWISE_CONV_2D */
depthwise_kernel7x7_stride1_inplace_CHW(&buffer0[0],3,3,288,(const q7_t*) CHWweight43,offsetBias43,offsetRBias43,shift43,multiplier43,-128,128,-128,127,&buffer0[0],3,3,288,sbuf,-128);
 800d8a0:	4b4b      	ldr	r3, [pc, #300]	@ (800d9d0 <invoke+0x1218>)
 800d8a2:	6818      	ldr	r0, [r3, #0]
 800d8a4:	4b4a      	ldr	r3, [pc, #296]	@ (800d9d0 <invoke+0x1218>)
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	4a4a      	ldr	r2, [pc, #296]	@ (800d9d4 <invoke+0x121c>)
 800d8aa:	6812      	ldr	r2, [r2, #0]
 800d8ac:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 800d8b0:	910e      	str	r1, [sp, #56]	@ 0x38
 800d8b2:	920d      	str	r2, [sp, #52]	@ 0x34
 800d8b4:	f44f 7290 	mov.w	r2, #288	@ 0x120
 800d8b8:	920c      	str	r2, [sp, #48]	@ 0x30
 800d8ba:	2203      	movs	r2, #3
 800d8bc:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d8be:	2203      	movs	r2, #3
 800d8c0:	920a      	str	r2, [sp, #40]	@ 0x28
 800d8c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d8c4:	237f      	movs	r3, #127	@ 0x7f
 800d8c6:	9308      	str	r3, [sp, #32]
 800d8c8:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800d8cc:	9307      	str	r3, [sp, #28]
 800d8ce:	2380      	movs	r3, #128	@ 0x80
 800d8d0:	9306      	str	r3, [sp, #24]
 800d8d2:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800d8d6:	9305      	str	r3, [sp, #20]
 800d8d8:	4b4a      	ldr	r3, [pc, #296]	@ (800da04 <invoke+0x124c>)
 800d8da:	9304      	str	r3, [sp, #16]
 800d8dc:	4b4a      	ldr	r3, [pc, #296]	@ (800da08 <invoke+0x1250>)
 800d8de:	9303      	str	r3, [sp, #12]
 800d8e0:	4b4a      	ldr	r3, [pc, #296]	@ (800da0c <invoke+0x1254>)
 800d8e2:	9302      	str	r3, [sp, #8]
 800d8e4:	4b4a      	ldr	r3, [pc, #296]	@ (800da10 <invoke+0x1258>)
 800d8e6:	9301      	str	r3, [sp, #4]
 800d8e8:	4b4a      	ldr	r3, [pc, #296]	@ (800da14 <invoke+0x125c>)
 800d8ea:	9300      	str	r3, [sp, #0]
 800d8ec:	f44f 7390 	mov.w	r3, #288	@ 0x120
 800d8f0:	2203      	movs	r2, #3
 800d8f2:	2103      	movs	r1, #3
 800d8f4:	f7fb fa8a 	bl	8008e0c <depthwise_kernel7x7_stride1_inplace_CHW>
/* layer 47:CONV_2D */
convolve_1x1_s8(&buffer0[0],3,3,288,(const q7_t*) weight44,bias44,shift44,multiplier44,9,128,-128,127,&buffer0[2592],3,3,160,sbuf);
 800d8f8:	4b35      	ldr	r3, [pc, #212]	@ (800d9d0 <invoke+0x1218>)
 800d8fa:	6818      	ldr	r0, [r3, #0]
 800d8fc:	4b34      	ldr	r3, [pc, #208]	@ (800d9d0 <invoke+0x1218>)
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	f503 6322 	add.w	r3, r3, #2592	@ 0xa20
 800d904:	4a33      	ldr	r2, [pc, #204]	@ (800d9d4 <invoke+0x121c>)
 800d906:	6812      	ldr	r2, [r2, #0]
 800d908:	920c      	str	r2, [sp, #48]	@ 0x30
 800d90a:	22a0      	movs	r2, #160	@ 0xa0
 800d90c:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d90e:	2203      	movs	r2, #3
 800d910:	920a      	str	r2, [sp, #40]	@ 0x28
 800d912:	2203      	movs	r2, #3
 800d914:	9209      	str	r2, [sp, #36]	@ 0x24
 800d916:	9308      	str	r3, [sp, #32]
 800d918:	237f      	movs	r3, #127	@ 0x7f
 800d91a:	9307      	str	r3, [sp, #28]
 800d91c:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800d920:	9306      	str	r3, [sp, #24]
 800d922:	2380      	movs	r3, #128	@ 0x80
 800d924:	9305      	str	r3, [sp, #20]
 800d926:	2309      	movs	r3, #9
 800d928:	9304      	str	r3, [sp, #16]
 800d92a:	4b3b      	ldr	r3, [pc, #236]	@ (800da18 <invoke+0x1260>)
 800d92c:	9303      	str	r3, [sp, #12]
 800d92e:	4b3b      	ldr	r3, [pc, #236]	@ (800da1c <invoke+0x1264>)
 800d930:	9302      	str	r3, [sp, #8]
 800d932:	4b3b      	ldr	r3, [pc, #236]	@ (800da20 <invoke+0x1268>)
 800d934:	9301      	str	r3, [sp, #4]
 800d936:	4b3b      	ldr	r3, [pc, #236]	@ (800da24 <invoke+0x126c>)
 800d938:	9300      	str	r3, [sp, #0]
 800d93a:	f44f 7390 	mov.w	r3, #288	@ 0x120
 800d93e:	2203      	movs	r2, #3
 800d940:	2103      	movs	r1, #3
 800d942:	f7f5 f941 	bl	8002bc8 <convolve_1x1_s8>
/* layer 48:AVERAGE_POOL_2D */
avg_pooling(&buffer0[2592],3,3,160,3,3,1,1,-128,127,&buffer0[0]);
 800d946:	4b22      	ldr	r3, [pc, #136]	@ (800d9d0 <invoke+0x1218>)
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	f503 6022 	add.w	r0, r3, #2592	@ 0xa20
 800d94e:	4b20      	ldr	r3, [pc, #128]	@ (800d9d0 <invoke+0x1218>)
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	9306      	str	r3, [sp, #24]
 800d954:	237f      	movs	r3, #127	@ 0x7f
 800d956:	9305      	str	r3, [sp, #20]
 800d958:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800d95c:	9304      	str	r3, [sp, #16]
 800d95e:	2301      	movs	r3, #1
 800d960:	9303      	str	r3, [sp, #12]
 800d962:	2301      	movs	r3, #1
 800d964:	9302      	str	r3, [sp, #8]
 800d966:	2303      	movs	r3, #3
 800d968:	9301      	str	r3, [sp, #4]
 800d96a:	2303      	movs	r3, #3
 800d96c:	9300      	str	r3, [sp, #0]
 800d96e:	23a0      	movs	r3, #160	@ 0xa0
 800d970:	2203      	movs	r2, #3
 800d972:	2103      	movs	r1, #3
 800d974:	f7f5 f877 	bl	8002a66 <avg_pooling>
/* layer 49:CONV_2D */
convolve_1x1_s8(&buffer0[0],1,1,160,(const q7_t*) weight45,bias45,shift45,multiplier45,-1,-9,-128,127,&buffer0[160],1,1,2,sbuf);
 800d978:	4b15      	ldr	r3, [pc, #84]	@ (800d9d0 <invoke+0x1218>)
 800d97a:	6818      	ldr	r0, [r3, #0]
 800d97c:	4b14      	ldr	r3, [pc, #80]	@ (800d9d0 <invoke+0x1218>)
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	33a0      	adds	r3, #160	@ 0xa0
 800d982:	4a14      	ldr	r2, [pc, #80]	@ (800d9d4 <invoke+0x121c>)
 800d984:	6812      	ldr	r2, [r2, #0]
 800d986:	920c      	str	r2, [sp, #48]	@ 0x30
 800d988:	2202      	movs	r2, #2
 800d98a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d98c:	2201      	movs	r2, #1
 800d98e:	920a      	str	r2, [sp, #40]	@ 0x28
 800d990:	2201      	movs	r2, #1
 800d992:	9209      	str	r2, [sp, #36]	@ 0x24
 800d994:	9308      	str	r3, [sp, #32]
 800d996:	237f      	movs	r3, #127	@ 0x7f
 800d998:	9307      	str	r3, [sp, #28]
 800d99a:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800d99e:	9306      	str	r3, [sp, #24]
 800d9a0:	f06f 0308 	mvn.w	r3, #8
 800d9a4:	9305      	str	r3, [sp, #20]
 800d9a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d9aa:	9304      	str	r3, [sp, #16]
 800d9ac:	4b1e      	ldr	r3, [pc, #120]	@ (800da28 <invoke+0x1270>)
 800d9ae:	9303      	str	r3, [sp, #12]
 800d9b0:	4b1e      	ldr	r3, [pc, #120]	@ (800da2c <invoke+0x1274>)
 800d9b2:	9302      	str	r3, [sp, #8]
 800d9b4:	4b1e      	ldr	r3, [pc, #120]	@ (800da30 <invoke+0x1278>)
 800d9b6:	9301      	str	r3, [sp, #4]
 800d9b8:	4b1e      	ldr	r3, [pc, #120]	@ (800da34 <invoke+0x127c>)
 800d9ba:	9300      	str	r3, [sp, #0]
 800d9bc:	23a0      	movs	r3, #160	@ 0xa0
 800d9be:	2201      	movs	r2, #1
 800d9c0:	2101      	movs	r1, #1
 800d9c2:	f7f5 f901 	bl	8002bc8 <convolve_1x1_s8>
}
 800d9c6:	bf00      	nop
 800d9c8:	3708      	adds	r7, #8
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	bd80      	pop	{r7, pc}
 800d9ce:	bf00      	nop
 800d9d0:	20000008 	.word	0x20000008
 800d9d4:	2000000c 	.word	0x2000000c
 800d9d8:	08079768 	.word	0x08079768
 800d9dc:	080795e8 	.word	0x080795e8
 800d9e0:	08079468 	.word	0x08079468
 800d9e4:	08070468 	.word	0x08070468
 800d9e8:	3d2bef7e 	.word	0x3d2bef7e
 800d9ec:	3d20b771 	.word	0x3d20b771
 800d9f0:	3c9e4244 	.word	0x3c9e4244
 800d9f4:	08080de8 	.word	0x08080de8
 800d9f8:	08080968 	.word	0x08080968
 800d9fc:	080804e8 	.word	0x080804e8
 800da00:	080798e8 	.word	0x080798e8
 800da04:	08085708 	.word	0x08085708
 800da08:	08085288 	.word	0x08085288
 800da0c:	08084e08 	.word	0x08084e08
 800da10:	08084988 	.word	0x08084988
 800da14:	08081268 	.word	0x08081268
 800da18:	08091488 	.word	0x08091488
 800da1c:	08091208 	.word	0x08091208
 800da20:	08090f88 	.word	0x08090f88
 800da24:	08085b88 	.word	0x08085b88
 800da28:	08091858 	.word	0x08091858
 800da2c:	08091850 	.word	0x08091850
 800da30:	08091848 	.word	0x08091848
 800da34:	08091708 	.word	0x08091708

0800da38 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800da38:	b480      	push	{r7}
 800da3a:	b083      	sub	sp, #12
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800da40:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800da44:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800da48:	f003 0301 	and.w	r3, r3, #1
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d013      	beq.n	800da78 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800da50:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800da54:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800da58:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d00b      	beq.n	800da78 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800da60:	e000      	b.n	800da64 <ITM_SendChar+0x2c>
    {
      __NOP();
 800da62:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800da64:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d0f9      	beq.n	800da62 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800da6e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800da72:	687a      	ldr	r2, [r7, #4]
 800da74:	b2d2      	uxtb	r2, r2
 800da76:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800da78:	687b      	ldr	r3, [r7, #4]
}
 800da7a:	4618      	mov	r0, r3
 800da7c:	370c      	adds	r7, #12
 800da7e:	46bd      	mov	sp, r7
 800da80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da84:	4770      	bx	lr
	...

0800da88 <ITM_ReceiveChar>:
  \details Inputs a character via the external variable \ref ITM_RxBuffer.
  \return             Received character.
  \return         -1  No character pending.
 */
__STATIC_INLINE int32_t ITM_ReceiveChar (void)
{
 800da88:	b480      	push	{r7}
 800da8a:	b083      	sub	sp, #12
 800da8c:	af00      	add	r7, sp, #0
  int32_t ch = -1;                           /* no character available */
 800da8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800da92:	607b      	str	r3, [r7, #4]

  if (ITM_RxBuffer != ITM_RXBUFFER_EMPTY)
 800da94:	4b08      	ldr	r3, [pc, #32]	@ (800dab8 <ITM_ReceiveChar+0x30>)
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	4a08      	ldr	r2, [pc, #32]	@ (800dabc <ITM_ReceiveChar+0x34>)
 800da9a:	4293      	cmp	r3, r2
 800da9c:	d005      	beq.n	800daaa <ITM_ReceiveChar+0x22>
  {
    ch = ITM_RxBuffer;
 800da9e:	4b06      	ldr	r3, [pc, #24]	@ (800dab8 <ITM_ReceiveChar+0x30>)
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	607b      	str	r3, [r7, #4]
    ITM_RxBuffer = ITM_RXBUFFER_EMPTY;       /* ready for next character */
 800daa4:	4b04      	ldr	r3, [pc, #16]	@ (800dab8 <ITM_ReceiveChar+0x30>)
 800daa6:	4a05      	ldr	r2, [pc, #20]	@ (800dabc <ITM_ReceiveChar+0x34>)
 800daa8:	601a      	str	r2, [r3, #0]
  }

  return (ch);
 800daaa:	687b      	ldr	r3, [r7, #4]
}
 800daac:	4618      	mov	r0, r3
 800daae:	370c      	adds	r7, #12
 800dab0:	46bd      	mov	sp, r7
 800dab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab6:	4770      	bx	lr
 800dab8:	2000fb38 	.word	0x2000fb38
 800dabc:	5aa55aa5 	.word	0x5aa55aa5

0800dac0 <__io_putchar>:
  
#include "stm32746g_discovery.h"

volatile int32_t ITM_RxBuffer;

int __io_putchar(int ch) { return ITM_SendChar(ch); }
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b082      	sub	sp, #8
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	4618      	mov	r0, r3
 800dacc:	f7ff ffb4 	bl	800da38 <ITM_SendChar>
 800dad0:	4603      	mov	r3, r0
 800dad2:	4618      	mov	r0, r3
 800dad4:	3708      	adds	r7, #8
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}

0800dada <__io_getchar>:

int __io_getchar(void) { return ITM_ReceiveChar(); }
 800dada:	b580      	push	{r7, lr}
 800dadc:	af00      	add	r7, sp, #0
 800dade:	f7ff ffd3 	bl	800da88 <ITM_ReceiveChar>
 800dae2:	4603      	mov	r3, r0
 800dae4:	4618      	mov	r0, r3
 800dae6:	bd80      	pop	{r7, pc}

0800dae8 <_write>:

extern int errno;
extern int __io_putchar(int ch) __attribute__((weak));
extern int __io_getchar(void) __attribute__((weak));

int _write(int fd, const void *buffer, unsigned int count) {
 800dae8:	b580      	push	{r7, lr}
 800daea:	b086      	sub	sp, #24
 800daec:	af00      	add	r7, sp, #0
 800daee:	60f8      	str	r0, [r7, #12]
 800daf0:	60b9      	str	r1, [r7, #8]
 800daf2:	607a      	str	r2, [r7, #4]
  unsigned int i;

  for (i = 0; i < count; i++) {
 800daf4:	2300      	movs	r3, #0
 800daf6:	617b      	str	r3, [r7, #20]
 800daf8:	e009      	b.n	800db0e <_write+0x26>
    __io_putchar(((char *)buffer)[i]);
 800dafa:	68ba      	ldr	r2, [r7, #8]
 800dafc:	697b      	ldr	r3, [r7, #20]
 800dafe:	4413      	add	r3, r2
 800db00:	781b      	ldrb	r3, [r3, #0]
 800db02:	4618      	mov	r0, r3
 800db04:	f7ff ffdc 	bl	800dac0 <__io_putchar>
  for (i = 0; i < count; i++) {
 800db08:	697b      	ldr	r3, [r7, #20]
 800db0a:	3301      	adds	r3, #1
 800db0c:	617b      	str	r3, [r7, #20]
 800db0e:	697a      	ldr	r2, [r7, #20]
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	429a      	cmp	r2, r3
 800db14:	d3f1      	bcc.n	800dafa <_write+0x12>
  }

  return count;
 800db16:	687b      	ldr	r3, [r7, #4]
}
 800db18:	4618      	mov	r0, r3
 800db1a:	3718      	adds	r7, #24
 800db1c:	46bd      	mov	sp, r7
 800db1e:	bd80      	pop	{r7, pc}

0800db20 <_read>:

int _read(int fd, void *buffer, unsigned int count) {
 800db20:	b580      	push	{r7, lr}
 800db22:	b086      	sub	sp, #24
 800db24:	af00      	add	r7, sp, #0
 800db26:	60f8      	str	r0, [r7, #12]
 800db28:	60b9      	str	r1, [r7, #8]
 800db2a:	607a      	str	r2, [r7, #4]
  unsigned int i;

  for (i = 0; i < count; i++) {
 800db2c:	2300      	movs	r3, #0
 800db2e:	617b      	str	r3, [r7, #20]
 800db30:	e00a      	b.n	800db48 <_read+0x28>
    ((char *)buffer)[i] = __io_getchar();
 800db32:	f7ff ffd2 	bl	800dada <__io_getchar>
 800db36:	4601      	mov	r1, r0
 800db38:	68ba      	ldr	r2, [r7, #8]
 800db3a:	697b      	ldr	r3, [r7, #20]
 800db3c:	4413      	add	r3, r2
 800db3e:	b2ca      	uxtb	r2, r1
 800db40:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < count; i++) {
 800db42:	697b      	ldr	r3, [r7, #20]
 800db44:	3301      	adds	r3, #1
 800db46:	617b      	str	r3, [r7, #20]
 800db48:	697a      	ldr	r2, [r7, #20]
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	429a      	cmp	r2, r3
 800db4e:	d3f0      	bcc.n	800db32 <_read+0x12>
  }

  return count;
 800db50:	687b      	ldr	r3, [r7, #4]
}
 800db52:	4618      	mov	r0, r3
 800db54:	3718      	adds	r7, #24
 800db56:	46bd      	mov	sp, r7
 800db58:	bd80      	pop	{r7, pc}

0800db5a <_close>:

int _close(int fd) { return -1; }
 800db5a:	b480      	push	{r7}
 800db5c:	b083      	sub	sp, #12
 800db5e:	af00      	add	r7, sp, #0
 800db60:	6078      	str	r0, [r7, #4]
 800db62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800db66:	4618      	mov	r0, r3
 800db68:	370c      	adds	r7, #12
 800db6a:	46bd      	mov	sp, r7
 800db6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db70:	4770      	bx	lr

0800db72 <_fstat>:

int _fstat(int fd, void *buffer) { return -1; }
 800db72:	b480      	push	{r7}
 800db74:	b083      	sub	sp, #12
 800db76:	af00      	add	r7, sp, #0
 800db78:	6078      	str	r0, [r7, #4]
 800db7a:	6039      	str	r1, [r7, #0]
 800db7c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800db80:	4618      	mov	r0, r3
 800db82:	370c      	adds	r7, #12
 800db84:	46bd      	mov	sp, r7
 800db86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db8a:	4770      	bx	lr

0800db8c <_isatty>:

int _isatty(int fd) { return -1; }
 800db8c:	b480      	push	{r7}
 800db8e:	b083      	sub	sp, #12
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
 800db94:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800db98:	4618      	mov	r0, r3
 800db9a:	370c      	adds	r7, #12
 800db9c:	46bd      	mov	sp, r7
 800db9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba2:	4770      	bx	lr

0800dba4 <_lseek>:

long _lseek(int fd, long offset, int origin) { return -1; }
 800dba4:	b480      	push	{r7}
 800dba6:	b085      	sub	sp, #20
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	60f8      	str	r0, [r7, #12]
 800dbac:	60b9      	str	r1, [r7, #8]
 800dbae:	607a      	str	r2, [r7, #4]
 800dbb0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	3714      	adds	r7, #20
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbbe:	4770      	bx	lr

0800dbc0 <_exit>:

void _exit(int status) {}
 800dbc0:	b480      	push	{r7}
 800dbc2:	b083      	sub	sp, #12
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
 800dbc8:	bf00      	nop
 800dbca:	370c      	adds	r7, #12
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd2:	4770      	bx	lr

0800dbd4 <_ZdaPv>:
 800dbd4:	f000 b800 	b.w	800dbd8 <_ZdlPv>

0800dbd8 <_ZdlPv>:
 800dbd8:	f000 b87e 	b.w	800dcd8 <free>

0800dbdc <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
 800dbdc:	b538      	push	{r3, r4, r5, lr}
 800dbde:	4c08      	ldr	r4, [pc, #32]	@ (800dc00 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
 800dbe0:	f44f 651e 	mov.w	r5, #2528	@ 0x9e0
 800dbe4:	4628      	mov	r0, r5
 800dbe6:	60e5      	str	r5, [r4, #12]
 800dbe8:	f000 f86e 	bl	800dcc8 <malloc>
 800dbec:	60a0      	str	r0, [r4, #8]
 800dbee:	b120      	cbz	r0, 800dbfa <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1e>
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	e9c0 5300 	strd	r5, r3, [r0]
 800dbf6:	6060      	str	r0, [r4, #4]
 800dbf8:	bd38      	pop	{r3, r4, r5, pc}
 800dbfa:	60e0      	str	r0, [r4, #12]
 800dbfc:	e7fb      	b.n	800dbf6 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1a>
 800dbfe:	bf00      	nop
 800dc00:	2000fb3c 	.word	0x2000fb3c

0800dc04 <_ZN12_GLOBAL__N_113constant_initD1Ev>:
 800dc04:	4770      	bx	lr
 800dc06:	bf00      	nop

0800dc08 <_GLOBAL__sub_I___cxa_get_globals_fast>:
 800dc08:	4a02      	ldr	r2, [pc, #8]	@ (800dc14 <_GLOBAL__sub_I___cxa_get_globals_fast+0xc>)
 800dc0a:	4903      	ldr	r1, [pc, #12]	@ (800dc18 <_GLOBAL__sub_I___cxa_get_globals_fast+0x10>)
 800dc0c:	4803      	ldr	r0, [pc, #12]	@ (800dc1c <_GLOBAL__sub_I___cxa_get_globals_fast+0x14>)
 800dc0e:	f000 b807 	b.w	800dc20 <__aeabi_atexit>
 800dc12:	bf00      	nop
 800dc14:	20000000 	.word	0x20000000
 800dc18:	0800dc05 	.word	0x0800dc05
 800dc1c:	2000fb4c 	.word	0x2000fb4c

0800dc20 <__aeabi_atexit>:
 800dc20:	4603      	mov	r3, r0
 800dc22:	4608      	mov	r0, r1
 800dc24:	4619      	mov	r1, r3
 800dc26:	f002 bfb1 	b.w	8010b8c <__cxa_atexit>
 800dc2a:	bf00      	nop

0800dc2c <round>:
 800dc2c:	ec51 0b10 	vmov	r0, r1, d0
 800dc30:	b570      	push	{r4, r5, r6, lr}
 800dc32:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800dc36:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800dc3a:	2a13      	cmp	r2, #19
 800dc3c:	460b      	mov	r3, r1
 800dc3e:	4605      	mov	r5, r0
 800dc40:	dc1b      	bgt.n	800dc7a <round+0x4e>
 800dc42:	2a00      	cmp	r2, #0
 800dc44:	da0b      	bge.n	800dc5e <round+0x32>
 800dc46:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800dc4a:	3201      	adds	r2, #1
 800dc4c:	bf04      	itt	eq
 800dc4e:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800dc52:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800dc56:	2200      	movs	r2, #0
 800dc58:	4619      	mov	r1, r3
 800dc5a:	4610      	mov	r0, r2
 800dc5c:	e015      	b.n	800dc8a <round+0x5e>
 800dc5e:	4c15      	ldr	r4, [pc, #84]	@ (800dcb4 <round+0x88>)
 800dc60:	4114      	asrs	r4, r2
 800dc62:	ea04 0601 	and.w	r6, r4, r1
 800dc66:	4306      	orrs	r6, r0
 800dc68:	d00f      	beq.n	800dc8a <round+0x5e>
 800dc6a:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800dc6e:	fa41 f202 	asr.w	r2, r1, r2
 800dc72:	4413      	add	r3, r2
 800dc74:	ea23 0304 	bic.w	r3, r3, r4
 800dc78:	e7ed      	b.n	800dc56 <round+0x2a>
 800dc7a:	2a33      	cmp	r2, #51	@ 0x33
 800dc7c:	dd08      	ble.n	800dc90 <round+0x64>
 800dc7e:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800dc82:	d102      	bne.n	800dc8a <round+0x5e>
 800dc84:	4602      	mov	r2, r0
 800dc86:	f7f2 fb21 	bl	80002cc <__adddf3>
 800dc8a:	ec41 0b10 	vmov	d0, r0, r1
 800dc8e:	bd70      	pop	{r4, r5, r6, pc}
 800dc90:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800dc94:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800dc98:	40f4      	lsrs	r4, r6
 800dc9a:	4204      	tst	r4, r0
 800dc9c:	d0f5      	beq.n	800dc8a <round+0x5e>
 800dc9e:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800dca2:	2201      	movs	r2, #1
 800dca4:	408a      	lsls	r2, r1
 800dca6:	1952      	adds	r2, r2, r5
 800dca8:	bf28      	it	cs
 800dcaa:	3301      	addcs	r3, #1
 800dcac:	ea22 0204 	bic.w	r2, r2, r4
 800dcb0:	e7d2      	b.n	800dc58 <round+0x2c>
 800dcb2:	bf00      	nop
 800dcb4:	000fffff 	.word	0x000fffff

0800dcb8 <abort>:
 800dcb8:	b508      	push	{r3, lr}
 800dcba:	2006      	movs	r0, #6
 800dcbc:	f002 ff54 	bl	8010b68 <raise>
 800dcc0:	2001      	movs	r0, #1
 800dcc2:	f7ff ff7d 	bl	800dbc0 <_exit>
	...

0800dcc8 <malloc>:
 800dcc8:	4b02      	ldr	r3, [pc, #8]	@ (800dcd4 <malloc+0xc>)
 800dcca:	4601      	mov	r1, r0
 800dccc:	6818      	ldr	r0, [r3, #0]
 800dcce:	f000 b80b 	b.w	800dce8 <_malloc_r>
 800dcd2:	bf00      	nop
 800dcd4:	20000598 	.word	0x20000598

0800dcd8 <free>:
 800dcd8:	4b02      	ldr	r3, [pc, #8]	@ (800dce4 <free+0xc>)
 800dcda:	4601      	mov	r1, r0
 800dcdc:	6818      	ldr	r0, [r3, #0]
 800dcde:	f003 bee9 	b.w	8011ab4 <_free_r>
 800dce2:	bf00      	nop
 800dce4:	20000598 	.word	0x20000598

0800dce8 <_malloc_r>:
 800dce8:	f101 030b 	add.w	r3, r1, #11
 800dcec:	2b16      	cmp	r3, #22
 800dcee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcf2:	4605      	mov	r5, r0
 800dcf4:	d906      	bls.n	800dd04 <_malloc_r+0x1c>
 800dcf6:	f033 0707 	bics.w	r7, r3, #7
 800dcfa:	d504      	bpl.n	800dd06 <_malloc_r+0x1e>
 800dcfc:	230c      	movs	r3, #12
 800dcfe:	602b      	str	r3, [r5, #0]
 800dd00:	2400      	movs	r4, #0
 800dd02:	e1a3      	b.n	800e04c <_malloc_r+0x364>
 800dd04:	2710      	movs	r7, #16
 800dd06:	42b9      	cmp	r1, r7
 800dd08:	d8f8      	bhi.n	800dcfc <_malloc_r+0x14>
 800dd0a:	4628      	mov	r0, r5
 800dd0c:	f002 f99e 	bl	801004c <__malloc_lock>
 800dd10:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 800dd14:	4eaf      	ldr	r6, [pc, #700]	@ (800dfd4 <_malloc_r+0x2ec>)
 800dd16:	d237      	bcs.n	800dd88 <_malloc_r+0xa0>
 800dd18:	f107 0208 	add.w	r2, r7, #8
 800dd1c:	4432      	add	r2, r6
 800dd1e:	f1a2 0108 	sub.w	r1, r2, #8
 800dd22:	6854      	ldr	r4, [r2, #4]
 800dd24:	428c      	cmp	r4, r1
 800dd26:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 800dd2a:	d102      	bne.n	800dd32 <_malloc_r+0x4a>
 800dd2c:	68d4      	ldr	r4, [r2, #12]
 800dd2e:	42a2      	cmp	r2, r4
 800dd30:	d010      	beq.n	800dd54 <_malloc_r+0x6c>
 800dd32:	6863      	ldr	r3, [r4, #4]
 800dd34:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800dd38:	f023 0303 	bic.w	r3, r3, #3
 800dd3c:	60ca      	str	r2, [r1, #12]
 800dd3e:	4423      	add	r3, r4
 800dd40:	6091      	str	r1, [r2, #8]
 800dd42:	685a      	ldr	r2, [r3, #4]
 800dd44:	f042 0201 	orr.w	r2, r2, #1
 800dd48:	605a      	str	r2, [r3, #4]
 800dd4a:	4628      	mov	r0, r5
 800dd4c:	f002 f984 	bl	8010058 <__malloc_unlock>
 800dd50:	3408      	adds	r4, #8
 800dd52:	e17b      	b.n	800e04c <_malloc_r+0x364>
 800dd54:	3302      	adds	r3, #2
 800dd56:	6934      	ldr	r4, [r6, #16]
 800dd58:	499f      	ldr	r1, [pc, #636]	@ (800dfd8 <_malloc_r+0x2f0>)
 800dd5a:	428c      	cmp	r4, r1
 800dd5c:	d077      	beq.n	800de4e <_malloc_r+0x166>
 800dd5e:	6862      	ldr	r2, [r4, #4]
 800dd60:	f022 0c03 	bic.w	ip, r2, #3
 800dd64:	ebac 0007 	sub.w	r0, ip, r7
 800dd68:	280f      	cmp	r0, #15
 800dd6a:	dd48      	ble.n	800ddfe <_malloc_r+0x116>
 800dd6c:	19e2      	adds	r2, r4, r7
 800dd6e:	f040 0301 	orr.w	r3, r0, #1
 800dd72:	f047 0701 	orr.w	r7, r7, #1
 800dd76:	6067      	str	r7, [r4, #4]
 800dd78:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800dd7c:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800dd80:	6053      	str	r3, [r2, #4]
 800dd82:	f844 000c 	str.w	r0, [r4, ip]
 800dd86:	e7e0      	b.n	800dd4a <_malloc_r+0x62>
 800dd88:	0a7b      	lsrs	r3, r7, #9
 800dd8a:	d02a      	beq.n	800dde2 <_malloc_r+0xfa>
 800dd8c:	2b04      	cmp	r3, #4
 800dd8e:	d812      	bhi.n	800ddb6 <_malloc_r+0xce>
 800dd90:	09bb      	lsrs	r3, r7, #6
 800dd92:	3338      	adds	r3, #56	@ 0x38
 800dd94:	1c5a      	adds	r2, r3, #1
 800dd96:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800dd9a:	f1a2 0c08 	sub.w	ip, r2, #8
 800dd9e:	6854      	ldr	r4, [r2, #4]
 800dda0:	4564      	cmp	r4, ip
 800dda2:	d006      	beq.n	800ddb2 <_malloc_r+0xca>
 800dda4:	6862      	ldr	r2, [r4, #4]
 800dda6:	f022 0203 	bic.w	r2, r2, #3
 800ddaa:	1bd0      	subs	r0, r2, r7
 800ddac:	280f      	cmp	r0, #15
 800ddae:	dd1c      	ble.n	800ddea <_malloc_r+0x102>
 800ddb0:	3b01      	subs	r3, #1
 800ddb2:	3301      	adds	r3, #1
 800ddb4:	e7cf      	b.n	800dd56 <_malloc_r+0x6e>
 800ddb6:	2b14      	cmp	r3, #20
 800ddb8:	d801      	bhi.n	800ddbe <_malloc_r+0xd6>
 800ddba:	335b      	adds	r3, #91	@ 0x5b
 800ddbc:	e7ea      	b.n	800dd94 <_malloc_r+0xac>
 800ddbe:	2b54      	cmp	r3, #84	@ 0x54
 800ddc0:	d802      	bhi.n	800ddc8 <_malloc_r+0xe0>
 800ddc2:	0b3b      	lsrs	r3, r7, #12
 800ddc4:	336e      	adds	r3, #110	@ 0x6e
 800ddc6:	e7e5      	b.n	800dd94 <_malloc_r+0xac>
 800ddc8:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 800ddcc:	d802      	bhi.n	800ddd4 <_malloc_r+0xec>
 800ddce:	0bfb      	lsrs	r3, r7, #15
 800ddd0:	3377      	adds	r3, #119	@ 0x77
 800ddd2:	e7df      	b.n	800dd94 <_malloc_r+0xac>
 800ddd4:	f240 5254 	movw	r2, #1364	@ 0x554
 800ddd8:	4293      	cmp	r3, r2
 800ddda:	d804      	bhi.n	800dde6 <_malloc_r+0xfe>
 800dddc:	0cbb      	lsrs	r3, r7, #18
 800ddde:	337c      	adds	r3, #124	@ 0x7c
 800dde0:	e7d8      	b.n	800dd94 <_malloc_r+0xac>
 800dde2:	233f      	movs	r3, #63	@ 0x3f
 800dde4:	e7d6      	b.n	800dd94 <_malloc_r+0xac>
 800dde6:	237e      	movs	r3, #126	@ 0x7e
 800dde8:	e7d4      	b.n	800dd94 <_malloc_r+0xac>
 800ddea:	2800      	cmp	r0, #0
 800ddec:	68e1      	ldr	r1, [r4, #12]
 800ddee:	db04      	blt.n	800ddfa <_malloc_r+0x112>
 800ddf0:	68a3      	ldr	r3, [r4, #8]
 800ddf2:	60d9      	str	r1, [r3, #12]
 800ddf4:	608b      	str	r3, [r1, #8]
 800ddf6:	18a3      	adds	r3, r4, r2
 800ddf8:	e7a3      	b.n	800dd42 <_malloc_r+0x5a>
 800ddfa:	460c      	mov	r4, r1
 800ddfc:	e7d0      	b.n	800dda0 <_malloc_r+0xb8>
 800ddfe:	2800      	cmp	r0, #0
 800de00:	e9c6 1104 	strd	r1, r1, [r6, #16]
 800de04:	db07      	blt.n	800de16 <_malloc_r+0x12e>
 800de06:	44a4      	add	ip, r4
 800de08:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800de0c:	f043 0301 	orr.w	r3, r3, #1
 800de10:	f8cc 3004 	str.w	r3, [ip, #4]
 800de14:	e799      	b.n	800dd4a <_malloc_r+0x62>
 800de16:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 800de1a:	6870      	ldr	r0, [r6, #4]
 800de1c:	f080 8095 	bcs.w	800df4a <_malloc_r+0x262>
 800de20:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 800de24:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 800de28:	f04f 0c01 	mov.w	ip, #1
 800de2c:	3201      	adds	r2, #1
 800de2e:	fa0c fc0e 	lsl.w	ip, ip, lr
 800de32:	ea4c 0000 	orr.w	r0, ip, r0
 800de36:	6070      	str	r0, [r6, #4]
 800de38:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 800de3c:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 800de40:	3808      	subs	r0, #8
 800de42:	e9c4 c002 	strd	ip, r0, [r4, #8]
 800de46:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 800de4a:	f8cc 400c 	str.w	r4, [ip, #12]
 800de4e:	1098      	asrs	r0, r3, #2
 800de50:	2201      	movs	r2, #1
 800de52:	4082      	lsls	r2, r0
 800de54:	6870      	ldr	r0, [r6, #4]
 800de56:	4290      	cmp	r0, r2
 800de58:	d326      	bcc.n	800dea8 <_malloc_r+0x1c0>
 800de5a:	4210      	tst	r0, r2
 800de5c:	d106      	bne.n	800de6c <_malloc_r+0x184>
 800de5e:	f023 0303 	bic.w	r3, r3, #3
 800de62:	0052      	lsls	r2, r2, #1
 800de64:	4210      	tst	r0, r2
 800de66:	f103 0304 	add.w	r3, r3, #4
 800de6a:	d0fa      	beq.n	800de62 <_malloc_r+0x17a>
 800de6c:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 800de70:	46c1      	mov	r9, r8
 800de72:	469e      	mov	lr, r3
 800de74:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800de78:	454c      	cmp	r4, r9
 800de7a:	f040 80b9 	bne.w	800dff0 <_malloc_r+0x308>
 800de7e:	f10e 0e01 	add.w	lr, lr, #1
 800de82:	f01e 0f03 	tst.w	lr, #3
 800de86:	f109 0908 	add.w	r9, r9, #8
 800de8a:	d1f3      	bne.n	800de74 <_malloc_r+0x18c>
 800de8c:	0798      	lsls	r0, r3, #30
 800de8e:	f040 80e3 	bne.w	800e058 <_malloc_r+0x370>
 800de92:	6873      	ldr	r3, [r6, #4]
 800de94:	ea23 0302 	bic.w	r3, r3, r2
 800de98:	6073      	str	r3, [r6, #4]
 800de9a:	6870      	ldr	r0, [r6, #4]
 800de9c:	0052      	lsls	r2, r2, #1
 800de9e:	4290      	cmp	r0, r2
 800dea0:	d302      	bcc.n	800dea8 <_malloc_r+0x1c0>
 800dea2:	2a00      	cmp	r2, #0
 800dea4:	f040 80e5 	bne.w	800e072 <_malloc_r+0x38a>
 800dea8:	f8d6 a008 	ldr.w	sl, [r6, #8]
 800deac:	f8da 3004 	ldr.w	r3, [sl, #4]
 800deb0:	f023 0903 	bic.w	r9, r3, #3
 800deb4:	45b9      	cmp	r9, r7
 800deb6:	d304      	bcc.n	800dec2 <_malloc_r+0x1da>
 800deb8:	eba9 0207 	sub.w	r2, r9, r7
 800debc:	2a0f      	cmp	r2, #15
 800debe:	f300 8141 	bgt.w	800e144 <_malloc_r+0x45c>
 800dec2:	4b46      	ldr	r3, [pc, #280]	@ (800dfdc <_malloc_r+0x2f4>)
 800dec4:	6819      	ldr	r1, [r3, #0]
 800dec6:	3110      	adds	r1, #16
 800dec8:	4439      	add	r1, r7
 800deca:	2008      	movs	r0, #8
 800decc:	9101      	str	r1, [sp, #4]
 800dece:	f002 fe87 	bl	8010be0 <sysconf>
 800ded2:	4a43      	ldr	r2, [pc, #268]	@ (800dfe0 <_malloc_r+0x2f8>)
 800ded4:	9901      	ldr	r1, [sp, #4]
 800ded6:	6813      	ldr	r3, [r2, #0]
 800ded8:	3301      	adds	r3, #1
 800deda:	bf1f      	itttt	ne
 800dedc:	f101 31ff 	addne.w	r1, r1, #4294967295	@ 0xffffffff
 800dee0:	1809      	addne	r1, r1, r0
 800dee2:	4243      	negne	r3, r0
 800dee4:	4019      	andne	r1, r3
 800dee6:	4680      	mov	r8, r0
 800dee8:	4628      	mov	r0, r5
 800deea:	9101      	str	r1, [sp, #4]
 800deec:	f002 fe68 	bl	8010bc0 <_sbrk_r>
 800def0:	1c42      	adds	r2, r0, #1
 800def2:	eb0a 0b09 	add.w	fp, sl, r9
 800def6:	4604      	mov	r4, r0
 800def8:	f000 80f7 	beq.w	800e0ea <_malloc_r+0x402>
 800defc:	4583      	cmp	fp, r0
 800defe:	9901      	ldr	r1, [sp, #4]
 800df00:	4a37      	ldr	r2, [pc, #220]	@ (800dfe0 <_malloc_r+0x2f8>)
 800df02:	d902      	bls.n	800df0a <_malloc_r+0x222>
 800df04:	45b2      	cmp	sl, r6
 800df06:	f040 80f0 	bne.w	800e0ea <_malloc_r+0x402>
 800df0a:	4b36      	ldr	r3, [pc, #216]	@ (800dfe4 <_malloc_r+0x2fc>)
 800df0c:	6818      	ldr	r0, [r3, #0]
 800df0e:	45a3      	cmp	fp, r4
 800df10:	eb00 0e01 	add.w	lr, r0, r1
 800df14:	f8c3 e000 	str.w	lr, [r3]
 800df18:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 800df1c:	f040 80ab 	bne.w	800e076 <_malloc_r+0x38e>
 800df20:	ea1b 0f0c 	tst.w	fp, ip
 800df24:	f040 80a7 	bne.w	800e076 <_malloc_r+0x38e>
 800df28:	68b2      	ldr	r2, [r6, #8]
 800df2a:	4449      	add	r1, r9
 800df2c:	f041 0101 	orr.w	r1, r1, #1
 800df30:	6051      	str	r1, [r2, #4]
 800df32:	4a2d      	ldr	r2, [pc, #180]	@ (800dfe8 <_malloc_r+0x300>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	6811      	ldr	r1, [r2, #0]
 800df38:	428b      	cmp	r3, r1
 800df3a:	bf88      	it	hi
 800df3c:	6013      	strhi	r3, [r2, #0]
 800df3e:	4a2b      	ldr	r2, [pc, #172]	@ (800dfec <_malloc_r+0x304>)
 800df40:	6811      	ldr	r1, [r2, #0]
 800df42:	428b      	cmp	r3, r1
 800df44:	bf88      	it	hi
 800df46:	6013      	strhi	r3, [r2, #0]
 800df48:	e0cf      	b.n	800e0ea <_malloc_r+0x402>
 800df4a:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 800df4e:	ea4f 225c 	mov.w	r2, ip, lsr #9
 800df52:	d218      	bcs.n	800df86 <_malloc_r+0x29e>
 800df54:	ea4f 129c 	mov.w	r2, ip, lsr #6
 800df58:	3238      	adds	r2, #56	@ 0x38
 800df5a:	f102 0e01 	add.w	lr, r2, #1
 800df5e:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 800df62:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 800df66:	45f0      	cmp	r8, lr
 800df68:	d12b      	bne.n	800dfc2 <_malloc_r+0x2da>
 800df6a:	1092      	asrs	r2, r2, #2
 800df6c:	f04f 0c01 	mov.w	ip, #1
 800df70:	fa0c f202 	lsl.w	r2, ip, r2
 800df74:	4302      	orrs	r2, r0
 800df76:	6072      	str	r2, [r6, #4]
 800df78:	e9c4 e802 	strd	lr, r8, [r4, #8]
 800df7c:	f8c8 4008 	str.w	r4, [r8, #8]
 800df80:	f8ce 400c 	str.w	r4, [lr, #12]
 800df84:	e763      	b.n	800de4e <_malloc_r+0x166>
 800df86:	2a14      	cmp	r2, #20
 800df88:	d801      	bhi.n	800df8e <_malloc_r+0x2a6>
 800df8a:	325b      	adds	r2, #91	@ 0x5b
 800df8c:	e7e5      	b.n	800df5a <_malloc_r+0x272>
 800df8e:	2a54      	cmp	r2, #84	@ 0x54
 800df90:	d803      	bhi.n	800df9a <_malloc_r+0x2b2>
 800df92:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800df96:	326e      	adds	r2, #110	@ 0x6e
 800df98:	e7df      	b.n	800df5a <_malloc_r+0x272>
 800df9a:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 800df9e:	d803      	bhi.n	800dfa8 <_malloc_r+0x2c0>
 800dfa0:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 800dfa4:	3277      	adds	r2, #119	@ 0x77
 800dfa6:	e7d8      	b.n	800df5a <_malloc_r+0x272>
 800dfa8:	f240 5e54 	movw	lr, #1364	@ 0x554
 800dfac:	4572      	cmp	r2, lr
 800dfae:	bf9a      	itte	ls
 800dfb0:	ea4f 429c 	movls.w	r2, ip, lsr #18
 800dfb4:	327c      	addls	r2, #124	@ 0x7c
 800dfb6:	227e      	movhi	r2, #126	@ 0x7e
 800dfb8:	e7cf      	b.n	800df5a <_malloc_r+0x272>
 800dfba:	f8de e008 	ldr.w	lr, [lr, #8]
 800dfbe:	45f0      	cmp	r8, lr
 800dfc0:	d005      	beq.n	800dfce <_malloc_r+0x2e6>
 800dfc2:	f8de 2004 	ldr.w	r2, [lr, #4]
 800dfc6:	f022 0203 	bic.w	r2, r2, #3
 800dfca:	4562      	cmp	r2, ip
 800dfcc:	d8f5      	bhi.n	800dfba <_malloc_r+0x2d2>
 800dfce:	f8de 800c 	ldr.w	r8, [lr, #12]
 800dfd2:	e7d1      	b.n	800df78 <_malloc_r+0x290>
 800dfd4:	20000018 	.word	0x20000018
 800dfd8:	20000020 	.word	0x20000020
 800dfdc:	2000fb88 	.word	0x2000fb88
 800dfe0:	20000010 	.word	0x20000010
 800dfe4:	2000fb58 	.word	0x2000fb58
 800dfe8:	2000fb84 	.word	0x2000fb84
 800dfec:	2000fb80 	.word	0x2000fb80
 800dff0:	6860      	ldr	r0, [r4, #4]
 800dff2:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800dff6:	f020 0003 	bic.w	r0, r0, #3
 800dffa:	eba0 0a07 	sub.w	sl, r0, r7
 800dffe:	f1ba 0f0f 	cmp.w	sl, #15
 800e002:	dd12      	ble.n	800e02a <_malloc_r+0x342>
 800e004:	68a3      	ldr	r3, [r4, #8]
 800e006:	19e2      	adds	r2, r4, r7
 800e008:	f047 0701 	orr.w	r7, r7, #1
 800e00c:	6067      	str	r7, [r4, #4]
 800e00e:	f8c3 c00c 	str.w	ip, [r3, #12]
 800e012:	f8cc 3008 	str.w	r3, [ip, #8]
 800e016:	f04a 0301 	orr.w	r3, sl, #1
 800e01a:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800e01e:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800e022:	6053      	str	r3, [r2, #4]
 800e024:	f844 a000 	str.w	sl, [r4, r0]
 800e028:	e68f      	b.n	800dd4a <_malloc_r+0x62>
 800e02a:	f1ba 0f00 	cmp.w	sl, #0
 800e02e:	db11      	blt.n	800e054 <_malloc_r+0x36c>
 800e030:	4420      	add	r0, r4
 800e032:	6843      	ldr	r3, [r0, #4]
 800e034:	f043 0301 	orr.w	r3, r3, #1
 800e038:	6043      	str	r3, [r0, #4]
 800e03a:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800e03e:	4628      	mov	r0, r5
 800e040:	f8c3 c00c 	str.w	ip, [r3, #12]
 800e044:	f8cc 3008 	str.w	r3, [ip, #8]
 800e048:	f002 f806 	bl	8010058 <__malloc_unlock>
 800e04c:	4620      	mov	r0, r4
 800e04e:	b003      	add	sp, #12
 800e050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e054:	4664      	mov	r4, ip
 800e056:	e70f      	b.n	800de78 <_malloc_r+0x190>
 800e058:	f858 0908 	ldr.w	r0, [r8], #-8
 800e05c:	4540      	cmp	r0, r8
 800e05e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800e062:	f43f af13 	beq.w	800de8c <_malloc_r+0x1a4>
 800e066:	e718      	b.n	800de9a <_malloc_r+0x1b2>
 800e068:	3304      	adds	r3, #4
 800e06a:	0052      	lsls	r2, r2, #1
 800e06c:	4210      	tst	r0, r2
 800e06e:	d0fb      	beq.n	800e068 <_malloc_r+0x380>
 800e070:	e6fc      	b.n	800de6c <_malloc_r+0x184>
 800e072:	4673      	mov	r3, lr
 800e074:	e7fa      	b.n	800e06c <_malloc_r+0x384>
 800e076:	6810      	ldr	r0, [r2, #0]
 800e078:	3001      	adds	r0, #1
 800e07a:	bf1b      	ittet	ne
 800e07c:	eba4 0b0b 	subne.w	fp, r4, fp
 800e080:	eb0b 020e 	addne.w	r2, fp, lr
 800e084:	6014      	streq	r4, [r2, #0]
 800e086:	601a      	strne	r2, [r3, #0]
 800e088:	f014 0b07 	ands.w	fp, r4, #7
 800e08c:	bf1a      	itte	ne
 800e08e:	f1cb 0008 	rsbne	r0, fp, #8
 800e092:	1824      	addne	r4, r4, r0
 800e094:	4658      	moveq	r0, fp
 800e096:	1862      	adds	r2, r4, r1
 800e098:	ea02 010c 	and.w	r1, r2, ip
 800e09c:	4480      	add	r8, r0
 800e09e:	eba8 0801 	sub.w	r8, r8, r1
 800e0a2:	ea08 080c 	and.w	r8, r8, ip
 800e0a6:	4641      	mov	r1, r8
 800e0a8:	4628      	mov	r0, r5
 800e0aa:	9201      	str	r2, [sp, #4]
 800e0ac:	f002 fd88 	bl	8010bc0 <_sbrk_r>
 800e0b0:	1c43      	adds	r3, r0, #1
 800e0b2:	9a01      	ldr	r2, [sp, #4]
 800e0b4:	4b28      	ldr	r3, [pc, #160]	@ (800e158 <_malloc_r+0x470>)
 800e0b6:	d107      	bne.n	800e0c8 <_malloc_r+0x3e0>
 800e0b8:	f1bb 0f00 	cmp.w	fp, #0
 800e0bc:	d023      	beq.n	800e106 <_malloc_r+0x41e>
 800e0be:	f1ab 0008 	sub.w	r0, fp, #8
 800e0c2:	4410      	add	r0, r2
 800e0c4:	f04f 0800 	mov.w	r8, #0
 800e0c8:	681a      	ldr	r2, [r3, #0]
 800e0ca:	60b4      	str	r4, [r6, #8]
 800e0cc:	1b00      	subs	r0, r0, r4
 800e0ce:	4440      	add	r0, r8
 800e0d0:	4442      	add	r2, r8
 800e0d2:	f040 0001 	orr.w	r0, r0, #1
 800e0d6:	45b2      	cmp	sl, r6
 800e0d8:	601a      	str	r2, [r3, #0]
 800e0da:	6060      	str	r0, [r4, #4]
 800e0dc:	f43f af29 	beq.w	800df32 <_malloc_r+0x24a>
 800e0e0:	f1b9 0f0f 	cmp.w	r9, #15
 800e0e4:	d812      	bhi.n	800e10c <_malloc_r+0x424>
 800e0e6:	2301      	movs	r3, #1
 800e0e8:	6063      	str	r3, [r4, #4]
 800e0ea:	68b3      	ldr	r3, [r6, #8]
 800e0ec:	685b      	ldr	r3, [r3, #4]
 800e0ee:	f023 0303 	bic.w	r3, r3, #3
 800e0f2:	42bb      	cmp	r3, r7
 800e0f4:	eba3 0207 	sub.w	r2, r3, r7
 800e0f8:	d301      	bcc.n	800e0fe <_malloc_r+0x416>
 800e0fa:	2a0f      	cmp	r2, #15
 800e0fc:	dc22      	bgt.n	800e144 <_malloc_r+0x45c>
 800e0fe:	4628      	mov	r0, r5
 800e100:	f001 ffaa 	bl	8010058 <__malloc_unlock>
 800e104:	e5fc      	b.n	800dd00 <_malloc_r+0x18>
 800e106:	4610      	mov	r0, r2
 800e108:	46d8      	mov	r8, fp
 800e10a:	e7dd      	b.n	800e0c8 <_malloc_r+0x3e0>
 800e10c:	f8da 2004 	ldr.w	r2, [sl, #4]
 800e110:	f1a9 090c 	sub.w	r9, r9, #12
 800e114:	f029 0907 	bic.w	r9, r9, #7
 800e118:	f002 0201 	and.w	r2, r2, #1
 800e11c:	ea42 0209 	orr.w	r2, r2, r9
 800e120:	f8ca 2004 	str.w	r2, [sl, #4]
 800e124:	2105      	movs	r1, #5
 800e126:	eb0a 0209 	add.w	r2, sl, r9
 800e12a:	f1b9 0f0f 	cmp.w	r9, #15
 800e12e:	e9c2 1101 	strd	r1, r1, [r2, #4]
 800e132:	f67f aefe 	bls.w	800df32 <_malloc_r+0x24a>
 800e136:	f10a 0108 	add.w	r1, sl, #8
 800e13a:	4628      	mov	r0, r5
 800e13c:	f003 fcba 	bl	8011ab4 <_free_r>
 800e140:	4b05      	ldr	r3, [pc, #20]	@ (800e158 <_malloc_r+0x470>)
 800e142:	e6f6      	b.n	800df32 <_malloc_r+0x24a>
 800e144:	68b4      	ldr	r4, [r6, #8]
 800e146:	f047 0301 	orr.w	r3, r7, #1
 800e14a:	4427      	add	r7, r4
 800e14c:	f042 0201 	orr.w	r2, r2, #1
 800e150:	6063      	str	r3, [r4, #4]
 800e152:	60b7      	str	r7, [r6, #8]
 800e154:	607a      	str	r2, [r7, #4]
 800e156:	e5f8      	b.n	800dd4a <_malloc_r+0x62>
 800e158:	2000fb58 	.word	0x2000fb58

0800e15c <printf>:
 800e15c:	b40f      	push	{r0, r1, r2, r3}
 800e15e:	b507      	push	{r0, r1, r2, lr}
 800e160:	4906      	ldr	r1, [pc, #24]	@ (800e17c <printf+0x20>)
 800e162:	ab04      	add	r3, sp, #16
 800e164:	6808      	ldr	r0, [r1, #0]
 800e166:	f853 2b04 	ldr.w	r2, [r3], #4
 800e16a:	6881      	ldr	r1, [r0, #8]
 800e16c:	9301      	str	r3, [sp, #4]
 800e16e:	f000 f807 	bl	800e180 <_vfprintf_r>
 800e172:	b003      	add	sp, #12
 800e174:	f85d eb04 	ldr.w	lr, [sp], #4
 800e178:	b004      	add	sp, #16
 800e17a:	4770      	bx	lr
 800e17c:	20000598 	.word	0x20000598

0800e180 <_vfprintf_r>:
 800e180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e184:	b0d3      	sub	sp, #332	@ 0x14c
 800e186:	468b      	mov	fp, r1
 800e188:	4690      	mov	r8, r2
 800e18a:	461c      	mov	r4, r3
 800e18c:	461e      	mov	r6, r3
 800e18e:	9003      	str	r0, [sp, #12]
 800e190:	f002 fcf8 	bl	8010b84 <_localeconv_r>
 800e194:	6803      	ldr	r3, [r0, #0]
 800e196:	9316      	str	r3, [sp, #88]	@ 0x58
 800e198:	4618      	mov	r0, r3
 800e19a:	f7f2 f889 	bl	80002b0 <strlen>
 800e19e:	9b03      	ldr	r3, [sp, #12]
 800e1a0:	900d      	str	r0, [sp, #52]	@ 0x34
 800e1a2:	b123      	cbz	r3, 800e1ae <_vfprintf_r+0x2e>
 800e1a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e1a6:	b913      	cbnz	r3, 800e1ae <_vfprintf_r+0x2e>
 800e1a8:	9803      	ldr	r0, [sp, #12]
 800e1aa:	f002 fa3d 	bl	8010628 <__sinit>
 800e1ae:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 800e1b2:	07da      	lsls	r2, r3, #31
 800e1b4:	d407      	bmi.n	800e1c6 <_vfprintf_r+0x46>
 800e1b6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800e1ba:	059b      	lsls	r3, r3, #22
 800e1bc:	d403      	bmi.n	800e1c6 <_vfprintf_r+0x46>
 800e1be:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 800e1c2:	f002 fd3f 	bl	8010c44 <__retarget_lock_acquire_recursive>
 800e1c6:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 800e1ca:	049f      	lsls	r7, r3, #18
 800e1cc:	d409      	bmi.n	800e1e2 <_vfprintf_r+0x62>
 800e1ce:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800e1d2:	f8ab 300c 	strh.w	r3, [fp, #12]
 800e1d6:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 800e1da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e1de:	f8cb 3064 	str.w	r3, [fp, #100]	@ 0x64
 800e1e2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800e1e6:	071d      	lsls	r5, r3, #28
 800e1e8:	d502      	bpl.n	800e1f0 <_vfprintf_r+0x70>
 800e1ea:	f8db 3010 	ldr.w	r3, [fp, #16]
 800e1ee:	b9c3      	cbnz	r3, 800e222 <_vfprintf_r+0xa2>
 800e1f0:	9803      	ldr	r0, [sp, #12]
 800e1f2:	4659      	mov	r1, fp
 800e1f4:	f002 fb9a 	bl	801092c <__swsetup_r>
 800e1f8:	b198      	cbz	r0, 800e222 <_vfprintf_r+0xa2>
 800e1fa:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 800e1fe:	07d8      	lsls	r0, r3, #31
 800e200:	d506      	bpl.n	800e210 <_vfprintf_r+0x90>
 800e202:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e206:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e208:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800e20a:	b053      	add	sp, #332	@ 0x14c
 800e20c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e210:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800e214:	0599      	lsls	r1, r3, #22
 800e216:	d4f4      	bmi.n	800e202 <_vfprintf_r+0x82>
 800e218:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 800e21c:	f002 fd13 	bl	8010c46 <__retarget_lock_release_recursive>
 800e220:	e7ef      	b.n	800e202 <_vfprintf_r+0x82>
 800e222:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 800e226:	f003 021a 	and.w	r2, r3, #26
 800e22a:	2a0a      	cmp	r2, #10
 800e22c:	d116      	bne.n	800e25c <_vfprintf_r+0xdc>
 800e22e:	f9bb 200e 	ldrsh.w	r2, [fp, #14]
 800e232:	2a00      	cmp	r2, #0
 800e234:	db12      	blt.n	800e25c <_vfprintf_r+0xdc>
 800e236:	f8db 2064 	ldr.w	r2, [fp, #100]	@ 0x64
 800e23a:	07d2      	lsls	r2, r2, #31
 800e23c:	d405      	bmi.n	800e24a <_vfprintf_r+0xca>
 800e23e:	059b      	lsls	r3, r3, #22
 800e240:	d403      	bmi.n	800e24a <_vfprintf_r+0xca>
 800e242:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 800e246:	f002 fcfe 	bl	8010c46 <__retarget_lock_release_recursive>
 800e24a:	9803      	ldr	r0, [sp, #12]
 800e24c:	4623      	mov	r3, r4
 800e24e:	4642      	mov	r2, r8
 800e250:	4659      	mov	r1, fp
 800e252:	b053      	add	sp, #332	@ 0x14c
 800e254:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e258:	f001 b9be 	b.w	800f5d8 <__sbprintf>
 800e25c:	ed9f 7b92 	vldr	d7, [pc, #584]	@ 800e4a8 <_vfprintf_r+0x328>
 800e260:	2300      	movs	r3, #0
 800e262:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 800e266:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800e26a:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 800e26e:	ac29      	add	r4, sp, #164	@ 0xa4
 800e270:	9426      	str	r4, [sp, #152]	@ 0x98
 800e272:	9304      	str	r3, [sp, #16]
 800e274:	9309      	str	r3, [sp, #36]	@ 0x24
 800e276:	9312      	str	r3, [sp, #72]	@ 0x48
 800e278:	9317      	str	r3, [sp, #92]	@ 0x5c
 800e27a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e27c:	4643      	mov	r3, r8
 800e27e:	461d      	mov	r5, r3
 800e280:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e284:	b10a      	cbz	r2, 800e28a <_vfprintf_r+0x10a>
 800e286:	2a25      	cmp	r2, #37	@ 0x25
 800e288:	d1f9      	bne.n	800e27e <_vfprintf_r+0xfe>
 800e28a:	ebb5 0708 	subs.w	r7, r5, r8
 800e28e:	d00d      	beq.n	800e2ac <_vfprintf_r+0x12c>
 800e290:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800e292:	443b      	add	r3, r7
 800e294:	9328      	str	r3, [sp, #160]	@ 0xa0
 800e296:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800e298:	3301      	adds	r3, #1
 800e29a:	2b07      	cmp	r3, #7
 800e29c:	e9c4 8700 	strd	r8, r7, [r4]
 800e2a0:	9327      	str	r3, [sp, #156]	@ 0x9c
 800e2a2:	dc75      	bgt.n	800e390 <_vfprintf_r+0x210>
 800e2a4:	3408      	adds	r4, #8
 800e2a6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e2a8:	443b      	add	r3, r7
 800e2aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e2ac:	782b      	ldrb	r3, [r5, #0]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	f001 814f 	beq.w	800f552 <_vfprintf_r+0x13d2>
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	1c6b      	adds	r3, r5, #1
 800e2b8:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 800e2bc:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 800e2c0:	920e      	str	r2, [sp, #56]	@ 0x38
 800e2c2:	4615      	mov	r5, r2
 800e2c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e2c8:	9206      	str	r2, [sp, #24]
 800e2ca:	930c      	str	r3, [sp, #48]	@ 0x30
 800e2cc:	9b06      	ldr	r3, [sp, #24]
 800e2ce:	3b20      	subs	r3, #32
 800e2d0:	2b5a      	cmp	r3, #90	@ 0x5a
 800e2d2:	f200 85aa 	bhi.w	800ee2a <_vfprintf_r+0xcaa>
 800e2d6:	e8df f013 	tbh	[pc, r3, lsl #1]
 800e2da:	009d      	.short	0x009d
 800e2dc:	05a805a8 	.word	0x05a805a8
 800e2e0:	05a800a5 	.word	0x05a800a5
 800e2e4:	05a805a8 	.word	0x05a805a8
 800e2e8:	05a80085 	.word	0x05a80085
 800e2ec:	00a805a8 	.word	0x00a805a8
 800e2f0:	05a800b2 	.word	0x05a800b2
 800e2f4:	00b400af 	.word	0x00b400af
 800e2f8:	00ce05a8 	.word	0x00ce05a8
 800e2fc:	00d100d1 	.word	0x00d100d1
 800e300:	00d100d1 	.word	0x00d100d1
 800e304:	00d100d1 	.word	0x00d100d1
 800e308:	00d100d1 	.word	0x00d100d1
 800e30c:	05a800d1 	.word	0x05a800d1
 800e310:	05a805a8 	.word	0x05a805a8
 800e314:	05a805a8 	.word	0x05a805a8
 800e318:	05a805a8 	.word	0x05a805a8
 800e31c:	05a80146 	.word	0x05a80146
 800e320:	011a0107 	.word	0x011a0107
 800e324:	01460146 	.word	0x01460146
 800e328:	05a80146 	.word	0x05a80146
 800e32c:	05a805a8 	.word	0x05a805a8
 800e330:	00e205a8 	.word	0x00e205a8
 800e334:	05a805a8 	.word	0x05a805a8
 800e338:	05a804a3 	.word	0x05a804a3
 800e33c:	05a805a8 	.word	0x05a805a8
 800e340:	05a804ed 	.word	0x05a804ed
 800e344:	05a8050e 	.word	0x05a8050e
 800e348:	053005a8 	.word	0x053005a8
 800e34c:	05a805a8 	.word	0x05a805a8
 800e350:	05a805a8 	.word	0x05a805a8
 800e354:	05a805a8 	.word	0x05a805a8
 800e358:	05a805a8 	.word	0x05a805a8
 800e35c:	05a80146 	.word	0x05a80146
 800e360:	011c0107 	.word	0x011c0107
 800e364:	01460146 	.word	0x01460146
 800e368:	00ed0146 	.word	0x00ed0146
 800e36c:	0101011c 	.word	0x0101011c
 800e370:	00fa05a8 	.word	0x00fa05a8
 800e374:	048705a8 	.word	0x048705a8
 800e378:	04dc04a5 	.word	0x04dc04a5
 800e37c:	05a80101 	.word	0x05a80101
 800e380:	009b04ed 	.word	0x009b04ed
 800e384:	05a80510 	.word	0x05a80510
 800e388:	006505a8 	.word	0x006505a8
 800e38c:	009b05a8 	.word	0x009b05a8
 800e390:	9803      	ldr	r0, [sp, #12]
 800e392:	aa26      	add	r2, sp, #152	@ 0x98
 800e394:	4659      	mov	r1, fp
 800e396:	f001 f95f 	bl	800f658 <__sprint_r>
 800e39a:	2800      	cmp	r0, #0
 800e39c:	f040 814d 	bne.w	800e63a <_vfprintf_r+0x4ba>
 800e3a0:	ac29      	add	r4, sp, #164	@ 0xa4
 800e3a2:	e780      	b.n	800e2a6 <_vfprintf_r+0x126>
 800e3a4:	4b42      	ldr	r3, [pc, #264]	@ (800e4b0 <_vfprintf_r+0x330>)
 800e3a6:	9319      	str	r3, [sp, #100]	@ 0x64
 800e3a8:	f015 0320 	ands.w	r3, r5, #32
 800e3ac:	f000 84c8 	beq.w	800ed40 <_vfprintf_r+0xbc0>
 800e3b0:	3607      	adds	r6, #7
 800e3b2:	f026 0307 	bic.w	r3, r6, #7
 800e3b6:	461a      	mov	r2, r3
 800e3b8:	685f      	ldr	r7, [r3, #4]
 800e3ba:	f852 6b08 	ldr.w	r6, [r2], #8
 800e3be:	9207      	str	r2, [sp, #28]
 800e3c0:	07eb      	lsls	r3, r5, #31
 800e3c2:	d50a      	bpl.n	800e3da <_vfprintf_r+0x25a>
 800e3c4:	ea56 0307 	orrs.w	r3, r6, r7
 800e3c8:	d007      	beq.n	800e3da <_vfprintf_r+0x25a>
 800e3ca:	2330      	movs	r3, #48	@ 0x30
 800e3cc:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 800e3d0:	9b06      	ldr	r3, [sp, #24]
 800e3d2:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 800e3d6:	f045 0502 	orr.w	r5, r5, #2
 800e3da:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 800e3de:	2302      	movs	r3, #2
 800e3e0:	f000 bc2e 	b.w	800ec40 <_vfprintf_r+0xac0>
 800e3e4:	9803      	ldr	r0, [sp, #12]
 800e3e6:	f002 fbcd 	bl	8010b84 <_localeconv_r>
 800e3ea:	6843      	ldr	r3, [r0, #4]
 800e3ec:	9317      	str	r3, [sp, #92]	@ 0x5c
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	f7f1 ff5e 	bl	80002b0 <strlen>
 800e3f4:	9012      	str	r0, [sp, #72]	@ 0x48
 800e3f6:	9803      	ldr	r0, [sp, #12]
 800e3f8:	f002 fbc4 	bl	8010b84 <_localeconv_r>
 800e3fc:	6883      	ldr	r3, [r0, #8]
 800e3fe:	9309      	str	r3, [sp, #36]	@ 0x24
 800e400:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e402:	b12b      	cbz	r3, 800e410 <_vfprintf_r+0x290>
 800e404:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e406:	b11b      	cbz	r3, 800e410 <_vfprintf_r+0x290>
 800e408:	781b      	ldrb	r3, [r3, #0]
 800e40a:	b10b      	cbz	r3, 800e410 <_vfprintf_r+0x290>
 800e40c:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 800e410:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e412:	e757      	b.n	800e2c4 <_vfprintf_r+0x144>
 800e414:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d1f9      	bne.n	800e410 <_vfprintf_r+0x290>
 800e41c:	2320      	movs	r3, #32
 800e41e:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800e422:	e7f5      	b.n	800e410 <_vfprintf_r+0x290>
 800e424:	f045 0501 	orr.w	r5, r5, #1
 800e428:	e7f2      	b.n	800e410 <_vfprintf_r+0x290>
 800e42a:	f856 3b04 	ldr.w	r3, [r6], #4
 800e42e:	930e      	str	r3, [sp, #56]	@ 0x38
 800e430:	2b00      	cmp	r3, #0
 800e432:	daed      	bge.n	800e410 <_vfprintf_r+0x290>
 800e434:	425b      	negs	r3, r3
 800e436:	930e      	str	r3, [sp, #56]	@ 0x38
 800e438:	f045 0504 	orr.w	r5, r5, #4
 800e43c:	e7e8      	b.n	800e410 <_vfprintf_r+0x290>
 800e43e:	232b      	movs	r3, #43	@ 0x2b
 800e440:	e7ed      	b.n	800e41e <_vfprintf_r+0x29e>
 800e442:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e444:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e448:	9206      	str	r2, [sp, #24]
 800e44a:	2a2a      	cmp	r2, #42	@ 0x2a
 800e44c:	d10f      	bne.n	800e46e <_vfprintf_r+0x2ee>
 800e44e:	f856 2b04 	ldr.w	r2, [r6], #4
 800e452:	930c      	str	r3, [sp, #48]	@ 0x30
 800e454:	ea42 79e2 	orr.w	r9, r2, r2, asr #31
 800e458:	e7da      	b.n	800e410 <_vfprintf_r+0x290>
 800e45a:	fb01 2909 	mla	r9, r1, r9, r2
 800e45e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e462:	9206      	str	r2, [sp, #24]
 800e464:	9a06      	ldr	r2, [sp, #24]
 800e466:	3a30      	subs	r2, #48	@ 0x30
 800e468:	2a09      	cmp	r2, #9
 800e46a:	d9f6      	bls.n	800e45a <_vfprintf_r+0x2da>
 800e46c:	e72d      	b.n	800e2ca <_vfprintf_r+0x14a>
 800e46e:	f04f 0900 	mov.w	r9, #0
 800e472:	210a      	movs	r1, #10
 800e474:	e7f6      	b.n	800e464 <_vfprintf_r+0x2e4>
 800e476:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 800e47a:	e7c9      	b.n	800e410 <_vfprintf_r+0x290>
 800e47c:	2200      	movs	r2, #0
 800e47e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e480:	920e      	str	r2, [sp, #56]	@ 0x38
 800e482:	210a      	movs	r1, #10
 800e484:	9a06      	ldr	r2, [sp, #24]
 800e486:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800e488:	3a30      	subs	r2, #48	@ 0x30
 800e48a:	fb01 2200 	mla	r2, r1, r0, r2
 800e48e:	920e      	str	r2, [sp, #56]	@ 0x38
 800e490:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e494:	9206      	str	r2, [sp, #24]
 800e496:	3a30      	subs	r2, #48	@ 0x30
 800e498:	2a09      	cmp	r2, #9
 800e49a:	d9f3      	bls.n	800e484 <_vfprintf_r+0x304>
 800e49c:	e715      	b.n	800e2ca <_vfprintf_r+0x14a>
 800e49e:	f045 0508 	orr.w	r5, r5, #8
 800e4a2:	e7b5      	b.n	800e410 <_vfprintf_r+0x290>
 800e4a4:	f3af 8000 	nop.w
	...
 800e4b0:	08091870 	.word	0x08091870
 800e4b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e4b6:	781b      	ldrb	r3, [r3, #0]
 800e4b8:	2b68      	cmp	r3, #104	@ 0x68
 800e4ba:	bf01      	itttt	eq
 800e4bc:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 800e4be:	3301      	addeq	r3, #1
 800e4c0:	930c      	streq	r3, [sp, #48]	@ 0x30
 800e4c2:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 800e4c6:	bf18      	it	ne
 800e4c8:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 800e4cc:	e7a0      	b.n	800e410 <_vfprintf_r+0x290>
 800e4ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e4d0:	781b      	ldrb	r3, [r3, #0]
 800e4d2:	2b6c      	cmp	r3, #108	@ 0x6c
 800e4d4:	d105      	bne.n	800e4e2 <_vfprintf_r+0x362>
 800e4d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e4d8:	3301      	adds	r3, #1
 800e4da:	930c      	str	r3, [sp, #48]	@ 0x30
 800e4dc:	f045 0520 	orr.w	r5, r5, #32
 800e4e0:	e796      	b.n	800e410 <_vfprintf_r+0x290>
 800e4e2:	f045 0510 	orr.w	r5, r5, #16
 800e4e6:	e793      	b.n	800e410 <_vfprintf_r+0x290>
 800e4e8:	4632      	mov	r2, r6
 800e4ea:	f852 3b04 	ldr.w	r3, [r2], #4
 800e4ee:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	9207      	str	r2, [sp, #28]
 800e4f6:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800e4fa:	469a      	mov	sl, r3
 800e4fc:	f04f 0901 	mov.w	r9, #1
 800e500:	9310      	str	r3, [sp, #64]	@ 0x40
 800e502:	461f      	mov	r7, r3
 800e504:	9308      	str	r3, [sp, #32]
 800e506:	461e      	mov	r6, r3
 800e508:	f10d 08e4 	add.w	r8, sp, #228	@ 0xe4
 800e50c:	e1da      	b.n	800e8c4 <_vfprintf_r+0x744>
 800e50e:	f045 0510 	orr.w	r5, r5, #16
 800e512:	06af      	lsls	r7, r5, #26
 800e514:	d512      	bpl.n	800e53c <_vfprintf_r+0x3bc>
 800e516:	3607      	adds	r6, #7
 800e518:	f026 0307 	bic.w	r3, r6, #7
 800e51c:	461a      	mov	r2, r3
 800e51e:	685f      	ldr	r7, [r3, #4]
 800e520:	f852 6b08 	ldr.w	r6, [r2], #8
 800e524:	9207      	str	r2, [sp, #28]
 800e526:	2f00      	cmp	r7, #0
 800e528:	da06      	bge.n	800e538 <_vfprintf_r+0x3b8>
 800e52a:	4276      	negs	r6, r6
 800e52c:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 800e530:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800e534:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800e538:	2301      	movs	r3, #1
 800e53a:	e384      	b.n	800ec46 <_vfprintf_r+0xac6>
 800e53c:	4633      	mov	r3, r6
 800e53e:	06ee      	lsls	r6, r5, #27
 800e540:	f853 7b04 	ldr.w	r7, [r3], #4
 800e544:	9307      	str	r3, [sp, #28]
 800e546:	d502      	bpl.n	800e54e <_vfprintf_r+0x3ce>
 800e548:	463e      	mov	r6, r7
 800e54a:	17ff      	asrs	r7, r7, #31
 800e54c:	e7eb      	b.n	800e526 <_vfprintf_r+0x3a6>
 800e54e:	0668      	lsls	r0, r5, #25
 800e550:	d503      	bpl.n	800e55a <_vfprintf_r+0x3da>
 800e552:	b23e      	sxth	r6, r7
 800e554:	f347 37c0 	sbfx	r7, r7, #15, #1
 800e558:	e7e5      	b.n	800e526 <_vfprintf_r+0x3a6>
 800e55a:	05a9      	lsls	r1, r5, #22
 800e55c:	d5f4      	bpl.n	800e548 <_vfprintf_r+0x3c8>
 800e55e:	b27e      	sxtb	r6, r7
 800e560:	f347 17c0 	sbfx	r7, r7, #7, #1
 800e564:	e7df      	b.n	800e526 <_vfprintf_r+0x3a6>
 800e566:	3607      	adds	r6, #7
 800e568:	f026 0307 	bic.w	r3, r6, #7
 800e56c:	ecb3 7b02 	vldmia	r3!, {d7}
 800e570:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800e574:	9307      	str	r3, [sp, #28]
 800e576:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e578:	931a      	str	r3, [sp, #104]	@ 0x68
 800e57a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e57c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e580:	931b      	str	r3, [sp, #108]	@ 0x6c
 800e582:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 800e586:	4b85      	ldr	r3, [pc, #532]	@ (800e79c <_vfprintf_r+0x61c>)
 800e588:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e58c:	f7f2 faee 	bl	8000b6c <__aeabi_dcmpun>
 800e590:	bb10      	cbnz	r0, 800e5d8 <_vfprintf_r+0x458>
 800e592:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 800e596:	4b81      	ldr	r3, [pc, #516]	@ (800e79c <_vfprintf_r+0x61c>)
 800e598:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e59c:	f7f2 fac8 	bl	8000b30 <__aeabi_dcmple>
 800e5a0:	b9d0      	cbnz	r0, 800e5d8 <_vfprintf_r+0x458>
 800e5a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e5a6:	2200      	movs	r2, #0
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	f7f2 fab7 	bl	8000b1c <__aeabi_dcmplt>
 800e5ae:	b110      	cbz	r0, 800e5b6 <_vfprintf_r+0x436>
 800e5b0:	232d      	movs	r3, #45	@ 0x2d
 800e5b2:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800e5b6:	4a7a      	ldr	r2, [pc, #488]	@ (800e7a0 <_vfprintf_r+0x620>)
 800e5b8:	4b7a      	ldr	r3, [pc, #488]	@ (800e7a4 <_vfprintf_r+0x624>)
 800e5ba:	9906      	ldr	r1, [sp, #24]
 800e5bc:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 800e5c0:	2947      	cmp	r1, #71	@ 0x47
 800e5c2:	bfd4      	ite	le
 800e5c4:	4690      	movle	r8, r2
 800e5c6:	4698      	movgt	r8, r3
 800e5c8:	f04f 0a00 	mov.w	sl, #0
 800e5cc:	f04f 0903 	mov.w	r9, #3
 800e5d0:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 800e5d4:	f000 bff8 	b.w	800f5c8 <_vfprintf_r+0x1448>
 800e5d8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800e5dc:	4610      	mov	r0, r2
 800e5de:	4619      	mov	r1, r3
 800e5e0:	f7f2 fac4 	bl	8000b6c <__aeabi_dcmpun>
 800e5e4:	4682      	mov	sl, r0
 800e5e6:	b140      	cbz	r0, 800e5fa <_vfprintf_r+0x47a>
 800e5e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e5ea:	4a6f      	ldr	r2, [pc, #444]	@ (800e7a8 <_vfprintf_r+0x628>)
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	bfbc      	itt	lt
 800e5f0:	232d      	movlt	r3, #45	@ 0x2d
 800e5f2:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 800e5f6:	4b6d      	ldr	r3, [pc, #436]	@ (800e7ac <_vfprintf_r+0x62c>)
 800e5f8:	e7df      	b.n	800e5ba <_vfprintf_r+0x43a>
 800e5fa:	9b06      	ldr	r3, [sp, #24]
 800e5fc:	2b61      	cmp	r3, #97	@ 0x61
 800e5fe:	d02e      	beq.n	800e65e <_vfprintf_r+0x4de>
 800e600:	2b41      	cmp	r3, #65	@ 0x41
 800e602:	d12e      	bne.n	800e662 <_vfprintf_r+0x4e2>
 800e604:	2358      	movs	r3, #88	@ 0x58
 800e606:	2230      	movs	r2, #48	@ 0x30
 800e608:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 800e60c:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 800e610:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 800e614:	f045 0502 	orr.w	r5, r5, #2
 800e618:	f340 80ae 	ble.w	800e778 <_vfprintf_r+0x5f8>
 800e61c:	9803      	ldr	r0, [sp, #12]
 800e61e:	f109 0101 	add.w	r1, r9, #1
 800e622:	f7ff fb61 	bl	800dce8 <_malloc_r>
 800e626:	4680      	mov	r8, r0
 800e628:	2800      	cmp	r0, #0
 800e62a:	f040 80aa 	bne.w	800e782 <_vfprintf_r+0x602>
 800e62e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800e632:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e636:	f8ab 300c 	strh.w	r3, [fp, #12]
 800e63a:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 800e63e:	07d9      	lsls	r1, r3, #31
 800e640:	d407      	bmi.n	800e652 <_vfprintf_r+0x4d2>
 800e642:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800e646:	059a      	lsls	r2, r3, #22
 800e648:	d403      	bmi.n	800e652 <_vfprintf_r+0x4d2>
 800e64a:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 800e64e:	f002 fafa 	bl	8010c46 <__retarget_lock_release_recursive>
 800e652:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800e656:	065b      	lsls	r3, r3, #25
 800e658:	f57f add6 	bpl.w	800e208 <_vfprintf_r+0x88>
 800e65c:	e5d1      	b.n	800e202 <_vfprintf_r+0x82>
 800e65e:	2378      	movs	r3, #120	@ 0x78
 800e660:	e7d1      	b.n	800e606 <_vfprintf_r+0x486>
 800e662:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 800e666:	f000 808e 	beq.w	800e786 <_vfprintf_r+0x606>
 800e66a:	9b06      	ldr	r3, [sp, #24]
 800e66c:	f023 0320 	bic.w	r3, r3, #32
 800e670:	2b47      	cmp	r3, #71	@ 0x47
 800e672:	d105      	bne.n	800e680 <_vfprintf_r+0x500>
 800e674:	f1b9 0f00 	cmp.w	r9, #0
 800e678:	d102      	bne.n	800e680 <_vfprintf_r+0x500>
 800e67a:	46ca      	mov	sl, r9
 800e67c:	f04f 0901 	mov.w	r9, #1
 800e680:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 800e684:	9311      	str	r3, [sp, #68]	@ 0x44
 800e686:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e688:	2b00      	cmp	r3, #0
 800e68a:	da7f      	bge.n	800e78c <_vfprintf_r+0x60c>
 800e68c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e68e:	9314      	str	r3, [sp, #80]	@ 0x50
 800e690:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e692:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800e696:	9315      	str	r3, [sp, #84]	@ 0x54
 800e698:	232d      	movs	r3, #45	@ 0x2d
 800e69a:	931c      	str	r3, [sp, #112]	@ 0x70
 800e69c:	9b06      	ldr	r3, [sp, #24]
 800e69e:	f023 0320 	bic.w	r3, r3, #32
 800e6a2:	2b41      	cmp	r3, #65	@ 0x41
 800e6a4:	9308      	str	r3, [sp, #32]
 800e6a6:	f040 81e7 	bne.w	800ea78 <_vfprintf_r+0x8f8>
 800e6aa:	a820      	add	r0, sp, #128	@ 0x80
 800e6ac:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 800e6b0:	f002 fb2e 	bl	8010d10 <frexp>
 800e6b4:	2200      	movs	r2, #0
 800e6b6:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800e6ba:	ec51 0b10 	vmov	r0, r1, d0
 800e6be:	f7f1 ffbb 	bl	8000638 <__aeabi_dmul>
 800e6c2:	4602      	mov	r2, r0
 800e6c4:	460b      	mov	r3, r1
 800e6c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	f7f2 fa1b 	bl	8000b08 <__aeabi_dcmpeq>
 800e6d2:	b108      	cbz	r0, 800e6d8 <_vfprintf_r+0x558>
 800e6d4:	2301      	movs	r3, #1
 800e6d6:	9320      	str	r3, [sp, #128]	@ 0x80
 800e6d8:	4a35      	ldr	r2, [pc, #212]	@ (800e7b0 <_vfprintf_r+0x630>)
 800e6da:	4b36      	ldr	r3, [pc, #216]	@ (800e7b4 <_vfprintf_r+0x634>)
 800e6dc:	9906      	ldr	r1, [sp, #24]
 800e6de:	2961      	cmp	r1, #97	@ 0x61
 800e6e0:	bf18      	it	ne
 800e6e2:	461a      	movne	r2, r3
 800e6e4:	9210      	str	r2, [sp, #64]	@ 0x40
 800e6e6:	f109 37ff 	add.w	r7, r9, #4294967295	@ 0xffffffff
 800e6ea:	4646      	mov	r6, r8
 800e6ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e6f0:	4b31      	ldr	r3, [pc, #196]	@ (800e7b8 <_vfprintf_r+0x638>)
 800e6f2:	2200      	movs	r2, #0
 800e6f4:	f7f1 ffa0 	bl	8000638 <__aeabi_dmul>
 800e6f8:	4602      	mov	r2, r0
 800e6fa:	460b      	mov	r3, r1
 800e6fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e700:	f7f2 fa4a 	bl	8000b98 <__aeabi_d2iz>
 800e704:	9013      	str	r0, [sp, #76]	@ 0x4c
 800e706:	f7f1 ff2d 	bl	8000564 <__aeabi_i2d>
 800e70a:	4602      	mov	r2, r0
 800e70c:	460b      	mov	r3, r1
 800e70e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e712:	f7f1 fdd9 	bl	80002c8 <__aeabi_dsub>
 800e716:	4602      	mov	r2, r0
 800e718:	460b      	mov	r3, r1
 800e71a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e71e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e720:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e722:	5c9b      	ldrb	r3, [r3, r2]
 800e724:	f806 3b01 	strb.w	r3, [r6], #1
 800e728:	1c7a      	adds	r2, r7, #1
 800e72a:	d006      	beq.n	800e73a <_vfprintf_r+0x5ba>
 800e72c:	1e7b      	subs	r3, r7, #1
 800e72e:	931d      	str	r3, [sp, #116]	@ 0x74
 800e730:	2200      	movs	r2, #0
 800e732:	2300      	movs	r3, #0
 800e734:	f7f2 f9e8 	bl	8000b08 <__aeabi_dcmpeq>
 800e738:	b370      	cbz	r0, 800e798 <_vfprintf_r+0x618>
 800e73a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e73e:	4b1f      	ldr	r3, [pc, #124]	@ (800e7bc <_vfprintf_r+0x63c>)
 800e740:	2200      	movs	r2, #0
 800e742:	f7f2 fa09 	bl	8000b58 <__aeabi_dcmpgt>
 800e746:	2800      	cmp	r0, #0
 800e748:	d13a      	bne.n	800e7c0 <_vfprintf_r+0x640>
 800e74a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e74e:	4b1b      	ldr	r3, [pc, #108]	@ (800e7bc <_vfprintf_r+0x63c>)
 800e750:	2200      	movs	r2, #0
 800e752:	f7f2 f9d9 	bl	8000b08 <__aeabi_dcmpeq>
 800e756:	b110      	cbz	r0, 800e75e <_vfprintf_r+0x5de>
 800e758:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e75a:	07db      	lsls	r3, r3, #31
 800e75c:	d430      	bmi.n	800e7c0 <_vfprintf_r+0x640>
 800e75e:	4633      	mov	r3, r6
 800e760:	19f1      	adds	r1, r6, r7
 800e762:	2030      	movs	r0, #48	@ 0x30
 800e764:	1aca      	subs	r2, r1, r3
 800e766:	2a00      	cmp	r2, #0
 800e768:	f280 8183 	bge.w	800ea72 <_vfprintf_r+0x8f2>
 800e76c:	1c7b      	adds	r3, r7, #1
 800e76e:	3701      	adds	r7, #1
 800e770:	bfb8      	it	lt
 800e772:	2300      	movlt	r3, #0
 800e774:	441e      	add	r6, r3
 800e776:	e037      	b.n	800e7e8 <_vfprintf_r+0x668>
 800e778:	f04f 0a00 	mov.w	sl, #0
 800e77c:	f10d 08e4 	add.w	r8, sp, #228	@ 0xe4
 800e780:	e77e      	b.n	800e680 <_vfprintf_r+0x500>
 800e782:	4682      	mov	sl, r0
 800e784:	e77c      	b.n	800e680 <_vfprintf_r+0x500>
 800e786:	f04f 0906 	mov.w	r9, #6
 800e78a:	e779      	b.n	800e680 <_vfprintf_r+0x500>
 800e78c:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 800e790:	2300      	movs	r3, #0
 800e792:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 800e796:	e780      	b.n	800e69a <_vfprintf_r+0x51a>
 800e798:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 800e79a:	e7a7      	b.n	800e6ec <_vfprintf_r+0x56c>
 800e79c:	7fefffff 	.word	0x7fefffff
 800e7a0:	08091860 	.word	0x08091860
 800e7a4:	08091864 	.word	0x08091864
 800e7a8:	08091868 	.word	0x08091868
 800e7ac:	0809186c 	.word	0x0809186c
 800e7b0:	08091870 	.word	0x08091870
 800e7b4:	08091881 	.word	0x08091881
 800e7b8:	40300000 	.word	0x40300000
 800e7bc:	3fe00000 	.word	0x3fe00000
 800e7c0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e7c2:	9624      	str	r6, [sp, #144]	@ 0x90
 800e7c4:	7bd9      	ldrb	r1, [r3, #15]
 800e7c6:	2030      	movs	r0, #48	@ 0x30
 800e7c8:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800e7ca:	1e53      	subs	r3, r2, #1
 800e7cc:	9324      	str	r3, [sp, #144]	@ 0x90
 800e7ce:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 800e7d2:	428b      	cmp	r3, r1
 800e7d4:	f000 814a 	beq.w	800ea6c <_vfprintf_r+0x8ec>
 800e7d8:	2b39      	cmp	r3, #57	@ 0x39
 800e7da:	bf0b      	itete	eq
 800e7dc:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 800e7de:	3301      	addne	r3, #1
 800e7e0:	7a9b      	ldrbeq	r3, [r3, #10]
 800e7e2:	b2db      	uxtbne	r3, r3
 800e7e4:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e7e8:	eba6 0308 	sub.w	r3, r6, r8
 800e7ec:	9304      	str	r3, [sp, #16]
 800e7ee:	9b08      	ldr	r3, [sp, #32]
 800e7f0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800e7f2:	2b47      	cmp	r3, #71	@ 0x47
 800e7f4:	f040 8189 	bne.w	800eb0a <_vfprintf_r+0x98a>
 800e7f8:	1cf1      	adds	r1, r6, #3
 800e7fa:	db02      	blt.n	800e802 <_vfprintf_r+0x682>
 800e7fc:	45b1      	cmp	r9, r6
 800e7fe:	f280 81a7 	bge.w	800eb50 <_vfprintf_r+0x9d0>
 800e802:	9b06      	ldr	r3, [sp, #24]
 800e804:	3b02      	subs	r3, #2
 800e806:	9306      	str	r3, [sp, #24]
 800e808:	9906      	ldr	r1, [sp, #24]
 800e80a:	f89d 2018 	ldrb.w	r2, [sp, #24]
 800e80e:	f021 0120 	bic.w	r1, r1, #32
 800e812:	2941      	cmp	r1, #65	@ 0x41
 800e814:	bf08      	it	eq
 800e816:	320f      	addeq	r2, #15
 800e818:	f106 33ff 	add.w	r3, r6, #4294967295	@ 0xffffffff
 800e81c:	bf06      	itte	eq
 800e81e:	b2d2      	uxtbeq	r2, r2
 800e820:	2101      	moveq	r1, #1
 800e822:	2100      	movne	r1, #0
 800e824:	2b00      	cmp	r3, #0
 800e826:	9320      	str	r3, [sp, #128]	@ 0x80
 800e828:	bfb8      	it	lt
 800e82a:	f1c6 0301 	rsblt	r3, r6, #1
 800e82e:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 800e832:	bfb4      	ite	lt
 800e834:	222d      	movlt	r2, #45	@ 0x2d
 800e836:	222b      	movge	r2, #43	@ 0x2b
 800e838:	2b09      	cmp	r3, #9
 800e83a:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 800e83e:	f340 817a 	ble.w	800eb36 <_vfprintf_r+0x9b6>
 800e842:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 800e846:	270a      	movs	r7, #10
 800e848:	4602      	mov	r2, r0
 800e84a:	fbb3 f6f7 	udiv	r6, r3, r7
 800e84e:	fb07 3116 	mls	r1, r7, r6, r3
 800e852:	3130      	adds	r1, #48	@ 0x30
 800e854:	f802 1c01 	strb.w	r1, [r2, #-1]
 800e858:	4619      	mov	r1, r3
 800e85a:	2963      	cmp	r1, #99	@ 0x63
 800e85c:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
 800e860:	4633      	mov	r3, r6
 800e862:	dcf1      	bgt.n	800e848 <_vfprintf_r+0x6c8>
 800e864:	3330      	adds	r3, #48	@ 0x30
 800e866:	1e91      	subs	r1, r2, #2
 800e868:	f800 3c01 	strb.w	r3, [r0, #-1]
 800e86c:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 800e870:	460b      	mov	r3, r1
 800e872:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 800e876:	4283      	cmp	r3, r0
 800e878:	f0c0 8158 	bcc.w	800eb2c <_vfprintf_r+0x9ac>
 800e87c:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 800e880:	1a9b      	subs	r3, r3, r2
 800e882:	4281      	cmp	r1, r0
 800e884:	bf88      	it	hi
 800e886:	2300      	movhi	r3, #0
 800e888:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 800e88c:	441a      	add	r2, r3
 800e88e:	ab22      	add	r3, sp, #136	@ 0x88
 800e890:	1ad3      	subs	r3, r2, r3
 800e892:	9a04      	ldr	r2, [sp, #16]
 800e894:	9318      	str	r3, [sp, #96]	@ 0x60
 800e896:	2a01      	cmp	r2, #1
 800e898:	eb03 0902 	add.w	r9, r3, r2
 800e89c:	dc01      	bgt.n	800e8a2 <_vfprintf_r+0x722>
 800e89e:	07ea      	lsls	r2, r5, #31
 800e8a0:	d501      	bpl.n	800e8a6 <_vfprintf_r+0x726>
 800e8a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e8a4:	4499      	add	r9, r3
 800e8a6:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 800e8aa:	2700      	movs	r7, #0
 800e8ac:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 800e8b0:	9311      	str	r3, [sp, #68]	@ 0x44
 800e8b2:	9708      	str	r7, [sp, #32]
 800e8b4:	463e      	mov	r6, r7
 800e8b6:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	f040 8191 	bne.w	800ebe0 <_vfprintf_r+0xa60>
 800e8be:	2300      	movs	r3, #0
 800e8c0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800e8c2:	9310      	str	r3, [sp, #64]	@ 0x40
 800e8c4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e8c6:	454b      	cmp	r3, r9
 800e8c8:	bfb8      	it	lt
 800e8ca:	464b      	movlt	r3, r9
 800e8cc:	9311      	str	r3, [sp, #68]	@ 0x44
 800e8ce:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 800e8d2:	b113      	cbz	r3, 800e8da <_vfprintf_r+0x75a>
 800e8d4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e8d6:	3301      	adds	r3, #1
 800e8d8:	9311      	str	r3, [sp, #68]	@ 0x44
 800e8da:	f015 0302 	ands.w	r3, r5, #2
 800e8de:	931c      	str	r3, [sp, #112]	@ 0x70
 800e8e0:	bf1e      	ittt	ne
 800e8e2:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 800e8e4:	3302      	addne	r3, #2
 800e8e6:	9311      	strne	r3, [sp, #68]	@ 0x44
 800e8e8:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 800e8ec:	931d      	str	r3, [sp, #116]	@ 0x74
 800e8ee:	d122      	bne.n	800e936 <_vfprintf_r+0x7b6>
 800e8f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e8f2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e8f4:	1a9b      	subs	r3, r3, r2
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e8fa:	dd1c      	ble.n	800e936 <_vfprintf_r+0x7b6>
 800e8fc:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800e8fe:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 800e902:	2810      	cmp	r0, #16
 800e904:	489f      	ldr	r0, [pc, #636]	@ (800eb84 <_vfprintf_r+0xa04>)
 800e906:	6020      	str	r0, [r4, #0]
 800e908:	f102 0201 	add.w	r2, r2, #1
 800e90c:	f104 0108 	add.w	r1, r4, #8
 800e910:	f300 8297 	bgt.w	800ee42 <_vfprintf_r+0xcc2>
 800e914:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800e916:	6060      	str	r0, [r4, #4]
 800e918:	4403      	add	r3, r0
 800e91a:	2a07      	cmp	r2, #7
 800e91c:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800e920:	f340 82a4 	ble.w	800ee6c <_vfprintf_r+0xcec>
 800e924:	9803      	ldr	r0, [sp, #12]
 800e926:	aa26      	add	r2, sp, #152	@ 0x98
 800e928:	4659      	mov	r1, fp
 800e92a:	f000 fe95 	bl	800f658 <__sprint_r>
 800e92e:	2800      	cmp	r0, #0
 800e930:	f040 85ed 	bne.w	800f50e <_vfprintf_r+0x138e>
 800e934:	ac29      	add	r4, sp, #164	@ 0xa4
 800e936:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 800e93a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800e93c:	b16a      	cbz	r2, 800e95a <_vfprintf_r+0x7da>
 800e93e:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 800e942:	6022      	str	r2, [r4, #0]
 800e944:	2201      	movs	r2, #1
 800e946:	4413      	add	r3, r2
 800e948:	9328      	str	r3, [sp, #160]	@ 0xa0
 800e94a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800e94c:	6062      	str	r2, [r4, #4]
 800e94e:	4413      	add	r3, r2
 800e950:	2b07      	cmp	r3, #7
 800e952:	9327      	str	r3, [sp, #156]	@ 0x9c
 800e954:	f300 828c 	bgt.w	800ee70 <_vfprintf_r+0xcf0>
 800e958:	3408      	adds	r4, #8
 800e95a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e95c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800e95e:	b162      	cbz	r2, 800e97a <_vfprintf_r+0x7fa>
 800e960:	aa1f      	add	r2, sp, #124	@ 0x7c
 800e962:	6022      	str	r2, [r4, #0]
 800e964:	2202      	movs	r2, #2
 800e966:	4413      	add	r3, r2
 800e968:	9328      	str	r3, [sp, #160]	@ 0xa0
 800e96a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800e96c:	6062      	str	r2, [r4, #4]
 800e96e:	3301      	adds	r3, #1
 800e970:	2b07      	cmp	r3, #7
 800e972:	9327      	str	r3, [sp, #156]	@ 0x9c
 800e974:	f300 8286 	bgt.w	800ee84 <_vfprintf_r+0xd04>
 800e978:	3408      	adds	r4, #8
 800e97a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e97c:	2b80      	cmp	r3, #128	@ 0x80
 800e97e:	d122      	bne.n	800e9c6 <_vfprintf_r+0x846>
 800e980:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e982:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e984:	1a9b      	subs	r3, r3, r2
 800e986:	2b00      	cmp	r3, #0
 800e988:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e98a:	dd1c      	ble.n	800e9c6 <_vfprintf_r+0x846>
 800e98c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800e98e:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 800e992:	2810      	cmp	r0, #16
 800e994:	487c      	ldr	r0, [pc, #496]	@ (800eb88 <_vfprintf_r+0xa08>)
 800e996:	6020      	str	r0, [r4, #0]
 800e998:	f102 0201 	add.w	r2, r2, #1
 800e99c:	f104 0108 	add.w	r1, r4, #8
 800e9a0:	f300 827a 	bgt.w	800ee98 <_vfprintf_r+0xd18>
 800e9a4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800e9a6:	6060      	str	r0, [r4, #4]
 800e9a8:	4403      	add	r3, r0
 800e9aa:	2a07      	cmp	r2, #7
 800e9ac:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800e9b0:	f340 8287 	ble.w	800eec2 <_vfprintf_r+0xd42>
 800e9b4:	9803      	ldr	r0, [sp, #12]
 800e9b6:	aa26      	add	r2, sp, #152	@ 0x98
 800e9b8:	4659      	mov	r1, fp
 800e9ba:	f000 fe4d 	bl	800f658 <__sprint_r>
 800e9be:	2800      	cmp	r0, #0
 800e9c0:	f040 85a5 	bne.w	800f50e <_vfprintf_r+0x138e>
 800e9c4:	ac29      	add	r4, sp, #164	@ 0xa4
 800e9c6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e9c8:	eba3 0309 	sub.w	r3, r3, r9
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	9310      	str	r3, [sp, #64]	@ 0x40
 800e9d0:	dd1c      	ble.n	800ea0c <_vfprintf_r+0x88c>
 800e9d2:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800e9d4:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 800e9d8:	2810      	cmp	r0, #16
 800e9da:	486b      	ldr	r0, [pc, #428]	@ (800eb88 <_vfprintf_r+0xa08>)
 800e9dc:	6020      	str	r0, [r4, #0]
 800e9de:	f102 0201 	add.w	r2, r2, #1
 800e9e2:	f104 0108 	add.w	r1, r4, #8
 800e9e6:	f300 826e 	bgt.w	800eec6 <_vfprintf_r+0xd46>
 800e9ea:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800e9ec:	6060      	str	r0, [r4, #4]
 800e9ee:	4403      	add	r3, r0
 800e9f0:	2a07      	cmp	r2, #7
 800e9f2:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800e9f6:	f340 827b 	ble.w	800eef0 <_vfprintf_r+0xd70>
 800e9fa:	9803      	ldr	r0, [sp, #12]
 800e9fc:	aa26      	add	r2, sp, #152	@ 0x98
 800e9fe:	4659      	mov	r1, fp
 800ea00:	f000 fe2a 	bl	800f658 <__sprint_r>
 800ea04:	2800      	cmp	r0, #0
 800ea06:	f040 8582 	bne.w	800f50e <_vfprintf_r+0x138e>
 800ea0a:	ac29      	add	r4, sp, #164	@ 0xa4
 800ea0c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800ea0e:	9310      	str	r3, [sp, #64]	@ 0x40
 800ea10:	05e8      	lsls	r0, r5, #23
 800ea12:	f100 8273 	bmi.w	800eefc <_vfprintf_r+0xd7c>
 800ea16:	444b      	add	r3, r9
 800ea18:	9328      	str	r3, [sp, #160]	@ 0xa0
 800ea1a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800ea1c:	3301      	adds	r3, #1
 800ea1e:	2b07      	cmp	r3, #7
 800ea20:	e9c4 8900 	strd	r8, r9, [r4]
 800ea24:	9327      	str	r3, [sp, #156]	@ 0x9c
 800ea26:	f300 82af 	bgt.w	800ef88 <_vfprintf_r+0xe08>
 800ea2a:	3408      	adds	r4, #8
 800ea2c:	0768      	lsls	r0, r5, #29
 800ea2e:	f100 8550 	bmi.w	800f4d2 <_vfprintf_r+0x1352>
 800ea32:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ea36:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800ea38:	428a      	cmp	r2, r1
 800ea3a:	bfac      	ite	ge
 800ea3c:	189b      	addge	r3, r3, r2
 800ea3e:	185b      	addlt	r3, r3, r1
 800ea40:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ea42:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800ea44:	b13b      	cbz	r3, 800ea56 <_vfprintf_r+0x8d6>
 800ea46:	9803      	ldr	r0, [sp, #12]
 800ea48:	aa26      	add	r2, sp, #152	@ 0x98
 800ea4a:	4659      	mov	r1, fp
 800ea4c:	f000 fe04 	bl	800f658 <__sprint_r>
 800ea50:	2800      	cmp	r0, #0
 800ea52:	f040 855c 	bne.w	800f50e <_vfprintf_r+0x138e>
 800ea56:	2300      	movs	r3, #0
 800ea58:	9327      	str	r3, [sp, #156]	@ 0x9c
 800ea5a:	f1ba 0f00 	cmp.w	sl, #0
 800ea5e:	f040 8572 	bne.w	800f546 <_vfprintf_r+0x13c6>
 800ea62:	9e07      	ldr	r6, [sp, #28]
 800ea64:	ac29      	add	r4, sp, #164	@ 0xa4
 800ea66:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 800ea6a:	e407      	b.n	800e27c <_vfprintf_r+0xfc>
 800ea6c:	f802 0c01 	strb.w	r0, [r2, #-1]
 800ea70:	e6aa      	b.n	800e7c8 <_vfprintf_r+0x648>
 800ea72:	f803 0b01 	strb.w	r0, [r3], #1
 800ea76:	e675      	b.n	800e764 <_vfprintf_r+0x5e4>
 800ea78:	9b08      	ldr	r3, [sp, #32]
 800ea7a:	2b46      	cmp	r3, #70	@ 0x46
 800ea7c:	d005      	beq.n	800ea8a <_vfprintf_r+0x90a>
 800ea7e:	2b45      	cmp	r3, #69	@ 0x45
 800ea80:	d11a      	bne.n	800eab8 <_vfprintf_r+0x938>
 800ea82:	f109 0601 	add.w	r6, r9, #1
 800ea86:	2102      	movs	r1, #2
 800ea88:	e001      	b.n	800ea8e <_vfprintf_r+0x90e>
 800ea8a:	464e      	mov	r6, r9
 800ea8c:	2103      	movs	r1, #3
 800ea8e:	ab24      	add	r3, sp, #144	@ 0x90
 800ea90:	9301      	str	r3, [sp, #4]
 800ea92:	ab21      	add	r3, sp, #132	@ 0x84
 800ea94:	9300      	str	r3, [sp, #0]
 800ea96:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 800ea9a:	ab20      	add	r3, sp, #128	@ 0x80
 800ea9c:	9803      	ldr	r0, [sp, #12]
 800ea9e:	4632      	mov	r2, r6
 800eaa0:	f002 fa06 	bl	8010eb0 <_dtoa_r>
 800eaa4:	9b08      	ldr	r3, [sp, #32]
 800eaa6:	2b47      	cmp	r3, #71	@ 0x47
 800eaa8:	4680      	mov	r8, r0
 800eaaa:	d119      	bne.n	800eae0 <_vfprintf_r+0x960>
 800eaac:	07e8      	lsls	r0, r5, #31
 800eaae:	d405      	bmi.n	800eabc <_vfprintf_r+0x93c>
 800eab0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800eab2:	eba3 0308 	sub.w	r3, r3, r8
 800eab6:	e699      	b.n	800e7ec <_vfprintf_r+0x66c>
 800eab8:	464e      	mov	r6, r9
 800eaba:	e7e4      	b.n	800ea86 <_vfprintf_r+0x906>
 800eabc:	eb08 0706 	add.w	r7, r8, r6
 800eac0:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 800eac4:	2200      	movs	r2, #0
 800eac6:	2300      	movs	r3, #0
 800eac8:	f7f2 f81e 	bl	8000b08 <__aeabi_dcmpeq>
 800eacc:	b100      	cbz	r0, 800ead0 <_vfprintf_r+0x950>
 800eace:	9724      	str	r7, [sp, #144]	@ 0x90
 800ead0:	2230      	movs	r2, #48	@ 0x30
 800ead2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ead4:	429f      	cmp	r7, r3
 800ead6:	d9eb      	bls.n	800eab0 <_vfprintf_r+0x930>
 800ead8:	1c59      	adds	r1, r3, #1
 800eada:	9124      	str	r1, [sp, #144]	@ 0x90
 800eadc:	701a      	strb	r2, [r3, #0]
 800eade:	e7f8      	b.n	800ead2 <_vfprintf_r+0x952>
 800eae0:	9b08      	ldr	r3, [sp, #32]
 800eae2:	2b46      	cmp	r3, #70	@ 0x46
 800eae4:	eb00 0706 	add.w	r7, r0, r6
 800eae8:	d1ea      	bne.n	800eac0 <_vfprintf_r+0x940>
 800eaea:	7803      	ldrb	r3, [r0, #0]
 800eaec:	2b30      	cmp	r3, #48	@ 0x30
 800eaee:	d109      	bne.n	800eb04 <_vfprintf_r+0x984>
 800eaf0:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	f7f2 f806 	bl	8000b08 <__aeabi_dcmpeq>
 800eafc:	b910      	cbnz	r0, 800eb04 <_vfprintf_r+0x984>
 800eafe:	f1c6 0601 	rsb	r6, r6, #1
 800eb02:	9620      	str	r6, [sp, #128]	@ 0x80
 800eb04:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800eb06:	441f      	add	r7, r3
 800eb08:	e7da      	b.n	800eac0 <_vfprintf_r+0x940>
 800eb0a:	9b08      	ldr	r3, [sp, #32]
 800eb0c:	2b46      	cmp	r3, #70	@ 0x46
 800eb0e:	f47f ae7b 	bne.w	800e808 <_vfprintf_r+0x688>
 800eb12:	f005 0301 	and.w	r3, r5, #1
 800eb16:	2e00      	cmp	r6, #0
 800eb18:	ea43 0309 	orr.w	r3, r3, r9
 800eb1c:	dd25      	ble.n	800eb6a <_vfprintf_r+0x9ea>
 800eb1e:	b37b      	cbz	r3, 800eb80 <_vfprintf_r+0xa00>
 800eb20:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800eb22:	18f3      	adds	r3, r6, r3
 800eb24:	4499      	add	r9, r3
 800eb26:	2366      	movs	r3, #102	@ 0x66
 800eb28:	9306      	str	r3, [sp, #24]
 800eb2a:	e033      	b.n	800eb94 <_vfprintf_r+0xa14>
 800eb2c:	f813 7b01 	ldrb.w	r7, [r3], #1
 800eb30:	f806 7f01 	strb.w	r7, [r6, #1]!
 800eb34:	e69f      	b.n	800e876 <_vfprintf_r+0x6f6>
 800eb36:	b941      	cbnz	r1, 800eb4a <_vfprintf_r+0x9ca>
 800eb38:	2230      	movs	r2, #48	@ 0x30
 800eb3a:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 800eb3e:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 800eb42:	3330      	adds	r3, #48	@ 0x30
 800eb44:	f802 3b01 	strb.w	r3, [r2], #1
 800eb48:	e6a1      	b.n	800e88e <_vfprintf_r+0x70e>
 800eb4a:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 800eb4e:	e7f8      	b.n	800eb42 <_vfprintf_r+0x9c2>
 800eb50:	9b04      	ldr	r3, [sp, #16]
 800eb52:	42b3      	cmp	r3, r6
 800eb54:	dd0d      	ble.n	800eb72 <_vfprintf_r+0x9f2>
 800eb56:	9b04      	ldr	r3, [sp, #16]
 800eb58:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800eb5a:	2e00      	cmp	r6, #0
 800eb5c:	eb03 0902 	add.w	r9, r3, r2
 800eb60:	dc0c      	bgt.n	800eb7c <_vfprintf_r+0x9fc>
 800eb62:	f1c6 0301 	rsb	r3, r6, #1
 800eb66:	4499      	add	r9, r3
 800eb68:	e008      	b.n	800eb7c <_vfprintf_r+0x9fc>
 800eb6a:	b17b      	cbz	r3, 800eb8c <_vfprintf_r+0xa0c>
 800eb6c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800eb6e:	3301      	adds	r3, #1
 800eb70:	e7d8      	b.n	800eb24 <_vfprintf_r+0x9a4>
 800eb72:	07eb      	lsls	r3, r5, #31
 800eb74:	d521      	bpl.n	800ebba <_vfprintf_r+0xa3a>
 800eb76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800eb78:	eb06 0903 	add.w	r9, r6, r3
 800eb7c:	2367      	movs	r3, #103	@ 0x67
 800eb7e:	e7d3      	b.n	800eb28 <_vfprintf_r+0x9a8>
 800eb80:	46b1      	mov	r9, r6
 800eb82:	e7d0      	b.n	800eb26 <_vfprintf_r+0x9a6>
 800eb84:	080918a4 	.word	0x080918a4
 800eb88:	08091894 	.word	0x08091894
 800eb8c:	2366      	movs	r3, #102	@ 0x66
 800eb8e:	9306      	str	r3, [sp, #24]
 800eb90:	f04f 0901 	mov.w	r9, #1
 800eb94:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 800eb98:	9308      	str	r3, [sp, #32]
 800eb9a:	d01f      	beq.n	800ebdc <_vfprintf_r+0xa5c>
 800eb9c:	2700      	movs	r7, #0
 800eb9e:	2e00      	cmp	r6, #0
 800eba0:	9708      	str	r7, [sp, #32]
 800eba2:	f77f ae88 	ble.w	800e8b6 <_vfprintf_r+0x736>
 800eba6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eba8:	781b      	ldrb	r3, [r3, #0]
 800ebaa:	2bff      	cmp	r3, #255	@ 0xff
 800ebac:	d107      	bne.n	800ebbe <_vfprintf_r+0xa3e>
 800ebae:	9b08      	ldr	r3, [sp, #32]
 800ebb0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ebb2:	443b      	add	r3, r7
 800ebb4:	fb02 9903 	mla	r9, r2, r3, r9
 800ebb8:	e67d      	b.n	800e8b6 <_vfprintf_r+0x736>
 800ebba:	46b1      	mov	r9, r6
 800ebbc:	e7de      	b.n	800eb7c <_vfprintf_r+0x9fc>
 800ebbe:	42b3      	cmp	r3, r6
 800ebc0:	daf5      	bge.n	800ebae <_vfprintf_r+0xa2e>
 800ebc2:	1af6      	subs	r6, r6, r3
 800ebc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebc6:	785b      	ldrb	r3, [r3, #1]
 800ebc8:	b133      	cbz	r3, 800ebd8 <_vfprintf_r+0xa58>
 800ebca:	9b08      	ldr	r3, [sp, #32]
 800ebcc:	3301      	adds	r3, #1
 800ebce:	9308      	str	r3, [sp, #32]
 800ebd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebd2:	3301      	adds	r3, #1
 800ebd4:	9309      	str	r3, [sp, #36]	@ 0x24
 800ebd6:	e7e6      	b.n	800eba6 <_vfprintf_r+0xa26>
 800ebd8:	3701      	adds	r7, #1
 800ebda:	e7e4      	b.n	800eba6 <_vfprintf_r+0xa26>
 800ebdc:	9f08      	ldr	r7, [sp, #32]
 800ebde:	e66a      	b.n	800e8b6 <_vfprintf_r+0x736>
 800ebe0:	232d      	movs	r3, #45	@ 0x2d
 800ebe2:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800ebe6:	e66a      	b.n	800e8be <_vfprintf_r+0x73e>
 800ebe8:	06af      	lsls	r7, r5, #26
 800ebea:	d507      	bpl.n	800ebfc <_vfprintf_r+0xa7c>
 800ebec:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ebee:	6833      	ldr	r3, [r6, #0]
 800ebf0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ebf2:	17d2      	asrs	r2, r2, #31
 800ebf4:	e9c3 1200 	strd	r1, r2, [r3]
 800ebf8:	3604      	adds	r6, #4
 800ebfa:	e734      	b.n	800ea66 <_vfprintf_r+0x8e6>
 800ebfc:	06e8      	lsls	r0, r5, #27
 800ebfe:	d503      	bpl.n	800ec08 <_vfprintf_r+0xa88>
 800ec00:	6833      	ldr	r3, [r6, #0]
 800ec02:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ec04:	601a      	str	r2, [r3, #0]
 800ec06:	e7f7      	b.n	800ebf8 <_vfprintf_r+0xa78>
 800ec08:	0669      	lsls	r1, r5, #25
 800ec0a:	d503      	bpl.n	800ec14 <_vfprintf_r+0xa94>
 800ec0c:	6833      	ldr	r3, [r6, #0]
 800ec0e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ec10:	801a      	strh	r2, [r3, #0]
 800ec12:	e7f1      	b.n	800ebf8 <_vfprintf_r+0xa78>
 800ec14:	05aa      	lsls	r2, r5, #22
 800ec16:	d5f3      	bpl.n	800ec00 <_vfprintf_r+0xa80>
 800ec18:	6833      	ldr	r3, [r6, #0]
 800ec1a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ec1c:	701a      	strb	r2, [r3, #0]
 800ec1e:	e7eb      	b.n	800ebf8 <_vfprintf_r+0xa78>
 800ec20:	f045 0510 	orr.w	r5, r5, #16
 800ec24:	f015 0320 	ands.w	r3, r5, #32
 800ec28:	d020      	beq.n	800ec6c <_vfprintf_r+0xaec>
 800ec2a:	3607      	adds	r6, #7
 800ec2c:	f026 0307 	bic.w	r3, r6, #7
 800ec30:	461a      	mov	r2, r3
 800ec32:	685f      	ldr	r7, [r3, #4]
 800ec34:	f852 6b08 	ldr.w	r6, [r2], #8
 800ec38:	9207      	str	r2, [sp, #28]
 800ec3a:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 800ec3e:	2300      	movs	r3, #0
 800ec40:	2200      	movs	r2, #0
 800ec42:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 800ec46:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 800ec4a:	f000 8491 	beq.w	800f570 <_vfprintf_r+0x13f0>
 800ec4e:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 800ec52:	9208      	str	r2, [sp, #32]
 800ec54:	ea56 0207 	orrs.w	r2, r6, r7
 800ec58:	f040 848f 	bne.w	800f57a <_vfprintf_r+0x13fa>
 800ec5c:	f1b9 0f00 	cmp.w	r9, #0
 800ec60:	f000 80db 	beq.w	800ee1a <_vfprintf_r+0xc9a>
 800ec64:	2b01      	cmp	r3, #1
 800ec66:	f040 848b 	bne.w	800f580 <_vfprintf_r+0x1400>
 800ec6a:	e083      	b.n	800ed74 <_vfprintf_r+0xbf4>
 800ec6c:	4632      	mov	r2, r6
 800ec6e:	f015 0710 	ands.w	r7, r5, #16
 800ec72:	f852 6b04 	ldr.w	r6, [r2], #4
 800ec76:	9207      	str	r2, [sp, #28]
 800ec78:	d001      	beq.n	800ec7e <_vfprintf_r+0xafe>
 800ec7a:	461f      	mov	r7, r3
 800ec7c:	e7dd      	b.n	800ec3a <_vfprintf_r+0xaba>
 800ec7e:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 800ec82:	d001      	beq.n	800ec88 <_vfprintf_r+0xb08>
 800ec84:	b2b6      	uxth	r6, r6
 800ec86:	e7d8      	b.n	800ec3a <_vfprintf_r+0xaba>
 800ec88:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 800ec8c:	d0d5      	beq.n	800ec3a <_vfprintf_r+0xaba>
 800ec8e:	b2f6      	uxtb	r6, r6
 800ec90:	e7f3      	b.n	800ec7a <_vfprintf_r+0xafa>
 800ec92:	4633      	mov	r3, r6
 800ec94:	2278      	movs	r2, #120	@ 0x78
 800ec96:	f853 6b04 	ldr.w	r6, [r3], #4
 800ec9a:	9307      	str	r3, [sp, #28]
 800ec9c:	f647 0330 	movw	r3, #30768	@ 0x7830
 800eca0:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 800eca4:	4b93      	ldr	r3, [pc, #588]	@ (800eef4 <_vfprintf_r+0xd74>)
 800eca6:	9319      	str	r3, [sp, #100]	@ 0x64
 800eca8:	2700      	movs	r7, #0
 800ecaa:	f045 0502 	orr.w	r5, r5, #2
 800ecae:	2302      	movs	r3, #2
 800ecb0:	9206      	str	r2, [sp, #24]
 800ecb2:	e7c5      	b.n	800ec40 <_vfprintf_r+0xac0>
 800ecb4:	4633      	mov	r3, r6
 800ecb6:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 800ecba:	f853 8b04 	ldr.w	r8, [r3], #4
 800ecbe:	9307      	str	r3, [sp, #28]
 800ecc0:	f04f 0600 	mov.w	r6, #0
 800ecc4:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 800ecc8:	d00f      	beq.n	800ecea <_vfprintf_r+0xb6a>
 800ecca:	464a      	mov	r2, r9
 800eccc:	4631      	mov	r1, r6
 800ecce:	4640      	mov	r0, r8
 800ecd0:	f7f1 fa9e 	bl	8000210 <memchr>
 800ecd4:	4682      	mov	sl, r0
 800ecd6:	2800      	cmp	r0, #0
 800ecd8:	f43f ac7a 	beq.w	800e5d0 <_vfprintf_r+0x450>
 800ecdc:	eba0 0908 	sub.w	r9, r0, r8
 800ece0:	46b2      	mov	sl, r6
 800ece2:	9610      	str	r6, [sp, #64]	@ 0x40
 800ece4:	4637      	mov	r7, r6
 800ece6:	9608      	str	r6, [sp, #32]
 800ece8:	e5ec      	b.n	800e8c4 <_vfprintf_r+0x744>
 800ecea:	4640      	mov	r0, r8
 800ecec:	f7f1 fae0 	bl	80002b0 <strlen>
 800ecf0:	46b2      	mov	sl, r6
 800ecf2:	4681      	mov	r9, r0
 800ecf4:	e46c      	b.n	800e5d0 <_vfprintf_r+0x450>
 800ecf6:	f045 0510 	orr.w	r5, r5, #16
 800ecfa:	f015 0320 	ands.w	r3, r5, #32
 800ecfe:	d009      	beq.n	800ed14 <_vfprintf_r+0xb94>
 800ed00:	3607      	adds	r6, #7
 800ed02:	f026 0307 	bic.w	r3, r6, #7
 800ed06:	461a      	mov	r2, r3
 800ed08:	685f      	ldr	r7, [r3, #4]
 800ed0a:	f852 6b08 	ldr.w	r6, [r2], #8
 800ed0e:	9207      	str	r2, [sp, #28]
 800ed10:	2301      	movs	r3, #1
 800ed12:	e795      	b.n	800ec40 <_vfprintf_r+0xac0>
 800ed14:	4632      	mov	r2, r6
 800ed16:	f015 0710 	ands.w	r7, r5, #16
 800ed1a:	f852 6b04 	ldr.w	r6, [r2], #4
 800ed1e:	9207      	str	r2, [sp, #28]
 800ed20:	d001      	beq.n	800ed26 <_vfprintf_r+0xba6>
 800ed22:	461f      	mov	r7, r3
 800ed24:	e7f4      	b.n	800ed10 <_vfprintf_r+0xb90>
 800ed26:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 800ed2a:	d001      	beq.n	800ed30 <_vfprintf_r+0xbb0>
 800ed2c:	b2b6      	uxth	r6, r6
 800ed2e:	e7ef      	b.n	800ed10 <_vfprintf_r+0xb90>
 800ed30:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 800ed34:	d0ec      	beq.n	800ed10 <_vfprintf_r+0xb90>
 800ed36:	b2f6      	uxtb	r6, r6
 800ed38:	e7f3      	b.n	800ed22 <_vfprintf_r+0xba2>
 800ed3a:	4b6f      	ldr	r3, [pc, #444]	@ (800eef8 <_vfprintf_r+0xd78>)
 800ed3c:	f7ff bb33 	b.w	800e3a6 <_vfprintf_r+0x226>
 800ed40:	4632      	mov	r2, r6
 800ed42:	f015 0710 	ands.w	r7, r5, #16
 800ed46:	f852 6b04 	ldr.w	r6, [r2], #4
 800ed4a:	9207      	str	r2, [sp, #28]
 800ed4c:	d002      	beq.n	800ed54 <_vfprintf_r+0xbd4>
 800ed4e:	461f      	mov	r7, r3
 800ed50:	f7ff bb36 	b.w	800e3c0 <_vfprintf_r+0x240>
 800ed54:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 800ed58:	d002      	beq.n	800ed60 <_vfprintf_r+0xbe0>
 800ed5a:	b2b6      	uxth	r6, r6
 800ed5c:	f7ff bb30 	b.w	800e3c0 <_vfprintf_r+0x240>
 800ed60:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 800ed64:	f43f ab2c 	beq.w	800e3c0 <_vfprintf_r+0x240>
 800ed68:	b2f6      	uxtb	r6, r6
 800ed6a:	e7f0      	b.n	800ed4e <_vfprintf_r+0xbce>
 800ed6c:	2e0a      	cmp	r6, #10
 800ed6e:	f177 0300 	sbcs.w	r3, r7, #0
 800ed72:	d207      	bcs.n	800ed84 <_vfprintf_r+0xc04>
 800ed74:	3630      	adds	r6, #48	@ 0x30
 800ed76:	b2f6      	uxtb	r6, r6
 800ed78:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 800ed7c:	f20d 1847 	addw	r8, sp, #327	@ 0x147
 800ed80:	f000 bc1a 	b.w	800f5b8 <_vfprintf_r+0x1438>
 800ed84:	2300      	movs	r3, #0
 800ed86:	9304      	str	r3, [sp, #16]
 800ed88:	9b08      	ldr	r3, [sp, #32]
 800ed8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ed8e:	ad52      	add	r5, sp, #328	@ 0x148
 800ed90:	9310      	str	r3, [sp, #64]	@ 0x40
 800ed92:	220a      	movs	r2, #10
 800ed94:	2300      	movs	r3, #0
 800ed96:	4630      	mov	r0, r6
 800ed98:	4639      	mov	r1, r7
 800ed9a:	f7f1 ff25 	bl	8000be8 <__aeabi_uldivmod>
 800ed9e:	9b04      	ldr	r3, [sp, #16]
 800eda0:	9011      	str	r0, [sp, #68]	@ 0x44
 800eda2:	3301      	adds	r3, #1
 800eda4:	9304      	str	r3, [sp, #16]
 800eda6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800eda8:	3230      	adds	r2, #48	@ 0x30
 800edaa:	468a      	mov	sl, r1
 800edac:	f105 38ff 	add.w	r8, r5, #4294967295	@ 0xffffffff
 800edb0:	f805 2c01 	strb.w	r2, [r5, #-1]
 800edb4:	b1d3      	cbz	r3, 800edec <_vfprintf_r+0xc6c>
 800edb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800edb8:	9a04      	ldr	r2, [sp, #16]
 800edba:	781b      	ldrb	r3, [r3, #0]
 800edbc:	429a      	cmp	r2, r3
 800edbe:	d115      	bne.n	800edec <_vfprintf_r+0xc6c>
 800edc0:	2aff      	cmp	r2, #255	@ 0xff
 800edc2:	d013      	beq.n	800edec <_vfprintf_r+0xc6c>
 800edc4:	2e0a      	cmp	r6, #10
 800edc6:	f177 0300 	sbcs.w	r3, r7, #0
 800edca:	d30f      	bcc.n	800edec <_vfprintf_r+0xc6c>
 800edcc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800edce:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800edd0:	eba8 0803 	sub.w	r8, r8, r3
 800edd4:	461a      	mov	r2, r3
 800edd6:	4640      	mov	r0, r8
 800edd8:	f001 fe8a 	bl	8010af0 <strncpy>
 800eddc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800edde:	785b      	ldrb	r3, [r3, #1]
 800ede0:	b11b      	cbz	r3, 800edea <_vfprintf_r+0xc6a>
 800ede2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ede4:	3301      	adds	r3, #1
 800ede6:	9309      	str	r3, [sp, #36]	@ 0x24
 800ede8:	2300      	movs	r3, #0
 800edea:	9304      	str	r3, [sp, #16]
 800edec:	2e0a      	cmp	r6, #10
 800edee:	f177 0700 	sbcs.w	r7, r7, #0
 800edf2:	f0c0 83e1 	bcc.w	800f5b8 <_vfprintf_r+0x1438>
 800edf6:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800edf8:	4657      	mov	r7, sl
 800edfa:	4645      	mov	r5, r8
 800edfc:	e7c9      	b.n	800ed92 <_vfprintf_r+0xc12>
 800edfe:	f006 030f 	and.w	r3, r6, #15
 800ee02:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ee04:	0936      	lsrs	r6, r6, #4
 800ee06:	5cd3      	ldrb	r3, [r2, r3]
 800ee08:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800ee0c:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 800ee10:	093f      	lsrs	r7, r7, #4
 800ee12:	ea56 0307 	orrs.w	r3, r6, r7
 800ee16:	d1f2      	bne.n	800edfe <_vfprintf_r+0xc7e>
 800ee18:	e3ce      	b.n	800f5b8 <_vfprintf_r+0x1438>
 800ee1a:	b91b      	cbnz	r3, 800ee24 <_vfprintf_r+0xca4>
 800ee1c:	07ed      	lsls	r5, r5, #31
 800ee1e:	d501      	bpl.n	800ee24 <_vfprintf_r+0xca4>
 800ee20:	2630      	movs	r6, #48	@ 0x30
 800ee22:	e7a9      	b.n	800ed78 <_vfprintf_r+0xbf8>
 800ee24:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 800ee28:	e3c6      	b.n	800f5b8 <_vfprintf_r+0x1438>
 800ee2a:	9b06      	ldr	r3, [sp, #24]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	f000 8390 	beq.w	800f552 <_vfprintf_r+0x13d2>
 800ee32:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 800ee36:	2300      	movs	r3, #0
 800ee38:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800ee3c:	9607      	str	r6, [sp, #28]
 800ee3e:	f7ff bb5c 	b.w	800e4fa <_vfprintf_r+0x37a>
 800ee42:	2010      	movs	r0, #16
 800ee44:	4403      	add	r3, r0
 800ee46:	2a07      	cmp	r2, #7
 800ee48:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800ee4c:	6060      	str	r0, [r4, #4]
 800ee4e:	dd08      	ble.n	800ee62 <_vfprintf_r+0xce2>
 800ee50:	9803      	ldr	r0, [sp, #12]
 800ee52:	aa26      	add	r2, sp, #152	@ 0x98
 800ee54:	4659      	mov	r1, fp
 800ee56:	f000 fbff 	bl	800f658 <__sprint_r>
 800ee5a:	2800      	cmp	r0, #0
 800ee5c:	f040 8357 	bne.w	800f50e <_vfprintf_r+0x138e>
 800ee60:	a929      	add	r1, sp, #164	@ 0xa4
 800ee62:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ee64:	3b10      	subs	r3, #16
 800ee66:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ee68:	460c      	mov	r4, r1
 800ee6a:	e547      	b.n	800e8fc <_vfprintf_r+0x77c>
 800ee6c:	460c      	mov	r4, r1
 800ee6e:	e562      	b.n	800e936 <_vfprintf_r+0x7b6>
 800ee70:	9803      	ldr	r0, [sp, #12]
 800ee72:	aa26      	add	r2, sp, #152	@ 0x98
 800ee74:	4659      	mov	r1, fp
 800ee76:	f000 fbef 	bl	800f658 <__sprint_r>
 800ee7a:	2800      	cmp	r0, #0
 800ee7c:	f040 8347 	bne.w	800f50e <_vfprintf_r+0x138e>
 800ee80:	ac29      	add	r4, sp, #164	@ 0xa4
 800ee82:	e56a      	b.n	800e95a <_vfprintf_r+0x7da>
 800ee84:	9803      	ldr	r0, [sp, #12]
 800ee86:	aa26      	add	r2, sp, #152	@ 0x98
 800ee88:	4659      	mov	r1, fp
 800ee8a:	f000 fbe5 	bl	800f658 <__sprint_r>
 800ee8e:	2800      	cmp	r0, #0
 800ee90:	f040 833d 	bne.w	800f50e <_vfprintf_r+0x138e>
 800ee94:	ac29      	add	r4, sp, #164	@ 0xa4
 800ee96:	e570      	b.n	800e97a <_vfprintf_r+0x7fa>
 800ee98:	2010      	movs	r0, #16
 800ee9a:	4403      	add	r3, r0
 800ee9c:	2a07      	cmp	r2, #7
 800ee9e:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800eea2:	6060      	str	r0, [r4, #4]
 800eea4:	dd08      	ble.n	800eeb8 <_vfprintf_r+0xd38>
 800eea6:	9803      	ldr	r0, [sp, #12]
 800eea8:	aa26      	add	r2, sp, #152	@ 0x98
 800eeaa:	4659      	mov	r1, fp
 800eeac:	f000 fbd4 	bl	800f658 <__sprint_r>
 800eeb0:	2800      	cmp	r0, #0
 800eeb2:	f040 832c 	bne.w	800f50e <_vfprintf_r+0x138e>
 800eeb6:	a929      	add	r1, sp, #164	@ 0xa4
 800eeb8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800eeba:	3b10      	subs	r3, #16
 800eebc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800eebe:	460c      	mov	r4, r1
 800eec0:	e564      	b.n	800e98c <_vfprintf_r+0x80c>
 800eec2:	460c      	mov	r4, r1
 800eec4:	e57f      	b.n	800e9c6 <_vfprintf_r+0x846>
 800eec6:	2010      	movs	r0, #16
 800eec8:	4403      	add	r3, r0
 800eeca:	2a07      	cmp	r2, #7
 800eecc:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800eed0:	6060      	str	r0, [r4, #4]
 800eed2:	dd08      	ble.n	800eee6 <_vfprintf_r+0xd66>
 800eed4:	9803      	ldr	r0, [sp, #12]
 800eed6:	aa26      	add	r2, sp, #152	@ 0x98
 800eed8:	4659      	mov	r1, fp
 800eeda:	f000 fbbd 	bl	800f658 <__sprint_r>
 800eede:	2800      	cmp	r0, #0
 800eee0:	f040 8315 	bne.w	800f50e <_vfprintf_r+0x138e>
 800eee4:	a929      	add	r1, sp, #164	@ 0xa4
 800eee6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800eee8:	3b10      	subs	r3, #16
 800eeea:	9310      	str	r3, [sp, #64]	@ 0x40
 800eeec:	460c      	mov	r4, r1
 800eeee:	e570      	b.n	800e9d2 <_vfprintf_r+0x852>
 800eef0:	460c      	mov	r4, r1
 800eef2:	e58b      	b.n	800ea0c <_vfprintf_r+0x88c>
 800eef4:	08091870 	.word	0x08091870
 800eef8:	08091881 	.word	0x08091881
 800eefc:	9b06      	ldr	r3, [sp, #24]
 800eefe:	2b65      	cmp	r3, #101	@ 0x65
 800ef00:	f340 8245 	ble.w	800f38e <_vfprintf_r+0x120e>
 800ef04:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ef08:	2200      	movs	r2, #0
 800ef0a:	2300      	movs	r3, #0
 800ef0c:	f7f1 fdfc 	bl	8000b08 <__aeabi_dcmpeq>
 800ef10:	2800      	cmp	r0, #0
 800ef12:	d06a      	beq.n	800efea <_vfprintf_r+0xe6a>
 800ef14:	4b73      	ldr	r3, [pc, #460]	@ (800f0e4 <_vfprintf_r+0xf64>)
 800ef16:	6023      	str	r3, [r4, #0]
 800ef18:	2301      	movs	r3, #1
 800ef1a:	6063      	str	r3, [r4, #4]
 800ef1c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ef1e:	3301      	adds	r3, #1
 800ef20:	9328      	str	r3, [sp, #160]	@ 0xa0
 800ef22:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800ef24:	3301      	adds	r3, #1
 800ef26:	2b07      	cmp	r3, #7
 800ef28:	9327      	str	r3, [sp, #156]	@ 0x9c
 800ef2a:	dc37      	bgt.n	800ef9c <_vfprintf_r+0xe1c>
 800ef2c:	3408      	adds	r4, #8
 800ef2e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ef30:	9a04      	ldr	r2, [sp, #16]
 800ef32:	4293      	cmp	r3, r2
 800ef34:	db02      	blt.n	800ef3c <_vfprintf_r+0xdbc>
 800ef36:	07e9      	lsls	r1, r5, #31
 800ef38:	f57f ad78 	bpl.w	800ea2c <_vfprintf_r+0x8ac>
 800ef3c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ef3e:	6023      	str	r3, [r4, #0]
 800ef40:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ef42:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ef44:	6063      	str	r3, [r4, #4]
 800ef46:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800ef48:	4413      	add	r3, r2
 800ef4a:	9328      	str	r3, [sp, #160]	@ 0xa0
 800ef4c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800ef4e:	3301      	adds	r3, #1
 800ef50:	2b07      	cmp	r3, #7
 800ef52:	9327      	str	r3, [sp, #156]	@ 0x9c
 800ef54:	dc2c      	bgt.n	800efb0 <_vfprintf_r+0xe30>
 800ef56:	3408      	adds	r4, #8
 800ef58:	9b04      	ldr	r3, [sp, #16]
 800ef5a:	1e5e      	subs	r6, r3, #1
 800ef5c:	2e00      	cmp	r6, #0
 800ef5e:	f77f ad65 	ble.w	800ea2c <_vfprintf_r+0x8ac>
 800ef62:	4f61      	ldr	r7, [pc, #388]	@ (800f0e8 <_vfprintf_r+0xf68>)
 800ef64:	f04f 0810 	mov.w	r8, #16
 800ef68:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800ef6c:	2e10      	cmp	r6, #16
 800ef6e:	f103 0301 	add.w	r3, r3, #1
 800ef72:	f104 0108 	add.w	r1, r4, #8
 800ef76:	6027      	str	r7, [r4, #0]
 800ef78:	dc24      	bgt.n	800efc4 <_vfprintf_r+0xe44>
 800ef7a:	6066      	str	r6, [r4, #4]
 800ef7c:	2b07      	cmp	r3, #7
 800ef7e:	4416      	add	r6, r2
 800ef80:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 800ef84:	f340 82a2 	ble.w	800f4cc <_vfprintf_r+0x134c>
 800ef88:	9803      	ldr	r0, [sp, #12]
 800ef8a:	aa26      	add	r2, sp, #152	@ 0x98
 800ef8c:	4659      	mov	r1, fp
 800ef8e:	f000 fb63 	bl	800f658 <__sprint_r>
 800ef92:	2800      	cmp	r0, #0
 800ef94:	f040 82bb 	bne.w	800f50e <_vfprintf_r+0x138e>
 800ef98:	ac29      	add	r4, sp, #164	@ 0xa4
 800ef9a:	e547      	b.n	800ea2c <_vfprintf_r+0x8ac>
 800ef9c:	9803      	ldr	r0, [sp, #12]
 800ef9e:	aa26      	add	r2, sp, #152	@ 0x98
 800efa0:	4659      	mov	r1, fp
 800efa2:	f000 fb59 	bl	800f658 <__sprint_r>
 800efa6:	2800      	cmp	r0, #0
 800efa8:	f040 82b1 	bne.w	800f50e <_vfprintf_r+0x138e>
 800efac:	ac29      	add	r4, sp, #164	@ 0xa4
 800efae:	e7be      	b.n	800ef2e <_vfprintf_r+0xdae>
 800efb0:	9803      	ldr	r0, [sp, #12]
 800efb2:	aa26      	add	r2, sp, #152	@ 0x98
 800efb4:	4659      	mov	r1, fp
 800efb6:	f000 fb4f 	bl	800f658 <__sprint_r>
 800efba:	2800      	cmp	r0, #0
 800efbc:	f040 82a7 	bne.w	800f50e <_vfprintf_r+0x138e>
 800efc0:	ac29      	add	r4, sp, #164	@ 0xa4
 800efc2:	e7c9      	b.n	800ef58 <_vfprintf_r+0xdd8>
 800efc4:	3210      	adds	r2, #16
 800efc6:	2b07      	cmp	r3, #7
 800efc8:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800efcc:	f8c4 8004 	str.w	r8, [r4, #4]
 800efd0:	dd08      	ble.n	800efe4 <_vfprintf_r+0xe64>
 800efd2:	9803      	ldr	r0, [sp, #12]
 800efd4:	aa26      	add	r2, sp, #152	@ 0x98
 800efd6:	4659      	mov	r1, fp
 800efd8:	f000 fb3e 	bl	800f658 <__sprint_r>
 800efdc:	2800      	cmp	r0, #0
 800efde:	f040 8296 	bne.w	800f50e <_vfprintf_r+0x138e>
 800efe2:	a929      	add	r1, sp, #164	@ 0xa4
 800efe4:	3e10      	subs	r6, #16
 800efe6:	460c      	mov	r4, r1
 800efe8:	e7be      	b.n	800ef68 <_vfprintf_r+0xde8>
 800efea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800efec:	2b00      	cmp	r3, #0
 800efee:	dc7d      	bgt.n	800f0ec <_vfprintf_r+0xf6c>
 800eff0:	4b3c      	ldr	r3, [pc, #240]	@ (800f0e4 <_vfprintf_r+0xf64>)
 800eff2:	6023      	str	r3, [r4, #0]
 800eff4:	2301      	movs	r3, #1
 800eff6:	6063      	str	r3, [r4, #4]
 800eff8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800effa:	3301      	adds	r3, #1
 800effc:	9328      	str	r3, [sp, #160]	@ 0xa0
 800effe:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800f000:	3301      	adds	r3, #1
 800f002:	2b07      	cmp	r3, #7
 800f004:	9327      	str	r3, [sp, #156]	@ 0x9c
 800f006:	dc46      	bgt.n	800f096 <_vfprintf_r+0xf16>
 800f008:	3408      	adds	r4, #8
 800f00a:	9904      	ldr	r1, [sp, #16]
 800f00c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f00e:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 800f010:	430b      	orrs	r3, r1
 800f012:	f005 0101 	and.w	r1, r5, #1
 800f016:	430b      	orrs	r3, r1
 800f018:	f43f ad08 	beq.w	800ea2c <_vfprintf_r+0x8ac>
 800f01c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f01e:	6023      	str	r3, [r4, #0]
 800f020:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f022:	6063      	str	r3, [r4, #4]
 800f024:	441a      	add	r2, r3
 800f026:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800f028:	9228      	str	r2, [sp, #160]	@ 0xa0
 800f02a:	3301      	adds	r3, #1
 800f02c:	2b07      	cmp	r3, #7
 800f02e:	9327      	str	r3, [sp, #156]	@ 0x9c
 800f030:	dc3b      	bgt.n	800f0aa <_vfprintf_r+0xf2a>
 800f032:	f104 0308 	add.w	r3, r4, #8
 800f036:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800f038:	2e00      	cmp	r6, #0
 800f03a:	da1b      	bge.n	800f074 <_vfprintf_r+0xef4>
 800f03c:	4f2a      	ldr	r7, [pc, #168]	@ (800f0e8 <_vfprintf_r+0xf68>)
 800f03e:	4276      	negs	r6, r6
 800f040:	461a      	mov	r2, r3
 800f042:	2410      	movs	r4, #16
 800f044:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 800f048:	2e10      	cmp	r6, #16
 800f04a:	f101 0101 	add.w	r1, r1, #1
 800f04e:	f103 0308 	add.w	r3, r3, #8
 800f052:	6017      	str	r7, [r2, #0]
 800f054:	dc33      	bgt.n	800f0be <_vfprintf_r+0xf3e>
 800f056:	6056      	str	r6, [r2, #4]
 800f058:	2907      	cmp	r1, #7
 800f05a:	4406      	add	r6, r0
 800f05c:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 800f060:	dd08      	ble.n	800f074 <_vfprintf_r+0xef4>
 800f062:	9803      	ldr	r0, [sp, #12]
 800f064:	aa26      	add	r2, sp, #152	@ 0x98
 800f066:	4659      	mov	r1, fp
 800f068:	f000 faf6 	bl	800f658 <__sprint_r>
 800f06c:	2800      	cmp	r0, #0
 800f06e:	f040 824e 	bne.w	800f50e <_vfprintf_r+0x138e>
 800f072:	ab29      	add	r3, sp, #164	@ 0xa4
 800f074:	9a04      	ldr	r2, [sp, #16]
 800f076:	9904      	ldr	r1, [sp, #16]
 800f078:	605a      	str	r2, [r3, #4]
 800f07a:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 800f07c:	f8c3 8000 	str.w	r8, [r3]
 800f080:	440a      	add	r2, r1
 800f082:	9228      	str	r2, [sp, #160]	@ 0xa0
 800f084:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 800f086:	3201      	adds	r2, #1
 800f088:	2a07      	cmp	r2, #7
 800f08a:	9227      	str	r2, [sp, #156]	@ 0x9c
 800f08c:	f73f af7c 	bgt.w	800ef88 <_vfprintf_r+0xe08>
 800f090:	f103 0408 	add.w	r4, r3, #8
 800f094:	e4ca      	b.n	800ea2c <_vfprintf_r+0x8ac>
 800f096:	9803      	ldr	r0, [sp, #12]
 800f098:	aa26      	add	r2, sp, #152	@ 0x98
 800f09a:	4659      	mov	r1, fp
 800f09c:	f000 fadc 	bl	800f658 <__sprint_r>
 800f0a0:	2800      	cmp	r0, #0
 800f0a2:	f040 8234 	bne.w	800f50e <_vfprintf_r+0x138e>
 800f0a6:	ac29      	add	r4, sp, #164	@ 0xa4
 800f0a8:	e7af      	b.n	800f00a <_vfprintf_r+0xe8a>
 800f0aa:	9803      	ldr	r0, [sp, #12]
 800f0ac:	aa26      	add	r2, sp, #152	@ 0x98
 800f0ae:	4659      	mov	r1, fp
 800f0b0:	f000 fad2 	bl	800f658 <__sprint_r>
 800f0b4:	2800      	cmp	r0, #0
 800f0b6:	f040 822a 	bne.w	800f50e <_vfprintf_r+0x138e>
 800f0ba:	ab29      	add	r3, sp, #164	@ 0xa4
 800f0bc:	e7bb      	b.n	800f036 <_vfprintf_r+0xeb6>
 800f0be:	3010      	adds	r0, #16
 800f0c0:	2907      	cmp	r1, #7
 800f0c2:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 800f0c6:	6054      	str	r4, [r2, #4]
 800f0c8:	dd08      	ble.n	800f0dc <_vfprintf_r+0xf5c>
 800f0ca:	9803      	ldr	r0, [sp, #12]
 800f0cc:	aa26      	add	r2, sp, #152	@ 0x98
 800f0ce:	4659      	mov	r1, fp
 800f0d0:	f000 fac2 	bl	800f658 <__sprint_r>
 800f0d4:	2800      	cmp	r0, #0
 800f0d6:	f040 821a 	bne.w	800f50e <_vfprintf_r+0x138e>
 800f0da:	ab29      	add	r3, sp, #164	@ 0xa4
 800f0dc:	3e10      	subs	r6, #16
 800f0de:	461a      	mov	r2, r3
 800f0e0:	e7b0      	b.n	800f044 <_vfprintf_r+0xec4>
 800f0e2:	bf00      	nop
 800f0e4:	08091892 	.word	0x08091892
 800f0e8:	08091894 	.word	0x08091894
 800f0ec:	9b04      	ldr	r3, [sp, #16]
 800f0ee:	4443      	add	r3, r8
 800f0f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f0f2:	9b04      	ldr	r3, [sp, #16]
 800f0f4:	42b3      	cmp	r3, r6
 800f0f6:	bfa8      	it	ge
 800f0f8:	4633      	movge	r3, r6
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	4699      	mov	r9, r3
 800f0fe:	dd0b      	ble.n	800f118 <_vfprintf_r+0xf98>
 800f100:	e9c4 8300 	strd	r8, r3, [r4]
 800f104:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f106:	444b      	add	r3, r9
 800f108:	9328      	str	r3, [sp, #160]	@ 0xa0
 800f10a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800f10c:	3301      	adds	r3, #1
 800f10e:	2b07      	cmp	r3, #7
 800f110:	9327      	str	r3, [sp, #156]	@ 0x9c
 800f112:	f300 8089 	bgt.w	800f228 <_vfprintf_r+0x10a8>
 800f116:	3408      	adds	r4, #8
 800f118:	f1b9 0f00 	cmp.w	r9, #0
 800f11c:	bfac      	ite	ge
 800f11e:	eba6 0309 	subge.w	r3, r6, r9
 800f122:	4633      	movlt	r3, r6
 800f124:	2b00      	cmp	r3, #0
 800f126:	9306      	str	r3, [sp, #24]
 800f128:	dd1c      	ble.n	800f164 <_vfprintf_r+0xfe4>
 800f12a:	f8df 9364 	ldr.w	r9, [pc, #868]	@ 800f490 <_vfprintf_r+0x1310>
 800f12e:	9806      	ldr	r0, [sp, #24]
 800f130:	f8c4 9000 	str.w	r9, [r4]
 800f134:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 800f138:	2810      	cmp	r0, #16
 800f13a:	f102 0201 	add.w	r2, r2, #1
 800f13e:	f104 0108 	add.w	r1, r4, #8
 800f142:	dc7b      	bgt.n	800f23c <_vfprintf_r+0x10bc>
 800f144:	4403      	add	r3, r0
 800f146:	2a07      	cmp	r2, #7
 800f148:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800f14c:	6060      	str	r0, [r4, #4]
 800f14e:	f340 808a 	ble.w	800f266 <_vfprintf_r+0x10e6>
 800f152:	9803      	ldr	r0, [sp, #12]
 800f154:	aa26      	add	r2, sp, #152	@ 0x98
 800f156:	4659      	mov	r1, fp
 800f158:	f000 fa7e 	bl	800f658 <__sprint_r>
 800f15c:	2800      	cmp	r0, #0
 800f15e:	f040 81d6 	bne.w	800f50e <_vfprintf_r+0x138e>
 800f162:	ac29      	add	r4, sp, #164	@ 0xa4
 800f164:	056a      	lsls	r2, r5, #21
 800f166:	44b0      	add	r8, r6
 800f168:	d508      	bpl.n	800f17c <_vfprintf_r+0xffc>
 800f16a:	9b08      	ldr	r3, [sp, #32]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d17c      	bne.n	800f26a <_vfprintf_r+0x10ea>
 800f170:	2f00      	cmp	r7, #0
 800f172:	d17c      	bne.n	800f26e <_vfprintf_r+0x10ee>
 800f174:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f176:	4598      	cmp	r8, r3
 800f178:	bf28      	it	cs
 800f17a:	4698      	movcs	r8, r3
 800f17c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f17e:	9a04      	ldr	r2, [sp, #16]
 800f180:	4293      	cmp	r3, r2
 800f182:	db01      	blt.n	800f188 <_vfprintf_r+0x1008>
 800f184:	07eb      	lsls	r3, r5, #31
 800f186:	d50e      	bpl.n	800f1a6 <_vfprintf_r+0x1026>
 800f188:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f18a:	6023      	str	r3, [r4, #0]
 800f18c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f18e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f190:	6063      	str	r3, [r4, #4]
 800f192:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800f194:	4413      	add	r3, r2
 800f196:	9328      	str	r3, [sp, #160]	@ 0xa0
 800f198:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800f19a:	3301      	adds	r3, #1
 800f19c:	2b07      	cmp	r3, #7
 800f19e:	9327      	str	r3, [sp, #156]	@ 0x9c
 800f1a0:	f300 80e1 	bgt.w	800f366 <_vfprintf_r+0x11e6>
 800f1a4:	3408      	adds	r4, #8
 800f1a6:	9b04      	ldr	r3, [sp, #16]
 800f1a8:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 800f1aa:	1bdf      	subs	r7, r3, r7
 800f1ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f1ae:	eba3 0308 	sub.w	r3, r3, r8
 800f1b2:	429f      	cmp	r7, r3
 800f1b4:	bfa8      	it	ge
 800f1b6:	461f      	movge	r7, r3
 800f1b8:	2f00      	cmp	r7, #0
 800f1ba:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800f1bc:	dd0a      	ble.n	800f1d4 <_vfprintf_r+0x1054>
 800f1be:	443b      	add	r3, r7
 800f1c0:	9328      	str	r3, [sp, #160]	@ 0xa0
 800f1c2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800f1c4:	3301      	adds	r3, #1
 800f1c6:	2b07      	cmp	r3, #7
 800f1c8:	e9c4 8700 	strd	r8, r7, [r4]
 800f1cc:	9327      	str	r3, [sp, #156]	@ 0x9c
 800f1ce:	f300 80d4 	bgt.w	800f37a <_vfprintf_r+0x11fa>
 800f1d2:	3408      	adds	r4, #8
 800f1d4:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800f1d6:	9b04      	ldr	r3, [sp, #16]
 800f1d8:	2f00      	cmp	r7, #0
 800f1da:	eba3 0606 	sub.w	r6, r3, r6
 800f1de:	bfa8      	it	ge
 800f1e0:	1bf6      	subge	r6, r6, r7
 800f1e2:	2e00      	cmp	r6, #0
 800f1e4:	f77f ac22 	ble.w	800ea2c <_vfprintf_r+0x8ac>
 800f1e8:	4fa9      	ldr	r7, [pc, #676]	@ (800f490 <_vfprintf_r+0x1310>)
 800f1ea:	f04f 0810 	mov.w	r8, #16
 800f1ee:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800f1f2:	2e10      	cmp	r6, #16
 800f1f4:	f103 0301 	add.w	r3, r3, #1
 800f1f8:	f104 0108 	add.w	r1, r4, #8
 800f1fc:	6027      	str	r7, [r4, #0]
 800f1fe:	f77f aebc 	ble.w	800ef7a <_vfprintf_r+0xdfa>
 800f202:	3210      	adds	r2, #16
 800f204:	2b07      	cmp	r3, #7
 800f206:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800f20a:	f8c4 8004 	str.w	r8, [r4, #4]
 800f20e:	dd08      	ble.n	800f222 <_vfprintf_r+0x10a2>
 800f210:	9803      	ldr	r0, [sp, #12]
 800f212:	aa26      	add	r2, sp, #152	@ 0x98
 800f214:	4659      	mov	r1, fp
 800f216:	f000 fa1f 	bl	800f658 <__sprint_r>
 800f21a:	2800      	cmp	r0, #0
 800f21c:	f040 8177 	bne.w	800f50e <_vfprintf_r+0x138e>
 800f220:	a929      	add	r1, sp, #164	@ 0xa4
 800f222:	3e10      	subs	r6, #16
 800f224:	460c      	mov	r4, r1
 800f226:	e7e2      	b.n	800f1ee <_vfprintf_r+0x106e>
 800f228:	9803      	ldr	r0, [sp, #12]
 800f22a:	aa26      	add	r2, sp, #152	@ 0x98
 800f22c:	4659      	mov	r1, fp
 800f22e:	f000 fa13 	bl	800f658 <__sprint_r>
 800f232:	2800      	cmp	r0, #0
 800f234:	f040 816b 	bne.w	800f50e <_vfprintf_r+0x138e>
 800f238:	ac29      	add	r4, sp, #164	@ 0xa4
 800f23a:	e76d      	b.n	800f118 <_vfprintf_r+0xf98>
 800f23c:	2010      	movs	r0, #16
 800f23e:	4403      	add	r3, r0
 800f240:	2a07      	cmp	r2, #7
 800f242:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800f246:	6060      	str	r0, [r4, #4]
 800f248:	dd08      	ble.n	800f25c <_vfprintf_r+0x10dc>
 800f24a:	9803      	ldr	r0, [sp, #12]
 800f24c:	aa26      	add	r2, sp, #152	@ 0x98
 800f24e:	4659      	mov	r1, fp
 800f250:	f000 fa02 	bl	800f658 <__sprint_r>
 800f254:	2800      	cmp	r0, #0
 800f256:	f040 815a 	bne.w	800f50e <_vfprintf_r+0x138e>
 800f25a:	a929      	add	r1, sp, #164	@ 0xa4
 800f25c:	9b06      	ldr	r3, [sp, #24]
 800f25e:	3b10      	subs	r3, #16
 800f260:	9306      	str	r3, [sp, #24]
 800f262:	460c      	mov	r4, r1
 800f264:	e763      	b.n	800f12e <_vfprintf_r+0xfae>
 800f266:	460c      	mov	r4, r1
 800f268:	e77c      	b.n	800f164 <_vfprintf_r+0xfe4>
 800f26a:	2f00      	cmp	r7, #0
 800f26c:	d04b      	beq.n	800f306 <_vfprintf_r+0x1186>
 800f26e:	3f01      	subs	r7, #1
 800f270:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f272:	6023      	str	r3, [r4, #0]
 800f274:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f276:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800f278:	6063      	str	r3, [r4, #4]
 800f27a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800f27c:	4413      	add	r3, r2
 800f27e:	9328      	str	r3, [sp, #160]	@ 0xa0
 800f280:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800f282:	3301      	adds	r3, #1
 800f284:	2b07      	cmp	r3, #7
 800f286:	9327      	str	r3, [sp, #156]	@ 0x9c
 800f288:	dc44      	bgt.n	800f314 <_vfprintf_r+0x1194>
 800f28a:	3408      	adds	r4, #8
 800f28c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f28e:	f893 9000 	ldrb.w	r9, [r3]
 800f292:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f294:	eba3 0308 	sub.w	r3, r3, r8
 800f298:	4599      	cmp	r9, r3
 800f29a:	bfa8      	it	ge
 800f29c:	4699      	movge	r9, r3
 800f29e:	f1b9 0f00 	cmp.w	r9, #0
 800f2a2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800f2a4:	dd09      	ble.n	800f2ba <_vfprintf_r+0x113a>
 800f2a6:	444b      	add	r3, r9
 800f2a8:	9328      	str	r3, [sp, #160]	@ 0xa0
 800f2aa:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800f2ac:	3301      	adds	r3, #1
 800f2ae:	2b07      	cmp	r3, #7
 800f2b0:	e9c4 8900 	strd	r8, r9, [r4]
 800f2b4:	9327      	str	r3, [sp, #156]	@ 0x9c
 800f2b6:	dc37      	bgt.n	800f328 <_vfprintf_r+0x11a8>
 800f2b8:	3408      	adds	r4, #8
 800f2ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f2bc:	781e      	ldrb	r6, [r3, #0]
 800f2be:	f1b9 0f00 	cmp.w	r9, #0
 800f2c2:	bfa8      	it	ge
 800f2c4:	eba6 0609 	subge.w	r6, r6, r9
 800f2c8:	2e00      	cmp	r6, #0
 800f2ca:	dd18      	ble.n	800f2fe <_vfprintf_r+0x117e>
 800f2cc:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800f2d0:	486f      	ldr	r0, [pc, #444]	@ (800f490 <_vfprintf_r+0x1310>)
 800f2d2:	6020      	str	r0, [r4, #0]
 800f2d4:	2e10      	cmp	r6, #16
 800f2d6:	f103 0301 	add.w	r3, r3, #1
 800f2da:	f104 0108 	add.w	r1, r4, #8
 800f2de:	dc2d      	bgt.n	800f33c <_vfprintf_r+0x11bc>
 800f2e0:	6066      	str	r6, [r4, #4]
 800f2e2:	2b07      	cmp	r3, #7
 800f2e4:	4416      	add	r6, r2
 800f2e6:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 800f2ea:	dd3a      	ble.n	800f362 <_vfprintf_r+0x11e2>
 800f2ec:	9803      	ldr	r0, [sp, #12]
 800f2ee:	aa26      	add	r2, sp, #152	@ 0x98
 800f2f0:	4659      	mov	r1, fp
 800f2f2:	f000 f9b1 	bl	800f658 <__sprint_r>
 800f2f6:	2800      	cmp	r0, #0
 800f2f8:	f040 8109 	bne.w	800f50e <_vfprintf_r+0x138e>
 800f2fc:	ac29      	add	r4, sp, #164	@ 0xa4
 800f2fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f300:	781b      	ldrb	r3, [r3, #0]
 800f302:	4498      	add	r8, r3
 800f304:	e731      	b.n	800f16a <_vfprintf_r+0xfea>
 800f306:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f308:	3b01      	subs	r3, #1
 800f30a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f30c:	9b08      	ldr	r3, [sp, #32]
 800f30e:	3b01      	subs	r3, #1
 800f310:	9308      	str	r3, [sp, #32]
 800f312:	e7ad      	b.n	800f270 <_vfprintf_r+0x10f0>
 800f314:	9803      	ldr	r0, [sp, #12]
 800f316:	aa26      	add	r2, sp, #152	@ 0x98
 800f318:	4659      	mov	r1, fp
 800f31a:	f000 f99d 	bl	800f658 <__sprint_r>
 800f31e:	2800      	cmp	r0, #0
 800f320:	f040 80f5 	bne.w	800f50e <_vfprintf_r+0x138e>
 800f324:	ac29      	add	r4, sp, #164	@ 0xa4
 800f326:	e7b1      	b.n	800f28c <_vfprintf_r+0x110c>
 800f328:	9803      	ldr	r0, [sp, #12]
 800f32a:	aa26      	add	r2, sp, #152	@ 0x98
 800f32c:	4659      	mov	r1, fp
 800f32e:	f000 f993 	bl	800f658 <__sprint_r>
 800f332:	2800      	cmp	r0, #0
 800f334:	f040 80eb 	bne.w	800f50e <_vfprintf_r+0x138e>
 800f338:	ac29      	add	r4, sp, #164	@ 0xa4
 800f33a:	e7be      	b.n	800f2ba <_vfprintf_r+0x113a>
 800f33c:	2010      	movs	r0, #16
 800f33e:	4402      	add	r2, r0
 800f340:	2b07      	cmp	r3, #7
 800f342:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800f346:	6060      	str	r0, [r4, #4]
 800f348:	dd08      	ble.n	800f35c <_vfprintf_r+0x11dc>
 800f34a:	9803      	ldr	r0, [sp, #12]
 800f34c:	aa26      	add	r2, sp, #152	@ 0x98
 800f34e:	4659      	mov	r1, fp
 800f350:	f000 f982 	bl	800f658 <__sprint_r>
 800f354:	2800      	cmp	r0, #0
 800f356:	f040 80da 	bne.w	800f50e <_vfprintf_r+0x138e>
 800f35a:	a929      	add	r1, sp, #164	@ 0xa4
 800f35c:	3e10      	subs	r6, #16
 800f35e:	460c      	mov	r4, r1
 800f360:	e7b4      	b.n	800f2cc <_vfprintf_r+0x114c>
 800f362:	460c      	mov	r4, r1
 800f364:	e7cb      	b.n	800f2fe <_vfprintf_r+0x117e>
 800f366:	9803      	ldr	r0, [sp, #12]
 800f368:	aa26      	add	r2, sp, #152	@ 0x98
 800f36a:	4659      	mov	r1, fp
 800f36c:	f000 f974 	bl	800f658 <__sprint_r>
 800f370:	2800      	cmp	r0, #0
 800f372:	f040 80cc 	bne.w	800f50e <_vfprintf_r+0x138e>
 800f376:	ac29      	add	r4, sp, #164	@ 0xa4
 800f378:	e715      	b.n	800f1a6 <_vfprintf_r+0x1026>
 800f37a:	9803      	ldr	r0, [sp, #12]
 800f37c:	aa26      	add	r2, sp, #152	@ 0x98
 800f37e:	4659      	mov	r1, fp
 800f380:	f000 f96a 	bl	800f658 <__sprint_r>
 800f384:	2800      	cmp	r0, #0
 800f386:	f040 80c2 	bne.w	800f50e <_vfprintf_r+0x138e>
 800f38a:	ac29      	add	r4, sp, #164	@ 0xa4
 800f38c:	e722      	b.n	800f1d4 <_vfprintf_r+0x1054>
 800f38e:	9904      	ldr	r1, [sp, #16]
 800f390:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f392:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 800f394:	2901      	cmp	r1, #1
 800f396:	f103 0301 	add.w	r3, r3, #1
 800f39a:	f102 0201 	add.w	r2, r2, #1
 800f39e:	f104 0608 	add.w	r6, r4, #8
 800f3a2:	dc02      	bgt.n	800f3aa <_vfprintf_r+0x122a>
 800f3a4:	07ef      	lsls	r7, r5, #31
 800f3a6:	f140 8086 	bpl.w	800f4b6 <_vfprintf_r+0x1336>
 800f3aa:	2101      	movs	r1, #1
 800f3ac:	2a07      	cmp	r2, #7
 800f3ae:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800f3b2:	f8c4 8000 	str.w	r8, [r4]
 800f3b6:	6061      	str	r1, [r4, #4]
 800f3b8:	dd08      	ble.n	800f3cc <_vfprintf_r+0x124c>
 800f3ba:	9803      	ldr	r0, [sp, #12]
 800f3bc:	aa26      	add	r2, sp, #152	@ 0x98
 800f3be:	4659      	mov	r1, fp
 800f3c0:	f000 f94a 	bl	800f658 <__sprint_r>
 800f3c4:	2800      	cmp	r0, #0
 800f3c6:	f040 80a2 	bne.w	800f50e <_vfprintf_r+0x138e>
 800f3ca:	ae29      	add	r6, sp, #164	@ 0xa4
 800f3cc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f3ce:	6033      	str	r3, [r6, #0]
 800f3d0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f3d2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f3d4:	6073      	str	r3, [r6, #4]
 800f3d6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800f3d8:	4413      	add	r3, r2
 800f3da:	9328      	str	r3, [sp, #160]	@ 0xa0
 800f3dc:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800f3de:	3301      	adds	r3, #1
 800f3e0:	2b07      	cmp	r3, #7
 800f3e2:	9327      	str	r3, [sp, #156]	@ 0x9c
 800f3e4:	dc33      	bgt.n	800f44e <_vfprintf_r+0x12ce>
 800f3e6:	3608      	adds	r6, #8
 800f3e8:	9b04      	ldr	r3, [sp, #16]
 800f3ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f3ee:	1e5c      	subs	r4, r3, #1
 800f3f0:	2200      	movs	r2, #0
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	e9dd 9727 	ldrd	r9, r7, [sp, #156]	@ 0x9c
 800f3f8:	f7f1 fb86 	bl	8000b08 <__aeabi_dcmpeq>
 800f3fc:	2800      	cmp	r0, #0
 800f3fe:	d12f      	bne.n	800f460 <_vfprintf_r+0x12e0>
 800f400:	f108 0201 	add.w	r2, r8, #1
 800f404:	e9c6 2400 	strd	r2, r4, [r6]
 800f408:	9a04      	ldr	r2, [sp, #16]
 800f40a:	f109 0301 	add.w	r3, r9, #1
 800f40e:	3f01      	subs	r7, #1
 800f410:	4417      	add	r7, r2
 800f412:	2b07      	cmp	r3, #7
 800f414:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 800f418:	dd56      	ble.n	800f4c8 <_vfprintf_r+0x1348>
 800f41a:	9803      	ldr	r0, [sp, #12]
 800f41c:	aa26      	add	r2, sp, #152	@ 0x98
 800f41e:	4659      	mov	r1, fp
 800f420:	f000 f91a 	bl	800f658 <__sprint_r>
 800f424:	2800      	cmp	r0, #0
 800f426:	d172      	bne.n	800f50e <_vfprintf_r+0x138e>
 800f428:	ae29      	add	r6, sp, #164	@ 0xa4
 800f42a:	ab22      	add	r3, sp, #136	@ 0x88
 800f42c:	6033      	str	r3, [r6, #0]
 800f42e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800f430:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800f432:	6073      	str	r3, [r6, #4]
 800f434:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800f436:	4413      	add	r3, r2
 800f438:	9328      	str	r3, [sp, #160]	@ 0xa0
 800f43a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800f43c:	3301      	adds	r3, #1
 800f43e:	2b07      	cmp	r3, #7
 800f440:	9327      	str	r3, [sp, #156]	@ 0x9c
 800f442:	f73f ada1 	bgt.w	800ef88 <_vfprintf_r+0xe08>
 800f446:	f106 0408 	add.w	r4, r6, #8
 800f44a:	f7ff baef 	b.w	800ea2c <_vfprintf_r+0x8ac>
 800f44e:	9803      	ldr	r0, [sp, #12]
 800f450:	aa26      	add	r2, sp, #152	@ 0x98
 800f452:	4659      	mov	r1, fp
 800f454:	f000 f900 	bl	800f658 <__sprint_r>
 800f458:	2800      	cmp	r0, #0
 800f45a:	d158      	bne.n	800f50e <_vfprintf_r+0x138e>
 800f45c:	ae29      	add	r6, sp, #164	@ 0xa4
 800f45e:	e7c3      	b.n	800f3e8 <_vfprintf_r+0x1268>
 800f460:	9b04      	ldr	r3, [sp, #16]
 800f462:	2b01      	cmp	r3, #1
 800f464:	dde1      	ble.n	800f42a <_vfprintf_r+0x12aa>
 800f466:	4f0a      	ldr	r7, [pc, #40]	@ (800f490 <_vfprintf_r+0x1310>)
 800f468:	f04f 0810 	mov.w	r8, #16
 800f46c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800f470:	2c10      	cmp	r4, #16
 800f472:	f103 0301 	add.w	r3, r3, #1
 800f476:	f106 0108 	add.w	r1, r6, #8
 800f47a:	6037      	str	r7, [r6, #0]
 800f47c:	dc0a      	bgt.n	800f494 <_vfprintf_r+0x1314>
 800f47e:	6074      	str	r4, [r6, #4]
 800f480:	2b07      	cmp	r3, #7
 800f482:	4414      	add	r4, r2
 800f484:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 800f488:	dcc7      	bgt.n	800f41a <_vfprintf_r+0x129a>
 800f48a:	460e      	mov	r6, r1
 800f48c:	e7cd      	b.n	800f42a <_vfprintf_r+0x12aa>
 800f48e:	bf00      	nop
 800f490:	08091894 	.word	0x08091894
 800f494:	3210      	adds	r2, #16
 800f496:	2b07      	cmp	r3, #7
 800f498:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800f49c:	f8c6 8004 	str.w	r8, [r6, #4]
 800f4a0:	dd06      	ble.n	800f4b0 <_vfprintf_r+0x1330>
 800f4a2:	9803      	ldr	r0, [sp, #12]
 800f4a4:	aa26      	add	r2, sp, #152	@ 0x98
 800f4a6:	4659      	mov	r1, fp
 800f4a8:	f000 f8d6 	bl	800f658 <__sprint_r>
 800f4ac:	bb78      	cbnz	r0, 800f50e <_vfprintf_r+0x138e>
 800f4ae:	a929      	add	r1, sp, #164	@ 0xa4
 800f4b0:	3c10      	subs	r4, #16
 800f4b2:	460e      	mov	r6, r1
 800f4b4:	e7da      	b.n	800f46c <_vfprintf_r+0x12ec>
 800f4b6:	2101      	movs	r1, #1
 800f4b8:	2a07      	cmp	r2, #7
 800f4ba:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800f4be:	f8c4 8000 	str.w	r8, [r4]
 800f4c2:	6061      	str	r1, [r4, #4]
 800f4c4:	ddb1      	ble.n	800f42a <_vfprintf_r+0x12aa>
 800f4c6:	e7a8      	b.n	800f41a <_vfprintf_r+0x129a>
 800f4c8:	3608      	adds	r6, #8
 800f4ca:	e7ae      	b.n	800f42a <_vfprintf_r+0x12aa>
 800f4cc:	460c      	mov	r4, r1
 800f4ce:	f7ff baad 	b.w	800ea2c <_vfprintf_r+0x8ac>
 800f4d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f4d4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800f4d6:	1a9d      	subs	r5, r3, r2
 800f4d8:	2d00      	cmp	r5, #0
 800f4da:	f77f aaaa 	ble.w	800ea32 <_vfprintf_r+0x8b2>
 800f4de:	4e3d      	ldr	r6, [pc, #244]	@ (800f5d4 <_vfprintf_r+0x1454>)
 800f4e0:	2710      	movs	r7, #16
 800f4e2:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800f4e6:	2d10      	cmp	r5, #16
 800f4e8:	f103 0301 	add.w	r3, r3, #1
 800f4ec:	6026      	str	r6, [r4, #0]
 800f4ee:	dc18      	bgt.n	800f522 <_vfprintf_r+0x13a2>
 800f4f0:	6065      	str	r5, [r4, #4]
 800f4f2:	2b07      	cmp	r3, #7
 800f4f4:	4415      	add	r5, r2
 800f4f6:	e9cd 3527 	strd	r3, r5, [sp, #156]	@ 0x9c
 800f4fa:	f77f aa9a 	ble.w	800ea32 <_vfprintf_r+0x8b2>
 800f4fe:	9803      	ldr	r0, [sp, #12]
 800f500:	aa26      	add	r2, sp, #152	@ 0x98
 800f502:	4659      	mov	r1, fp
 800f504:	f000 f8a8 	bl	800f658 <__sprint_r>
 800f508:	2800      	cmp	r0, #0
 800f50a:	f43f aa92 	beq.w	800ea32 <_vfprintf_r+0x8b2>
 800f50e:	f1ba 0f00 	cmp.w	sl, #0
 800f512:	f43f a892 	beq.w	800e63a <_vfprintf_r+0x4ba>
 800f516:	9803      	ldr	r0, [sp, #12]
 800f518:	4651      	mov	r1, sl
 800f51a:	f002 facb 	bl	8011ab4 <_free_r>
 800f51e:	f7ff b88c 	b.w	800e63a <_vfprintf_r+0x4ba>
 800f522:	3210      	adds	r2, #16
 800f524:	2b07      	cmp	r3, #7
 800f526:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800f52a:	6067      	str	r7, [r4, #4]
 800f52c:	dc02      	bgt.n	800f534 <_vfprintf_r+0x13b4>
 800f52e:	3408      	adds	r4, #8
 800f530:	3d10      	subs	r5, #16
 800f532:	e7d6      	b.n	800f4e2 <_vfprintf_r+0x1362>
 800f534:	9803      	ldr	r0, [sp, #12]
 800f536:	aa26      	add	r2, sp, #152	@ 0x98
 800f538:	4659      	mov	r1, fp
 800f53a:	f000 f88d 	bl	800f658 <__sprint_r>
 800f53e:	2800      	cmp	r0, #0
 800f540:	d1e5      	bne.n	800f50e <_vfprintf_r+0x138e>
 800f542:	ac29      	add	r4, sp, #164	@ 0xa4
 800f544:	e7f4      	b.n	800f530 <_vfprintf_r+0x13b0>
 800f546:	9803      	ldr	r0, [sp, #12]
 800f548:	4651      	mov	r1, sl
 800f54a:	f002 fab3 	bl	8011ab4 <_free_r>
 800f54e:	f7ff ba88 	b.w	800ea62 <_vfprintf_r+0x8e2>
 800f552:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800f554:	b91b      	cbnz	r3, 800f55e <_vfprintf_r+0x13de>
 800f556:	2300      	movs	r3, #0
 800f558:	9327      	str	r3, [sp, #156]	@ 0x9c
 800f55a:	f7ff b86e 	b.w	800e63a <_vfprintf_r+0x4ba>
 800f55e:	9803      	ldr	r0, [sp, #12]
 800f560:	aa26      	add	r2, sp, #152	@ 0x98
 800f562:	4659      	mov	r1, fp
 800f564:	f000 f878 	bl	800f658 <__sprint_r>
 800f568:	2800      	cmp	r0, #0
 800f56a:	d0f4      	beq.n	800f556 <_vfprintf_r+0x13d6>
 800f56c:	f7ff b865 	b.w	800e63a <_vfprintf_r+0x4ba>
 800f570:	ea56 0207 	orrs.w	r2, r6, r7
 800f574:	9508      	str	r5, [sp, #32]
 800f576:	f43f ab75 	beq.w	800ec64 <_vfprintf_r+0xae4>
 800f57a:	2b01      	cmp	r3, #1
 800f57c:	f43f abf6 	beq.w	800ed6c <_vfprintf_r+0xbec>
 800f580:	2b02      	cmp	r3, #2
 800f582:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 800f586:	f43f ac3a 	beq.w	800edfe <_vfprintf_r+0xc7e>
 800f58a:	f006 0307 	and.w	r3, r6, #7
 800f58e:	08f6      	lsrs	r6, r6, #3
 800f590:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 800f594:	08ff      	lsrs	r7, r7, #3
 800f596:	3330      	adds	r3, #48	@ 0x30
 800f598:	ea56 0107 	orrs.w	r1, r6, r7
 800f59c:	4642      	mov	r2, r8
 800f59e:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800f5a2:	d1f2      	bne.n	800f58a <_vfprintf_r+0x140a>
 800f5a4:	9908      	ldr	r1, [sp, #32]
 800f5a6:	07ce      	lsls	r6, r1, #31
 800f5a8:	d506      	bpl.n	800f5b8 <_vfprintf_r+0x1438>
 800f5aa:	2b30      	cmp	r3, #48	@ 0x30
 800f5ac:	d004      	beq.n	800f5b8 <_vfprintf_r+0x1438>
 800f5ae:	2330      	movs	r3, #48	@ 0x30
 800f5b0:	f808 3c01 	strb.w	r3, [r8, #-1]
 800f5b4:	f1a2 0802 	sub.w	r8, r2, #2
 800f5b8:	ab52      	add	r3, sp, #328	@ 0x148
 800f5ba:	9d08      	ldr	r5, [sp, #32]
 800f5bc:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 800f5c0:	f04f 0a00 	mov.w	sl, #0
 800f5c4:	eba3 0908 	sub.w	r9, r3, r8
 800f5c8:	4657      	mov	r7, sl
 800f5ca:	f8cd a020 	str.w	sl, [sp, #32]
 800f5ce:	4656      	mov	r6, sl
 800f5d0:	f7ff b978 	b.w	800e8c4 <_vfprintf_r+0x744>
 800f5d4:	080918a4 	.word	0x080918a4

0800f5d8 <__sbprintf>:
 800f5d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f5da:	461f      	mov	r7, r3
 800f5dc:	898b      	ldrh	r3, [r1, #12]
 800f5de:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 800f5e2:	f023 0302 	bic.w	r3, r3, #2
 800f5e6:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f5ea:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 800f5ec:	9319      	str	r3, [sp, #100]	@ 0x64
 800f5ee:	89cb      	ldrh	r3, [r1, #14]
 800f5f0:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f5f4:	69cb      	ldr	r3, [r1, #28]
 800f5f6:	9307      	str	r3, [sp, #28]
 800f5f8:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 800f5fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800f5fc:	ab1a      	add	r3, sp, #104	@ 0x68
 800f5fe:	9300      	str	r3, [sp, #0]
 800f600:	9304      	str	r3, [sp, #16]
 800f602:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f606:	4615      	mov	r5, r2
 800f608:	4606      	mov	r6, r0
 800f60a:	9302      	str	r3, [sp, #8]
 800f60c:	9305      	str	r3, [sp, #20]
 800f60e:	a816      	add	r0, sp, #88	@ 0x58
 800f610:	2300      	movs	r3, #0
 800f612:	460c      	mov	r4, r1
 800f614:	9306      	str	r3, [sp, #24]
 800f616:	f001 fb13 	bl	8010c40 <__retarget_lock_init_recursive>
 800f61a:	462a      	mov	r2, r5
 800f61c:	463b      	mov	r3, r7
 800f61e:	4669      	mov	r1, sp
 800f620:	4630      	mov	r0, r6
 800f622:	f7fe fdad 	bl	800e180 <_vfprintf_r>
 800f626:	1e05      	subs	r5, r0, #0
 800f628:	db07      	blt.n	800f63a <__sbprintf+0x62>
 800f62a:	4669      	mov	r1, sp
 800f62c:	4630      	mov	r0, r6
 800f62e:	f000 ff49 	bl	80104c4 <_fflush_r>
 800f632:	2800      	cmp	r0, #0
 800f634:	bf18      	it	ne
 800f636:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 800f63a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800f63e:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800f640:	065b      	lsls	r3, r3, #25
 800f642:	bf42      	ittt	mi
 800f644:	89a3      	ldrhmi	r3, [r4, #12]
 800f646:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 800f64a:	81a3      	strhmi	r3, [r4, #12]
 800f64c:	f001 faf9 	bl	8010c42 <__retarget_lock_close_recursive>
 800f650:	4628      	mov	r0, r5
 800f652:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 800f656:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f658 <__sprint_r>:
 800f658:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f65c:	6893      	ldr	r3, [r2, #8]
 800f65e:	4680      	mov	r8, r0
 800f660:	460e      	mov	r6, r1
 800f662:	4614      	mov	r4, r2
 800f664:	b343      	cbz	r3, 800f6b8 <__sprint_r+0x60>
 800f666:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 800f668:	049d      	lsls	r5, r3, #18
 800f66a:	d522      	bpl.n	800f6b2 <__sprint_r+0x5a>
 800f66c:	6815      	ldr	r5, [r2, #0]
 800f66e:	68a0      	ldr	r0, [r4, #8]
 800f670:	3508      	adds	r5, #8
 800f672:	b928      	cbnz	r0, 800f680 <__sprint_r+0x28>
 800f674:	2300      	movs	r3, #0
 800f676:	60a3      	str	r3, [r4, #8]
 800f678:	2300      	movs	r3, #0
 800f67a:	6063      	str	r3, [r4, #4]
 800f67c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f680:	e955 b702 	ldrd	fp, r7, [r5, #-8]
 800f684:	f04f 0900 	mov.w	r9, #0
 800f688:	ea4f 0a97 	mov.w	sl, r7, lsr #2
 800f68c:	45ca      	cmp	sl, r9
 800f68e:	dc05      	bgt.n	800f69c <__sprint_r+0x44>
 800f690:	68a3      	ldr	r3, [r4, #8]
 800f692:	f027 0703 	bic.w	r7, r7, #3
 800f696:	1bdb      	subs	r3, r3, r7
 800f698:	60a3      	str	r3, [r4, #8]
 800f69a:	e7e8      	b.n	800f66e <__sprint_r+0x16>
 800f69c:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800f6a0:	4632      	mov	r2, r6
 800f6a2:	4640      	mov	r0, r8
 800f6a4:	f001 f9d9 	bl	8010a5a <_fputwc_r>
 800f6a8:	1c43      	adds	r3, r0, #1
 800f6aa:	d0e3      	beq.n	800f674 <__sprint_r+0x1c>
 800f6ac:	f109 0901 	add.w	r9, r9, #1
 800f6b0:	e7ec      	b.n	800f68c <__sprint_r+0x34>
 800f6b2:	f000 ffd1 	bl	8010658 <__sfvwrite_r>
 800f6b6:	e7dd      	b.n	800f674 <__sprint_r+0x1c>
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	e7dd      	b.n	800f678 <__sprint_r+0x20>

0800f6bc <_vfiprintf_r>:
 800f6bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6c0:	b0bb      	sub	sp, #236	@ 0xec
 800f6c2:	460f      	mov	r7, r1
 800f6c4:	4693      	mov	fp, r2
 800f6c6:	461c      	mov	r4, r3
 800f6c8:	461d      	mov	r5, r3
 800f6ca:	9000      	str	r0, [sp, #0]
 800f6cc:	b118      	cbz	r0, 800f6d6 <_vfiprintf_r+0x1a>
 800f6ce:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800f6d0:	b90b      	cbnz	r3, 800f6d6 <_vfiprintf_r+0x1a>
 800f6d2:	f000 ffa9 	bl	8010628 <__sinit>
 800f6d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f6d8:	07db      	lsls	r3, r3, #31
 800f6da:	d405      	bmi.n	800f6e8 <_vfiprintf_r+0x2c>
 800f6dc:	89bb      	ldrh	r3, [r7, #12]
 800f6de:	059e      	lsls	r6, r3, #22
 800f6e0:	d402      	bmi.n	800f6e8 <_vfiprintf_r+0x2c>
 800f6e2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800f6e4:	f001 faae 	bl	8010c44 <__retarget_lock_acquire_recursive>
 800f6e8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f6ec:	0498      	lsls	r0, r3, #18
 800f6ee:	d406      	bmi.n	800f6fe <_vfiprintf_r+0x42>
 800f6f0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800f6f4:	81bb      	strh	r3, [r7, #12]
 800f6f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f6f8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f6fc:	667b      	str	r3, [r7, #100]	@ 0x64
 800f6fe:	89bb      	ldrh	r3, [r7, #12]
 800f700:	0719      	lsls	r1, r3, #28
 800f702:	d501      	bpl.n	800f708 <_vfiprintf_r+0x4c>
 800f704:	693b      	ldr	r3, [r7, #16]
 800f706:	b9ab      	cbnz	r3, 800f734 <_vfiprintf_r+0x78>
 800f708:	9800      	ldr	r0, [sp, #0]
 800f70a:	4639      	mov	r1, r7
 800f70c:	f001 f90e 	bl	801092c <__swsetup_r>
 800f710:	b180      	cbz	r0, 800f734 <_vfiprintf_r+0x78>
 800f712:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f714:	07da      	lsls	r2, r3, #31
 800f716:	d506      	bpl.n	800f726 <_vfiprintf_r+0x6a>
 800f718:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f71c:	9303      	str	r3, [sp, #12]
 800f71e:	9803      	ldr	r0, [sp, #12]
 800f720:	b03b      	add	sp, #236	@ 0xec
 800f722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f726:	89bb      	ldrh	r3, [r7, #12]
 800f728:	059b      	lsls	r3, r3, #22
 800f72a:	d4f5      	bmi.n	800f718 <_vfiprintf_r+0x5c>
 800f72c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800f72e:	f001 fa8a 	bl	8010c46 <__retarget_lock_release_recursive>
 800f732:	e7f1      	b.n	800f718 <_vfiprintf_r+0x5c>
 800f734:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f738:	f003 021a 	and.w	r2, r3, #26
 800f73c:	2a0a      	cmp	r2, #10
 800f73e:	d114      	bne.n	800f76a <_vfiprintf_r+0xae>
 800f740:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800f744:	2a00      	cmp	r2, #0
 800f746:	db10      	blt.n	800f76a <_vfiprintf_r+0xae>
 800f748:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f74a:	07d6      	lsls	r6, r2, #31
 800f74c:	d404      	bmi.n	800f758 <_vfiprintf_r+0x9c>
 800f74e:	059d      	lsls	r5, r3, #22
 800f750:	d402      	bmi.n	800f758 <_vfiprintf_r+0x9c>
 800f752:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800f754:	f001 fa77 	bl	8010c46 <__retarget_lock_release_recursive>
 800f758:	9800      	ldr	r0, [sp, #0]
 800f75a:	4623      	mov	r3, r4
 800f75c:	465a      	mov	r2, fp
 800f75e:	4639      	mov	r1, r7
 800f760:	b03b      	add	sp, #236	@ 0xec
 800f762:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f766:	f000 bc31 	b.w	800ffcc <__sbprintf>
 800f76a:	2300      	movs	r3, #0
 800f76c:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 800f770:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800f774:	ae11      	add	r6, sp, #68	@ 0x44
 800f776:	960e      	str	r6, [sp, #56]	@ 0x38
 800f778:	9307      	str	r3, [sp, #28]
 800f77a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f77c:	9303      	str	r3, [sp, #12]
 800f77e:	465b      	mov	r3, fp
 800f780:	461c      	mov	r4, r3
 800f782:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f786:	b10a      	cbz	r2, 800f78c <_vfiprintf_r+0xd0>
 800f788:	2a25      	cmp	r2, #37	@ 0x25
 800f78a:	d1f9      	bne.n	800f780 <_vfiprintf_r+0xc4>
 800f78c:	ebb4 080b 	subs.w	r8, r4, fp
 800f790:	d00d      	beq.n	800f7ae <_vfiprintf_r+0xf2>
 800f792:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f794:	4443      	add	r3, r8
 800f796:	9310      	str	r3, [sp, #64]	@ 0x40
 800f798:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f79a:	3301      	adds	r3, #1
 800f79c:	2b07      	cmp	r3, #7
 800f79e:	e9c6 b800 	strd	fp, r8, [r6]
 800f7a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f7a4:	dc75      	bgt.n	800f892 <_vfiprintf_r+0x1d6>
 800f7a6:	3608      	adds	r6, #8
 800f7a8:	9b03      	ldr	r3, [sp, #12]
 800f7aa:	4443      	add	r3, r8
 800f7ac:	9303      	str	r3, [sp, #12]
 800f7ae:	7823      	ldrb	r3, [r4, #0]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	f000 83cd 	beq.w	800ff50 <_vfiprintf_r+0x894>
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f7bc:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800f7c0:	3401      	adds	r4, #1
 800f7c2:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 800f7c6:	469a      	mov	sl, r3
 800f7c8:	46a3      	mov	fp, r4
 800f7ca:	f81b 3b01 	ldrb.w	r3, [fp], #1
 800f7ce:	f1a3 0220 	sub.w	r2, r3, #32
 800f7d2:	2a5a      	cmp	r2, #90	@ 0x5a
 800f7d4:	f200 8316 	bhi.w	800fe04 <_vfiprintf_r+0x748>
 800f7d8:	e8df f012 	tbh	[pc, r2, lsl #1]
 800f7dc:	0314009a 	.word	0x0314009a
 800f7e0:	00a20314 	.word	0x00a20314
 800f7e4:	03140314 	.word	0x03140314
 800f7e8:	00820314 	.word	0x00820314
 800f7ec:	03140314 	.word	0x03140314
 800f7f0:	00af00a5 	.word	0x00af00a5
 800f7f4:	00ac0314 	.word	0x00ac0314
 800f7f8:	031400b1 	.word	0x031400b1
 800f7fc:	00d000cd 	.word	0x00d000cd
 800f800:	00d000d0 	.word	0x00d000d0
 800f804:	00d000d0 	.word	0x00d000d0
 800f808:	00d000d0 	.word	0x00d000d0
 800f80c:	00d000d0 	.word	0x00d000d0
 800f810:	03140314 	.word	0x03140314
 800f814:	03140314 	.word	0x03140314
 800f818:	03140314 	.word	0x03140314
 800f81c:	03140314 	.word	0x03140314
 800f820:	00f70314 	.word	0x00f70314
 800f824:	03140104 	.word	0x03140104
 800f828:	03140314 	.word	0x03140314
 800f82c:	03140314 	.word	0x03140314
 800f830:	03140314 	.word	0x03140314
 800f834:	03140314 	.word	0x03140314
 800f838:	01520314 	.word	0x01520314
 800f83c:	03140314 	.word	0x03140314
 800f840:	019a0314 	.word	0x019a0314
 800f844:	027a0314 	.word	0x027a0314
 800f848:	03140314 	.word	0x03140314
 800f84c:	0314029a 	.word	0x0314029a
 800f850:	03140314 	.word	0x03140314
 800f854:	03140314 	.word	0x03140314
 800f858:	03140314 	.word	0x03140314
 800f85c:	03140314 	.word	0x03140314
 800f860:	00f70314 	.word	0x00f70314
 800f864:	03140106 	.word	0x03140106
 800f868:	03140314 	.word	0x03140314
 800f86c:	010600e0 	.word	0x010600e0
 800f870:	031400f1 	.word	0x031400f1
 800f874:	031400eb 	.word	0x031400eb
 800f878:	01540132 	.word	0x01540132
 800f87c:	00f10189 	.word	0x00f10189
 800f880:	019a0314 	.word	0x019a0314
 800f884:	027c0098 	.word	0x027c0098
 800f888:	03140314 	.word	0x03140314
 800f88c:	03140065 	.word	0x03140065
 800f890:	0098      	.short	0x0098
 800f892:	9800      	ldr	r0, [sp, #0]
 800f894:	aa0e      	add	r2, sp, #56	@ 0x38
 800f896:	4639      	mov	r1, r7
 800f898:	f7ff fede 	bl	800f658 <__sprint_r>
 800f89c:	2800      	cmp	r0, #0
 800f89e:	f040 8336 	bne.w	800ff0e <_vfiprintf_r+0x852>
 800f8a2:	ae11      	add	r6, sp, #68	@ 0x44
 800f8a4:	e780      	b.n	800f7a8 <_vfiprintf_r+0xec>
 800f8a6:	4a99      	ldr	r2, [pc, #612]	@ (800fb0c <_vfiprintf_r+0x450>)
 800f8a8:	9205      	str	r2, [sp, #20]
 800f8aa:	f01a 0220 	ands.w	r2, sl, #32
 800f8ae:	f000 8231 	beq.w	800fd14 <_vfiprintf_r+0x658>
 800f8b2:	3507      	adds	r5, #7
 800f8b4:	f025 0507 	bic.w	r5, r5, #7
 800f8b8:	46a8      	mov	r8, r5
 800f8ba:	686d      	ldr	r5, [r5, #4]
 800f8bc:	f858 4b08 	ldr.w	r4, [r8], #8
 800f8c0:	f01a 0f01 	tst.w	sl, #1
 800f8c4:	d009      	beq.n	800f8da <_vfiprintf_r+0x21e>
 800f8c6:	ea54 0205 	orrs.w	r2, r4, r5
 800f8ca:	bf1f      	itttt	ne
 800f8cc:	2230      	movne	r2, #48	@ 0x30
 800f8ce:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 800f8d2:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 800f8d6:	f04a 0a02 	orrne.w	sl, sl, #2
 800f8da:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 800f8de:	e112      	b.n	800fb06 <_vfiprintf_r+0x44a>
 800f8e0:	9800      	ldr	r0, [sp, #0]
 800f8e2:	f001 f94f 	bl	8010b84 <_localeconv_r>
 800f8e6:	6843      	ldr	r3, [r0, #4]
 800f8e8:	9309      	str	r3, [sp, #36]	@ 0x24
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	f7f0 fce0 	bl	80002b0 <strlen>
 800f8f0:	9007      	str	r0, [sp, #28]
 800f8f2:	9800      	ldr	r0, [sp, #0]
 800f8f4:	f001 f946 	bl	8010b84 <_localeconv_r>
 800f8f8:	6883      	ldr	r3, [r0, #8]
 800f8fa:	9306      	str	r3, [sp, #24]
 800f8fc:	9b07      	ldr	r3, [sp, #28]
 800f8fe:	b12b      	cbz	r3, 800f90c <_vfiprintf_r+0x250>
 800f900:	9b06      	ldr	r3, [sp, #24]
 800f902:	b11b      	cbz	r3, 800f90c <_vfiprintf_r+0x250>
 800f904:	781b      	ldrb	r3, [r3, #0]
 800f906:	b10b      	cbz	r3, 800f90c <_vfiprintf_r+0x250>
 800f908:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 800f90c:	465c      	mov	r4, fp
 800f90e:	e75b      	b.n	800f7c8 <_vfiprintf_r+0x10c>
 800f910:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800f914:	2b00      	cmp	r3, #0
 800f916:	d1f9      	bne.n	800f90c <_vfiprintf_r+0x250>
 800f918:	2320      	movs	r3, #32
 800f91a:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 800f91e:	e7f5      	b.n	800f90c <_vfiprintf_r+0x250>
 800f920:	f04a 0a01 	orr.w	sl, sl, #1
 800f924:	e7f2      	b.n	800f90c <_vfiprintf_r+0x250>
 800f926:	f855 3b04 	ldr.w	r3, [r5], #4
 800f92a:	9302      	str	r3, [sp, #8]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	daed      	bge.n	800f90c <_vfiprintf_r+0x250>
 800f930:	425b      	negs	r3, r3
 800f932:	9302      	str	r3, [sp, #8]
 800f934:	f04a 0a04 	orr.w	sl, sl, #4
 800f938:	e7e8      	b.n	800f90c <_vfiprintf_r+0x250>
 800f93a:	232b      	movs	r3, #43	@ 0x2b
 800f93c:	e7ed      	b.n	800f91a <_vfiprintf_r+0x25e>
 800f93e:	465a      	mov	r2, fp
 800f940:	f812 3b01 	ldrb.w	r3, [r2], #1
 800f944:	2b2a      	cmp	r3, #42	@ 0x2a
 800f946:	d112      	bne.n	800f96e <_vfiprintf_r+0x2b2>
 800f948:	f855 3b04 	ldr.w	r3, [r5], #4
 800f94c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f950:	9301      	str	r3, [sp, #4]
 800f952:	4693      	mov	fp, r2
 800f954:	e7da      	b.n	800f90c <_vfiprintf_r+0x250>
 800f956:	9b01      	ldr	r3, [sp, #4]
 800f958:	fb00 1303 	mla	r3, r0, r3, r1
 800f95c:	9301      	str	r3, [sp, #4]
 800f95e:	f812 3b01 	ldrb.w	r3, [r2], #1
 800f962:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 800f966:	2909      	cmp	r1, #9
 800f968:	d9f5      	bls.n	800f956 <_vfiprintf_r+0x29a>
 800f96a:	4693      	mov	fp, r2
 800f96c:	e72f      	b.n	800f7ce <_vfiprintf_r+0x112>
 800f96e:	2100      	movs	r1, #0
 800f970:	9101      	str	r1, [sp, #4]
 800f972:	200a      	movs	r0, #10
 800f974:	e7f5      	b.n	800f962 <_vfiprintf_r+0x2a6>
 800f976:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 800f97a:	e7c7      	b.n	800f90c <_vfiprintf_r+0x250>
 800f97c:	2100      	movs	r1, #0
 800f97e:	465a      	mov	r2, fp
 800f980:	9102      	str	r1, [sp, #8]
 800f982:	200a      	movs	r0, #10
 800f984:	9902      	ldr	r1, [sp, #8]
 800f986:	3b30      	subs	r3, #48	@ 0x30
 800f988:	fb00 3301 	mla	r3, r0, r1, r3
 800f98c:	9302      	str	r3, [sp, #8]
 800f98e:	f812 3b01 	ldrb.w	r3, [r2], #1
 800f992:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 800f996:	2909      	cmp	r1, #9
 800f998:	d9f4      	bls.n	800f984 <_vfiprintf_r+0x2c8>
 800f99a:	e7e6      	b.n	800f96a <_vfiprintf_r+0x2ae>
 800f99c:	f89b 3000 	ldrb.w	r3, [fp]
 800f9a0:	2b68      	cmp	r3, #104	@ 0x68
 800f9a2:	bf06      	itte	eq
 800f9a4:	f10b 0b01 	addeq.w	fp, fp, #1
 800f9a8:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 800f9ac:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 800f9b0:	e7ac      	b.n	800f90c <_vfiprintf_r+0x250>
 800f9b2:	f89b 3000 	ldrb.w	r3, [fp]
 800f9b6:	2b6c      	cmp	r3, #108	@ 0x6c
 800f9b8:	d104      	bne.n	800f9c4 <_vfiprintf_r+0x308>
 800f9ba:	f10b 0b01 	add.w	fp, fp, #1
 800f9be:	f04a 0a20 	orr.w	sl, sl, #32
 800f9c2:	e7a3      	b.n	800f90c <_vfiprintf_r+0x250>
 800f9c4:	f04a 0a10 	orr.w	sl, sl, #16
 800f9c8:	e7a0      	b.n	800f90c <_vfiprintf_r+0x250>
 800f9ca:	46a8      	mov	r8, r5
 800f9cc:	2400      	movs	r4, #0
 800f9ce:	f858 3b04 	ldr.w	r3, [r8], #4
 800f9d2:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 800f9d6:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 800f9da:	2301      	movs	r3, #1
 800f9dc:	9301      	str	r3, [sp, #4]
 800f9de:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 800f9e2:	e0ab      	b.n	800fb3c <_vfiprintf_r+0x480>
 800f9e4:	f04a 0a10 	orr.w	sl, sl, #16
 800f9e8:	f01a 0f20 	tst.w	sl, #32
 800f9ec:	d011      	beq.n	800fa12 <_vfiprintf_r+0x356>
 800f9ee:	3507      	adds	r5, #7
 800f9f0:	f025 0507 	bic.w	r5, r5, #7
 800f9f4:	46a8      	mov	r8, r5
 800f9f6:	686d      	ldr	r5, [r5, #4]
 800f9f8:	f858 4b08 	ldr.w	r4, [r8], #8
 800f9fc:	2d00      	cmp	r5, #0
 800f9fe:	da06      	bge.n	800fa0e <_vfiprintf_r+0x352>
 800fa00:	4264      	negs	r4, r4
 800fa02:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 800fa06:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800fa0a:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 800fa0e:	2301      	movs	r3, #1
 800fa10:	e048      	b.n	800faa4 <_vfiprintf_r+0x3e8>
 800fa12:	46a8      	mov	r8, r5
 800fa14:	f01a 0f10 	tst.w	sl, #16
 800fa18:	f858 5b04 	ldr.w	r5, [r8], #4
 800fa1c:	d002      	beq.n	800fa24 <_vfiprintf_r+0x368>
 800fa1e:	462c      	mov	r4, r5
 800fa20:	17ed      	asrs	r5, r5, #31
 800fa22:	e7eb      	b.n	800f9fc <_vfiprintf_r+0x340>
 800fa24:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 800fa28:	d003      	beq.n	800fa32 <_vfiprintf_r+0x376>
 800fa2a:	b22c      	sxth	r4, r5
 800fa2c:	f345 35c0 	sbfx	r5, r5, #15, #1
 800fa30:	e7e4      	b.n	800f9fc <_vfiprintf_r+0x340>
 800fa32:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 800fa36:	d0f2      	beq.n	800fa1e <_vfiprintf_r+0x362>
 800fa38:	b26c      	sxtb	r4, r5
 800fa3a:	f345 15c0 	sbfx	r5, r5, #7, #1
 800fa3e:	e7dd      	b.n	800f9fc <_vfiprintf_r+0x340>
 800fa40:	f01a 0f20 	tst.w	sl, #32
 800fa44:	d007      	beq.n	800fa56 <_vfiprintf_r+0x39a>
 800fa46:	9a03      	ldr	r2, [sp, #12]
 800fa48:	682b      	ldr	r3, [r5, #0]
 800fa4a:	9903      	ldr	r1, [sp, #12]
 800fa4c:	17d2      	asrs	r2, r2, #31
 800fa4e:	e9c3 1200 	strd	r1, r2, [r3]
 800fa52:	3504      	adds	r5, #4
 800fa54:	e693      	b.n	800f77e <_vfiprintf_r+0xc2>
 800fa56:	f01a 0f10 	tst.w	sl, #16
 800fa5a:	d003      	beq.n	800fa64 <_vfiprintf_r+0x3a8>
 800fa5c:	682b      	ldr	r3, [r5, #0]
 800fa5e:	9a03      	ldr	r2, [sp, #12]
 800fa60:	601a      	str	r2, [r3, #0]
 800fa62:	e7f6      	b.n	800fa52 <_vfiprintf_r+0x396>
 800fa64:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 800fa68:	d003      	beq.n	800fa72 <_vfiprintf_r+0x3b6>
 800fa6a:	682b      	ldr	r3, [r5, #0]
 800fa6c:	9a03      	ldr	r2, [sp, #12]
 800fa6e:	801a      	strh	r2, [r3, #0]
 800fa70:	e7ef      	b.n	800fa52 <_vfiprintf_r+0x396>
 800fa72:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 800fa76:	d0f1      	beq.n	800fa5c <_vfiprintf_r+0x3a0>
 800fa78:	682b      	ldr	r3, [r5, #0]
 800fa7a:	9a03      	ldr	r2, [sp, #12]
 800fa7c:	701a      	strb	r2, [r3, #0]
 800fa7e:	e7e8      	b.n	800fa52 <_vfiprintf_r+0x396>
 800fa80:	f04a 0a10 	orr.w	sl, sl, #16
 800fa84:	f01a 0320 	ands.w	r3, sl, #32
 800fa88:	d01f      	beq.n	800faca <_vfiprintf_r+0x40e>
 800fa8a:	3507      	adds	r5, #7
 800fa8c:	f025 0507 	bic.w	r5, r5, #7
 800fa90:	46a8      	mov	r8, r5
 800fa92:	686d      	ldr	r5, [r5, #4]
 800fa94:	f858 4b08 	ldr.w	r4, [r8], #8
 800fa98:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 800fa9c:	2300      	movs	r3, #0
 800fa9e:	2200      	movs	r2, #0
 800faa0:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 800faa4:	9a01      	ldr	r2, [sp, #4]
 800faa6:	3201      	adds	r2, #1
 800faa8:	f000 825f 	beq.w	800ff6a <_vfiprintf_r+0x8ae>
 800faac:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 800fab0:	9204      	str	r2, [sp, #16]
 800fab2:	ea54 0205 	orrs.w	r2, r4, r5
 800fab6:	f040 825e 	bne.w	800ff76 <_vfiprintf_r+0x8ba>
 800faba:	9a01      	ldr	r2, [sp, #4]
 800fabc:	2a00      	cmp	r2, #0
 800fabe:	f000 8198 	beq.w	800fdf2 <_vfiprintf_r+0x736>
 800fac2:	2b01      	cmp	r3, #1
 800fac4:	f040 825a 	bne.w	800ff7c <_vfiprintf_r+0x8c0>
 800fac8:	e13b      	b.n	800fd42 <_vfiprintf_r+0x686>
 800faca:	46a8      	mov	r8, r5
 800facc:	f01a 0510 	ands.w	r5, sl, #16
 800fad0:	f858 4b04 	ldr.w	r4, [r8], #4
 800fad4:	d001      	beq.n	800fada <_vfiprintf_r+0x41e>
 800fad6:	461d      	mov	r5, r3
 800fad8:	e7de      	b.n	800fa98 <_vfiprintf_r+0x3dc>
 800fada:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 800fade:	d001      	beq.n	800fae4 <_vfiprintf_r+0x428>
 800fae0:	b2a4      	uxth	r4, r4
 800fae2:	e7d9      	b.n	800fa98 <_vfiprintf_r+0x3dc>
 800fae4:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 800fae8:	d0d6      	beq.n	800fa98 <_vfiprintf_r+0x3dc>
 800faea:	b2e4      	uxtb	r4, r4
 800faec:	e7f3      	b.n	800fad6 <_vfiprintf_r+0x41a>
 800faee:	46a8      	mov	r8, r5
 800faf0:	f647 0330 	movw	r3, #30768	@ 0x7830
 800faf4:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 800faf8:	f858 4b04 	ldr.w	r4, [r8], #4
 800fafc:	4b03      	ldr	r3, [pc, #12]	@ (800fb0c <_vfiprintf_r+0x450>)
 800fafe:	9305      	str	r3, [sp, #20]
 800fb00:	2500      	movs	r5, #0
 800fb02:	f04a 0a02 	orr.w	sl, sl, #2
 800fb06:	2302      	movs	r3, #2
 800fb08:	e7c9      	b.n	800fa9e <_vfiprintf_r+0x3e2>
 800fb0a:	bf00      	nop
 800fb0c:	08091870 	.word	0x08091870
 800fb10:	9b01      	ldr	r3, [sp, #4]
 800fb12:	46a8      	mov	r8, r5
 800fb14:	1c5c      	adds	r4, r3, #1
 800fb16:	f04f 0500 	mov.w	r5, #0
 800fb1a:	f858 9b04 	ldr.w	r9, [r8], #4
 800fb1e:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 800fb22:	f000 80d0 	beq.w	800fcc6 <_vfiprintf_r+0x60a>
 800fb26:	461a      	mov	r2, r3
 800fb28:	4629      	mov	r1, r5
 800fb2a:	4648      	mov	r0, r9
 800fb2c:	f7f0 fb70 	bl	8000210 <memchr>
 800fb30:	4604      	mov	r4, r0
 800fb32:	b118      	cbz	r0, 800fb3c <_vfiprintf_r+0x480>
 800fb34:	eba0 0309 	sub.w	r3, r0, r9
 800fb38:	9301      	str	r3, [sp, #4]
 800fb3a:	462c      	mov	r4, r5
 800fb3c:	9b01      	ldr	r3, [sp, #4]
 800fb3e:	42a3      	cmp	r3, r4
 800fb40:	bfb8      	it	lt
 800fb42:	4623      	movlt	r3, r4
 800fb44:	9304      	str	r3, [sp, #16]
 800fb46:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800fb4a:	b113      	cbz	r3, 800fb52 <_vfiprintf_r+0x496>
 800fb4c:	9b04      	ldr	r3, [sp, #16]
 800fb4e:	3301      	adds	r3, #1
 800fb50:	9304      	str	r3, [sp, #16]
 800fb52:	f01a 0302 	ands.w	r3, sl, #2
 800fb56:	9308      	str	r3, [sp, #32]
 800fb58:	bf1e      	ittt	ne
 800fb5a:	9b04      	ldrne	r3, [sp, #16]
 800fb5c:	3302      	addne	r3, #2
 800fb5e:	9304      	strne	r3, [sp, #16]
 800fb60:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 800fb64:	930a      	str	r3, [sp, #40]	@ 0x28
 800fb66:	d11f      	bne.n	800fba8 <_vfiprintf_r+0x4ec>
 800fb68:	9b02      	ldr	r3, [sp, #8]
 800fb6a:	9a04      	ldr	r2, [sp, #16]
 800fb6c:	1a9d      	subs	r5, r3, r2
 800fb6e:	2d00      	cmp	r5, #0
 800fb70:	dd1a      	ble.n	800fba8 <_vfiprintf_r+0x4ec>
 800fb72:	4ba9      	ldr	r3, [pc, #676]	@ (800fe18 <_vfiprintf_r+0x75c>)
 800fb74:	6033      	str	r3, [r6, #0]
 800fb76:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 800fb7a:	2d10      	cmp	r5, #16
 800fb7c:	f102 0201 	add.w	r2, r2, #1
 800fb80:	f106 0008 	add.w	r0, r6, #8
 800fb84:	f300 814e 	bgt.w	800fe24 <_vfiprintf_r+0x768>
 800fb88:	6075      	str	r5, [r6, #4]
 800fb8a:	2a07      	cmp	r2, #7
 800fb8c:	4465      	add	r5, ip
 800fb8e:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 800fb92:	f340 815a 	ble.w	800fe4a <_vfiprintf_r+0x78e>
 800fb96:	9800      	ldr	r0, [sp, #0]
 800fb98:	aa0e      	add	r2, sp, #56	@ 0x38
 800fb9a:	4639      	mov	r1, r7
 800fb9c:	f7ff fd5c 	bl	800f658 <__sprint_r>
 800fba0:	2800      	cmp	r0, #0
 800fba2:	f040 81b4 	bne.w	800ff0e <_vfiprintf_r+0x852>
 800fba6:	ae11      	add	r6, sp, #68	@ 0x44
 800fba8:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 800fbac:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 800fbb0:	b161      	cbz	r1, 800fbcc <_vfiprintf_r+0x510>
 800fbb2:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 800fbb6:	3301      	adds	r3, #1
 800fbb8:	6031      	str	r1, [r6, #0]
 800fbba:	2101      	movs	r1, #1
 800fbbc:	440a      	add	r2, r1
 800fbbe:	2b07      	cmp	r3, #7
 800fbc0:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 800fbc4:	6071      	str	r1, [r6, #4]
 800fbc6:	f300 8142 	bgt.w	800fe4e <_vfiprintf_r+0x792>
 800fbca:	3608      	adds	r6, #8
 800fbcc:	9908      	ldr	r1, [sp, #32]
 800fbce:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 800fbd2:	b159      	cbz	r1, 800fbec <_vfiprintf_r+0x530>
 800fbd4:	a90d      	add	r1, sp, #52	@ 0x34
 800fbd6:	3301      	adds	r3, #1
 800fbd8:	6031      	str	r1, [r6, #0]
 800fbda:	2102      	movs	r1, #2
 800fbdc:	440a      	add	r2, r1
 800fbde:	2b07      	cmp	r3, #7
 800fbe0:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 800fbe4:	6071      	str	r1, [r6, #4]
 800fbe6:	f300 813b 	bgt.w	800fe60 <_vfiprintf_r+0x7a4>
 800fbea:	3608      	adds	r6, #8
 800fbec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fbee:	2b80      	cmp	r3, #128	@ 0x80
 800fbf0:	d11f      	bne.n	800fc32 <_vfiprintf_r+0x576>
 800fbf2:	9b02      	ldr	r3, [sp, #8]
 800fbf4:	9a04      	ldr	r2, [sp, #16]
 800fbf6:	1a9d      	subs	r5, r3, r2
 800fbf8:	2d00      	cmp	r5, #0
 800fbfa:	dd1a      	ble.n	800fc32 <_vfiprintf_r+0x576>
 800fbfc:	4b87      	ldr	r3, [pc, #540]	@ (800fe1c <_vfiprintf_r+0x760>)
 800fbfe:	6033      	str	r3, [r6, #0]
 800fc00:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 800fc04:	2d10      	cmp	r5, #16
 800fc06:	f102 0201 	add.w	r2, r2, #1
 800fc0a:	f106 0008 	add.w	r0, r6, #8
 800fc0e:	f300 8130 	bgt.w	800fe72 <_vfiprintf_r+0x7b6>
 800fc12:	6075      	str	r5, [r6, #4]
 800fc14:	2a07      	cmp	r2, #7
 800fc16:	4465      	add	r5, ip
 800fc18:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 800fc1c:	f340 813c 	ble.w	800fe98 <_vfiprintf_r+0x7dc>
 800fc20:	9800      	ldr	r0, [sp, #0]
 800fc22:	aa0e      	add	r2, sp, #56	@ 0x38
 800fc24:	4639      	mov	r1, r7
 800fc26:	f7ff fd17 	bl	800f658 <__sprint_r>
 800fc2a:	2800      	cmp	r0, #0
 800fc2c:	f040 816f 	bne.w	800ff0e <_vfiprintf_r+0x852>
 800fc30:	ae11      	add	r6, sp, #68	@ 0x44
 800fc32:	9b01      	ldr	r3, [sp, #4]
 800fc34:	1ae4      	subs	r4, r4, r3
 800fc36:	2c00      	cmp	r4, #0
 800fc38:	dd1a      	ble.n	800fc70 <_vfiprintf_r+0x5b4>
 800fc3a:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 800fc3e:	4877      	ldr	r0, [pc, #476]	@ (800fe1c <_vfiprintf_r+0x760>)
 800fc40:	6030      	str	r0, [r6, #0]
 800fc42:	2c10      	cmp	r4, #16
 800fc44:	f103 0301 	add.w	r3, r3, #1
 800fc48:	f106 0108 	add.w	r1, r6, #8
 800fc4c:	f300 8126 	bgt.w	800fe9c <_vfiprintf_r+0x7e0>
 800fc50:	6074      	str	r4, [r6, #4]
 800fc52:	2b07      	cmp	r3, #7
 800fc54:	4414      	add	r4, r2
 800fc56:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 800fc5a:	f340 8130 	ble.w	800febe <_vfiprintf_r+0x802>
 800fc5e:	9800      	ldr	r0, [sp, #0]
 800fc60:	aa0e      	add	r2, sp, #56	@ 0x38
 800fc62:	4639      	mov	r1, r7
 800fc64:	f7ff fcf8 	bl	800f658 <__sprint_r>
 800fc68:	2800      	cmp	r0, #0
 800fc6a:	f040 8150 	bne.w	800ff0e <_vfiprintf_r+0x852>
 800fc6e:	ae11      	add	r6, sp, #68	@ 0x44
 800fc70:	9b01      	ldr	r3, [sp, #4]
 800fc72:	9a01      	ldr	r2, [sp, #4]
 800fc74:	6073      	str	r3, [r6, #4]
 800fc76:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fc78:	f8c6 9000 	str.w	r9, [r6]
 800fc7c:	4413      	add	r3, r2
 800fc7e:	9310      	str	r3, [sp, #64]	@ 0x40
 800fc80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fc82:	3301      	adds	r3, #1
 800fc84:	2b07      	cmp	r3, #7
 800fc86:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fc88:	f300 811b 	bgt.w	800fec2 <_vfiprintf_r+0x806>
 800fc8c:	f106 0308 	add.w	r3, r6, #8
 800fc90:	f01a 0f04 	tst.w	sl, #4
 800fc94:	f040 811d 	bne.w	800fed2 <_vfiprintf_r+0x816>
 800fc98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fc9c:	9904      	ldr	r1, [sp, #16]
 800fc9e:	428a      	cmp	r2, r1
 800fca0:	bfac      	ite	ge
 800fca2:	189b      	addge	r3, r3, r2
 800fca4:	185b      	addlt	r3, r3, r1
 800fca6:	9303      	str	r3, [sp, #12]
 800fca8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fcaa:	b13b      	cbz	r3, 800fcbc <_vfiprintf_r+0x600>
 800fcac:	9800      	ldr	r0, [sp, #0]
 800fcae:	aa0e      	add	r2, sp, #56	@ 0x38
 800fcb0:	4639      	mov	r1, r7
 800fcb2:	f7ff fcd1 	bl	800f658 <__sprint_r>
 800fcb6:	2800      	cmp	r0, #0
 800fcb8:	f040 8129 	bne.w	800ff0e <_vfiprintf_r+0x852>
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fcc0:	4645      	mov	r5, r8
 800fcc2:	ae11      	add	r6, sp, #68	@ 0x44
 800fcc4:	e55b      	b.n	800f77e <_vfiprintf_r+0xc2>
 800fcc6:	4648      	mov	r0, r9
 800fcc8:	f7f0 faf2 	bl	80002b0 <strlen>
 800fccc:	9001      	str	r0, [sp, #4]
 800fcce:	e734      	b.n	800fb3a <_vfiprintf_r+0x47e>
 800fcd0:	f04a 0a10 	orr.w	sl, sl, #16
 800fcd4:	f01a 0320 	ands.w	r3, sl, #32
 800fcd8:	d008      	beq.n	800fcec <_vfiprintf_r+0x630>
 800fcda:	3507      	adds	r5, #7
 800fcdc:	f025 0507 	bic.w	r5, r5, #7
 800fce0:	46a8      	mov	r8, r5
 800fce2:	686d      	ldr	r5, [r5, #4]
 800fce4:	f858 4b08 	ldr.w	r4, [r8], #8
 800fce8:	2301      	movs	r3, #1
 800fcea:	e6d8      	b.n	800fa9e <_vfiprintf_r+0x3e2>
 800fcec:	46a8      	mov	r8, r5
 800fcee:	f01a 0510 	ands.w	r5, sl, #16
 800fcf2:	f858 4b04 	ldr.w	r4, [r8], #4
 800fcf6:	d001      	beq.n	800fcfc <_vfiprintf_r+0x640>
 800fcf8:	461d      	mov	r5, r3
 800fcfa:	e7f5      	b.n	800fce8 <_vfiprintf_r+0x62c>
 800fcfc:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 800fd00:	d001      	beq.n	800fd06 <_vfiprintf_r+0x64a>
 800fd02:	b2a4      	uxth	r4, r4
 800fd04:	e7f0      	b.n	800fce8 <_vfiprintf_r+0x62c>
 800fd06:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 800fd0a:	d0ed      	beq.n	800fce8 <_vfiprintf_r+0x62c>
 800fd0c:	b2e4      	uxtb	r4, r4
 800fd0e:	e7f3      	b.n	800fcf8 <_vfiprintf_r+0x63c>
 800fd10:	4a43      	ldr	r2, [pc, #268]	@ (800fe20 <_vfiprintf_r+0x764>)
 800fd12:	e5c9      	b.n	800f8a8 <_vfiprintf_r+0x1ec>
 800fd14:	46a8      	mov	r8, r5
 800fd16:	f01a 0510 	ands.w	r5, sl, #16
 800fd1a:	f858 4b04 	ldr.w	r4, [r8], #4
 800fd1e:	d001      	beq.n	800fd24 <_vfiprintf_r+0x668>
 800fd20:	4615      	mov	r5, r2
 800fd22:	e5cd      	b.n	800f8c0 <_vfiprintf_r+0x204>
 800fd24:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 800fd28:	d001      	beq.n	800fd2e <_vfiprintf_r+0x672>
 800fd2a:	b2a4      	uxth	r4, r4
 800fd2c:	e5c8      	b.n	800f8c0 <_vfiprintf_r+0x204>
 800fd2e:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 800fd32:	f43f adc5 	beq.w	800f8c0 <_vfiprintf_r+0x204>
 800fd36:	b2e4      	uxtb	r4, r4
 800fd38:	e7f2      	b.n	800fd20 <_vfiprintf_r+0x664>
 800fd3a:	2c0a      	cmp	r4, #10
 800fd3c:	f175 0300 	sbcs.w	r3, r5, #0
 800fd40:	d206      	bcs.n	800fd50 <_vfiprintf_r+0x694>
 800fd42:	3430      	adds	r4, #48	@ 0x30
 800fd44:	b2e4      	uxtb	r4, r4
 800fd46:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 800fd4a:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 800fd4e:	e131      	b.n	800ffb4 <_vfiprintf_r+0x8f8>
 800fd50:	ab3a      	add	r3, sp, #232	@ 0xe8
 800fd52:	9308      	str	r3, [sp, #32]
 800fd54:	9b04      	ldr	r3, [sp, #16]
 800fd56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800fd5a:	f04f 0a00 	mov.w	sl, #0
 800fd5e:	930a      	str	r3, [sp, #40]	@ 0x28
 800fd60:	220a      	movs	r2, #10
 800fd62:	2300      	movs	r3, #0
 800fd64:	4620      	mov	r0, r4
 800fd66:	4629      	mov	r1, r5
 800fd68:	f7f0 ff3e 	bl	8000be8 <__aeabi_uldivmod>
 800fd6c:	460b      	mov	r3, r1
 800fd6e:	9908      	ldr	r1, [sp, #32]
 800fd70:	900b      	str	r0, [sp, #44]	@ 0x2c
 800fd72:	3230      	adds	r2, #48	@ 0x30
 800fd74:	f801 2c01 	strb.w	r2, [r1, #-1]
 800fd78:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fd7a:	f101 39ff 	add.w	r9, r1, #4294967295	@ 0xffffffff
 800fd7e:	f10a 0a01 	add.w	sl, sl, #1
 800fd82:	b1e2      	cbz	r2, 800fdbe <_vfiprintf_r+0x702>
 800fd84:	9a06      	ldr	r2, [sp, #24]
 800fd86:	7812      	ldrb	r2, [r2, #0]
 800fd88:	4552      	cmp	r2, sl
 800fd8a:	d118      	bne.n	800fdbe <_vfiprintf_r+0x702>
 800fd8c:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 800fd90:	d015      	beq.n	800fdbe <_vfiprintf_r+0x702>
 800fd92:	2c0a      	cmp	r4, #10
 800fd94:	f175 0200 	sbcs.w	r2, r5, #0
 800fd98:	d311      	bcc.n	800fdbe <_vfiprintf_r+0x702>
 800fd9a:	9308      	str	r3, [sp, #32]
 800fd9c:	9b07      	ldr	r3, [sp, #28]
 800fd9e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fda0:	eba9 0903 	sub.w	r9, r9, r3
 800fda4:	461a      	mov	r2, r3
 800fda6:	4648      	mov	r0, r9
 800fda8:	f000 fea2 	bl	8010af0 <strncpy>
 800fdac:	9b06      	ldr	r3, [sp, #24]
 800fdae:	785a      	ldrb	r2, [r3, #1]
 800fdb0:	9b08      	ldr	r3, [sp, #32]
 800fdb2:	b172      	cbz	r2, 800fdd2 <_vfiprintf_r+0x716>
 800fdb4:	9a06      	ldr	r2, [sp, #24]
 800fdb6:	3201      	adds	r2, #1
 800fdb8:	9206      	str	r2, [sp, #24]
 800fdba:	f04f 0a00 	mov.w	sl, #0
 800fdbe:	2c0a      	cmp	r4, #10
 800fdc0:	f175 0500 	sbcs.w	r5, r5, #0
 800fdc4:	f0c0 80f6 	bcc.w	800ffb4 <_vfiprintf_r+0x8f8>
 800fdc8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800fdca:	f8cd 9020 	str.w	r9, [sp, #32]
 800fdce:	461d      	mov	r5, r3
 800fdd0:	e7c6      	b.n	800fd60 <_vfiprintf_r+0x6a4>
 800fdd2:	4692      	mov	sl, r2
 800fdd4:	e7f3      	b.n	800fdbe <_vfiprintf_r+0x702>
 800fdd6:	f004 030f 	and.w	r3, r4, #15
 800fdda:	9a05      	ldr	r2, [sp, #20]
 800fddc:	0924      	lsrs	r4, r4, #4
 800fdde:	5cd3      	ldrb	r3, [r2, r3]
 800fde0:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800fde4:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 800fde8:	092d      	lsrs	r5, r5, #4
 800fdea:	ea54 0305 	orrs.w	r3, r4, r5
 800fdee:	d1f2      	bne.n	800fdd6 <_vfiprintf_r+0x71a>
 800fdf0:	e0e0      	b.n	800ffb4 <_vfiprintf_r+0x8f8>
 800fdf2:	b923      	cbnz	r3, 800fdfe <_vfiprintf_r+0x742>
 800fdf4:	f01a 0f01 	tst.w	sl, #1
 800fdf8:	d001      	beq.n	800fdfe <_vfiprintf_r+0x742>
 800fdfa:	2430      	movs	r4, #48	@ 0x30
 800fdfc:	e7a3      	b.n	800fd46 <_vfiprintf_r+0x68a>
 800fdfe:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 800fe02:	e0d7      	b.n	800ffb4 <_vfiprintf_r+0x8f8>
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	f000 80a3 	beq.w	800ff50 <_vfiprintf_r+0x894>
 800fe0a:	2400      	movs	r4, #0
 800fe0c:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 800fe10:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 800fe14:	46a8      	mov	r8, r5
 800fe16:	e5e0      	b.n	800f9da <_vfiprintf_r+0x31e>
 800fe18:	080918c4 	.word	0x080918c4
 800fe1c:	080918b4 	.word	0x080918b4
 800fe20:	08091881 	.word	0x08091881
 800fe24:	2110      	movs	r1, #16
 800fe26:	6071      	str	r1, [r6, #4]
 800fe28:	2a07      	cmp	r2, #7
 800fe2a:	4461      	add	r1, ip
 800fe2c:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 800fe30:	dd08      	ble.n	800fe44 <_vfiprintf_r+0x788>
 800fe32:	9800      	ldr	r0, [sp, #0]
 800fe34:	aa0e      	add	r2, sp, #56	@ 0x38
 800fe36:	4639      	mov	r1, r7
 800fe38:	f7ff fc0e 	bl	800f658 <__sprint_r>
 800fe3c:	2800      	cmp	r0, #0
 800fe3e:	d166      	bne.n	800ff0e <_vfiprintf_r+0x852>
 800fe40:	4b60      	ldr	r3, [pc, #384]	@ (800ffc4 <_vfiprintf_r+0x908>)
 800fe42:	a811      	add	r0, sp, #68	@ 0x44
 800fe44:	3d10      	subs	r5, #16
 800fe46:	4606      	mov	r6, r0
 800fe48:	e694      	b.n	800fb74 <_vfiprintf_r+0x4b8>
 800fe4a:	4606      	mov	r6, r0
 800fe4c:	e6ac      	b.n	800fba8 <_vfiprintf_r+0x4ec>
 800fe4e:	9800      	ldr	r0, [sp, #0]
 800fe50:	aa0e      	add	r2, sp, #56	@ 0x38
 800fe52:	4639      	mov	r1, r7
 800fe54:	f7ff fc00 	bl	800f658 <__sprint_r>
 800fe58:	2800      	cmp	r0, #0
 800fe5a:	d158      	bne.n	800ff0e <_vfiprintf_r+0x852>
 800fe5c:	ae11      	add	r6, sp, #68	@ 0x44
 800fe5e:	e6b5      	b.n	800fbcc <_vfiprintf_r+0x510>
 800fe60:	9800      	ldr	r0, [sp, #0]
 800fe62:	aa0e      	add	r2, sp, #56	@ 0x38
 800fe64:	4639      	mov	r1, r7
 800fe66:	f7ff fbf7 	bl	800f658 <__sprint_r>
 800fe6a:	2800      	cmp	r0, #0
 800fe6c:	d14f      	bne.n	800ff0e <_vfiprintf_r+0x852>
 800fe6e:	ae11      	add	r6, sp, #68	@ 0x44
 800fe70:	e6bc      	b.n	800fbec <_vfiprintf_r+0x530>
 800fe72:	2110      	movs	r1, #16
 800fe74:	6071      	str	r1, [r6, #4]
 800fe76:	2a07      	cmp	r2, #7
 800fe78:	4461      	add	r1, ip
 800fe7a:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 800fe7e:	dd08      	ble.n	800fe92 <_vfiprintf_r+0x7d6>
 800fe80:	9800      	ldr	r0, [sp, #0]
 800fe82:	aa0e      	add	r2, sp, #56	@ 0x38
 800fe84:	4639      	mov	r1, r7
 800fe86:	f7ff fbe7 	bl	800f658 <__sprint_r>
 800fe8a:	2800      	cmp	r0, #0
 800fe8c:	d13f      	bne.n	800ff0e <_vfiprintf_r+0x852>
 800fe8e:	4b4e      	ldr	r3, [pc, #312]	@ (800ffc8 <_vfiprintf_r+0x90c>)
 800fe90:	a811      	add	r0, sp, #68	@ 0x44
 800fe92:	3d10      	subs	r5, #16
 800fe94:	4606      	mov	r6, r0
 800fe96:	e6b2      	b.n	800fbfe <_vfiprintf_r+0x542>
 800fe98:	4606      	mov	r6, r0
 800fe9a:	e6ca      	b.n	800fc32 <_vfiprintf_r+0x576>
 800fe9c:	2010      	movs	r0, #16
 800fe9e:	4402      	add	r2, r0
 800fea0:	2b07      	cmp	r3, #7
 800fea2:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 800fea6:	6070      	str	r0, [r6, #4]
 800fea8:	dd06      	ble.n	800feb8 <_vfiprintf_r+0x7fc>
 800feaa:	9800      	ldr	r0, [sp, #0]
 800feac:	aa0e      	add	r2, sp, #56	@ 0x38
 800feae:	4639      	mov	r1, r7
 800feb0:	f7ff fbd2 	bl	800f658 <__sprint_r>
 800feb4:	bb58      	cbnz	r0, 800ff0e <_vfiprintf_r+0x852>
 800feb6:	a911      	add	r1, sp, #68	@ 0x44
 800feb8:	3c10      	subs	r4, #16
 800feba:	460e      	mov	r6, r1
 800febc:	e6bd      	b.n	800fc3a <_vfiprintf_r+0x57e>
 800febe:	460e      	mov	r6, r1
 800fec0:	e6d6      	b.n	800fc70 <_vfiprintf_r+0x5b4>
 800fec2:	9800      	ldr	r0, [sp, #0]
 800fec4:	aa0e      	add	r2, sp, #56	@ 0x38
 800fec6:	4639      	mov	r1, r7
 800fec8:	f7ff fbc6 	bl	800f658 <__sprint_r>
 800fecc:	b9f8      	cbnz	r0, 800ff0e <_vfiprintf_r+0x852>
 800fece:	ab11      	add	r3, sp, #68	@ 0x44
 800fed0:	e6de      	b.n	800fc90 <_vfiprintf_r+0x5d4>
 800fed2:	9a02      	ldr	r2, [sp, #8]
 800fed4:	9904      	ldr	r1, [sp, #16]
 800fed6:	1a54      	subs	r4, r2, r1
 800fed8:	2c00      	cmp	r4, #0
 800feda:	f77f aedd 	ble.w	800fc98 <_vfiprintf_r+0x5dc>
 800fede:	4d39      	ldr	r5, [pc, #228]	@ (800ffc4 <_vfiprintf_r+0x908>)
 800fee0:	2610      	movs	r6, #16
 800fee2:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 800fee6:	2c10      	cmp	r4, #16
 800fee8:	f102 0201 	add.w	r2, r2, #1
 800feec:	601d      	str	r5, [r3, #0]
 800feee:	dc1d      	bgt.n	800ff2c <_vfiprintf_r+0x870>
 800fef0:	605c      	str	r4, [r3, #4]
 800fef2:	2a07      	cmp	r2, #7
 800fef4:	440c      	add	r4, r1
 800fef6:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 800fefa:	f77f aecd 	ble.w	800fc98 <_vfiprintf_r+0x5dc>
 800fefe:	9800      	ldr	r0, [sp, #0]
 800ff00:	aa0e      	add	r2, sp, #56	@ 0x38
 800ff02:	4639      	mov	r1, r7
 800ff04:	f7ff fba8 	bl	800f658 <__sprint_r>
 800ff08:	2800      	cmp	r0, #0
 800ff0a:	f43f aec5 	beq.w	800fc98 <_vfiprintf_r+0x5dc>
 800ff0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ff10:	07d9      	lsls	r1, r3, #31
 800ff12:	d405      	bmi.n	800ff20 <_vfiprintf_r+0x864>
 800ff14:	89bb      	ldrh	r3, [r7, #12]
 800ff16:	059a      	lsls	r2, r3, #22
 800ff18:	d402      	bmi.n	800ff20 <_vfiprintf_r+0x864>
 800ff1a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800ff1c:	f000 fe93 	bl	8010c46 <__retarget_lock_release_recursive>
 800ff20:	89bb      	ldrh	r3, [r7, #12]
 800ff22:	065b      	lsls	r3, r3, #25
 800ff24:	f57f abfb 	bpl.w	800f71e <_vfiprintf_r+0x62>
 800ff28:	f7ff bbf6 	b.w	800f718 <_vfiprintf_r+0x5c>
 800ff2c:	3110      	adds	r1, #16
 800ff2e:	2a07      	cmp	r2, #7
 800ff30:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 800ff34:	605e      	str	r6, [r3, #4]
 800ff36:	dc02      	bgt.n	800ff3e <_vfiprintf_r+0x882>
 800ff38:	3308      	adds	r3, #8
 800ff3a:	3c10      	subs	r4, #16
 800ff3c:	e7d1      	b.n	800fee2 <_vfiprintf_r+0x826>
 800ff3e:	9800      	ldr	r0, [sp, #0]
 800ff40:	aa0e      	add	r2, sp, #56	@ 0x38
 800ff42:	4639      	mov	r1, r7
 800ff44:	f7ff fb88 	bl	800f658 <__sprint_r>
 800ff48:	2800      	cmp	r0, #0
 800ff4a:	d1e0      	bne.n	800ff0e <_vfiprintf_r+0x852>
 800ff4c:	ab11      	add	r3, sp, #68	@ 0x44
 800ff4e:	e7f4      	b.n	800ff3a <_vfiprintf_r+0x87e>
 800ff50:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ff52:	b913      	cbnz	r3, 800ff5a <_vfiprintf_r+0x89e>
 800ff54:	2300      	movs	r3, #0
 800ff56:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ff58:	e7d9      	b.n	800ff0e <_vfiprintf_r+0x852>
 800ff5a:	9800      	ldr	r0, [sp, #0]
 800ff5c:	aa0e      	add	r2, sp, #56	@ 0x38
 800ff5e:	4639      	mov	r1, r7
 800ff60:	f7ff fb7a 	bl	800f658 <__sprint_r>
 800ff64:	2800      	cmp	r0, #0
 800ff66:	d0f5      	beq.n	800ff54 <_vfiprintf_r+0x898>
 800ff68:	e7d1      	b.n	800ff0e <_vfiprintf_r+0x852>
 800ff6a:	ea54 0205 	orrs.w	r2, r4, r5
 800ff6e:	f8cd a010 	str.w	sl, [sp, #16]
 800ff72:	f43f ada6 	beq.w	800fac2 <_vfiprintf_r+0x406>
 800ff76:	2b01      	cmp	r3, #1
 800ff78:	f43f aedf 	beq.w	800fd3a <_vfiprintf_r+0x67e>
 800ff7c:	2b02      	cmp	r3, #2
 800ff7e:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 800ff82:	f43f af28 	beq.w	800fdd6 <_vfiprintf_r+0x71a>
 800ff86:	f004 0307 	and.w	r3, r4, #7
 800ff8a:	08e4      	lsrs	r4, r4, #3
 800ff8c:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 800ff90:	08ed      	lsrs	r5, r5, #3
 800ff92:	3330      	adds	r3, #48	@ 0x30
 800ff94:	ea54 0105 	orrs.w	r1, r4, r5
 800ff98:	464a      	mov	r2, r9
 800ff9a:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800ff9e:	d1f2      	bne.n	800ff86 <_vfiprintf_r+0x8ca>
 800ffa0:	9904      	ldr	r1, [sp, #16]
 800ffa2:	07c8      	lsls	r0, r1, #31
 800ffa4:	d506      	bpl.n	800ffb4 <_vfiprintf_r+0x8f8>
 800ffa6:	2b30      	cmp	r3, #48	@ 0x30
 800ffa8:	d004      	beq.n	800ffb4 <_vfiprintf_r+0x8f8>
 800ffaa:	2330      	movs	r3, #48	@ 0x30
 800ffac:	f809 3c01 	strb.w	r3, [r9, #-1]
 800ffb0:	f1a2 0902 	sub.w	r9, r2, #2
 800ffb4:	ab3a      	add	r3, sp, #232	@ 0xe8
 800ffb6:	eba3 0309 	sub.w	r3, r3, r9
 800ffba:	9c01      	ldr	r4, [sp, #4]
 800ffbc:	f8dd a010 	ldr.w	sl, [sp, #16]
 800ffc0:	9301      	str	r3, [sp, #4]
 800ffc2:	e5bb      	b.n	800fb3c <_vfiprintf_r+0x480>
 800ffc4:	080918c4 	.word	0x080918c4
 800ffc8:	080918b4 	.word	0x080918b4

0800ffcc <__sbprintf>:
 800ffcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ffce:	461f      	mov	r7, r3
 800ffd0:	898b      	ldrh	r3, [r1, #12]
 800ffd2:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 800ffd6:	f023 0302 	bic.w	r3, r3, #2
 800ffda:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ffde:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 800ffe0:	9319      	str	r3, [sp, #100]	@ 0x64
 800ffe2:	89cb      	ldrh	r3, [r1, #14]
 800ffe4:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ffe8:	69cb      	ldr	r3, [r1, #28]
 800ffea:	9307      	str	r3, [sp, #28]
 800ffec:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 800ffee:	9309      	str	r3, [sp, #36]	@ 0x24
 800fff0:	ab1a      	add	r3, sp, #104	@ 0x68
 800fff2:	9300      	str	r3, [sp, #0]
 800fff4:	9304      	str	r3, [sp, #16]
 800fff6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fffa:	4615      	mov	r5, r2
 800fffc:	4606      	mov	r6, r0
 800fffe:	9302      	str	r3, [sp, #8]
 8010000:	9305      	str	r3, [sp, #20]
 8010002:	a816      	add	r0, sp, #88	@ 0x58
 8010004:	2300      	movs	r3, #0
 8010006:	460c      	mov	r4, r1
 8010008:	9306      	str	r3, [sp, #24]
 801000a:	f000 fe19 	bl	8010c40 <__retarget_lock_init_recursive>
 801000e:	462a      	mov	r2, r5
 8010010:	463b      	mov	r3, r7
 8010012:	4669      	mov	r1, sp
 8010014:	4630      	mov	r0, r6
 8010016:	f7ff fb51 	bl	800f6bc <_vfiprintf_r>
 801001a:	1e05      	subs	r5, r0, #0
 801001c:	db07      	blt.n	801002e <__sbprintf+0x62>
 801001e:	4669      	mov	r1, sp
 8010020:	4630      	mov	r0, r6
 8010022:	f000 fa4f 	bl	80104c4 <_fflush_r>
 8010026:	2800      	cmp	r0, #0
 8010028:	bf18      	it	ne
 801002a:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 801002e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8010032:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8010034:	065b      	lsls	r3, r3, #25
 8010036:	bf42      	ittt	mi
 8010038:	89a3      	ldrhmi	r3, [r4, #12]
 801003a:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 801003e:	81a3      	strhmi	r3, [r4, #12]
 8010040:	f000 fdff 	bl	8010c42 <__retarget_lock_close_recursive>
 8010044:	4628      	mov	r0, r5
 8010046:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 801004a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801004c <__malloc_lock>:
 801004c:	4801      	ldr	r0, [pc, #4]	@ (8010054 <__malloc_lock+0x8>)
 801004e:	f000 bdf9 	b.w	8010c44 <__retarget_lock_acquire_recursive>
 8010052:	bf00      	nop
 8010054:	2000fcc8 	.word	0x2000fcc8

08010058 <__malloc_unlock>:
 8010058:	4801      	ldr	r0, [pc, #4]	@ (8010060 <__malloc_unlock+0x8>)
 801005a:	f000 bdf4 	b.w	8010c46 <__retarget_lock_release_recursive>
 801005e:	bf00      	nop
 8010060:	2000fcc8 	.word	0x2000fcc8

08010064 <_realloc_r>:
 8010064:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010068:	4682      	mov	sl, r0
 801006a:	4693      	mov	fp, r2
 801006c:	460c      	mov	r4, r1
 801006e:	b929      	cbnz	r1, 801007c <_realloc_r+0x18>
 8010070:	4611      	mov	r1, r2
 8010072:	b003      	add	sp, #12
 8010074:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010078:	f7fd be36 	b.w	800dce8 <_malloc_r>
 801007c:	f7ff ffe6 	bl	801004c <__malloc_lock>
 8010080:	f10b 080b 	add.w	r8, fp, #11
 8010084:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8010088:	f1b8 0f16 	cmp.w	r8, #22
 801008c:	f1a4 0908 	sub.w	r9, r4, #8
 8010090:	f025 0603 	bic.w	r6, r5, #3
 8010094:	d908      	bls.n	80100a8 <_realloc_r+0x44>
 8010096:	f038 0807 	bics.w	r8, r8, #7
 801009a:	d507      	bpl.n	80100ac <_realloc_r+0x48>
 801009c:	230c      	movs	r3, #12
 801009e:	f8ca 3000 	str.w	r3, [sl]
 80100a2:	f04f 0b00 	mov.w	fp, #0
 80100a6:	e032      	b.n	801010e <_realloc_r+0xaa>
 80100a8:	f04f 0810 	mov.w	r8, #16
 80100ac:	45c3      	cmp	fp, r8
 80100ae:	d8f5      	bhi.n	801009c <_realloc_r+0x38>
 80100b0:	4546      	cmp	r6, r8
 80100b2:	f280 8174 	bge.w	801039e <_realloc_r+0x33a>
 80100b6:	4b9e      	ldr	r3, [pc, #632]	@ (8010330 <_realloc_r+0x2cc>)
 80100b8:	f8d3 c008 	ldr.w	ip, [r3, #8]
 80100bc:	eb09 0106 	add.w	r1, r9, r6
 80100c0:	458c      	cmp	ip, r1
 80100c2:	6848      	ldr	r0, [r1, #4]
 80100c4:	d005      	beq.n	80100d2 <_realloc_r+0x6e>
 80100c6:	f020 0201 	bic.w	r2, r0, #1
 80100ca:	440a      	add	r2, r1
 80100cc:	6852      	ldr	r2, [r2, #4]
 80100ce:	07d7      	lsls	r7, r2, #31
 80100d0:	d449      	bmi.n	8010166 <_realloc_r+0x102>
 80100d2:	f020 0003 	bic.w	r0, r0, #3
 80100d6:	458c      	cmp	ip, r1
 80100d8:	eb06 0700 	add.w	r7, r6, r0
 80100dc:	d11b      	bne.n	8010116 <_realloc_r+0xb2>
 80100de:	f108 0210 	add.w	r2, r8, #16
 80100e2:	42ba      	cmp	r2, r7
 80100e4:	dc41      	bgt.n	801016a <_realloc_r+0x106>
 80100e6:	eb09 0208 	add.w	r2, r9, r8
 80100ea:	eba7 0708 	sub.w	r7, r7, r8
 80100ee:	f047 0701 	orr.w	r7, r7, #1
 80100f2:	609a      	str	r2, [r3, #8]
 80100f4:	6057      	str	r7, [r2, #4]
 80100f6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80100fa:	f003 0301 	and.w	r3, r3, #1
 80100fe:	ea43 0308 	orr.w	r3, r3, r8
 8010102:	f844 3c04 	str.w	r3, [r4, #-4]
 8010106:	4650      	mov	r0, sl
 8010108:	f7ff ffa6 	bl	8010058 <__malloc_unlock>
 801010c:	46a3      	mov	fp, r4
 801010e:	4658      	mov	r0, fp
 8010110:	b003      	add	sp, #12
 8010112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010116:	45b8      	cmp	r8, r7
 8010118:	dc27      	bgt.n	801016a <_realloc_r+0x106>
 801011a:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 801011e:	60d3      	str	r3, [r2, #12]
 8010120:	609a      	str	r2, [r3, #8]
 8010122:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8010126:	eba7 0008 	sub.w	r0, r7, r8
 801012a:	280f      	cmp	r0, #15
 801012c:	f003 0301 	and.w	r3, r3, #1
 8010130:	eb09 0207 	add.w	r2, r9, r7
 8010134:	f240 8135 	bls.w	80103a2 <_realloc_r+0x33e>
 8010138:	eb09 0108 	add.w	r1, r9, r8
 801013c:	ea48 0303 	orr.w	r3, r8, r3
 8010140:	f040 0001 	orr.w	r0, r0, #1
 8010144:	f8c9 3004 	str.w	r3, [r9, #4]
 8010148:	6048      	str	r0, [r1, #4]
 801014a:	6853      	ldr	r3, [r2, #4]
 801014c:	f043 0301 	orr.w	r3, r3, #1
 8010150:	6053      	str	r3, [r2, #4]
 8010152:	3108      	adds	r1, #8
 8010154:	4650      	mov	r0, sl
 8010156:	f001 fcad 	bl	8011ab4 <_free_r>
 801015a:	4650      	mov	r0, sl
 801015c:	f7ff ff7c 	bl	8010058 <__malloc_unlock>
 8010160:	f109 0b08 	add.w	fp, r9, #8
 8010164:	e7d3      	b.n	801010e <_realloc_r+0xaa>
 8010166:	2000      	movs	r0, #0
 8010168:	4601      	mov	r1, r0
 801016a:	07ea      	lsls	r2, r5, #31
 801016c:	f100 80c7 	bmi.w	80102fe <_realloc_r+0x29a>
 8010170:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8010174:	eba9 0505 	sub.w	r5, r9, r5
 8010178:	686a      	ldr	r2, [r5, #4]
 801017a:	f022 0203 	bic.w	r2, r2, #3
 801017e:	4432      	add	r2, r6
 8010180:	9201      	str	r2, [sp, #4]
 8010182:	2900      	cmp	r1, #0
 8010184:	f000 8086 	beq.w	8010294 <_realloc_r+0x230>
 8010188:	458c      	cmp	ip, r1
 801018a:	eb00 0702 	add.w	r7, r0, r2
 801018e:	d149      	bne.n	8010224 <_realloc_r+0x1c0>
 8010190:	f108 0210 	add.w	r2, r8, #16
 8010194:	42ba      	cmp	r2, r7
 8010196:	dc7d      	bgt.n	8010294 <_realloc_r+0x230>
 8010198:	46ab      	mov	fp, r5
 801019a:	68ea      	ldr	r2, [r5, #12]
 801019c:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 80101a0:	60ca      	str	r2, [r1, #12]
 80101a2:	6091      	str	r1, [r2, #8]
 80101a4:	1f32      	subs	r2, r6, #4
 80101a6:	2a24      	cmp	r2, #36	@ 0x24
 80101a8:	d836      	bhi.n	8010218 <_realloc_r+0x1b4>
 80101aa:	2a13      	cmp	r2, #19
 80101ac:	d932      	bls.n	8010214 <_realloc_r+0x1b0>
 80101ae:	6821      	ldr	r1, [r4, #0]
 80101b0:	60a9      	str	r1, [r5, #8]
 80101b2:	6861      	ldr	r1, [r4, #4]
 80101b4:	60e9      	str	r1, [r5, #12]
 80101b6:	2a1b      	cmp	r2, #27
 80101b8:	d81a      	bhi.n	80101f0 <_realloc_r+0x18c>
 80101ba:	3408      	adds	r4, #8
 80101bc:	f105 0210 	add.w	r2, r5, #16
 80101c0:	6821      	ldr	r1, [r4, #0]
 80101c2:	6011      	str	r1, [r2, #0]
 80101c4:	6861      	ldr	r1, [r4, #4]
 80101c6:	6051      	str	r1, [r2, #4]
 80101c8:	68a1      	ldr	r1, [r4, #8]
 80101ca:	6091      	str	r1, [r2, #8]
 80101cc:	eb05 0208 	add.w	r2, r5, r8
 80101d0:	eba7 0708 	sub.w	r7, r7, r8
 80101d4:	f047 0701 	orr.w	r7, r7, #1
 80101d8:	609a      	str	r2, [r3, #8]
 80101da:	6057      	str	r7, [r2, #4]
 80101dc:	686b      	ldr	r3, [r5, #4]
 80101de:	f003 0301 	and.w	r3, r3, #1
 80101e2:	ea43 0308 	orr.w	r3, r3, r8
 80101e6:	606b      	str	r3, [r5, #4]
 80101e8:	4650      	mov	r0, sl
 80101ea:	f7ff ff35 	bl	8010058 <__malloc_unlock>
 80101ee:	e78e      	b.n	801010e <_realloc_r+0xaa>
 80101f0:	68a1      	ldr	r1, [r4, #8]
 80101f2:	6129      	str	r1, [r5, #16]
 80101f4:	68e1      	ldr	r1, [r4, #12]
 80101f6:	6169      	str	r1, [r5, #20]
 80101f8:	2a24      	cmp	r2, #36	@ 0x24
 80101fa:	bf01      	itttt	eq
 80101fc:	6922      	ldreq	r2, [r4, #16]
 80101fe:	61aa      	streq	r2, [r5, #24]
 8010200:	6961      	ldreq	r1, [r4, #20]
 8010202:	61e9      	streq	r1, [r5, #28]
 8010204:	bf19      	ittee	ne
 8010206:	3410      	addne	r4, #16
 8010208:	f105 0218 	addne.w	r2, r5, #24
 801020c:	f105 0220 	addeq.w	r2, r5, #32
 8010210:	3418      	addeq	r4, #24
 8010212:	e7d5      	b.n	80101c0 <_realloc_r+0x15c>
 8010214:	465a      	mov	r2, fp
 8010216:	e7d3      	b.n	80101c0 <_realloc_r+0x15c>
 8010218:	4621      	mov	r1, r4
 801021a:	4658      	mov	r0, fp
 801021c:	f000 fc46 	bl	8010aac <memmove>
 8010220:	4b43      	ldr	r3, [pc, #268]	@ (8010330 <_realloc_r+0x2cc>)
 8010222:	e7d3      	b.n	80101cc <_realloc_r+0x168>
 8010224:	45b8      	cmp	r8, r7
 8010226:	dc35      	bgt.n	8010294 <_realloc_r+0x230>
 8010228:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 801022c:	4628      	mov	r0, r5
 801022e:	60d3      	str	r3, [r2, #12]
 8010230:	609a      	str	r2, [r3, #8]
 8010232:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8010236:	68eb      	ldr	r3, [r5, #12]
 8010238:	60d3      	str	r3, [r2, #12]
 801023a:	609a      	str	r2, [r3, #8]
 801023c:	1f32      	subs	r2, r6, #4
 801023e:	2a24      	cmp	r2, #36	@ 0x24
 8010240:	d824      	bhi.n	801028c <_realloc_r+0x228>
 8010242:	2a13      	cmp	r2, #19
 8010244:	d908      	bls.n	8010258 <_realloc_r+0x1f4>
 8010246:	6823      	ldr	r3, [r4, #0]
 8010248:	60ab      	str	r3, [r5, #8]
 801024a:	6863      	ldr	r3, [r4, #4]
 801024c:	60eb      	str	r3, [r5, #12]
 801024e:	2a1b      	cmp	r2, #27
 8010250:	d80a      	bhi.n	8010268 <_realloc_r+0x204>
 8010252:	3408      	adds	r4, #8
 8010254:	f105 0010 	add.w	r0, r5, #16
 8010258:	6823      	ldr	r3, [r4, #0]
 801025a:	6003      	str	r3, [r0, #0]
 801025c:	6863      	ldr	r3, [r4, #4]
 801025e:	6043      	str	r3, [r0, #4]
 8010260:	68a3      	ldr	r3, [r4, #8]
 8010262:	6083      	str	r3, [r0, #8]
 8010264:	46a9      	mov	r9, r5
 8010266:	e75c      	b.n	8010122 <_realloc_r+0xbe>
 8010268:	68a3      	ldr	r3, [r4, #8]
 801026a:	612b      	str	r3, [r5, #16]
 801026c:	68e3      	ldr	r3, [r4, #12]
 801026e:	616b      	str	r3, [r5, #20]
 8010270:	2a24      	cmp	r2, #36	@ 0x24
 8010272:	bf01      	itttt	eq
 8010274:	6923      	ldreq	r3, [r4, #16]
 8010276:	61ab      	streq	r3, [r5, #24]
 8010278:	6963      	ldreq	r3, [r4, #20]
 801027a:	61eb      	streq	r3, [r5, #28]
 801027c:	bf19      	ittee	ne
 801027e:	3410      	addne	r4, #16
 8010280:	f105 0018 	addne.w	r0, r5, #24
 8010284:	f105 0020 	addeq.w	r0, r5, #32
 8010288:	3418      	addeq	r4, #24
 801028a:	e7e5      	b.n	8010258 <_realloc_r+0x1f4>
 801028c:	4621      	mov	r1, r4
 801028e:	f000 fc0d 	bl	8010aac <memmove>
 8010292:	e7e7      	b.n	8010264 <_realloc_r+0x200>
 8010294:	9b01      	ldr	r3, [sp, #4]
 8010296:	4598      	cmp	r8, r3
 8010298:	dc31      	bgt.n	80102fe <_realloc_r+0x29a>
 801029a:	4628      	mov	r0, r5
 801029c:	68eb      	ldr	r3, [r5, #12]
 801029e:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80102a2:	60d3      	str	r3, [r2, #12]
 80102a4:	609a      	str	r2, [r3, #8]
 80102a6:	1f32      	subs	r2, r6, #4
 80102a8:	2a24      	cmp	r2, #36	@ 0x24
 80102aa:	d824      	bhi.n	80102f6 <_realloc_r+0x292>
 80102ac:	2a13      	cmp	r2, #19
 80102ae:	d908      	bls.n	80102c2 <_realloc_r+0x25e>
 80102b0:	6823      	ldr	r3, [r4, #0]
 80102b2:	60ab      	str	r3, [r5, #8]
 80102b4:	6863      	ldr	r3, [r4, #4]
 80102b6:	60eb      	str	r3, [r5, #12]
 80102b8:	2a1b      	cmp	r2, #27
 80102ba:	d80a      	bhi.n	80102d2 <_realloc_r+0x26e>
 80102bc:	3408      	adds	r4, #8
 80102be:	f105 0010 	add.w	r0, r5, #16
 80102c2:	6823      	ldr	r3, [r4, #0]
 80102c4:	6003      	str	r3, [r0, #0]
 80102c6:	6863      	ldr	r3, [r4, #4]
 80102c8:	6043      	str	r3, [r0, #4]
 80102ca:	68a3      	ldr	r3, [r4, #8]
 80102cc:	6083      	str	r3, [r0, #8]
 80102ce:	9f01      	ldr	r7, [sp, #4]
 80102d0:	e7c8      	b.n	8010264 <_realloc_r+0x200>
 80102d2:	68a3      	ldr	r3, [r4, #8]
 80102d4:	612b      	str	r3, [r5, #16]
 80102d6:	68e3      	ldr	r3, [r4, #12]
 80102d8:	616b      	str	r3, [r5, #20]
 80102da:	2a24      	cmp	r2, #36	@ 0x24
 80102dc:	bf01      	itttt	eq
 80102de:	6923      	ldreq	r3, [r4, #16]
 80102e0:	61ab      	streq	r3, [r5, #24]
 80102e2:	6963      	ldreq	r3, [r4, #20]
 80102e4:	61eb      	streq	r3, [r5, #28]
 80102e6:	bf19      	ittee	ne
 80102e8:	3410      	addne	r4, #16
 80102ea:	f105 0018 	addne.w	r0, r5, #24
 80102ee:	f105 0020 	addeq.w	r0, r5, #32
 80102f2:	3418      	addeq	r4, #24
 80102f4:	e7e5      	b.n	80102c2 <_realloc_r+0x25e>
 80102f6:	4621      	mov	r1, r4
 80102f8:	f000 fbd8 	bl	8010aac <memmove>
 80102fc:	e7e7      	b.n	80102ce <_realloc_r+0x26a>
 80102fe:	4659      	mov	r1, fp
 8010300:	4650      	mov	r0, sl
 8010302:	f7fd fcf1 	bl	800dce8 <_malloc_r>
 8010306:	4683      	mov	fp, r0
 8010308:	b918      	cbnz	r0, 8010312 <_realloc_r+0x2ae>
 801030a:	4650      	mov	r0, sl
 801030c:	f7ff fea4 	bl	8010058 <__malloc_unlock>
 8010310:	e6c7      	b.n	80100a2 <_realloc_r+0x3e>
 8010312:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8010316:	f023 0301 	bic.w	r3, r3, #1
 801031a:	444b      	add	r3, r9
 801031c:	f1a0 0208 	sub.w	r2, r0, #8
 8010320:	4293      	cmp	r3, r2
 8010322:	d107      	bne.n	8010334 <_realloc_r+0x2d0>
 8010324:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8010328:	f027 0703 	bic.w	r7, r7, #3
 801032c:	4437      	add	r7, r6
 801032e:	e6f8      	b.n	8010122 <_realloc_r+0xbe>
 8010330:	20000018 	.word	0x20000018
 8010334:	1f32      	subs	r2, r6, #4
 8010336:	2a24      	cmp	r2, #36	@ 0x24
 8010338:	d82d      	bhi.n	8010396 <_realloc_r+0x332>
 801033a:	2a13      	cmp	r2, #19
 801033c:	d928      	bls.n	8010390 <_realloc_r+0x32c>
 801033e:	6823      	ldr	r3, [r4, #0]
 8010340:	6003      	str	r3, [r0, #0]
 8010342:	6863      	ldr	r3, [r4, #4]
 8010344:	6043      	str	r3, [r0, #4]
 8010346:	2a1b      	cmp	r2, #27
 8010348:	d80e      	bhi.n	8010368 <_realloc_r+0x304>
 801034a:	f104 0208 	add.w	r2, r4, #8
 801034e:	f100 0308 	add.w	r3, r0, #8
 8010352:	6811      	ldr	r1, [r2, #0]
 8010354:	6019      	str	r1, [r3, #0]
 8010356:	6851      	ldr	r1, [r2, #4]
 8010358:	6059      	str	r1, [r3, #4]
 801035a:	6892      	ldr	r2, [r2, #8]
 801035c:	609a      	str	r2, [r3, #8]
 801035e:	4621      	mov	r1, r4
 8010360:	4650      	mov	r0, sl
 8010362:	f001 fba7 	bl	8011ab4 <_free_r>
 8010366:	e73f      	b.n	80101e8 <_realloc_r+0x184>
 8010368:	68a3      	ldr	r3, [r4, #8]
 801036a:	6083      	str	r3, [r0, #8]
 801036c:	68e3      	ldr	r3, [r4, #12]
 801036e:	60c3      	str	r3, [r0, #12]
 8010370:	2a24      	cmp	r2, #36	@ 0x24
 8010372:	bf01      	itttt	eq
 8010374:	6923      	ldreq	r3, [r4, #16]
 8010376:	6103      	streq	r3, [r0, #16]
 8010378:	6961      	ldreq	r1, [r4, #20]
 801037a:	6141      	streq	r1, [r0, #20]
 801037c:	bf19      	ittee	ne
 801037e:	f104 0210 	addne.w	r2, r4, #16
 8010382:	f100 0310 	addne.w	r3, r0, #16
 8010386:	f104 0218 	addeq.w	r2, r4, #24
 801038a:	f100 0318 	addeq.w	r3, r0, #24
 801038e:	e7e0      	b.n	8010352 <_realloc_r+0x2ee>
 8010390:	4603      	mov	r3, r0
 8010392:	4622      	mov	r2, r4
 8010394:	e7dd      	b.n	8010352 <_realloc_r+0x2ee>
 8010396:	4621      	mov	r1, r4
 8010398:	f000 fb88 	bl	8010aac <memmove>
 801039c:	e7df      	b.n	801035e <_realloc_r+0x2fa>
 801039e:	4637      	mov	r7, r6
 80103a0:	e6bf      	b.n	8010122 <_realloc_r+0xbe>
 80103a2:	431f      	orrs	r7, r3
 80103a4:	f8c9 7004 	str.w	r7, [r9, #4]
 80103a8:	6853      	ldr	r3, [r2, #4]
 80103aa:	f043 0301 	orr.w	r3, r3, #1
 80103ae:	6053      	str	r3, [r2, #4]
 80103b0:	e6d3      	b.n	801015a <_realloc_r+0xf6>
 80103b2:	bf00      	nop

080103b4 <__sflush_r>:
 80103b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103b8:	4605      	mov	r5, r0
 80103ba:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 80103be:	0706      	lsls	r6, r0, #28
 80103c0:	460c      	mov	r4, r1
 80103c2:	d457      	bmi.n	8010474 <__sflush_r+0xc0>
 80103c4:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 80103c8:	818b      	strh	r3, [r1, #12]
 80103ca:	684b      	ldr	r3, [r1, #4]
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	dc02      	bgt.n	80103d6 <__sflush_r+0x22>
 80103d0:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	dd4c      	ble.n	8010470 <__sflush_r+0xbc>
 80103d6:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80103d8:	2e00      	cmp	r6, #0
 80103da:	d049      	beq.n	8010470 <__sflush_r+0xbc>
 80103dc:	2300      	movs	r3, #0
 80103de:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 80103e2:	682f      	ldr	r7, [r5, #0]
 80103e4:	69e1      	ldr	r1, [r4, #28]
 80103e6:	602b      	str	r3, [r5, #0]
 80103e8:	d034      	beq.n	8010454 <__sflush_r+0xa0>
 80103ea:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80103ec:	89a3      	ldrh	r3, [r4, #12]
 80103ee:	0759      	lsls	r1, r3, #29
 80103f0:	d505      	bpl.n	80103fe <__sflush_r+0x4a>
 80103f2:	6863      	ldr	r3, [r4, #4]
 80103f4:	1ad2      	subs	r2, r2, r3
 80103f6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80103f8:	b10b      	cbz	r3, 80103fe <__sflush_r+0x4a>
 80103fa:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80103fc:	1ad2      	subs	r2, r2, r3
 80103fe:	2300      	movs	r3, #0
 8010400:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010402:	69e1      	ldr	r1, [r4, #28]
 8010404:	4628      	mov	r0, r5
 8010406:	47b0      	blx	r6
 8010408:	1c43      	adds	r3, r0, #1
 801040a:	d106      	bne.n	801041a <__sflush_r+0x66>
 801040c:	682a      	ldr	r2, [r5, #0]
 801040e:	2a1d      	cmp	r2, #29
 8010410:	d848      	bhi.n	80104a4 <__sflush_r+0xf0>
 8010412:	4b2b      	ldr	r3, [pc, #172]	@ (80104c0 <__sflush_r+0x10c>)
 8010414:	4113      	asrs	r3, r2
 8010416:	07de      	lsls	r6, r3, #31
 8010418:	d444      	bmi.n	80104a4 <__sflush_r+0xf0>
 801041a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801041e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8010422:	81a2      	strh	r2, [r4, #12]
 8010424:	2200      	movs	r2, #0
 8010426:	6062      	str	r2, [r4, #4]
 8010428:	04d9      	lsls	r1, r3, #19
 801042a:	6922      	ldr	r2, [r4, #16]
 801042c:	6022      	str	r2, [r4, #0]
 801042e:	d504      	bpl.n	801043a <__sflush_r+0x86>
 8010430:	1c42      	adds	r2, r0, #1
 8010432:	d101      	bne.n	8010438 <__sflush_r+0x84>
 8010434:	682b      	ldr	r3, [r5, #0]
 8010436:	b903      	cbnz	r3, 801043a <__sflush_r+0x86>
 8010438:	6520      	str	r0, [r4, #80]	@ 0x50
 801043a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801043c:	602f      	str	r7, [r5, #0]
 801043e:	b1b9      	cbz	r1, 8010470 <__sflush_r+0xbc>
 8010440:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8010444:	4299      	cmp	r1, r3
 8010446:	d002      	beq.n	801044e <__sflush_r+0x9a>
 8010448:	4628      	mov	r0, r5
 801044a:	f001 fb33 	bl	8011ab4 <_free_r>
 801044e:	2300      	movs	r3, #0
 8010450:	6323      	str	r3, [r4, #48]	@ 0x30
 8010452:	e00d      	b.n	8010470 <__sflush_r+0xbc>
 8010454:	2301      	movs	r3, #1
 8010456:	4628      	mov	r0, r5
 8010458:	47b0      	blx	r6
 801045a:	4602      	mov	r2, r0
 801045c:	1c50      	adds	r0, r2, #1
 801045e:	d1c5      	bne.n	80103ec <__sflush_r+0x38>
 8010460:	682b      	ldr	r3, [r5, #0]
 8010462:	2b00      	cmp	r3, #0
 8010464:	d0c2      	beq.n	80103ec <__sflush_r+0x38>
 8010466:	2b1d      	cmp	r3, #29
 8010468:	d001      	beq.n	801046e <__sflush_r+0xba>
 801046a:	2b16      	cmp	r3, #22
 801046c:	d11a      	bne.n	80104a4 <__sflush_r+0xf0>
 801046e:	602f      	str	r7, [r5, #0]
 8010470:	2000      	movs	r0, #0
 8010472:	e01e      	b.n	80104b2 <__sflush_r+0xfe>
 8010474:	690f      	ldr	r7, [r1, #16]
 8010476:	2f00      	cmp	r7, #0
 8010478:	d0fa      	beq.n	8010470 <__sflush_r+0xbc>
 801047a:	0783      	lsls	r3, r0, #30
 801047c:	680e      	ldr	r6, [r1, #0]
 801047e:	bf08      	it	eq
 8010480:	694b      	ldreq	r3, [r1, #20]
 8010482:	600f      	str	r7, [r1, #0]
 8010484:	bf18      	it	ne
 8010486:	2300      	movne	r3, #0
 8010488:	eba6 0807 	sub.w	r8, r6, r7
 801048c:	608b      	str	r3, [r1, #8]
 801048e:	f1b8 0f00 	cmp.w	r8, #0
 8010492:	dded      	ble.n	8010470 <__sflush_r+0xbc>
 8010494:	69e1      	ldr	r1, [r4, #28]
 8010496:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8010498:	4643      	mov	r3, r8
 801049a:	463a      	mov	r2, r7
 801049c:	4628      	mov	r0, r5
 801049e:	47b0      	blx	r6
 80104a0:	2800      	cmp	r0, #0
 80104a2:	dc08      	bgt.n	80104b6 <__sflush_r+0x102>
 80104a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80104a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80104ac:	81a3      	strh	r3, [r4, #12]
 80104ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80104b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104b6:	4407      	add	r7, r0
 80104b8:	eba8 0800 	sub.w	r8, r8, r0
 80104bc:	e7e7      	b.n	801048e <__sflush_r+0xda>
 80104be:	bf00      	nop
 80104c0:	dfbffffe 	.word	0xdfbffffe

080104c4 <_fflush_r>:
 80104c4:	b538      	push	{r3, r4, r5, lr}
 80104c6:	460c      	mov	r4, r1
 80104c8:	4605      	mov	r5, r0
 80104ca:	b118      	cbz	r0, 80104d4 <_fflush_r+0x10>
 80104cc:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80104ce:	b90b      	cbnz	r3, 80104d4 <_fflush_r+0x10>
 80104d0:	f000 f8aa 	bl	8010628 <__sinit>
 80104d4:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 80104d8:	b1b8      	cbz	r0, 801050a <_fflush_r+0x46>
 80104da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80104dc:	07db      	lsls	r3, r3, #31
 80104de:	d404      	bmi.n	80104ea <_fflush_r+0x26>
 80104e0:	0581      	lsls	r1, r0, #22
 80104e2:	d402      	bmi.n	80104ea <_fflush_r+0x26>
 80104e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80104e6:	f000 fbad 	bl	8010c44 <__retarget_lock_acquire_recursive>
 80104ea:	4628      	mov	r0, r5
 80104ec:	4621      	mov	r1, r4
 80104ee:	f7ff ff61 	bl	80103b4 <__sflush_r>
 80104f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80104f4:	07da      	lsls	r2, r3, #31
 80104f6:	4605      	mov	r5, r0
 80104f8:	d405      	bmi.n	8010506 <_fflush_r+0x42>
 80104fa:	89a3      	ldrh	r3, [r4, #12]
 80104fc:	059b      	lsls	r3, r3, #22
 80104fe:	d402      	bmi.n	8010506 <_fflush_r+0x42>
 8010500:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010502:	f000 fba0 	bl	8010c46 <__retarget_lock_release_recursive>
 8010506:	4628      	mov	r0, r5
 8010508:	bd38      	pop	{r3, r4, r5, pc}
 801050a:	4605      	mov	r5, r0
 801050c:	e7fb      	b.n	8010506 <_fflush_r+0x42>
	...

08010510 <std>:
 8010510:	2300      	movs	r3, #0
 8010512:	b510      	push	{r4, lr}
 8010514:	4604      	mov	r4, r0
 8010516:	e9c0 3300 	strd	r3, r3, [r0]
 801051a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801051e:	6083      	str	r3, [r0, #8]
 8010520:	8181      	strh	r1, [r0, #12]
 8010522:	6643      	str	r3, [r0, #100]	@ 0x64
 8010524:	81c2      	strh	r2, [r0, #14]
 8010526:	6183      	str	r3, [r0, #24]
 8010528:	4619      	mov	r1, r3
 801052a:	2208      	movs	r2, #8
 801052c:	305c      	adds	r0, #92	@ 0x5c
 801052e:	f000 fad7 	bl	8010ae0 <memset>
 8010532:	4b0d      	ldr	r3, [pc, #52]	@ (8010568 <std+0x58>)
 8010534:	6223      	str	r3, [r4, #32]
 8010536:	4b0d      	ldr	r3, [pc, #52]	@ (801056c <std+0x5c>)
 8010538:	6263      	str	r3, [r4, #36]	@ 0x24
 801053a:	4b0d      	ldr	r3, [pc, #52]	@ (8010570 <std+0x60>)
 801053c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801053e:	4b0d      	ldr	r3, [pc, #52]	@ (8010574 <std+0x64>)
 8010540:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010542:	4b0d      	ldr	r3, [pc, #52]	@ (8010578 <std+0x68>)
 8010544:	61e4      	str	r4, [r4, #28]
 8010546:	429c      	cmp	r4, r3
 8010548:	d006      	beq.n	8010558 <std+0x48>
 801054a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801054e:	4294      	cmp	r4, r2
 8010550:	d002      	beq.n	8010558 <std+0x48>
 8010552:	33d0      	adds	r3, #208	@ 0xd0
 8010554:	429c      	cmp	r4, r3
 8010556:	d105      	bne.n	8010564 <std+0x54>
 8010558:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801055c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010560:	f000 bb6e 	b.w	8010c40 <__retarget_lock_init_recursive>
 8010564:	bd10      	pop	{r4, pc}
 8010566:	bf00      	nop
 8010568:	08012433 	.word	0x08012433
 801056c:	08012455 	.word	0x08012455
 8010570:	0801248d 	.word	0x0801248d
 8010574:	080124b1 	.word	0x080124b1
 8010578:	2000fb8c 	.word	0x2000fb8c

0801057c <stdio_exit_handler>:
 801057c:	4a02      	ldr	r2, [pc, #8]	@ (8010588 <stdio_exit_handler+0xc>)
 801057e:	4903      	ldr	r1, [pc, #12]	@ (801058c <stdio_exit_handler+0x10>)
 8010580:	4803      	ldr	r0, [pc, #12]	@ (8010590 <stdio_exit_handler+0x14>)
 8010582:	f000 b9b5 	b.w	80108f0 <_fwalk_sglue>
 8010586:	bf00      	nop
 8010588:	20000420 	.word	0x20000420
 801058c:	08012389 	.word	0x08012389
 8010590:	200005a0 	.word	0x200005a0

08010594 <cleanup_stdio>:
 8010594:	6841      	ldr	r1, [r0, #4]
 8010596:	4b0c      	ldr	r3, [pc, #48]	@ (80105c8 <cleanup_stdio+0x34>)
 8010598:	4299      	cmp	r1, r3
 801059a:	b510      	push	{r4, lr}
 801059c:	4604      	mov	r4, r0
 801059e:	d001      	beq.n	80105a4 <cleanup_stdio+0x10>
 80105a0:	f001 fef2 	bl	8012388 <_fclose_r>
 80105a4:	68a1      	ldr	r1, [r4, #8]
 80105a6:	4b09      	ldr	r3, [pc, #36]	@ (80105cc <cleanup_stdio+0x38>)
 80105a8:	4299      	cmp	r1, r3
 80105aa:	d002      	beq.n	80105b2 <cleanup_stdio+0x1e>
 80105ac:	4620      	mov	r0, r4
 80105ae:	f001 feeb 	bl	8012388 <_fclose_r>
 80105b2:	68e1      	ldr	r1, [r4, #12]
 80105b4:	4b06      	ldr	r3, [pc, #24]	@ (80105d0 <cleanup_stdio+0x3c>)
 80105b6:	4299      	cmp	r1, r3
 80105b8:	d004      	beq.n	80105c4 <cleanup_stdio+0x30>
 80105ba:	4620      	mov	r0, r4
 80105bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80105c0:	f001 bee2 	b.w	8012388 <_fclose_r>
 80105c4:	bd10      	pop	{r4, pc}
 80105c6:	bf00      	nop
 80105c8:	2000fb8c 	.word	0x2000fb8c
 80105cc:	2000fbf4 	.word	0x2000fbf4
 80105d0:	2000fc5c 	.word	0x2000fc5c

080105d4 <global_stdio_init.part.0>:
 80105d4:	b510      	push	{r4, lr}
 80105d6:	4b0b      	ldr	r3, [pc, #44]	@ (8010604 <global_stdio_init.part.0+0x30>)
 80105d8:	4c0b      	ldr	r4, [pc, #44]	@ (8010608 <global_stdio_init.part.0+0x34>)
 80105da:	4a0c      	ldr	r2, [pc, #48]	@ (801060c <global_stdio_init.part.0+0x38>)
 80105dc:	601a      	str	r2, [r3, #0]
 80105de:	4620      	mov	r0, r4
 80105e0:	2200      	movs	r2, #0
 80105e2:	2104      	movs	r1, #4
 80105e4:	f7ff ff94 	bl	8010510 <std>
 80105e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80105ec:	2201      	movs	r2, #1
 80105ee:	2109      	movs	r1, #9
 80105f0:	f7ff ff8e 	bl	8010510 <std>
 80105f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80105f8:	2202      	movs	r2, #2
 80105fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80105fe:	2112      	movs	r1, #18
 8010600:	f7ff bf86 	b.w	8010510 <std>
 8010604:	2000fcc4 	.word	0x2000fcc4
 8010608:	2000fb8c 	.word	0x2000fb8c
 801060c:	0801057d 	.word	0x0801057d

08010610 <__sfp_lock_acquire>:
 8010610:	4801      	ldr	r0, [pc, #4]	@ (8010618 <__sfp_lock_acquire+0x8>)
 8010612:	f000 bb17 	b.w	8010c44 <__retarget_lock_acquire_recursive>
 8010616:	bf00      	nop
 8010618:	2000fcca 	.word	0x2000fcca

0801061c <__sfp_lock_release>:
 801061c:	4801      	ldr	r0, [pc, #4]	@ (8010624 <__sfp_lock_release+0x8>)
 801061e:	f000 bb12 	b.w	8010c46 <__retarget_lock_release_recursive>
 8010622:	bf00      	nop
 8010624:	2000fcca 	.word	0x2000fcca

08010628 <__sinit>:
 8010628:	b510      	push	{r4, lr}
 801062a:	4604      	mov	r4, r0
 801062c:	f7ff fff0 	bl	8010610 <__sfp_lock_acquire>
 8010630:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010632:	b11b      	cbz	r3, 801063c <__sinit+0x14>
 8010634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010638:	f7ff bff0 	b.w	801061c <__sfp_lock_release>
 801063c:	4b04      	ldr	r3, [pc, #16]	@ (8010650 <__sinit+0x28>)
 801063e:	6363      	str	r3, [r4, #52]	@ 0x34
 8010640:	4b04      	ldr	r3, [pc, #16]	@ (8010654 <__sinit+0x2c>)
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	2b00      	cmp	r3, #0
 8010646:	d1f5      	bne.n	8010634 <__sinit+0xc>
 8010648:	f7ff ffc4 	bl	80105d4 <global_stdio_init.part.0>
 801064c:	e7f2      	b.n	8010634 <__sinit+0xc>
 801064e:	bf00      	nop
 8010650:	08010595 	.word	0x08010595
 8010654:	2000fcc4 	.word	0x2000fcc4

08010658 <__sfvwrite_r>:
 8010658:	6893      	ldr	r3, [r2, #8]
 801065a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801065e:	4606      	mov	r6, r0
 8010660:	460c      	mov	r4, r1
 8010662:	4691      	mov	r9, r2
 8010664:	b91b      	cbnz	r3, 801066e <__sfvwrite_r+0x16>
 8010666:	2000      	movs	r0, #0
 8010668:	b003      	add	sp, #12
 801066a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801066e:	898b      	ldrh	r3, [r1, #12]
 8010670:	0718      	lsls	r0, r3, #28
 8010672:	d550      	bpl.n	8010716 <__sfvwrite_r+0xbe>
 8010674:	690b      	ldr	r3, [r1, #16]
 8010676:	2b00      	cmp	r3, #0
 8010678:	d04d      	beq.n	8010716 <__sfvwrite_r+0xbe>
 801067a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801067e:	f8d9 8000 	ldr.w	r8, [r9]
 8010682:	f013 0702 	ands.w	r7, r3, #2
 8010686:	d16b      	bne.n	8010760 <__sfvwrite_r+0x108>
 8010688:	f013 0301 	ands.w	r3, r3, #1
 801068c:	f000 809c 	beq.w	80107c8 <__sfvwrite_r+0x170>
 8010690:	4638      	mov	r0, r7
 8010692:	46ba      	mov	sl, r7
 8010694:	46bb      	mov	fp, r7
 8010696:	f1bb 0f00 	cmp.w	fp, #0
 801069a:	f000 8103 	beq.w	80108a4 <__sfvwrite_r+0x24c>
 801069e:	b950      	cbnz	r0, 80106b6 <__sfvwrite_r+0x5e>
 80106a0:	465a      	mov	r2, fp
 80106a2:	210a      	movs	r1, #10
 80106a4:	4650      	mov	r0, sl
 80106a6:	f7ef fdb3 	bl	8000210 <memchr>
 80106aa:	2800      	cmp	r0, #0
 80106ac:	f000 8100 	beq.w	80108b0 <__sfvwrite_r+0x258>
 80106b0:	3001      	adds	r0, #1
 80106b2:	eba0 070a 	sub.w	r7, r0, sl
 80106b6:	6820      	ldr	r0, [r4, #0]
 80106b8:	6921      	ldr	r1, [r4, #16]
 80106ba:	68a5      	ldr	r5, [r4, #8]
 80106bc:	6963      	ldr	r3, [r4, #20]
 80106be:	455f      	cmp	r7, fp
 80106c0:	463a      	mov	r2, r7
 80106c2:	bf28      	it	cs
 80106c4:	465a      	movcs	r2, fp
 80106c6:	4288      	cmp	r0, r1
 80106c8:	f240 80f5 	bls.w	80108b6 <__sfvwrite_r+0x25e>
 80106cc:	441d      	add	r5, r3
 80106ce:	42aa      	cmp	r2, r5
 80106d0:	f340 80f1 	ble.w	80108b6 <__sfvwrite_r+0x25e>
 80106d4:	4651      	mov	r1, sl
 80106d6:	462a      	mov	r2, r5
 80106d8:	f000 f9e8 	bl	8010aac <memmove>
 80106dc:	6823      	ldr	r3, [r4, #0]
 80106de:	442b      	add	r3, r5
 80106e0:	6023      	str	r3, [r4, #0]
 80106e2:	4621      	mov	r1, r4
 80106e4:	4630      	mov	r0, r6
 80106e6:	f7ff feed 	bl	80104c4 <_fflush_r>
 80106ea:	2800      	cmp	r0, #0
 80106ec:	d167      	bne.n	80107be <__sfvwrite_r+0x166>
 80106ee:	1b7f      	subs	r7, r7, r5
 80106f0:	f040 80f9 	bne.w	80108e6 <__sfvwrite_r+0x28e>
 80106f4:	4621      	mov	r1, r4
 80106f6:	4630      	mov	r0, r6
 80106f8:	f7ff fee4 	bl	80104c4 <_fflush_r>
 80106fc:	2800      	cmp	r0, #0
 80106fe:	d15e      	bne.n	80107be <__sfvwrite_r+0x166>
 8010700:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8010704:	1b5b      	subs	r3, r3, r5
 8010706:	44aa      	add	sl, r5
 8010708:	ebab 0b05 	sub.w	fp, fp, r5
 801070c:	f8c9 3008 	str.w	r3, [r9, #8]
 8010710:	2b00      	cmp	r3, #0
 8010712:	d1c0      	bne.n	8010696 <__sfvwrite_r+0x3e>
 8010714:	e7a7      	b.n	8010666 <__sfvwrite_r+0xe>
 8010716:	4621      	mov	r1, r4
 8010718:	4630      	mov	r0, r6
 801071a:	f000 f907 	bl	801092c <__swsetup_r>
 801071e:	2800      	cmp	r0, #0
 8010720:	d0ab      	beq.n	801067a <__sfvwrite_r+0x22>
 8010722:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010726:	e79f      	b.n	8010668 <__sfvwrite_r+0x10>
 8010728:	e9d8 a500 	ldrd	sl, r5, [r8]
 801072c:	f108 0808 	add.w	r8, r8, #8
 8010730:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 8010734:	69e1      	ldr	r1, [r4, #28]
 8010736:	2d00      	cmp	r5, #0
 8010738:	d0f6      	beq.n	8010728 <__sfvwrite_r+0xd0>
 801073a:	42bd      	cmp	r5, r7
 801073c:	462b      	mov	r3, r5
 801073e:	4652      	mov	r2, sl
 8010740:	bf28      	it	cs
 8010742:	463b      	movcs	r3, r7
 8010744:	4630      	mov	r0, r6
 8010746:	47d8      	blx	fp
 8010748:	2800      	cmp	r0, #0
 801074a:	dd38      	ble.n	80107be <__sfvwrite_r+0x166>
 801074c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8010750:	1a1b      	subs	r3, r3, r0
 8010752:	4482      	add	sl, r0
 8010754:	1a2d      	subs	r5, r5, r0
 8010756:	f8c9 3008 	str.w	r3, [r9, #8]
 801075a:	2b00      	cmp	r3, #0
 801075c:	d1e8      	bne.n	8010730 <__sfvwrite_r+0xd8>
 801075e:	e782      	b.n	8010666 <__sfvwrite_r+0xe>
 8010760:	f04f 0a00 	mov.w	sl, #0
 8010764:	4f61      	ldr	r7, [pc, #388]	@ (80108ec <__sfvwrite_r+0x294>)
 8010766:	4655      	mov	r5, sl
 8010768:	e7e2      	b.n	8010730 <__sfvwrite_r+0xd8>
 801076a:	e9d8 7a00 	ldrd	r7, sl, [r8]
 801076e:	f108 0808 	add.w	r8, r8, #8
 8010772:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010776:	6820      	ldr	r0, [r4, #0]
 8010778:	68a2      	ldr	r2, [r4, #8]
 801077a:	f1ba 0f00 	cmp.w	sl, #0
 801077e:	d0f4      	beq.n	801076a <__sfvwrite_r+0x112>
 8010780:	0599      	lsls	r1, r3, #22
 8010782:	d563      	bpl.n	801084c <__sfvwrite_r+0x1f4>
 8010784:	4552      	cmp	r2, sl
 8010786:	d836      	bhi.n	80107f6 <__sfvwrite_r+0x19e>
 8010788:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 801078c:	d033      	beq.n	80107f6 <__sfvwrite_r+0x19e>
 801078e:	6921      	ldr	r1, [r4, #16]
 8010790:	6965      	ldr	r5, [r4, #20]
 8010792:	eba0 0b01 	sub.w	fp, r0, r1
 8010796:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801079a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801079e:	f10b 0201 	add.w	r2, fp, #1
 80107a2:	106d      	asrs	r5, r5, #1
 80107a4:	4452      	add	r2, sl
 80107a6:	4295      	cmp	r5, r2
 80107a8:	bf38      	it	cc
 80107aa:	4615      	movcc	r5, r2
 80107ac:	055b      	lsls	r3, r3, #21
 80107ae:	d53d      	bpl.n	801082c <__sfvwrite_r+0x1d4>
 80107b0:	4629      	mov	r1, r5
 80107b2:	4630      	mov	r0, r6
 80107b4:	f7fd fa98 	bl	800dce8 <_malloc_r>
 80107b8:	b948      	cbnz	r0, 80107ce <__sfvwrite_r+0x176>
 80107ba:	230c      	movs	r3, #12
 80107bc:	6033      	str	r3, [r6, #0]
 80107be:	89a3      	ldrh	r3, [r4, #12]
 80107c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80107c4:	81a3      	strh	r3, [r4, #12]
 80107c6:	e7ac      	b.n	8010722 <__sfvwrite_r+0xca>
 80107c8:	461f      	mov	r7, r3
 80107ca:	469a      	mov	sl, r3
 80107cc:	e7d1      	b.n	8010772 <__sfvwrite_r+0x11a>
 80107ce:	465a      	mov	r2, fp
 80107d0:	6921      	ldr	r1, [r4, #16]
 80107d2:	9001      	str	r0, [sp, #4]
 80107d4:	f000 fa38 	bl	8010c48 <memcpy>
 80107d8:	89a2      	ldrh	r2, [r4, #12]
 80107da:	9b01      	ldr	r3, [sp, #4]
 80107dc:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 80107e0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80107e4:	81a2      	strh	r2, [r4, #12]
 80107e6:	6123      	str	r3, [r4, #16]
 80107e8:	6165      	str	r5, [r4, #20]
 80107ea:	445b      	add	r3, fp
 80107ec:	eba5 050b 	sub.w	r5, r5, fp
 80107f0:	6023      	str	r3, [r4, #0]
 80107f2:	4652      	mov	r2, sl
 80107f4:	60a5      	str	r5, [r4, #8]
 80107f6:	4552      	cmp	r2, sl
 80107f8:	bf28      	it	cs
 80107fa:	4652      	movcs	r2, sl
 80107fc:	6820      	ldr	r0, [r4, #0]
 80107fe:	9201      	str	r2, [sp, #4]
 8010800:	4639      	mov	r1, r7
 8010802:	f000 f953 	bl	8010aac <memmove>
 8010806:	68a3      	ldr	r3, [r4, #8]
 8010808:	9a01      	ldr	r2, [sp, #4]
 801080a:	1a9b      	subs	r3, r3, r2
 801080c:	60a3      	str	r3, [r4, #8]
 801080e:	6823      	ldr	r3, [r4, #0]
 8010810:	4413      	add	r3, r2
 8010812:	4655      	mov	r5, sl
 8010814:	6023      	str	r3, [r4, #0]
 8010816:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801081a:	1b5b      	subs	r3, r3, r5
 801081c:	442f      	add	r7, r5
 801081e:	ebaa 0a05 	sub.w	sl, sl, r5
 8010822:	f8c9 3008 	str.w	r3, [r9, #8]
 8010826:	2b00      	cmp	r3, #0
 8010828:	d1a3      	bne.n	8010772 <__sfvwrite_r+0x11a>
 801082a:	e71c      	b.n	8010666 <__sfvwrite_r+0xe>
 801082c:	462a      	mov	r2, r5
 801082e:	4630      	mov	r0, r6
 8010830:	f7ff fc18 	bl	8010064 <_realloc_r>
 8010834:	4603      	mov	r3, r0
 8010836:	2800      	cmp	r0, #0
 8010838:	d1d5      	bne.n	80107e6 <__sfvwrite_r+0x18e>
 801083a:	6921      	ldr	r1, [r4, #16]
 801083c:	4630      	mov	r0, r6
 801083e:	f001 f939 	bl	8011ab4 <_free_r>
 8010842:	89a3      	ldrh	r3, [r4, #12]
 8010844:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010848:	81a3      	strh	r3, [r4, #12]
 801084a:	e7b6      	b.n	80107ba <__sfvwrite_r+0x162>
 801084c:	6923      	ldr	r3, [r4, #16]
 801084e:	4283      	cmp	r3, r0
 8010850:	d302      	bcc.n	8010858 <__sfvwrite_r+0x200>
 8010852:	6961      	ldr	r1, [r4, #20]
 8010854:	4551      	cmp	r1, sl
 8010856:	d915      	bls.n	8010884 <__sfvwrite_r+0x22c>
 8010858:	4552      	cmp	r2, sl
 801085a:	bf28      	it	cs
 801085c:	4652      	movcs	r2, sl
 801085e:	4639      	mov	r1, r7
 8010860:	4615      	mov	r5, r2
 8010862:	f000 f923 	bl	8010aac <memmove>
 8010866:	68a3      	ldr	r3, [r4, #8]
 8010868:	6822      	ldr	r2, [r4, #0]
 801086a:	1b5b      	subs	r3, r3, r5
 801086c:	442a      	add	r2, r5
 801086e:	60a3      	str	r3, [r4, #8]
 8010870:	6022      	str	r2, [r4, #0]
 8010872:	2b00      	cmp	r3, #0
 8010874:	d1cf      	bne.n	8010816 <__sfvwrite_r+0x1be>
 8010876:	4621      	mov	r1, r4
 8010878:	4630      	mov	r0, r6
 801087a:	f7ff fe23 	bl	80104c4 <_fflush_r>
 801087e:	2800      	cmp	r0, #0
 8010880:	d0c9      	beq.n	8010816 <__sfvwrite_r+0x1be>
 8010882:	e79c      	b.n	80107be <__sfvwrite_r+0x166>
 8010884:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010888:	4553      	cmp	r3, sl
 801088a:	bf28      	it	cs
 801088c:	4653      	movcs	r3, sl
 801088e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8010890:	fb93 f3f1 	sdiv	r3, r3, r1
 8010894:	463a      	mov	r2, r7
 8010896:	434b      	muls	r3, r1
 8010898:	4630      	mov	r0, r6
 801089a:	69e1      	ldr	r1, [r4, #28]
 801089c:	47a8      	blx	r5
 801089e:	1e05      	subs	r5, r0, #0
 80108a0:	dcb9      	bgt.n	8010816 <__sfvwrite_r+0x1be>
 80108a2:	e78c      	b.n	80107be <__sfvwrite_r+0x166>
 80108a4:	e9d8 ab00 	ldrd	sl, fp, [r8]
 80108a8:	2000      	movs	r0, #0
 80108aa:	f108 0808 	add.w	r8, r8, #8
 80108ae:	e6f2      	b.n	8010696 <__sfvwrite_r+0x3e>
 80108b0:	f10b 0701 	add.w	r7, fp, #1
 80108b4:	e6ff      	b.n	80106b6 <__sfvwrite_r+0x5e>
 80108b6:	4293      	cmp	r3, r2
 80108b8:	dc08      	bgt.n	80108cc <__sfvwrite_r+0x274>
 80108ba:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80108bc:	69e1      	ldr	r1, [r4, #28]
 80108be:	4652      	mov	r2, sl
 80108c0:	4630      	mov	r0, r6
 80108c2:	47a8      	blx	r5
 80108c4:	1e05      	subs	r5, r0, #0
 80108c6:	f73f af12 	bgt.w	80106ee <__sfvwrite_r+0x96>
 80108ca:	e778      	b.n	80107be <__sfvwrite_r+0x166>
 80108cc:	4651      	mov	r1, sl
 80108ce:	9201      	str	r2, [sp, #4]
 80108d0:	f000 f8ec 	bl	8010aac <memmove>
 80108d4:	9a01      	ldr	r2, [sp, #4]
 80108d6:	68a3      	ldr	r3, [r4, #8]
 80108d8:	1a9b      	subs	r3, r3, r2
 80108da:	60a3      	str	r3, [r4, #8]
 80108dc:	6823      	ldr	r3, [r4, #0]
 80108de:	4413      	add	r3, r2
 80108e0:	6023      	str	r3, [r4, #0]
 80108e2:	4615      	mov	r5, r2
 80108e4:	e703      	b.n	80106ee <__sfvwrite_r+0x96>
 80108e6:	2001      	movs	r0, #1
 80108e8:	e70a      	b.n	8010700 <__sfvwrite_r+0xa8>
 80108ea:	bf00      	nop
 80108ec:	7ffffc00 	.word	0x7ffffc00

080108f0 <_fwalk_sglue>:
 80108f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80108f4:	4607      	mov	r7, r0
 80108f6:	4688      	mov	r8, r1
 80108f8:	4614      	mov	r4, r2
 80108fa:	2600      	movs	r6, #0
 80108fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010900:	f1b9 0901 	subs.w	r9, r9, #1
 8010904:	d505      	bpl.n	8010912 <_fwalk_sglue+0x22>
 8010906:	6824      	ldr	r4, [r4, #0]
 8010908:	2c00      	cmp	r4, #0
 801090a:	d1f7      	bne.n	80108fc <_fwalk_sglue+0xc>
 801090c:	4630      	mov	r0, r6
 801090e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010912:	89ab      	ldrh	r3, [r5, #12]
 8010914:	2b01      	cmp	r3, #1
 8010916:	d907      	bls.n	8010928 <_fwalk_sglue+0x38>
 8010918:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801091c:	3301      	adds	r3, #1
 801091e:	d003      	beq.n	8010928 <_fwalk_sglue+0x38>
 8010920:	4629      	mov	r1, r5
 8010922:	4638      	mov	r0, r7
 8010924:	47c0      	blx	r8
 8010926:	4306      	orrs	r6, r0
 8010928:	3568      	adds	r5, #104	@ 0x68
 801092a:	e7e9      	b.n	8010900 <_fwalk_sglue+0x10>

0801092c <__swsetup_r>:
 801092c:	b538      	push	{r3, r4, r5, lr}
 801092e:	4b29      	ldr	r3, [pc, #164]	@ (80109d4 <__swsetup_r+0xa8>)
 8010930:	4605      	mov	r5, r0
 8010932:	6818      	ldr	r0, [r3, #0]
 8010934:	460c      	mov	r4, r1
 8010936:	b118      	cbz	r0, 8010940 <__swsetup_r+0x14>
 8010938:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801093a:	b90b      	cbnz	r3, 8010940 <__swsetup_r+0x14>
 801093c:	f7ff fe74 	bl	8010628 <__sinit>
 8010940:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010944:	0719      	lsls	r1, r3, #28
 8010946:	d422      	bmi.n	801098e <__swsetup_r+0x62>
 8010948:	06da      	lsls	r2, r3, #27
 801094a:	d407      	bmi.n	801095c <__swsetup_r+0x30>
 801094c:	2209      	movs	r2, #9
 801094e:	602a      	str	r2, [r5, #0]
 8010950:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010954:	81a3      	strh	r3, [r4, #12]
 8010956:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801095a:	e033      	b.n	80109c4 <__swsetup_r+0x98>
 801095c:	0758      	lsls	r0, r3, #29
 801095e:	d512      	bpl.n	8010986 <__swsetup_r+0x5a>
 8010960:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8010962:	b141      	cbz	r1, 8010976 <__swsetup_r+0x4a>
 8010964:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8010968:	4299      	cmp	r1, r3
 801096a:	d002      	beq.n	8010972 <__swsetup_r+0x46>
 801096c:	4628      	mov	r0, r5
 801096e:	f001 f8a1 	bl	8011ab4 <_free_r>
 8010972:	2300      	movs	r3, #0
 8010974:	6323      	str	r3, [r4, #48]	@ 0x30
 8010976:	89a3      	ldrh	r3, [r4, #12]
 8010978:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801097c:	81a3      	strh	r3, [r4, #12]
 801097e:	2300      	movs	r3, #0
 8010980:	6063      	str	r3, [r4, #4]
 8010982:	6923      	ldr	r3, [r4, #16]
 8010984:	6023      	str	r3, [r4, #0]
 8010986:	89a3      	ldrh	r3, [r4, #12]
 8010988:	f043 0308 	orr.w	r3, r3, #8
 801098c:	81a3      	strh	r3, [r4, #12]
 801098e:	6923      	ldr	r3, [r4, #16]
 8010990:	b94b      	cbnz	r3, 80109a6 <__swsetup_r+0x7a>
 8010992:	89a3      	ldrh	r3, [r4, #12]
 8010994:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010998:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801099c:	d003      	beq.n	80109a6 <__swsetup_r+0x7a>
 801099e:	4621      	mov	r1, r4
 80109a0:	4628      	mov	r0, r5
 80109a2:	f001 f981 	bl	8011ca8 <__smakebuf_r>
 80109a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80109aa:	f013 0201 	ands.w	r2, r3, #1
 80109ae:	d00a      	beq.n	80109c6 <__swsetup_r+0x9a>
 80109b0:	2200      	movs	r2, #0
 80109b2:	60a2      	str	r2, [r4, #8]
 80109b4:	6962      	ldr	r2, [r4, #20]
 80109b6:	4252      	negs	r2, r2
 80109b8:	61a2      	str	r2, [r4, #24]
 80109ba:	6922      	ldr	r2, [r4, #16]
 80109bc:	b942      	cbnz	r2, 80109d0 <__swsetup_r+0xa4>
 80109be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80109c2:	d1c5      	bne.n	8010950 <__swsetup_r+0x24>
 80109c4:	bd38      	pop	{r3, r4, r5, pc}
 80109c6:	0799      	lsls	r1, r3, #30
 80109c8:	bf58      	it	pl
 80109ca:	6962      	ldrpl	r2, [r4, #20]
 80109cc:	60a2      	str	r2, [r4, #8]
 80109ce:	e7f4      	b.n	80109ba <__swsetup_r+0x8e>
 80109d0:	2000      	movs	r0, #0
 80109d2:	e7f7      	b.n	80109c4 <__swsetup_r+0x98>
 80109d4:	20000598 	.word	0x20000598

080109d8 <__fputwc>:
 80109d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80109dc:	4680      	mov	r8, r0
 80109de:	460f      	mov	r7, r1
 80109e0:	4614      	mov	r4, r2
 80109e2:	f000 f8c9 	bl	8010b78 <__locale_mb_cur_max>
 80109e6:	2801      	cmp	r0, #1
 80109e8:	4605      	mov	r5, r0
 80109ea:	d11b      	bne.n	8010a24 <__fputwc+0x4c>
 80109ec:	1e7b      	subs	r3, r7, #1
 80109ee:	2bfe      	cmp	r3, #254	@ 0xfe
 80109f0:	d818      	bhi.n	8010a24 <__fputwc+0x4c>
 80109f2:	f88d 7004 	strb.w	r7, [sp, #4]
 80109f6:	2600      	movs	r6, #0
 80109f8:	f10d 0904 	add.w	r9, sp, #4
 80109fc:	42ae      	cmp	r6, r5
 80109fe:	d021      	beq.n	8010a44 <__fputwc+0x6c>
 8010a00:	68a3      	ldr	r3, [r4, #8]
 8010a02:	f816 1009 	ldrb.w	r1, [r6, r9]
 8010a06:	3b01      	subs	r3, #1
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	60a3      	str	r3, [r4, #8]
 8010a0c:	da04      	bge.n	8010a18 <__fputwc+0x40>
 8010a0e:	69a2      	ldr	r2, [r4, #24]
 8010a10:	4293      	cmp	r3, r2
 8010a12:	db1b      	blt.n	8010a4c <__fputwc+0x74>
 8010a14:	290a      	cmp	r1, #10
 8010a16:	d019      	beq.n	8010a4c <__fputwc+0x74>
 8010a18:	6823      	ldr	r3, [r4, #0]
 8010a1a:	1c5a      	adds	r2, r3, #1
 8010a1c:	6022      	str	r2, [r4, #0]
 8010a1e:	7019      	strb	r1, [r3, #0]
 8010a20:	3601      	adds	r6, #1
 8010a22:	e7eb      	b.n	80109fc <__fputwc+0x24>
 8010a24:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 8010a28:	463a      	mov	r2, r7
 8010a2a:	a901      	add	r1, sp, #4
 8010a2c:	4640      	mov	r0, r8
 8010a2e:	f000 f919 	bl	8010c64 <_wcrtomb_r>
 8010a32:	1c43      	adds	r3, r0, #1
 8010a34:	4605      	mov	r5, r0
 8010a36:	d1de      	bne.n	80109f6 <__fputwc+0x1e>
 8010a38:	89a3      	ldrh	r3, [r4, #12]
 8010a3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010a3e:	81a3      	strh	r3, [r4, #12]
 8010a40:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8010a44:	4638      	mov	r0, r7
 8010a46:	b003      	add	sp, #12
 8010a48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010a4c:	4622      	mov	r2, r4
 8010a4e:	4640      	mov	r0, r8
 8010a50:	f001 fd3f 	bl	80124d2 <__swbuf_r>
 8010a54:	3001      	adds	r0, #1
 8010a56:	d1e3      	bne.n	8010a20 <__fputwc+0x48>
 8010a58:	e7f2      	b.n	8010a40 <__fputwc+0x68>

08010a5a <_fputwc_r>:
 8010a5a:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 8010a5c:	07db      	lsls	r3, r3, #31
 8010a5e:	b570      	push	{r4, r5, r6, lr}
 8010a60:	4605      	mov	r5, r0
 8010a62:	460e      	mov	r6, r1
 8010a64:	4614      	mov	r4, r2
 8010a66:	d405      	bmi.n	8010a74 <_fputwc_r+0x1a>
 8010a68:	8993      	ldrh	r3, [r2, #12]
 8010a6a:	0598      	lsls	r0, r3, #22
 8010a6c:	d402      	bmi.n	8010a74 <_fputwc_r+0x1a>
 8010a6e:	6d90      	ldr	r0, [r2, #88]	@ 0x58
 8010a70:	f000 f8e8 	bl	8010c44 <__retarget_lock_acquire_recursive>
 8010a74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a78:	0499      	lsls	r1, r3, #18
 8010a7a:	d406      	bmi.n	8010a8a <_fputwc_r+0x30>
 8010a7c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8010a80:	81a3      	strh	r3, [r4, #12]
 8010a82:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010a84:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8010a88:	6663      	str	r3, [r4, #100]	@ 0x64
 8010a8a:	4622      	mov	r2, r4
 8010a8c:	4628      	mov	r0, r5
 8010a8e:	4631      	mov	r1, r6
 8010a90:	f7ff ffa2 	bl	80109d8 <__fputwc>
 8010a94:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010a96:	07da      	lsls	r2, r3, #31
 8010a98:	4605      	mov	r5, r0
 8010a9a:	d405      	bmi.n	8010aa8 <_fputwc_r+0x4e>
 8010a9c:	89a3      	ldrh	r3, [r4, #12]
 8010a9e:	059b      	lsls	r3, r3, #22
 8010aa0:	d402      	bmi.n	8010aa8 <_fputwc_r+0x4e>
 8010aa2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010aa4:	f000 f8cf 	bl	8010c46 <__retarget_lock_release_recursive>
 8010aa8:	4628      	mov	r0, r5
 8010aaa:	bd70      	pop	{r4, r5, r6, pc}

08010aac <memmove>:
 8010aac:	4288      	cmp	r0, r1
 8010aae:	b510      	push	{r4, lr}
 8010ab0:	eb01 0402 	add.w	r4, r1, r2
 8010ab4:	d902      	bls.n	8010abc <memmove+0x10>
 8010ab6:	4284      	cmp	r4, r0
 8010ab8:	4623      	mov	r3, r4
 8010aba:	d807      	bhi.n	8010acc <memmove+0x20>
 8010abc:	1e43      	subs	r3, r0, #1
 8010abe:	42a1      	cmp	r1, r4
 8010ac0:	d008      	beq.n	8010ad4 <memmove+0x28>
 8010ac2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010ac6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010aca:	e7f8      	b.n	8010abe <memmove+0x12>
 8010acc:	4402      	add	r2, r0
 8010ace:	4601      	mov	r1, r0
 8010ad0:	428a      	cmp	r2, r1
 8010ad2:	d100      	bne.n	8010ad6 <memmove+0x2a>
 8010ad4:	bd10      	pop	{r4, pc}
 8010ad6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010ada:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010ade:	e7f7      	b.n	8010ad0 <memmove+0x24>

08010ae0 <memset>:
 8010ae0:	4402      	add	r2, r0
 8010ae2:	4603      	mov	r3, r0
 8010ae4:	4293      	cmp	r3, r2
 8010ae6:	d100      	bne.n	8010aea <memset+0xa>
 8010ae8:	4770      	bx	lr
 8010aea:	f803 1b01 	strb.w	r1, [r3], #1
 8010aee:	e7f9      	b.n	8010ae4 <memset+0x4>

08010af0 <strncpy>:
 8010af0:	b510      	push	{r4, lr}
 8010af2:	3901      	subs	r1, #1
 8010af4:	4603      	mov	r3, r0
 8010af6:	b132      	cbz	r2, 8010b06 <strncpy+0x16>
 8010af8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010afc:	f803 4b01 	strb.w	r4, [r3], #1
 8010b00:	3a01      	subs	r2, #1
 8010b02:	2c00      	cmp	r4, #0
 8010b04:	d1f7      	bne.n	8010af6 <strncpy+0x6>
 8010b06:	441a      	add	r2, r3
 8010b08:	2100      	movs	r1, #0
 8010b0a:	4293      	cmp	r3, r2
 8010b0c:	d100      	bne.n	8010b10 <strncpy+0x20>
 8010b0e:	bd10      	pop	{r4, pc}
 8010b10:	f803 1b01 	strb.w	r1, [r3], #1
 8010b14:	e7f9      	b.n	8010b0a <strncpy+0x1a>

08010b16 <_raise_r>:
 8010b16:	291f      	cmp	r1, #31
 8010b18:	b538      	push	{r3, r4, r5, lr}
 8010b1a:	4605      	mov	r5, r0
 8010b1c:	460c      	mov	r4, r1
 8010b1e:	d904      	bls.n	8010b2a <_raise_r+0x14>
 8010b20:	2316      	movs	r3, #22
 8010b22:	6003      	str	r3, [r0, #0]
 8010b24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010b28:	bd38      	pop	{r3, r4, r5, pc}
 8010b2a:	f8d0 2118 	ldr.w	r2, [r0, #280]	@ 0x118
 8010b2e:	b112      	cbz	r2, 8010b36 <_raise_r+0x20>
 8010b30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010b34:	b94b      	cbnz	r3, 8010b4a <_raise_r+0x34>
 8010b36:	4628      	mov	r0, r5
 8010b38:	f000 f840 	bl	8010bbc <_getpid_r>
 8010b3c:	4622      	mov	r2, r4
 8010b3e:	4601      	mov	r1, r0
 8010b40:	4628      	mov	r0, r5
 8010b42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010b46:	f000 b827 	b.w	8010b98 <_kill_r>
 8010b4a:	2b01      	cmp	r3, #1
 8010b4c:	d00a      	beq.n	8010b64 <_raise_r+0x4e>
 8010b4e:	1c59      	adds	r1, r3, #1
 8010b50:	d103      	bne.n	8010b5a <_raise_r+0x44>
 8010b52:	2316      	movs	r3, #22
 8010b54:	6003      	str	r3, [r0, #0]
 8010b56:	2001      	movs	r0, #1
 8010b58:	e7e6      	b.n	8010b28 <_raise_r+0x12>
 8010b5a:	2100      	movs	r1, #0
 8010b5c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010b60:	4620      	mov	r0, r4
 8010b62:	4798      	blx	r3
 8010b64:	2000      	movs	r0, #0
 8010b66:	e7df      	b.n	8010b28 <_raise_r+0x12>

08010b68 <raise>:
 8010b68:	4b02      	ldr	r3, [pc, #8]	@ (8010b74 <raise+0xc>)
 8010b6a:	4601      	mov	r1, r0
 8010b6c:	6818      	ldr	r0, [r3, #0]
 8010b6e:	f7ff bfd2 	b.w	8010b16 <_raise_r>
 8010b72:	bf00      	nop
 8010b74:	20000598 	.word	0x20000598

08010b78 <__locale_mb_cur_max>:
 8010b78:	4b01      	ldr	r3, [pc, #4]	@ (8010b80 <__locale_mb_cur_max+0x8>)
 8010b7a:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
 8010b7e:	4770      	bx	lr
 8010b80:	2000042c 	.word	0x2000042c

08010b84 <_localeconv_r>:
 8010b84:	4800      	ldr	r0, [pc, #0]	@ (8010b88 <_localeconv_r+0x4>)
 8010b86:	4770      	bx	lr
 8010b88:	2000051c 	.word	0x2000051c

08010b8c <__cxa_atexit>:
 8010b8c:	4613      	mov	r3, r2
 8010b8e:	460a      	mov	r2, r1
 8010b90:	4601      	mov	r1, r0
 8010b92:	2002      	movs	r0, #2
 8010b94:	f000 b87c 	b.w	8010c90 <__register_exitproc>

08010b98 <_kill_r>:
 8010b98:	b538      	push	{r3, r4, r5, lr}
 8010b9a:	4d07      	ldr	r5, [pc, #28]	@ (8010bb8 <_kill_r+0x20>)
 8010b9c:	2300      	movs	r3, #0
 8010b9e:	4604      	mov	r4, r0
 8010ba0:	4608      	mov	r0, r1
 8010ba2:	4611      	mov	r1, r2
 8010ba4:	602b      	str	r3, [r5, #0]
 8010ba6:	f001 fdcd 	bl	8012744 <_kill>
 8010baa:	1c43      	adds	r3, r0, #1
 8010bac:	d102      	bne.n	8010bb4 <_kill_r+0x1c>
 8010bae:	682b      	ldr	r3, [r5, #0]
 8010bb0:	b103      	cbz	r3, 8010bb4 <_kill_r+0x1c>
 8010bb2:	6023      	str	r3, [r4, #0]
 8010bb4:	bd38      	pop	{r3, r4, r5, pc}
 8010bb6:	bf00      	nop
 8010bb8:	2000fe60 	.word	0x2000fe60

08010bbc <_getpid_r>:
 8010bbc:	f001 bdba 	b.w	8012734 <_getpid>

08010bc0 <_sbrk_r>:
 8010bc0:	b538      	push	{r3, r4, r5, lr}
 8010bc2:	4d06      	ldr	r5, [pc, #24]	@ (8010bdc <_sbrk_r+0x1c>)
 8010bc4:	2300      	movs	r3, #0
 8010bc6:	4604      	mov	r4, r0
 8010bc8:	4608      	mov	r0, r1
 8010bca:	602b      	str	r3, [r5, #0]
 8010bcc:	f001 fdc2 	bl	8012754 <_sbrk>
 8010bd0:	1c43      	adds	r3, r0, #1
 8010bd2:	d102      	bne.n	8010bda <_sbrk_r+0x1a>
 8010bd4:	682b      	ldr	r3, [r5, #0]
 8010bd6:	b103      	cbz	r3, 8010bda <_sbrk_r+0x1a>
 8010bd8:	6023      	str	r3, [r4, #0]
 8010bda:	bd38      	pop	{r3, r4, r5, pc}
 8010bdc:	2000fe60 	.word	0x2000fe60

08010be0 <sysconf>:
 8010be0:	2808      	cmp	r0, #8
 8010be2:	b508      	push	{r3, lr}
 8010be4:	d006      	beq.n	8010bf4 <sysconf+0x14>
 8010be6:	f001 fd25 	bl	8012634 <__errno>
 8010bea:	2316      	movs	r3, #22
 8010bec:	6003      	str	r3, [r0, #0]
 8010bee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010bf2:	bd08      	pop	{r3, pc}
 8010bf4:	2080      	movs	r0, #128	@ 0x80
 8010bf6:	e7fc      	b.n	8010bf2 <sysconf+0x12>

08010bf8 <__libc_init_array>:
 8010bf8:	b570      	push	{r4, r5, r6, lr}
 8010bfa:	4d0d      	ldr	r5, [pc, #52]	@ (8010c30 <__libc_init_array+0x38>)
 8010bfc:	4c0d      	ldr	r4, [pc, #52]	@ (8010c34 <__libc_init_array+0x3c>)
 8010bfe:	1b64      	subs	r4, r4, r5
 8010c00:	10a4      	asrs	r4, r4, #2
 8010c02:	2600      	movs	r6, #0
 8010c04:	42a6      	cmp	r6, r4
 8010c06:	d109      	bne.n	8010c1c <__libc_init_array+0x24>
 8010c08:	4d0b      	ldr	r5, [pc, #44]	@ (8010c38 <__libc_init_array+0x40>)
 8010c0a:	4c0c      	ldr	r4, [pc, #48]	@ (8010c3c <__libc_init_array+0x44>)
 8010c0c:	f001 fdb0 	bl	8012770 <_init>
 8010c10:	1b64      	subs	r4, r4, r5
 8010c12:	10a4      	asrs	r4, r4, #2
 8010c14:	2600      	movs	r6, #0
 8010c16:	42a6      	cmp	r6, r4
 8010c18:	d105      	bne.n	8010c26 <__libc_init_array+0x2e>
 8010c1a:	bd70      	pop	{r4, r5, r6, pc}
 8010c1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010c20:	4798      	blx	r3
 8010c22:	3601      	adds	r6, #1
 8010c24:	e7ee      	b.n	8010c04 <__libc_init_array+0xc>
 8010c26:	f855 3b04 	ldr.w	r3, [r5], #4
 8010c2a:	4798      	blx	r3
 8010c2c:	3601      	adds	r6, #1
 8010c2e:	e7f2      	b.n	8010c16 <__libc_init_array+0x1e>
 8010c30:	08091bf4 	.word	0x08091bf4
 8010c34:	08091bf4 	.word	0x08091bf4
 8010c38:	08091bf4 	.word	0x08091bf4
 8010c3c:	08091c08 	.word	0x08091c08

08010c40 <__retarget_lock_init_recursive>:
 8010c40:	4770      	bx	lr

08010c42 <__retarget_lock_close_recursive>:
 8010c42:	4770      	bx	lr

08010c44 <__retarget_lock_acquire_recursive>:
 8010c44:	4770      	bx	lr

08010c46 <__retarget_lock_release_recursive>:
 8010c46:	4770      	bx	lr

08010c48 <memcpy>:
 8010c48:	440a      	add	r2, r1
 8010c4a:	4291      	cmp	r1, r2
 8010c4c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8010c50:	d100      	bne.n	8010c54 <memcpy+0xc>
 8010c52:	4770      	bx	lr
 8010c54:	b510      	push	{r4, lr}
 8010c56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010c5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010c5e:	4291      	cmp	r1, r2
 8010c60:	d1f9      	bne.n	8010c56 <memcpy+0xe>
 8010c62:	bd10      	pop	{r4, pc}

08010c64 <_wcrtomb_r>:
 8010c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c66:	4c09      	ldr	r4, [pc, #36]	@ (8010c8c <_wcrtomb_r+0x28>)
 8010c68:	b085      	sub	sp, #20
 8010c6a:	f8d4 70e0 	ldr.w	r7, [r4, #224]	@ 0xe0
 8010c6e:	4605      	mov	r5, r0
 8010c70:	461e      	mov	r6, r3
 8010c72:	b909      	cbnz	r1, 8010c78 <_wcrtomb_r+0x14>
 8010c74:	460a      	mov	r2, r1
 8010c76:	a901      	add	r1, sp, #4
 8010c78:	47b8      	blx	r7
 8010c7a:	1c43      	adds	r3, r0, #1
 8010c7c:	bf01      	itttt	eq
 8010c7e:	2300      	moveq	r3, #0
 8010c80:	6033      	streq	r3, [r6, #0]
 8010c82:	238a      	moveq	r3, #138	@ 0x8a
 8010c84:	602b      	streq	r3, [r5, #0]
 8010c86:	b005      	add	sp, #20
 8010c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c8a:	bf00      	nop
 8010c8c:	2000042c 	.word	0x2000042c

08010c90 <__register_exitproc>:
 8010c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c94:	f8df a074 	ldr.w	sl, [pc, #116]	@ 8010d0c <__register_exitproc+0x7c>
 8010c98:	4606      	mov	r6, r0
 8010c9a:	f8da 0000 	ldr.w	r0, [sl]
 8010c9e:	4698      	mov	r8, r3
 8010ca0:	460f      	mov	r7, r1
 8010ca2:	4691      	mov	r9, r2
 8010ca4:	f7ff ffce 	bl	8010c44 <__retarget_lock_acquire_recursive>
 8010ca8:	4b16      	ldr	r3, [pc, #88]	@ (8010d04 <__register_exitproc+0x74>)
 8010caa:	681c      	ldr	r4, [r3, #0]
 8010cac:	b90c      	cbnz	r4, 8010cb2 <__register_exitproc+0x22>
 8010cae:	4c16      	ldr	r4, [pc, #88]	@ (8010d08 <__register_exitproc+0x78>)
 8010cb0:	601c      	str	r4, [r3, #0]
 8010cb2:	6865      	ldr	r5, [r4, #4]
 8010cb4:	f8da 0000 	ldr.w	r0, [sl]
 8010cb8:	2d1f      	cmp	r5, #31
 8010cba:	dd05      	ble.n	8010cc8 <__register_exitproc+0x38>
 8010cbc:	f7ff ffc3 	bl	8010c46 <__retarget_lock_release_recursive>
 8010cc0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010cc8:	b19e      	cbz	r6, 8010cf2 <__register_exitproc+0x62>
 8010cca:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8010cce:	2201      	movs	r2, #1
 8010cd0:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 8010cd4:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 8010cd8:	40aa      	lsls	r2, r5
 8010cda:	4313      	orrs	r3, r2
 8010cdc:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 8010ce0:	2e02      	cmp	r6, #2
 8010ce2:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 8010ce6:	bf02      	ittt	eq
 8010ce8:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 8010cec:	4313      	orreq	r3, r2
 8010cee:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 8010cf2:	1c6b      	adds	r3, r5, #1
 8010cf4:	3502      	adds	r5, #2
 8010cf6:	6063      	str	r3, [r4, #4]
 8010cf8:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8010cfc:	f7ff ffa3 	bl	8010c46 <__retarget_lock_release_recursive>
 8010d00:	2000      	movs	r0, #0
 8010d02:	e7df      	b.n	8010cc4 <__register_exitproc+0x34>
 8010d04:	2000fe5c 	.word	0x2000fe5c
 8010d08:	2000fccc 	.word	0x2000fccc
 8010d0c:	200006c0 	.word	0x200006c0

08010d10 <frexp>:
 8010d10:	b570      	push	{r4, r5, r6, lr}
 8010d12:	2100      	movs	r1, #0
 8010d14:	ec55 4b10 	vmov	r4, r5, d0
 8010d18:	6001      	str	r1, [r0, #0]
 8010d1a:	4915      	ldr	r1, [pc, #84]	@ (8010d70 <frexp+0x60>)
 8010d1c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8010d20:	428a      	cmp	r2, r1
 8010d22:	4606      	mov	r6, r0
 8010d24:	462b      	mov	r3, r5
 8010d26:	d820      	bhi.n	8010d6a <frexp+0x5a>
 8010d28:	4621      	mov	r1, r4
 8010d2a:	4311      	orrs	r1, r2
 8010d2c:	d01d      	beq.n	8010d6a <frexp+0x5a>
 8010d2e:	4911      	ldr	r1, [pc, #68]	@ (8010d74 <frexp+0x64>)
 8010d30:	4029      	ands	r1, r5
 8010d32:	b961      	cbnz	r1, 8010d4e <frexp+0x3e>
 8010d34:	4b10      	ldr	r3, [pc, #64]	@ (8010d78 <frexp+0x68>)
 8010d36:	2200      	movs	r2, #0
 8010d38:	4620      	mov	r0, r4
 8010d3a:	4629      	mov	r1, r5
 8010d3c:	f7ef fc7c 	bl	8000638 <__aeabi_dmul>
 8010d40:	460b      	mov	r3, r1
 8010d42:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8010d46:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 8010d4a:	4604      	mov	r4, r0
 8010d4c:	6031      	str	r1, [r6, #0]
 8010d4e:	6831      	ldr	r1, [r6, #0]
 8010d50:	1512      	asrs	r2, r2, #20
 8010d52:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010d56:	f2a2 32fe 	subw	r2, r2, #1022	@ 0x3fe
 8010d5a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8010d5e:	4411      	add	r1, r2
 8010d60:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8010d64:	6031      	str	r1, [r6, #0]
 8010d66:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 8010d6a:	ec45 4b10 	vmov	d0, r4, r5
 8010d6e:	bd70      	pop	{r4, r5, r6, pc}
 8010d70:	7fefffff 	.word	0x7fefffff
 8010d74:	7ff00000 	.word	0x7ff00000
 8010d78:	43500000 	.word	0x43500000

08010d7c <register_fini>:
 8010d7c:	4b02      	ldr	r3, [pc, #8]	@ (8010d88 <register_fini+0xc>)
 8010d7e:	b113      	cbz	r3, 8010d86 <register_fini+0xa>
 8010d80:	4802      	ldr	r0, [pc, #8]	@ (8010d8c <register_fini+0x10>)
 8010d82:	f000 b805 	b.w	8010d90 <atexit>
 8010d86:	4770      	bx	lr
 8010d88:	00000000 	.word	0x00000000
 8010d8c:	08012641 	.word	0x08012641

08010d90 <atexit>:
 8010d90:	2300      	movs	r3, #0
 8010d92:	4601      	mov	r1, r0
 8010d94:	461a      	mov	r2, r3
 8010d96:	4618      	mov	r0, r3
 8010d98:	f7ff bf7a 	b.w	8010c90 <__register_exitproc>

08010d9c <quorem>:
 8010d9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010da0:	6903      	ldr	r3, [r0, #16]
 8010da2:	690c      	ldr	r4, [r1, #16]
 8010da4:	42a3      	cmp	r3, r4
 8010da6:	4607      	mov	r7, r0
 8010da8:	db7e      	blt.n	8010ea8 <quorem+0x10c>
 8010daa:	3c01      	subs	r4, #1
 8010dac:	f101 0814 	add.w	r8, r1, #20
 8010db0:	00a3      	lsls	r3, r4, #2
 8010db2:	f100 0514 	add.w	r5, r0, #20
 8010db6:	9300      	str	r3, [sp, #0]
 8010db8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010dbc:	9301      	str	r3, [sp, #4]
 8010dbe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010dc2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010dc6:	3301      	adds	r3, #1
 8010dc8:	429a      	cmp	r2, r3
 8010dca:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010dce:	fbb2 f6f3 	udiv	r6, r2, r3
 8010dd2:	d32e      	bcc.n	8010e32 <quorem+0x96>
 8010dd4:	f04f 0a00 	mov.w	sl, #0
 8010dd8:	46c4      	mov	ip, r8
 8010dda:	46ae      	mov	lr, r5
 8010ddc:	46d3      	mov	fp, sl
 8010dde:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010de2:	b298      	uxth	r0, r3
 8010de4:	fb06 a000 	mla	r0, r6, r0, sl
 8010de8:	0c02      	lsrs	r2, r0, #16
 8010dea:	0c1b      	lsrs	r3, r3, #16
 8010dec:	fb06 2303 	mla	r3, r6, r3, r2
 8010df0:	f8de 2000 	ldr.w	r2, [lr]
 8010df4:	b280      	uxth	r0, r0
 8010df6:	b292      	uxth	r2, r2
 8010df8:	1a12      	subs	r2, r2, r0
 8010dfa:	445a      	add	r2, fp
 8010dfc:	f8de 0000 	ldr.w	r0, [lr]
 8010e00:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010e04:	b29b      	uxth	r3, r3
 8010e06:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010e0a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010e0e:	b292      	uxth	r2, r2
 8010e10:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010e14:	45e1      	cmp	r9, ip
 8010e16:	f84e 2b04 	str.w	r2, [lr], #4
 8010e1a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010e1e:	d2de      	bcs.n	8010dde <quorem+0x42>
 8010e20:	9b00      	ldr	r3, [sp, #0]
 8010e22:	58eb      	ldr	r3, [r5, r3]
 8010e24:	b92b      	cbnz	r3, 8010e32 <quorem+0x96>
 8010e26:	9b01      	ldr	r3, [sp, #4]
 8010e28:	3b04      	subs	r3, #4
 8010e2a:	429d      	cmp	r5, r3
 8010e2c:	461a      	mov	r2, r3
 8010e2e:	d32f      	bcc.n	8010e90 <quorem+0xf4>
 8010e30:	613c      	str	r4, [r7, #16]
 8010e32:	4638      	mov	r0, r7
 8010e34:	f001 f9a0 	bl	8012178 <__mcmp>
 8010e38:	2800      	cmp	r0, #0
 8010e3a:	db25      	blt.n	8010e88 <quorem+0xec>
 8010e3c:	4629      	mov	r1, r5
 8010e3e:	2000      	movs	r0, #0
 8010e40:	f858 2b04 	ldr.w	r2, [r8], #4
 8010e44:	f8d1 c000 	ldr.w	ip, [r1]
 8010e48:	fa1f fe82 	uxth.w	lr, r2
 8010e4c:	fa1f f38c 	uxth.w	r3, ip
 8010e50:	eba3 030e 	sub.w	r3, r3, lr
 8010e54:	4403      	add	r3, r0
 8010e56:	0c12      	lsrs	r2, r2, #16
 8010e58:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010e5c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010e60:	b29b      	uxth	r3, r3
 8010e62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010e66:	45c1      	cmp	r9, r8
 8010e68:	f841 3b04 	str.w	r3, [r1], #4
 8010e6c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010e70:	d2e6      	bcs.n	8010e40 <quorem+0xa4>
 8010e72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010e76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010e7a:	b922      	cbnz	r2, 8010e86 <quorem+0xea>
 8010e7c:	3b04      	subs	r3, #4
 8010e7e:	429d      	cmp	r5, r3
 8010e80:	461a      	mov	r2, r3
 8010e82:	d30b      	bcc.n	8010e9c <quorem+0x100>
 8010e84:	613c      	str	r4, [r7, #16]
 8010e86:	3601      	adds	r6, #1
 8010e88:	4630      	mov	r0, r6
 8010e8a:	b003      	add	sp, #12
 8010e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e90:	6812      	ldr	r2, [r2, #0]
 8010e92:	3b04      	subs	r3, #4
 8010e94:	2a00      	cmp	r2, #0
 8010e96:	d1cb      	bne.n	8010e30 <quorem+0x94>
 8010e98:	3c01      	subs	r4, #1
 8010e9a:	e7c6      	b.n	8010e2a <quorem+0x8e>
 8010e9c:	6812      	ldr	r2, [r2, #0]
 8010e9e:	3b04      	subs	r3, #4
 8010ea0:	2a00      	cmp	r2, #0
 8010ea2:	d1ef      	bne.n	8010e84 <quorem+0xe8>
 8010ea4:	3c01      	subs	r4, #1
 8010ea6:	e7ea      	b.n	8010e7e <quorem+0xe2>
 8010ea8:	2000      	movs	r0, #0
 8010eaa:	e7ee      	b.n	8010e8a <quorem+0xee>
 8010eac:	0000      	movs	r0, r0
	...

08010eb0 <_dtoa_r>:
 8010eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010eb4:	b099      	sub	sp, #100	@ 0x64
 8010eb6:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010eba:	9109      	str	r1, [sp, #36]	@ 0x24
 8010ebc:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8010ebe:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8010ec0:	920e      	str	r2, [sp, #56]	@ 0x38
 8010ec2:	ec55 4b10 	vmov	r4, r5, d0
 8010ec6:	4683      	mov	fp, r0
 8010ec8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010eca:	b149      	cbz	r1, 8010ee0 <_dtoa_r+0x30>
 8010ecc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010ece:	604a      	str	r2, [r1, #4]
 8010ed0:	2301      	movs	r3, #1
 8010ed2:	4093      	lsls	r3, r2
 8010ed4:	608b      	str	r3, [r1, #8]
 8010ed6:	f000 ff48 	bl	8011d6a <_Bfree>
 8010eda:	2300      	movs	r3, #0
 8010edc:	f8cb 3038 	str.w	r3, [fp, #56]	@ 0x38
 8010ee0:	1e2b      	subs	r3, r5, #0
 8010ee2:	bfb9      	ittee	lt
 8010ee4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010ee8:	9303      	strlt	r3, [sp, #12]
 8010eea:	2300      	movge	r3, #0
 8010eec:	6033      	strge	r3, [r6, #0]
 8010eee:	9f03      	ldr	r7, [sp, #12]
 8010ef0:	4b97      	ldr	r3, [pc, #604]	@ (8011150 <_dtoa_r+0x2a0>)
 8010ef2:	bfbc      	itt	lt
 8010ef4:	2201      	movlt	r2, #1
 8010ef6:	6032      	strlt	r2, [r6, #0]
 8010ef8:	43bb      	bics	r3, r7
 8010efa:	d114      	bne.n	8010f26 <_dtoa_r+0x76>
 8010efc:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010efe:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010f02:	6013      	str	r3, [r2, #0]
 8010f04:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010f08:	4323      	orrs	r3, r4
 8010f0a:	f000 854c 	beq.w	80119a6 <_dtoa_r+0xaf6>
 8010f0e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010f10:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8011168 <_dtoa_r+0x2b8>
 8010f14:	b11b      	cbz	r3, 8010f1e <_dtoa_r+0x6e>
 8010f16:	f10a 0303 	add.w	r3, sl, #3
 8010f1a:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010f1c:	6013      	str	r3, [r2, #0]
 8010f1e:	4650      	mov	r0, sl
 8010f20:	b019      	add	sp, #100	@ 0x64
 8010f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f26:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010f2a:	2200      	movs	r2, #0
 8010f2c:	ec51 0b17 	vmov	r0, r1, d7
 8010f30:	2300      	movs	r3, #0
 8010f32:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8010f36:	f7ef fde7 	bl	8000b08 <__aeabi_dcmpeq>
 8010f3a:	4680      	mov	r8, r0
 8010f3c:	b150      	cbz	r0, 8010f54 <_dtoa_r+0xa4>
 8010f3e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010f40:	2301      	movs	r3, #1
 8010f42:	6013      	str	r3, [r2, #0]
 8010f44:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010f46:	b113      	cbz	r3, 8010f4e <_dtoa_r+0x9e>
 8010f48:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010f4a:	4b82      	ldr	r3, [pc, #520]	@ (8011154 <_dtoa_r+0x2a4>)
 8010f4c:	6013      	str	r3, [r2, #0]
 8010f4e:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 801116c <_dtoa_r+0x2bc>
 8010f52:	e7e4      	b.n	8010f1e <_dtoa_r+0x6e>
 8010f54:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8010f58:	aa16      	add	r2, sp, #88	@ 0x58
 8010f5a:	a917      	add	r1, sp, #92	@ 0x5c
 8010f5c:	4658      	mov	r0, fp
 8010f5e:	f001 f9bb 	bl	80122d8 <__d2b>
 8010f62:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010f66:	4681      	mov	r9, r0
 8010f68:	2e00      	cmp	r6, #0
 8010f6a:	d077      	beq.n	801105c <_dtoa_r+0x1ac>
 8010f6c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010f6e:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8010f72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010f76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010f7a:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010f7e:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8010f82:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010f86:	4619      	mov	r1, r3
 8010f88:	2200      	movs	r2, #0
 8010f8a:	4b73      	ldr	r3, [pc, #460]	@ (8011158 <_dtoa_r+0x2a8>)
 8010f8c:	f7ef f99c 	bl	80002c8 <__aeabi_dsub>
 8010f90:	a369      	add	r3, pc, #420	@ (adr r3, 8011138 <_dtoa_r+0x288>)
 8010f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f96:	f7ef fb4f 	bl	8000638 <__aeabi_dmul>
 8010f9a:	a369      	add	r3, pc, #420	@ (adr r3, 8011140 <_dtoa_r+0x290>)
 8010f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fa0:	f7ef f994 	bl	80002cc <__adddf3>
 8010fa4:	4604      	mov	r4, r0
 8010fa6:	4630      	mov	r0, r6
 8010fa8:	460d      	mov	r5, r1
 8010faa:	f7ef fadb 	bl	8000564 <__aeabi_i2d>
 8010fae:	a366      	add	r3, pc, #408	@ (adr r3, 8011148 <_dtoa_r+0x298>)
 8010fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fb4:	f7ef fb40 	bl	8000638 <__aeabi_dmul>
 8010fb8:	4602      	mov	r2, r0
 8010fba:	460b      	mov	r3, r1
 8010fbc:	4620      	mov	r0, r4
 8010fbe:	4629      	mov	r1, r5
 8010fc0:	f7ef f984 	bl	80002cc <__adddf3>
 8010fc4:	4604      	mov	r4, r0
 8010fc6:	460d      	mov	r5, r1
 8010fc8:	f7ef fde6 	bl	8000b98 <__aeabi_d2iz>
 8010fcc:	2200      	movs	r2, #0
 8010fce:	4607      	mov	r7, r0
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	4620      	mov	r0, r4
 8010fd4:	4629      	mov	r1, r5
 8010fd6:	f7ef fda1 	bl	8000b1c <__aeabi_dcmplt>
 8010fda:	b140      	cbz	r0, 8010fee <_dtoa_r+0x13e>
 8010fdc:	4638      	mov	r0, r7
 8010fde:	f7ef fac1 	bl	8000564 <__aeabi_i2d>
 8010fe2:	4622      	mov	r2, r4
 8010fe4:	462b      	mov	r3, r5
 8010fe6:	f7ef fd8f 	bl	8000b08 <__aeabi_dcmpeq>
 8010fea:	b900      	cbnz	r0, 8010fee <_dtoa_r+0x13e>
 8010fec:	3f01      	subs	r7, #1
 8010fee:	2f16      	cmp	r7, #22
 8010ff0:	d851      	bhi.n	8011096 <_dtoa_r+0x1e6>
 8010ff2:	4b5a      	ldr	r3, [pc, #360]	@ (801115c <_dtoa_r+0x2ac>)
 8010ff4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ffc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011000:	f7ef fd8c 	bl	8000b1c <__aeabi_dcmplt>
 8011004:	2800      	cmp	r0, #0
 8011006:	d048      	beq.n	801109a <_dtoa_r+0x1ea>
 8011008:	3f01      	subs	r7, #1
 801100a:	2300      	movs	r3, #0
 801100c:	9312      	str	r3, [sp, #72]	@ 0x48
 801100e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011010:	1b9b      	subs	r3, r3, r6
 8011012:	1e5a      	subs	r2, r3, #1
 8011014:	bf44      	itt	mi
 8011016:	f1c3 0801 	rsbmi	r8, r3, #1
 801101a:	2300      	movmi	r3, #0
 801101c:	9208      	str	r2, [sp, #32]
 801101e:	bf54      	ite	pl
 8011020:	f04f 0800 	movpl.w	r8, #0
 8011024:	9308      	strmi	r3, [sp, #32]
 8011026:	2f00      	cmp	r7, #0
 8011028:	db39      	blt.n	801109e <_dtoa_r+0x1ee>
 801102a:	9b08      	ldr	r3, [sp, #32]
 801102c:	970f      	str	r7, [sp, #60]	@ 0x3c
 801102e:	443b      	add	r3, r7
 8011030:	9308      	str	r3, [sp, #32]
 8011032:	2300      	movs	r3, #0
 8011034:	930a      	str	r3, [sp, #40]	@ 0x28
 8011036:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011038:	2b09      	cmp	r3, #9
 801103a:	d865      	bhi.n	8011108 <_dtoa_r+0x258>
 801103c:	2b05      	cmp	r3, #5
 801103e:	bfc4      	itt	gt
 8011040:	3b04      	subgt	r3, #4
 8011042:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8011044:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011046:	f1a3 0302 	sub.w	r3, r3, #2
 801104a:	bfcc      	ite	gt
 801104c:	2400      	movgt	r4, #0
 801104e:	2401      	movle	r4, #1
 8011050:	2b03      	cmp	r3, #3
 8011052:	d864      	bhi.n	801111e <_dtoa_r+0x26e>
 8011054:	e8df f003 	tbb	[pc, r3]
 8011058:	5635372a 	.word	0x5635372a
 801105c:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8011060:	441e      	add	r6, r3
 8011062:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8011066:	2b20      	cmp	r3, #32
 8011068:	bfc1      	itttt	gt
 801106a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801106e:	409f      	lslgt	r7, r3
 8011070:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8011074:	fa24 f303 	lsrgt.w	r3, r4, r3
 8011078:	bfd6      	itet	le
 801107a:	f1c3 0320 	rsble	r3, r3, #32
 801107e:	ea47 0003 	orrgt.w	r0, r7, r3
 8011082:	fa04 f003 	lslle.w	r0, r4, r3
 8011086:	f7ef fa5d 	bl	8000544 <__aeabi_ui2d>
 801108a:	2201      	movs	r2, #1
 801108c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8011090:	3e01      	subs	r6, #1
 8011092:	9214      	str	r2, [sp, #80]	@ 0x50
 8011094:	e777      	b.n	8010f86 <_dtoa_r+0xd6>
 8011096:	2301      	movs	r3, #1
 8011098:	e7b8      	b.n	801100c <_dtoa_r+0x15c>
 801109a:	9012      	str	r0, [sp, #72]	@ 0x48
 801109c:	e7b7      	b.n	801100e <_dtoa_r+0x15e>
 801109e:	427b      	negs	r3, r7
 80110a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80110a2:	2300      	movs	r3, #0
 80110a4:	eba8 0807 	sub.w	r8, r8, r7
 80110a8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80110aa:	e7c4      	b.n	8011036 <_dtoa_r+0x186>
 80110ac:	2300      	movs	r3, #0
 80110ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80110b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	dc36      	bgt.n	8011124 <_dtoa_r+0x274>
 80110b6:	2301      	movs	r3, #1
 80110b8:	9300      	str	r3, [sp, #0]
 80110ba:	9307      	str	r3, [sp, #28]
 80110bc:	461a      	mov	r2, r3
 80110be:	920e      	str	r2, [sp, #56]	@ 0x38
 80110c0:	e00b      	b.n	80110da <_dtoa_r+0x22a>
 80110c2:	2301      	movs	r3, #1
 80110c4:	e7f3      	b.n	80110ae <_dtoa_r+0x1fe>
 80110c6:	2300      	movs	r3, #0
 80110c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80110ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80110cc:	18fb      	adds	r3, r7, r3
 80110ce:	9300      	str	r3, [sp, #0]
 80110d0:	3301      	adds	r3, #1
 80110d2:	2b01      	cmp	r3, #1
 80110d4:	9307      	str	r3, [sp, #28]
 80110d6:	bfb8      	it	lt
 80110d8:	2301      	movlt	r3, #1
 80110da:	2100      	movs	r1, #0
 80110dc:	2204      	movs	r2, #4
 80110de:	f102 0014 	add.w	r0, r2, #20
 80110e2:	4298      	cmp	r0, r3
 80110e4:	d922      	bls.n	801112c <_dtoa_r+0x27c>
 80110e6:	f8cb 103c 	str.w	r1, [fp, #60]	@ 0x3c
 80110ea:	4658      	mov	r0, fp
 80110ec:	f000 fe18 	bl	8011d20 <_Balloc>
 80110f0:	4682      	mov	sl, r0
 80110f2:	2800      	cmp	r0, #0
 80110f4:	d13c      	bne.n	8011170 <_dtoa_r+0x2c0>
 80110f6:	4b1a      	ldr	r3, [pc, #104]	@ (8011160 <_dtoa_r+0x2b0>)
 80110f8:	4602      	mov	r2, r0
 80110fa:	f240 11af 	movw	r1, #431	@ 0x1af
 80110fe:	4819      	ldr	r0, [pc, #100]	@ (8011164 <_dtoa_r+0x2b4>)
 8011100:	f001 fab2 	bl	8012668 <__assert_func>
 8011104:	2301      	movs	r3, #1
 8011106:	e7df      	b.n	80110c8 <_dtoa_r+0x218>
 8011108:	2401      	movs	r4, #1
 801110a:	2300      	movs	r3, #0
 801110c:	9309      	str	r3, [sp, #36]	@ 0x24
 801110e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011110:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011114:	9300      	str	r3, [sp, #0]
 8011116:	9307      	str	r3, [sp, #28]
 8011118:	2200      	movs	r2, #0
 801111a:	2312      	movs	r3, #18
 801111c:	e7cf      	b.n	80110be <_dtoa_r+0x20e>
 801111e:	2301      	movs	r3, #1
 8011120:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011122:	e7f5      	b.n	8011110 <_dtoa_r+0x260>
 8011124:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011126:	9300      	str	r3, [sp, #0]
 8011128:	9307      	str	r3, [sp, #28]
 801112a:	e7d6      	b.n	80110da <_dtoa_r+0x22a>
 801112c:	3101      	adds	r1, #1
 801112e:	0052      	lsls	r2, r2, #1
 8011130:	e7d5      	b.n	80110de <_dtoa_r+0x22e>
 8011132:	bf00      	nop
 8011134:	f3af 8000 	nop.w
 8011138:	636f4361 	.word	0x636f4361
 801113c:	3fd287a7 	.word	0x3fd287a7
 8011140:	8b60c8b3 	.word	0x8b60c8b3
 8011144:	3fc68a28 	.word	0x3fc68a28
 8011148:	509f79fb 	.word	0x509f79fb
 801114c:	3fd34413 	.word	0x3fd34413
 8011150:	7ff00000 	.word	0x7ff00000
 8011154:	08091893 	.word	0x08091893
 8011158:	3ff80000 	.word	0x3ff80000
 801115c:	08091ae8 	.word	0x08091ae8
 8011160:	080919ec 	.word	0x080919ec
 8011164:	080919fd 	.word	0x080919fd
 8011168:	080919e8 	.word	0x080919e8
 801116c:	08091892 	.word	0x08091892
 8011170:	9b07      	ldr	r3, [sp, #28]
 8011172:	f8cb 0038 	str.w	r0, [fp, #56]	@ 0x38
 8011176:	2b0e      	cmp	r3, #14
 8011178:	f200 80a4 	bhi.w	80112c4 <_dtoa_r+0x414>
 801117c:	2c00      	cmp	r4, #0
 801117e:	f000 80a1 	beq.w	80112c4 <_dtoa_r+0x414>
 8011182:	2f00      	cmp	r7, #0
 8011184:	dd33      	ble.n	80111ee <_dtoa_r+0x33e>
 8011186:	4bae      	ldr	r3, [pc, #696]	@ (8011440 <_dtoa_r+0x590>)
 8011188:	f007 020f 	and.w	r2, r7, #15
 801118c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011190:	ed93 7b00 	vldr	d7, [r3]
 8011194:	05f8      	lsls	r0, r7, #23
 8011196:	ed8d 7b04 	vstr	d7, [sp, #16]
 801119a:	ea4f 1427 	mov.w	r4, r7, asr #4
 801119e:	d516      	bpl.n	80111ce <_dtoa_r+0x31e>
 80111a0:	4ba8      	ldr	r3, [pc, #672]	@ (8011444 <_dtoa_r+0x594>)
 80111a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80111a6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80111aa:	f7ef fb6f 	bl	800088c <__aeabi_ddiv>
 80111ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80111b2:	f004 040f 	and.w	r4, r4, #15
 80111b6:	2603      	movs	r6, #3
 80111b8:	4da2      	ldr	r5, [pc, #648]	@ (8011444 <_dtoa_r+0x594>)
 80111ba:	b954      	cbnz	r4, 80111d2 <_dtoa_r+0x322>
 80111bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80111c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80111c4:	f7ef fb62 	bl	800088c <__aeabi_ddiv>
 80111c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80111cc:	e028      	b.n	8011220 <_dtoa_r+0x370>
 80111ce:	2602      	movs	r6, #2
 80111d0:	e7f2      	b.n	80111b8 <_dtoa_r+0x308>
 80111d2:	07e1      	lsls	r1, r4, #31
 80111d4:	d508      	bpl.n	80111e8 <_dtoa_r+0x338>
 80111d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80111da:	e9d5 2300 	ldrd	r2, r3, [r5]
 80111de:	f7ef fa2b 	bl	8000638 <__aeabi_dmul>
 80111e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80111e6:	3601      	adds	r6, #1
 80111e8:	1064      	asrs	r4, r4, #1
 80111ea:	3508      	adds	r5, #8
 80111ec:	e7e5      	b.n	80111ba <_dtoa_r+0x30a>
 80111ee:	f000 80d2 	beq.w	8011396 <_dtoa_r+0x4e6>
 80111f2:	427c      	negs	r4, r7
 80111f4:	4b92      	ldr	r3, [pc, #584]	@ (8011440 <_dtoa_r+0x590>)
 80111f6:	4d93      	ldr	r5, [pc, #588]	@ (8011444 <_dtoa_r+0x594>)
 80111f8:	f004 020f 	and.w	r2, r4, #15
 80111fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011204:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011208:	f7ef fa16 	bl	8000638 <__aeabi_dmul>
 801120c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011210:	1124      	asrs	r4, r4, #4
 8011212:	2300      	movs	r3, #0
 8011214:	2602      	movs	r6, #2
 8011216:	2c00      	cmp	r4, #0
 8011218:	f040 80b2 	bne.w	8011380 <_dtoa_r+0x4d0>
 801121c:	2b00      	cmp	r3, #0
 801121e:	d1d3      	bne.n	80111c8 <_dtoa_r+0x318>
 8011220:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011222:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011226:	2b00      	cmp	r3, #0
 8011228:	f000 80b7 	beq.w	801139a <_dtoa_r+0x4ea>
 801122c:	4b86      	ldr	r3, [pc, #536]	@ (8011448 <_dtoa_r+0x598>)
 801122e:	2200      	movs	r2, #0
 8011230:	4620      	mov	r0, r4
 8011232:	4629      	mov	r1, r5
 8011234:	f7ef fc72 	bl	8000b1c <__aeabi_dcmplt>
 8011238:	2800      	cmp	r0, #0
 801123a:	f000 80ae 	beq.w	801139a <_dtoa_r+0x4ea>
 801123e:	9b07      	ldr	r3, [sp, #28]
 8011240:	2b00      	cmp	r3, #0
 8011242:	f000 80aa 	beq.w	801139a <_dtoa_r+0x4ea>
 8011246:	9b00      	ldr	r3, [sp, #0]
 8011248:	2b00      	cmp	r3, #0
 801124a:	dd37      	ble.n	80112bc <_dtoa_r+0x40c>
 801124c:	1e7b      	subs	r3, r7, #1
 801124e:	9304      	str	r3, [sp, #16]
 8011250:	4620      	mov	r0, r4
 8011252:	4b7e      	ldr	r3, [pc, #504]	@ (801144c <_dtoa_r+0x59c>)
 8011254:	2200      	movs	r2, #0
 8011256:	4629      	mov	r1, r5
 8011258:	f7ef f9ee 	bl	8000638 <__aeabi_dmul>
 801125c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011260:	9c00      	ldr	r4, [sp, #0]
 8011262:	3601      	adds	r6, #1
 8011264:	4630      	mov	r0, r6
 8011266:	f7ef f97d 	bl	8000564 <__aeabi_i2d>
 801126a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801126e:	f7ef f9e3 	bl	8000638 <__aeabi_dmul>
 8011272:	4b77      	ldr	r3, [pc, #476]	@ (8011450 <_dtoa_r+0x5a0>)
 8011274:	2200      	movs	r2, #0
 8011276:	f7ef f829 	bl	80002cc <__adddf3>
 801127a:	4605      	mov	r5, r0
 801127c:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8011280:	2c00      	cmp	r4, #0
 8011282:	f040 808d 	bne.w	80113a0 <_dtoa_r+0x4f0>
 8011286:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801128a:	4b72      	ldr	r3, [pc, #456]	@ (8011454 <_dtoa_r+0x5a4>)
 801128c:	2200      	movs	r2, #0
 801128e:	f7ef f81b 	bl	80002c8 <__aeabi_dsub>
 8011292:	4602      	mov	r2, r0
 8011294:	460b      	mov	r3, r1
 8011296:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801129a:	462a      	mov	r2, r5
 801129c:	4633      	mov	r3, r6
 801129e:	f7ef fc5b 	bl	8000b58 <__aeabi_dcmpgt>
 80112a2:	2800      	cmp	r0, #0
 80112a4:	f040 828c 	bne.w	80117c0 <_dtoa_r+0x910>
 80112a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80112ac:	462a      	mov	r2, r5
 80112ae:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80112b2:	f7ef fc33 	bl	8000b1c <__aeabi_dcmplt>
 80112b6:	2800      	cmp	r0, #0
 80112b8:	f040 8129 	bne.w	801150e <_dtoa_r+0x65e>
 80112bc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80112c0:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80112c4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	f2c0 815b 	blt.w	8011582 <_dtoa_r+0x6d2>
 80112cc:	2f0e      	cmp	r7, #14
 80112ce:	f300 8158 	bgt.w	8011582 <_dtoa_r+0x6d2>
 80112d2:	4b5b      	ldr	r3, [pc, #364]	@ (8011440 <_dtoa_r+0x590>)
 80112d4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80112d8:	ed93 7b00 	vldr	d7, [r3]
 80112dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80112de:	2b00      	cmp	r3, #0
 80112e0:	ed8d 7b00 	vstr	d7, [sp]
 80112e4:	da03      	bge.n	80112ee <_dtoa_r+0x43e>
 80112e6:	9b07      	ldr	r3, [sp, #28]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	f340 8102 	ble.w	80114f2 <_dtoa_r+0x642>
 80112ee:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80112f2:	4656      	mov	r6, sl
 80112f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80112f8:	4620      	mov	r0, r4
 80112fa:	4629      	mov	r1, r5
 80112fc:	f7ef fac6 	bl	800088c <__aeabi_ddiv>
 8011300:	f7ef fc4a 	bl	8000b98 <__aeabi_d2iz>
 8011304:	4680      	mov	r8, r0
 8011306:	f7ef f92d 	bl	8000564 <__aeabi_i2d>
 801130a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801130e:	f7ef f993 	bl	8000638 <__aeabi_dmul>
 8011312:	4602      	mov	r2, r0
 8011314:	460b      	mov	r3, r1
 8011316:	4620      	mov	r0, r4
 8011318:	4629      	mov	r1, r5
 801131a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801131e:	f7ee ffd3 	bl	80002c8 <__aeabi_dsub>
 8011322:	f806 4b01 	strb.w	r4, [r6], #1
 8011326:	9d07      	ldr	r5, [sp, #28]
 8011328:	eba6 040a 	sub.w	r4, r6, sl
 801132c:	42a5      	cmp	r5, r4
 801132e:	4602      	mov	r2, r0
 8011330:	460b      	mov	r3, r1
 8011332:	f040 8118 	bne.w	8011566 <_dtoa_r+0x6b6>
 8011336:	f7ee ffc9 	bl	80002cc <__adddf3>
 801133a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801133e:	4604      	mov	r4, r0
 8011340:	460d      	mov	r5, r1
 8011342:	f7ef fc09 	bl	8000b58 <__aeabi_dcmpgt>
 8011346:	2800      	cmp	r0, #0
 8011348:	f040 80fa 	bne.w	8011540 <_dtoa_r+0x690>
 801134c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011350:	4620      	mov	r0, r4
 8011352:	4629      	mov	r1, r5
 8011354:	f7ef fbd8 	bl	8000b08 <__aeabi_dcmpeq>
 8011358:	b118      	cbz	r0, 8011362 <_dtoa_r+0x4b2>
 801135a:	f018 0f01 	tst.w	r8, #1
 801135e:	f040 80ef 	bne.w	8011540 <_dtoa_r+0x690>
 8011362:	4649      	mov	r1, r9
 8011364:	4658      	mov	r0, fp
 8011366:	f000 fd00 	bl	8011d6a <_Bfree>
 801136a:	2300      	movs	r3, #0
 801136c:	7033      	strb	r3, [r6, #0]
 801136e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011370:	3701      	adds	r7, #1
 8011372:	601f      	str	r7, [r3, #0]
 8011374:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011376:	2b00      	cmp	r3, #0
 8011378:	f43f add1 	beq.w	8010f1e <_dtoa_r+0x6e>
 801137c:	601e      	str	r6, [r3, #0]
 801137e:	e5ce      	b.n	8010f1e <_dtoa_r+0x6e>
 8011380:	07e2      	lsls	r2, r4, #31
 8011382:	d505      	bpl.n	8011390 <_dtoa_r+0x4e0>
 8011384:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011388:	f7ef f956 	bl	8000638 <__aeabi_dmul>
 801138c:	3601      	adds	r6, #1
 801138e:	2301      	movs	r3, #1
 8011390:	1064      	asrs	r4, r4, #1
 8011392:	3508      	adds	r5, #8
 8011394:	e73f      	b.n	8011216 <_dtoa_r+0x366>
 8011396:	2602      	movs	r6, #2
 8011398:	e742      	b.n	8011220 <_dtoa_r+0x370>
 801139a:	9c07      	ldr	r4, [sp, #28]
 801139c:	9704      	str	r7, [sp, #16]
 801139e:	e761      	b.n	8011264 <_dtoa_r+0x3b4>
 80113a0:	4b27      	ldr	r3, [pc, #156]	@ (8011440 <_dtoa_r+0x590>)
 80113a2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80113a4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80113a8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80113ac:	4454      	add	r4, sl
 80113ae:	2900      	cmp	r1, #0
 80113b0:	d054      	beq.n	801145c <_dtoa_r+0x5ac>
 80113b2:	4929      	ldr	r1, [pc, #164]	@ (8011458 <_dtoa_r+0x5a8>)
 80113b4:	2000      	movs	r0, #0
 80113b6:	f7ef fa69 	bl	800088c <__aeabi_ddiv>
 80113ba:	4633      	mov	r3, r6
 80113bc:	462a      	mov	r2, r5
 80113be:	f7ee ff83 	bl	80002c8 <__aeabi_dsub>
 80113c2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80113c6:	4656      	mov	r6, sl
 80113c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80113cc:	f7ef fbe4 	bl	8000b98 <__aeabi_d2iz>
 80113d0:	4605      	mov	r5, r0
 80113d2:	f7ef f8c7 	bl	8000564 <__aeabi_i2d>
 80113d6:	4602      	mov	r2, r0
 80113d8:	460b      	mov	r3, r1
 80113da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80113de:	f7ee ff73 	bl	80002c8 <__aeabi_dsub>
 80113e2:	3530      	adds	r5, #48	@ 0x30
 80113e4:	4602      	mov	r2, r0
 80113e6:	460b      	mov	r3, r1
 80113e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80113ec:	f806 5b01 	strb.w	r5, [r6], #1
 80113f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80113f4:	f7ef fb92 	bl	8000b1c <__aeabi_dcmplt>
 80113f8:	2800      	cmp	r0, #0
 80113fa:	d172      	bne.n	80114e2 <_dtoa_r+0x632>
 80113fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011400:	4911      	ldr	r1, [pc, #68]	@ (8011448 <_dtoa_r+0x598>)
 8011402:	2000      	movs	r0, #0
 8011404:	f7ee ff60 	bl	80002c8 <__aeabi_dsub>
 8011408:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801140c:	f7ef fb86 	bl	8000b1c <__aeabi_dcmplt>
 8011410:	2800      	cmp	r0, #0
 8011412:	f040 8096 	bne.w	8011542 <_dtoa_r+0x692>
 8011416:	42a6      	cmp	r6, r4
 8011418:	f43f af50 	beq.w	80112bc <_dtoa_r+0x40c>
 801141c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8011420:	4b0a      	ldr	r3, [pc, #40]	@ (801144c <_dtoa_r+0x59c>)
 8011422:	2200      	movs	r2, #0
 8011424:	f7ef f908 	bl	8000638 <__aeabi_dmul>
 8011428:	4b08      	ldr	r3, [pc, #32]	@ (801144c <_dtoa_r+0x59c>)
 801142a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801142e:	2200      	movs	r2, #0
 8011430:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011434:	f7ef f900 	bl	8000638 <__aeabi_dmul>
 8011438:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801143c:	e7c4      	b.n	80113c8 <_dtoa_r+0x518>
 801143e:	bf00      	nop
 8011440:	08091ae8 	.word	0x08091ae8
 8011444:	08091ac0 	.word	0x08091ac0
 8011448:	3ff00000 	.word	0x3ff00000
 801144c:	40240000 	.word	0x40240000
 8011450:	401c0000 	.word	0x401c0000
 8011454:	40140000 	.word	0x40140000
 8011458:	3fe00000 	.word	0x3fe00000
 801145c:	4631      	mov	r1, r6
 801145e:	4628      	mov	r0, r5
 8011460:	f7ef f8ea 	bl	8000638 <__aeabi_dmul>
 8011464:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011468:	9415      	str	r4, [sp, #84]	@ 0x54
 801146a:	4656      	mov	r6, sl
 801146c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011470:	f7ef fb92 	bl	8000b98 <__aeabi_d2iz>
 8011474:	4605      	mov	r5, r0
 8011476:	f7ef f875 	bl	8000564 <__aeabi_i2d>
 801147a:	4602      	mov	r2, r0
 801147c:	460b      	mov	r3, r1
 801147e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011482:	f7ee ff21 	bl	80002c8 <__aeabi_dsub>
 8011486:	3530      	adds	r5, #48	@ 0x30
 8011488:	f806 5b01 	strb.w	r5, [r6], #1
 801148c:	4602      	mov	r2, r0
 801148e:	460b      	mov	r3, r1
 8011490:	42a6      	cmp	r6, r4
 8011492:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011496:	f04f 0200 	mov.w	r2, #0
 801149a:	d124      	bne.n	80114e6 <_dtoa_r+0x636>
 801149c:	4bac      	ldr	r3, [pc, #688]	@ (8011750 <_dtoa_r+0x8a0>)
 801149e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80114a2:	f7ee ff13 	bl	80002cc <__adddf3>
 80114a6:	4602      	mov	r2, r0
 80114a8:	460b      	mov	r3, r1
 80114aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80114ae:	f7ef fb53 	bl	8000b58 <__aeabi_dcmpgt>
 80114b2:	2800      	cmp	r0, #0
 80114b4:	d145      	bne.n	8011542 <_dtoa_r+0x692>
 80114b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80114ba:	49a5      	ldr	r1, [pc, #660]	@ (8011750 <_dtoa_r+0x8a0>)
 80114bc:	2000      	movs	r0, #0
 80114be:	f7ee ff03 	bl	80002c8 <__aeabi_dsub>
 80114c2:	4602      	mov	r2, r0
 80114c4:	460b      	mov	r3, r1
 80114c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80114ca:	f7ef fb27 	bl	8000b1c <__aeabi_dcmplt>
 80114ce:	2800      	cmp	r0, #0
 80114d0:	f43f aef4 	beq.w	80112bc <_dtoa_r+0x40c>
 80114d4:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80114d6:	1e73      	subs	r3, r6, #1
 80114d8:	9315      	str	r3, [sp, #84]	@ 0x54
 80114da:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80114de:	2b30      	cmp	r3, #48	@ 0x30
 80114e0:	d0f8      	beq.n	80114d4 <_dtoa_r+0x624>
 80114e2:	9f04      	ldr	r7, [sp, #16]
 80114e4:	e73d      	b.n	8011362 <_dtoa_r+0x4b2>
 80114e6:	4b9b      	ldr	r3, [pc, #620]	@ (8011754 <_dtoa_r+0x8a4>)
 80114e8:	f7ef f8a6 	bl	8000638 <__aeabi_dmul>
 80114ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80114f0:	e7bc      	b.n	801146c <_dtoa_r+0x5bc>
 80114f2:	d10c      	bne.n	801150e <_dtoa_r+0x65e>
 80114f4:	4b98      	ldr	r3, [pc, #608]	@ (8011758 <_dtoa_r+0x8a8>)
 80114f6:	2200      	movs	r2, #0
 80114f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80114fc:	f7ef f89c 	bl	8000638 <__aeabi_dmul>
 8011500:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011504:	f7ef fb1e 	bl	8000b44 <__aeabi_dcmpge>
 8011508:	2800      	cmp	r0, #0
 801150a:	f000 8157 	beq.w	80117bc <_dtoa_r+0x90c>
 801150e:	2400      	movs	r4, #0
 8011510:	4625      	mov	r5, r4
 8011512:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011514:	43db      	mvns	r3, r3
 8011516:	9304      	str	r3, [sp, #16]
 8011518:	4656      	mov	r6, sl
 801151a:	2700      	movs	r7, #0
 801151c:	4621      	mov	r1, r4
 801151e:	4658      	mov	r0, fp
 8011520:	f000 fc23 	bl	8011d6a <_Bfree>
 8011524:	2d00      	cmp	r5, #0
 8011526:	d0dc      	beq.n	80114e2 <_dtoa_r+0x632>
 8011528:	b12f      	cbz	r7, 8011536 <_dtoa_r+0x686>
 801152a:	42af      	cmp	r7, r5
 801152c:	d003      	beq.n	8011536 <_dtoa_r+0x686>
 801152e:	4639      	mov	r1, r7
 8011530:	4658      	mov	r0, fp
 8011532:	f000 fc1a 	bl	8011d6a <_Bfree>
 8011536:	4629      	mov	r1, r5
 8011538:	4658      	mov	r0, fp
 801153a:	f000 fc16 	bl	8011d6a <_Bfree>
 801153e:	e7d0      	b.n	80114e2 <_dtoa_r+0x632>
 8011540:	9704      	str	r7, [sp, #16]
 8011542:	4633      	mov	r3, r6
 8011544:	461e      	mov	r6, r3
 8011546:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801154a:	2a39      	cmp	r2, #57	@ 0x39
 801154c:	d107      	bne.n	801155e <_dtoa_r+0x6ae>
 801154e:	459a      	cmp	sl, r3
 8011550:	d1f8      	bne.n	8011544 <_dtoa_r+0x694>
 8011552:	9a04      	ldr	r2, [sp, #16]
 8011554:	3201      	adds	r2, #1
 8011556:	9204      	str	r2, [sp, #16]
 8011558:	2230      	movs	r2, #48	@ 0x30
 801155a:	f88a 2000 	strb.w	r2, [sl]
 801155e:	781a      	ldrb	r2, [r3, #0]
 8011560:	3201      	adds	r2, #1
 8011562:	701a      	strb	r2, [r3, #0]
 8011564:	e7bd      	b.n	80114e2 <_dtoa_r+0x632>
 8011566:	4b7b      	ldr	r3, [pc, #492]	@ (8011754 <_dtoa_r+0x8a4>)
 8011568:	2200      	movs	r2, #0
 801156a:	f7ef f865 	bl	8000638 <__aeabi_dmul>
 801156e:	2200      	movs	r2, #0
 8011570:	2300      	movs	r3, #0
 8011572:	4604      	mov	r4, r0
 8011574:	460d      	mov	r5, r1
 8011576:	f7ef fac7 	bl	8000b08 <__aeabi_dcmpeq>
 801157a:	2800      	cmp	r0, #0
 801157c:	f43f aeba 	beq.w	80112f4 <_dtoa_r+0x444>
 8011580:	e6ef      	b.n	8011362 <_dtoa_r+0x4b2>
 8011582:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011584:	2a00      	cmp	r2, #0
 8011586:	f000 80db 	beq.w	8011740 <_dtoa_r+0x890>
 801158a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801158c:	2a01      	cmp	r2, #1
 801158e:	f300 80bf 	bgt.w	8011710 <_dtoa_r+0x860>
 8011592:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8011594:	2a00      	cmp	r2, #0
 8011596:	f000 80b7 	beq.w	8011708 <_dtoa_r+0x858>
 801159a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801159e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80115a0:	4646      	mov	r6, r8
 80115a2:	9a08      	ldr	r2, [sp, #32]
 80115a4:	2101      	movs	r1, #1
 80115a6:	441a      	add	r2, r3
 80115a8:	4658      	mov	r0, fp
 80115aa:	4498      	add	r8, r3
 80115ac:	9208      	str	r2, [sp, #32]
 80115ae:	f000 fc77 	bl	8011ea0 <__i2b>
 80115b2:	4605      	mov	r5, r0
 80115b4:	b15e      	cbz	r6, 80115ce <_dtoa_r+0x71e>
 80115b6:	9b08      	ldr	r3, [sp, #32]
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	dd08      	ble.n	80115ce <_dtoa_r+0x71e>
 80115bc:	42b3      	cmp	r3, r6
 80115be:	9a08      	ldr	r2, [sp, #32]
 80115c0:	bfa8      	it	ge
 80115c2:	4633      	movge	r3, r6
 80115c4:	eba8 0803 	sub.w	r8, r8, r3
 80115c8:	1af6      	subs	r6, r6, r3
 80115ca:	1ad3      	subs	r3, r2, r3
 80115cc:	9308      	str	r3, [sp, #32]
 80115ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80115d0:	b1f3      	cbz	r3, 8011610 <_dtoa_r+0x760>
 80115d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	f000 80b7 	beq.w	8011748 <_dtoa_r+0x898>
 80115da:	b18c      	cbz	r4, 8011600 <_dtoa_r+0x750>
 80115dc:	4629      	mov	r1, r5
 80115de:	4622      	mov	r2, r4
 80115e0:	4658      	mov	r0, fp
 80115e2:	f000 fd1d 	bl	8012020 <__pow5mult>
 80115e6:	464a      	mov	r2, r9
 80115e8:	4601      	mov	r1, r0
 80115ea:	4605      	mov	r5, r0
 80115ec:	4658      	mov	r0, fp
 80115ee:	f000 fc6d 	bl	8011ecc <__multiply>
 80115f2:	4649      	mov	r1, r9
 80115f4:	9004      	str	r0, [sp, #16]
 80115f6:	4658      	mov	r0, fp
 80115f8:	f000 fbb7 	bl	8011d6a <_Bfree>
 80115fc:	9b04      	ldr	r3, [sp, #16]
 80115fe:	4699      	mov	r9, r3
 8011600:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011602:	1b1a      	subs	r2, r3, r4
 8011604:	d004      	beq.n	8011610 <_dtoa_r+0x760>
 8011606:	4649      	mov	r1, r9
 8011608:	4658      	mov	r0, fp
 801160a:	f000 fd09 	bl	8012020 <__pow5mult>
 801160e:	4681      	mov	r9, r0
 8011610:	2101      	movs	r1, #1
 8011612:	4658      	mov	r0, fp
 8011614:	f000 fc44 	bl	8011ea0 <__i2b>
 8011618:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801161a:	4604      	mov	r4, r0
 801161c:	2b00      	cmp	r3, #0
 801161e:	f000 81cc 	beq.w	80119ba <_dtoa_r+0xb0a>
 8011622:	461a      	mov	r2, r3
 8011624:	4601      	mov	r1, r0
 8011626:	4658      	mov	r0, fp
 8011628:	f000 fcfa 	bl	8012020 <__pow5mult>
 801162c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801162e:	2b01      	cmp	r3, #1
 8011630:	4604      	mov	r4, r0
 8011632:	f300 8095 	bgt.w	8011760 <_dtoa_r+0x8b0>
 8011636:	9b02      	ldr	r3, [sp, #8]
 8011638:	2b00      	cmp	r3, #0
 801163a:	f040 8087 	bne.w	801174c <_dtoa_r+0x89c>
 801163e:	9b03      	ldr	r3, [sp, #12]
 8011640:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011644:	2b00      	cmp	r3, #0
 8011646:	f040 8089 	bne.w	801175c <_dtoa_r+0x8ac>
 801164a:	9b03      	ldr	r3, [sp, #12]
 801164c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011650:	0d1b      	lsrs	r3, r3, #20
 8011652:	051b      	lsls	r3, r3, #20
 8011654:	b12b      	cbz	r3, 8011662 <_dtoa_r+0x7b2>
 8011656:	9b08      	ldr	r3, [sp, #32]
 8011658:	3301      	adds	r3, #1
 801165a:	9308      	str	r3, [sp, #32]
 801165c:	f108 0801 	add.w	r8, r8, #1
 8011660:	2301      	movs	r3, #1
 8011662:	930a      	str	r3, [sp, #40]	@ 0x28
 8011664:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011666:	2b00      	cmp	r3, #0
 8011668:	f000 81ad 	beq.w	80119c6 <_dtoa_r+0xb16>
 801166c:	6923      	ldr	r3, [r4, #16]
 801166e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011672:	6918      	ldr	r0, [r3, #16]
 8011674:	f000 fbc8 	bl	8011e08 <__hi0bits>
 8011678:	f1c0 0020 	rsb	r0, r0, #32
 801167c:	9b08      	ldr	r3, [sp, #32]
 801167e:	4418      	add	r0, r3
 8011680:	f010 001f 	ands.w	r0, r0, #31
 8011684:	d077      	beq.n	8011776 <_dtoa_r+0x8c6>
 8011686:	f1c0 0320 	rsb	r3, r0, #32
 801168a:	2b04      	cmp	r3, #4
 801168c:	dd6b      	ble.n	8011766 <_dtoa_r+0x8b6>
 801168e:	9b08      	ldr	r3, [sp, #32]
 8011690:	f1c0 001c 	rsb	r0, r0, #28
 8011694:	4403      	add	r3, r0
 8011696:	4480      	add	r8, r0
 8011698:	4406      	add	r6, r0
 801169a:	9308      	str	r3, [sp, #32]
 801169c:	f1b8 0f00 	cmp.w	r8, #0
 80116a0:	dd05      	ble.n	80116ae <_dtoa_r+0x7fe>
 80116a2:	4649      	mov	r1, r9
 80116a4:	4642      	mov	r2, r8
 80116a6:	4658      	mov	r0, fp
 80116a8:	f000 fcfa 	bl	80120a0 <__lshift>
 80116ac:	4681      	mov	r9, r0
 80116ae:	9b08      	ldr	r3, [sp, #32]
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	dd05      	ble.n	80116c0 <_dtoa_r+0x810>
 80116b4:	4621      	mov	r1, r4
 80116b6:	461a      	mov	r2, r3
 80116b8:	4658      	mov	r0, fp
 80116ba:	f000 fcf1 	bl	80120a0 <__lshift>
 80116be:	4604      	mov	r4, r0
 80116c0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d059      	beq.n	801177a <_dtoa_r+0x8ca>
 80116c6:	4621      	mov	r1, r4
 80116c8:	4648      	mov	r0, r9
 80116ca:	f000 fd55 	bl	8012178 <__mcmp>
 80116ce:	2800      	cmp	r0, #0
 80116d0:	da53      	bge.n	801177a <_dtoa_r+0x8ca>
 80116d2:	1e7b      	subs	r3, r7, #1
 80116d4:	9304      	str	r3, [sp, #16]
 80116d6:	4649      	mov	r1, r9
 80116d8:	2300      	movs	r3, #0
 80116da:	220a      	movs	r2, #10
 80116dc:	4658      	mov	r0, fp
 80116de:	f000 fb4d 	bl	8011d7c <__multadd>
 80116e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80116e4:	4681      	mov	r9, r0
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	f000 816f 	beq.w	80119ca <_dtoa_r+0xb1a>
 80116ec:	2300      	movs	r3, #0
 80116ee:	4629      	mov	r1, r5
 80116f0:	220a      	movs	r2, #10
 80116f2:	4658      	mov	r0, fp
 80116f4:	f000 fb42 	bl	8011d7c <__multadd>
 80116f8:	9b00      	ldr	r3, [sp, #0]
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	4605      	mov	r5, r0
 80116fe:	dc67      	bgt.n	80117d0 <_dtoa_r+0x920>
 8011700:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011702:	2b02      	cmp	r3, #2
 8011704:	dc41      	bgt.n	801178a <_dtoa_r+0x8da>
 8011706:	e063      	b.n	80117d0 <_dtoa_r+0x920>
 8011708:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801170a:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801170e:	e746      	b.n	801159e <_dtoa_r+0x6ee>
 8011710:	9b07      	ldr	r3, [sp, #28]
 8011712:	1e5c      	subs	r4, r3, #1
 8011714:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011716:	42a3      	cmp	r3, r4
 8011718:	bfbf      	itttt	lt
 801171a:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801171c:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801171e:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8011720:	1ae3      	sublt	r3, r4, r3
 8011722:	bfb4      	ite	lt
 8011724:	18d2      	addlt	r2, r2, r3
 8011726:	1b1c      	subge	r4, r3, r4
 8011728:	9b07      	ldr	r3, [sp, #28]
 801172a:	bfbc      	itt	lt
 801172c:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801172e:	2400      	movlt	r4, #0
 8011730:	2b00      	cmp	r3, #0
 8011732:	bfb5      	itete	lt
 8011734:	eba8 0603 	sublt.w	r6, r8, r3
 8011738:	9b07      	ldrge	r3, [sp, #28]
 801173a:	2300      	movlt	r3, #0
 801173c:	4646      	movge	r6, r8
 801173e:	e730      	b.n	80115a2 <_dtoa_r+0x6f2>
 8011740:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8011742:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8011744:	4646      	mov	r6, r8
 8011746:	e735      	b.n	80115b4 <_dtoa_r+0x704>
 8011748:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801174a:	e75c      	b.n	8011606 <_dtoa_r+0x756>
 801174c:	2300      	movs	r3, #0
 801174e:	e788      	b.n	8011662 <_dtoa_r+0x7b2>
 8011750:	3fe00000 	.word	0x3fe00000
 8011754:	40240000 	.word	0x40240000
 8011758:	40140000 	.word	0x40140000
 801175c:	9b02      	ldr	r3, [sp, #8]
 801175e:	e780      	b.n	8011662 <_dtoa_r+0x7b2>
 8011760:	2300      	movs	r3, #0
 8011762:	930a      	str	r3, [sp, #40]	@ 0x28
 8011764:	e782      	b.n	801166c <_dtoa_r+0x7bc>
 8011766:	d099      	beq.n	801169c <_dtoa_r+0x7ec>
 8011768:	9a08      	ldr	r2, [sp, #32]
 801176a:	331c      	adds	r3, #28
 801176c:	441a      	add	r2, r3
 801176e:	4498      	add	r8, r3
 8011770:	441e      	add	r6, r3
 8011772:	9208      	str	r2, [sp, #32]
 8011774:	e792      	b.n	801169c <_dtoa_r+0x7ec>
 8011776:	4603      	mov	r3, r0
 8011778:	e7f6      	b.n	8011768 <_dtoa_r+0x8b8>
 801177a:	9b07      	ldr	r3, [sp, #28]
 801177c:	9704      	str	r7, [sp, #16]
 801177e:	2b00      	cmp	r3, #0
 8011780:	dc20      	bgt.n	80117c4 <_dtoa_r+0x914>
 8011782:	9300      	str	r3, [sp, #0]
 8011784:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011786:	2b02      	cmp	r3, #2
 8011788:	dd1e      	ble.n	80117c8 <_dtoa_r+0x918>
 801178a:	9b00      	ldr	r3, [sp, #0]
 801178c:	2b00      	cmp	r3, #0
 801178e:	f47f aec0 	bne.w	8011512 <_dtoa_r+0x662>
 8011792:	4621      	mov	r1, r4
 8011794:	2205      	movs	r2, #5
 8011796:	4658      	mov	r0, fp
 8011798:	f000 faf0 	bl	8011d7c <__multadd>
 801179c:	4601      	mov	r1, r0
 801179e:	4604      	mov	r4, r0
 80117a0:	4648      	mov	r0, r9
 80117a2:	f000 fce9 	bl	8012178 <__mcmp>
 80117a6:	2800      	cmp	r0, #0
 80117a8:	f77f aeb3 	ble.w	8011512 <_dtoa_r+0x662>
 80117ac:	4656      	mov	r6, sl
 80117ae:	2331      	movs	r3, #49	@ 0x31
 80117b0:	f806 3b01 	strb.w	r3, [r6], #1
 80117b4:	9b04      	ldr	r3, [sp, #16]
 80117b6:	3301      	adds	r3, #1
 80117b8:	9304      	str	r3, [sp, #16]
 80117ba:	e6ae      	b.n	801151a <_dtoa_r+0x66a>
 80117bc:	9c07      	ldr	r4, [sp, #28]
 80117be:	9704      	str	r7, [sp, #16]
 80117c0:	4625      	mov	r5, r4
 80117c2:	e7f3      	b.n	80117ac <_dtoa_r+0x8fc>
 80117c4:	9b07      	ldr	r3, [sp, #28]
 80117c6:	9300      	str	r3, [sp, #0]
 80117c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	f000 8101 	beq.w	80119d2 <_dtoa_r+0xb22>
 80117d0:	2e00      	cmp	r6, #0
 80117d2:	dd05      	ble.n	80117e0 <_dtoa_r+0x930>
 80117d4:	4629      	mov	r1, r5
 80117d6:	4632      	mov	r2, r6
 80117d8:	4658      	mov	r0, fp
 80117da:	f000 fc61 	bl	80120a0 <__lshift>
 80117de:	4605      	mov	r5, r0
 80117e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d059      	beq.n	801189a <_dtoa_r+0x9ea>
 80117e6:	6869      	ldr	r1, [r5, #4]
 80117e8:	4658      	mov	r0, fp
 80117ea:	f000 fa99 	bl	8011d20 <_Balloc>
 80117ee:	4606      	mov	r6, r0
 80117f0:	b920      	cbnz	r0, 80117fc <_dtoa_r+0x94c>
 80117f2:	4b83      	ldr	r3, [pc, #524]	@ (8011a00 <_dtoa_r+0xb50>)
 80117f4:	4602      	mov	r2, r0
 80117f6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80117fa:	e480      	b.n	80110fe <_dtoa_r+0x24e>
 80117fc:	692a      	ldr	r2, [r5, #16]
 80117fe:	3202      	adds	r2, #2
 8011800:	0092      	lsls	r2, r2, #2
 8011802:	f105 010c 	add.w	r1, r5, #12
 8011806:	300c      	adds	r0, #12
 8011808:	f7ff fa1e 	bl	8010c48 <memcpy>
 801180c:	2201      	movs	r2, #1
 801180e:	4631      	mov	r1, r6
 8011810:	4658      	mov	r0, fp
 8011812:	f000 fc45 	bl	80120a0 <__lshift>
 8011816:	f10a 0301 	add.w	r3, sl, #1
 801181a:	9307      	str	r3, [sp, #28]
 801181c:	9b00      	ldr	r3, [sp, #0]
 801181e:	4453      	add	r3, sl
 8011820:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011822:	9b02      	ldr	r3, [sp, #8]
 8011824:	f003 0301 	and.w	r3, r3, #1
 8011828:	462f      	mov	r7, r5
 801182a:	930a      	str	r3, [sp, #40]	@ 0x28
 801182c:	4605      	mov	r5, r0
 801182e:	9b07      	ldr	r3, [sp, #28]
 8011830:	4621      	mov	r1, r4
 8011832:	3b01      	subs	r3, #1
 8011834:	4648      	mov	r0, r9
 8011836:	9300      	str	r3, [sp, #0]
 8011838:	f7ff fab0 	bl	8010d9c <quorem>
 801183c:	4639      	mov	r1, r7
 801183e:	9002      	str	r0, [sp, #8]
 8011840:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8011844:	4648      	mov	r0, r9
 8011846:	f000 fc97 	bl	8012178 <__mcmp>
 801184a:	462a      	mov	r2, r5
 801184c:	9008      	str	r0, [sp, #32]
 801184e:	4621      	mov	r1, r4
 8011850:	4658      	mov	r0, fp
 8011852:	f000 fcad 	bl	80121b0 <__mdiff>
 8011856:	68c2      	ldr	r2, [r0, #12]
 8011858:	4606      	mov	r6, r0
 801185a:	bb02      	cbnz	r2, 801189e <_dtoa_r+0x9ee>
 801185c:	4601      	mov	r1, r0
 801185e:	4648      	mov	r0, r9
 8011860:	f000 fc8a 	bl	8012178 <__mcmp>
 8011864:	4602      	mov	r2, r0
 8011866:	4631      	mov	r1, r6
 8011868:	4658      	mov	r0, fp
 801186a:	920e      	str	r2, [sp, #56]	@ 0x38
 801186c:	f000 fa7d 	bl	8011d6a <_Bfree>
 8011870:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011872:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011874:	9e07      	ldr	r6, [sp, #28]
 8011876:	ea43 0102 	orr.w	r1, r3, r2
 801187a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801187c:	4319      	orrs	r1, r3
 801187e:	d110      	bne.n	80118a2 <_dtoa_r+0x9f2>
 8011880:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011884:	d029      	beq.n	80118da <_dtoa_r+0xa2a>
 8011886:	9b08      	ldr	r3, [sp, #32]
 8011888:	2b00      	cmp	r3, #0
 801188a:	dd02      	ble.n	8011892 <_dtoa_r+0x9e2>
 801188c:	9b02      	ldr	r3, [sp, #8]
 801188e:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8011892:	9b00      	ldr	r3, [sp, #0]
 8011894:	f883 8000 	strb.w	r8, [r3]
 8011898:	e640      	b.n	801151c <_dtoa_r+0x66c>
 801189a:	4628      	mov	r0, r5
 801189c:	e7bb      	b.n	8011816 <_dtoa_r+0x966>
 801189e:	2201      	movs	r2, #1
 80118a0:	e7e1      	b.n	8011866 <_dtoa_r+0x9b6>
 80118a2:	9b08      	ldr	r3, [sp, #32]
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	db04      	blt.n	80118b2 <_dtoa_r+0xa02>
 80118a8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80118aa:	430b      	orrs	r3, r1
 80118ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80118ae:	430b      	orrs	r3, r1
 80118b0:	d120      	bne.n	80118f4 <_dtoa_r+0xa44>
 80118b2:	2a00      	cmp	r2, #0
 80118b4:	dded      	ble.n	8011892 <_dtoa_r+0x9e2>
 80118b6:	4649      	mov	r1, r9
 80118b8:	2201      	movs	r2, #1
 80118ba:	4658      	mov	r0, fp
 80118bc:	f000 fbf0 	bl	80120a0 <__lshift>
 80118c0:	4621      	mov	r1, r4
 80118c2:	4681      	mov	r9, r0
 80118c4:	f000 fc58 	bl	8012178 <__mcmp>
 80118c8:	2800      	cmp	r0, #0
 80118ca:	dc03      	bgt.n	80118d4 <_dtoa_r+0xa24>
 80118cc:	d1e1      	bne.n	8011892 <_dtoa_r+0x9e2>
 80118ce:	f018 0f01 	tst.w	r8, #1
 80118d2:	d0de      	beq.n	8011892 <_dtoa_r+0x9e2>
 80118d4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80118d8:	d1d8      	bne.n	801188c <_dtoa_r+0x9dc>
 80118da:	9a00      	ldr	r2, [sp, #0]
 80118dc:	2339      	movs	r3, #57	@ 0x39
 80118de:	7013      	strb	r3, [r2, #0]
 80118e0:	4633      	mov	r3, r6
 80118e2:	461e      	mov	r6, r3
 80118e4:	3b01      	subs	r3, #1
 80118e6:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80118ea:	2a39      	cmp	r2, #57	@ 0x39
 80118ec:	d052      	beq.n	8011994 <_dtoa_r+0xae4>
 80118ee:	3201      	adds	r2, #1
 80118f0:	701a      	strb	r2, [r3, #0]
 80118f2:	e613      	b.n	801151c <_dtoa_r+0x66c>
 80118f4:	2a00      	cmp	r2, #0
 80118f6:	dd07      	ble.n	8011908 <_dtoa_r+0xa58>
 80118f8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80118fc:	d0ed      	beq.n	80118da <_dtoa_r+0xa2a>
 80118fe:	9a00      	ldr	r2, [sp, #0]
 8011900:	f108 0301 	add.w	r3, r8, #1
 8011904:	7013      	strb	r3, [r2, #0]
 8011906:	e609      	b.n	801151c <_dtoa_r+0x66c>
 8011908:	9b07      	ldr	r3, [sp, #28]
 801190a:	9a07      	ldr	r2, [sp, #28]
 801190c:	f803 8c01 	strb.w	r8, [r3, #-1]
 8011910:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011912:	4293      	cmp	r3, r2
 8011914:	d028      	beq.n	8011968 <_dtoa_r+0xab8>
 8011916:	4649      	mov	r1, r9
 8011918:	2300      	movs	r3, #0
 801191a:	220a      	movs	r2, #10
 801191c:	4658      	mov	r0, fp
 801191e:	f000 fa2d 	bl	8011d7c <__multadd>
 8011922:	42af      	cmp	r7, r5
 8011924:	4681      	mov	r9, r0
 8011926:	f04f 0300 	mov.w	r3, #0
 801192a:	f04f 020a 	mov.w	r2, #10
 801192e:	4639      	mov	r1, r7
 8011930:	4658      	mov	r0, fp
 8011932:	d107      	bne.n	8011944 <_dtoa_r+0xa94>
 8011934:	f000 fa22 	bl	8011d7c <__multadd>
 8011938:	4607      	mov	r7, r0
 801193a:	4605      	mov	r5, r0
 801193c:	9b07      	ldr	r3, [sp, #28]
 801193e:	3301      	adds	r3, #1
 8011940:	9307      	str	r3, [sp, #28]
 8011942:	e774      	b.n	801182e <_dtoa_r+0x97e>
 8011944:	f000 fa1a 	bl	8011d7c <__multadd>
 8011948:	4629      	mov	r1, r5
 801194a:	4607      	mov	r7, r0
 801194c:	2300      	movs	r3, #0
 801194e:	220a      	movs	r2, #10
 8011950:	4658      	mov	r0, fp
 8011952:	f000 fa13 	bl	8011d7c <__multadd>
 8011956:	4605      	mov	r5, r0
 8011958:	e7f0      	b.n	801193c <_dtoa_r+0xa8c>
 801195a:	9b00      	ldr	r3, [sp, #0]
 801195c:	2b00      	cmp	r3, #0
 801195e:	bfcc      	ite	gt
 8011960:	461e      	movgt	r6, r3
 8011962:	2601      	movle	r6, #1
 8011964:	4456      	add	r6, sl
 8011966:	2700      	movs	r7, #0
 8011968:	4649      	mov	r1, r9
 801196a:	2201      	movs	r2, #1
 801196c:	4658      	mov	r0, fp
 801196e:	f000 fb97 	bl	80120a0 <__lshift>
 8011972:	4621      	mov	r1, r4
 8011974:	4681      	mov	r9, r0
 8011976:	f000 fbff 	bl	8012178 <__mcmp>
 801197a:	2800      	cmp	r0, #0
 801197c:	dcb0      	bgt.n	80118e0 <_dtoa_r+0xa30>
 801197e:	d102      	bne.n	8011986 <_dtoa_r+0xad6>
 8011980:	f018 0f01 	tst.w	r8, #1
 8011984:	d1ac      	bne.n	80118e0 <_dtoa_r+0xa30>
 8011986:	4633      	mov	r3, r6
 8011988:	461e      	mov	r6, r3
 801198a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801198e:	2a30      	cmp	r2, #48	@ 0x30
 8011990:	d0fa      	beq.n	8011988 <_dtoa_r+0xad8>
 8011992:	e5c3      	b.n	801151c <_dtoa_r+0x66c>
 8011994:	459a      	cmp	sl, r3
 8011996:	d1a4      	bne.n	80118e2 <_dtoa_r+0xa32>
 8011998:	9b04      	ldr	r3, [sp, #16]
 801199a:	3301      	adds	r3, #1
 801199c:	9304      	str	r3, [sp, #16]
 801199e:	2331      	movs	r3, #49	@ 0x31
 80119a0:	f88a 3000 	strb.w	r3, [sl]
 80119a4:	e5ba      	b.n	801151c <_dtoa_r+0x66c>
 80119a6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80119a8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8011a04 <_dtoa_r+0xb54>
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	f43f aab6 	beq.w	8010f1e <_dtoa_r+0x6e>
 80119b2:	f10a 0308 	add.w	r3, sl, #8
 80119b6:	f7ff bab0 	b.w	8010f1a <_dtoa_r+0x6a>
 80119ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80119bc:	2b01      	cmp	r3, #1
 80119be:	f77f ae3a 	ble.w	8011636 <_dtoa_r+0x786>
 80119c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80119c4:	930a      	str	r3, [sp, #40]	@ 0x28
 80119c6:	2001      	movs	r0, #1
 80119c8:	e658      	b.n	801167c <_dtoa_r+0x7cc>
 80119ca:	9b00      	ldr	r3, [sp, #0]
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	f77f aed9 	ble.w	8011784 <_dtoa_r+0x8d4>
 80119d2:	4656      	mov	r6, sl
 80119d4:	4621      	mov	r1, r4
 80119d6:	4648      	mov	r0, r9
 80119d8:	f7ff f9e0 	bl	8010d9c <quorem>
 80119dc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80119e0:	f806 8b01 	strb.w	r8, [r6], #1
 80119e4:	9b00      	ldr	r3, [sp, #0]
 80119e6:	eba6 020a 	sub.w	r2, r6, sl
 80119ea:	4293      	cmp	r3, r2
 80119ec:	ddb5      	ble.n	801195a <_dtoa_r+0xaaa>
 80119ee:	4649      	mov	r1, r9
 80119f0:	2300      	movs	r3, #0
 80119f2:	220a      	movs	r2, #10
 80119f4:	4658      	mov	r0, fp
 80119f6:	f000 f9c1 	bl	8011d7c <__multadd>
 80119fa:	4681      	mov	r9, r0
 80119fc:	e7ea      	b.n	80119d4 <_dtoa_r+0xb24>
 80119fe:	bf00      	nop
 8011a00:	080919ec 	.word	0x080919ec
 8011a04:	080919df 	.word	0x080919df

08011a08 <_malloc_trim_r>:
 8011a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a0c:	4606      	mov	r6, r0
 8011a0e:	2008      	movs	r0, #8
 8011a10:	4689      	mov	r9, r1
 8011a12:	f7ff f8e5 	bl	8010be0 <sysconf>
 8011a16:	4f24      	ldr	r7, [pc, #144]	@ (8011aa8 <_malloc_trim_r+0xa0>)
 8011a18:	4680      	mov	r8, r0
 8011a1a:	4630      	mov	r0, r6
 8011a1c:	f7fe fb16 	bl	801004c <__malloc_lock>
 8011a20:	68bb      	ldr	r3, [r7, #8]
 8011a22:	685d      	ldr	r5, [r3, #4]
 8011a24:	f025 0503 	bic.w	r5, r5, #3
 8011a28:	f1a5 0411 	sub.w	r4, r5, #17
 8011a2c:	eba4 0409 	sub.w	r4, r4, r9
 8011a30:	4444      	add	r4, r8
 8011a32:	fbb4 f4f8 	udiv	r4, r4, r8
 8011a36:	3c01      	subs	r4, #1
 8011a38:	fb08 f404 	mul.w	r4, r8, r4
 8011a3c:	45a0      	cmp	r8, r4
 8011a3e:	dd05      	ble.n	8011a4c <_malloc_trim_r+0x44>
 8011a40:	4630      	mov	r0, r6
 8011a42:	f7fe fb09 	bl	8010058 <__malloc_unlock>
 8011a46:	2000      	movs	r0, #0
 8011a48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a4c:	2100      	movs	r1, #0
 8011a4e:	4630      	mov	r0, r6
 8011a50:	f7ff f8b6 	bl	8010bc0 <_sbrk_r>
 8011a54:	68bb      	ldr	r3, [r7, #8]
 8011a56:	442b      	add	r3, r5
 8011a58:	4298      	cmp	r0, r3
 8011a5a:	d1f1      	bne.n	8011a40 <_malloc_trim_r+0x38>
 8011a5c:	4261      	negs	r1, r4
 8011a5e:	4630      	mov	r0, r6
 8011a60:	f7ff f8ae 	bl	8010bc0 <_sbrk_r>
 8011a64:	3001      	adds	r0, #1
 8011a66:	d110      	bne.n	8011a8a <_malloc_trim_r+0x82>
 8011a68:	2100      	movs	r1, #0
 8011a6a:	4630      	mov	r0, r6
 8011a6c:	f7ff f8a8 	bl	8010bc0 <_sbrk_r>
 8011a70:	68ba      	ldr	r2, [r7, #8]
 8011a72:	1a83      	subs	r3, r0, r2
 8011a74:	2b0f      	cmp	r3, #15
 8011a76:	dde3      	ble.n	8011a40 <_malloc_trim_r+0x38>
 8011a78:	490c      	ldr	r1, [pc, #48]	@ (8011aac <_malloc_trim_r+0xa4>)
 8011a7a:	6809      	ldr	r1, [r1, #0]
 8011a7c:	1a40      	subs	r0, r0, r1
 8011a7e:	490c      	ldr	r1, [pc, #48]	@ (8011ab0 <_malloc_trim_r+0xa8>)
 8011a80:	f043 0301 	orr.w	r3, r3, #1
 8011a84:	6008      	str	r0, [r1, #0]
 8011a86:	6053      	str	r3, [r2, #4]
 8011a88:	e7da      	b.n	8011a40 <_malloc_trim_r+0x38>
 8011a8a:	68bb      	ldr	r3, [r7, #8]
 8011a8c:	4a08      	ldr	r2, [pc, #32]	@ (8011ab0 <_malloc_trim_r+0xa8>)
 8011a8e:	1b2d      	subs	r5, r5, r4
 8011a90:	f045 0501 	orr.w	r5, r5, #1
 8011a94:	605d      	str	r5, [r3, #4]
 8011a96:	6813      	ldr	r3, [r2, #0]
 8011a98:	4630      	mov	r0, r6
 8011a9a:	1b1b      	subs	r3, r3, r4
 8011a9c:	6013      	str	r3, [r2, #0]
 8011a9e:	f7fe fadb 	bl	8010058 <__malloc_unlock>
 8011aa2:	2001      	movs	r0, #1
 8011aa4:	e7d0      	b.n	8011a48 <_malloc_trim_r+0x40>
 8011aa6:	bf00      	nop
 8011aa8:	20000018 	.word	0x20000018
 8011aac:	20000010 	.word	0x20000010
 8011ab0:	2000fb58 	.word	0x2000fb58

08011ab4 <_free_r>:
 8011ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ab6:	4604      	mov	r4, r0
 8011ab8:	460f      	mov	r7, r1
 8011aba:	2900      	cmp	r1, #0
 8011abc:	f000 80b1 	beq.w	8011c22 <_free_r+0x16e>
 8011ac0:	f7fe fac4 	bl	801004c <__malloc_lock>
 8011ac4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8011ac8:	4d56      	ldr	r5, [pc, #344]	@ (8011c24 <_free_r+0x170>)
 8011aca:	f022 0001 	bic.w	r0, r2, #1
 8011ace:	f1a7 0308 	sub.w	r3, r7, #8
 8011ad2:	eb03 0c00 	add.w	ip, r3, r0
 8011ad6:	68a9      	ldr	r1, [r5, #8]
 8011ad8:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8011adc:	4561      	cmp	r1, ip
 8011ade:	f026 0603 	bic.w	r6, r6, #3
 8011ae2:	f002 0201 	and.w	r2, r2, #1
 8011ae6:	d11b      	bne.n	8011b20 <_free_r+0x6c>
 8011ae8:	4406      	add	r6, r0
 8011aea:	b93a      	cbnz	r2, 8011afc <_free_r+0x48>
 8011aec:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8011af0:	1a9b      	subs	r3, r3, r2
 8011af2:	4416      	add	r6, r2
 8011af4:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8011af8:	60ca      	str	r2, [r1, #12]
 8011afa:	6091      	str	r1, [r2, #8]
 8011afc:	f046 0201 	orr.w	r2, r6, #1
 8011b00:	605a      	str	r2, [r3, #4]
 8011b02:	60ab      	str	r3, [r5, #8]
 8011b04:	4b48      	ldr	r3, [pc, #288]	@ (8011c28 <_free_r+0x174>)
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	42b3      	cmp	r3, r6
 8011b0a:	d804      	bhi.n	8011b16 <_free_r+0x62>
 8011b0c:	4b47      	ldr	r3, [pc, #284]	@ (8011c2c <_free_r+0x178>)
 8011b0e:	4620      	mov	r0, r4
 8011b10:	6819      	ldr	r1, [r3, #0]
 8011b12:	f7ff ff79 	bl	8011a08 <_malloc_trim_r>
 8011b16:	4620      	mov	r0, r4
 8011b18:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011b1c:	f7fe ba9c 	b.w	8010058 <__malloc_unlock>
 8011b20:	f8cc 6004 	str.w	r6, [ip, #4]
 8011b24:	2a00      	cmp	r2, #0
 8011b26:	d138      	bne.n	8011b9a <_free_r+0xe6>
 8011b28:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8011b2c:	1a5b      	subs	r3, r3, r1
 8011b2e:	4408      	add	r0, r1
 8011b30:	6899      	ldr	r1, [r3, #8]
 8011b32:	f105 0708 	add.w	r7, r5, #8
 8011b36:	42b9      	cmp	r1, r7
 8011b38:	d031      	beq.n	8011b9e <_free_r+0xea>
 8011b3a:	68df      	ldr	r7, [r3, #12]
 8011b3c:	60cf      	str	r7, [r1, #12]
 8011b3e:	60b9      	str	r1, [r7, #8]
 8011b40:	eb0c 0106 	add.w	r1, ip, r6
 8011b44:	6849      	ldr	r1, [r1, #4]
 8011b46:	07c9      	lsls	r1, r1, #31
 8011b48:	d40b      	bmi.n	8011b62 <_free_r+0xae>
 8011b4a:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8011b4e:	4430      	add	r0, r6
 8011b50:	bb3a      	cbnz	r2, 8011ba2 <_free_r+0xee>
 8011b52:	4e37      	ldr	r6, [pc, #220]	@ (8011c30 <_free_r+0x17c>)
 8011b54:	42b1      	cmp	r1, r6
 8011b56:	d124      	bne.n	8011ba2 <_free_r+0xee>
 8011b58:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8011b5c:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8011b60:	2201      	movs	r2, #1
 8011b62:	f040 0101 	orr.w	r1, r0, #1
 8011b66:	6059      	str	r1, [r3, #4]
 8011b68:	5018      	str	r0, [r3, r0]
 8011b6a:	2a00      	cmp	r2, #0
 8011b6c:	d1d3      	bne.n	8011b16 <_free_r+0x62>
 8011b6e:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8011b72:	d21b      	bcs.n	8011bac <_free_r+0xf8>
 8011b74:	08c2      	lsrs	r2, r0, #3
 8011b76:	2101      	movs	r1, #1
 8011b78:	0940      	lsrs	r0, r0, #5
 8011b7a:	4081      	lsls	r1, r0
 8011b7c:	6868      	ldr	r0, [r5, #4]
 8011b7e:	3201      	adds	r2, #1
 8011b80:	4301      	orrs	r1, r0
 8011b82:	6069      	str	r1, [r5, #4]
 8011b84:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 8011b88:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 8011b8c:	3908      	subs	r1, #8
 8011b8e:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8011b92:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 8011b96:	60c3      	str	r3, [r0, #12]
 8011b98:	e7bd      	b.n	8011b16 <_free_r+0x62>
 8011b9a:	2200      	movs	r2, #0
 8011b9c:	e7d0      	b.n	8011b40 <_free_r+0x8c>
 8011b9e:	2201      	movs	r2, #1
 8011ba0:	e7ce      	b.n	8011b40 <_free_r+0x8c>
 8011ba2:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8011ba6:	60ce      	str	r6, [r1, #12]
 8011ba8:	60b1      	str	r1, [r6, #8]
 8011baa:	e7da      	b.n	8011b62 <_free_r+0xae>
 8011bac:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 8011bb0:	ea4f 2250 	mov.w	r2, r0, lsr #9
 8011bb4:	d214      	bcs.n	8011be0 <_free_r+0x12c>
 8011bb6:	0982      	lsrs	r2, r0, #6
 8011bb8:	3238      	adds	r2, #56	@ 0x38
 8011bba:	1c51      	adds	r1, r2, #1
 8011bbc:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8011bc0:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8011bc4:	428e      	cmp	r6, r1
 8011bc6:	d125      	bne.n	8011c14 <_free_r+0x160>
 8011bc8:	2001      	movs	r0, #1
 8011bca:	1092      	asrs	r2, r2, #2
 8011bcc:	fa00 f202 	lsl.w	r2, r0, r2
 8011bd0:	6868      	ldr	r0, [r5, #4]
 8011bd2:	4302      	orrs	r2, r0
 8011bd4:	606a      	str	r2, [r5, #4]
 8011bd6:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8011bda:	60b3      	str	r3, [r6, #8]
 8011bdc:	60cb      	str	r3, [r1, #12]
 8011bde:	e79a      	b.n	8011b16 <_free_r+0x62>
 8011be0:	2a14      	cmp	r2, #20
 8011be2:	d801      	bhi.n	8011be8 <_free_r+0x134>
 8011be4:	325b      	adds	r2, #91	@ 0x5b
 8011be6:	e7e8      	b.n	8011bba <_free_r+0x106>
 8011be8:	2a54      	cmp	r2, #84	@ 0x54
 8011bea:	d802      	bhi.n	8011bf2 <_free_r+0x13e>
 8011bec:	0b02      	lsrs	r2, r0, #12
 8011bee:	326e      	adds	r2, #110	@ 0x6e
 8011bf0:	e7e3      	b.n	8011bba <_free_r+0x106>
 8011bf2:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 8011bf6:	d802      	bhi.n	8011bfe <_free_r+0x14a>
 8011bf8:	0bc2      	lsrs	r2, r0, #15
 8011bfa:	3277      	adds	r2, #119	@ 0x77
 8011bfc:	e7dd      	b.n	8011bba <_free_r+0x106>
 8011bfe:	f240 5154 	movw	r1, #1364	@ 0x554
 8011c02:	428a      	cmp	r2, r1
 8011c04:	bf9a      	itte	ls
 8011c06:	0c82      	lsrls	r2, r0, #18
 8011c08:	327c      	addls	r2, #124	@ 0x7c
 8011c0a:	227e      	movhi	r2, #126	@ 0x7e
 8011c0c:	e7d5      	b.n	8011bba <_free_r+0x106>
 8011c0e:	6889      	ldr	r1, [r1, #8]
 8011c10:	428e      	cmp	r6, r1
 8011c12:	d004      	beq.n	8011c1e <_free_r+0x16a>
 8011c14:	684a      	ldr	r2, [r1, #4]
 8011c16:	f022 0203 	bic.w	r2, r2, #3
 8011c1a:	4282      	cmp	r2, r0
 8011c1c:	d8f7      	bhi.n	8011c0e <_free_r+0x15a>
 8011c1e:	68ce      	ldr	r6, [r1, #12]
 8011c20:	e7d9      	b.n	8011bd6 <_free_r+0x122>
 8011c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c24:	20000018 	.word	0x20000018
 8011c28:	20000014 	.word	0x20000014
 8011c2c:	2000fb88 	.word	0x2000fb88
 8011c30:	20000020 	.word	0x20000020

08011c34 <__ascii_mbtowc>:
 8011c34:	b082      	sub	sp, #8
 8011c36:	b901      	cbnz	r1, 8011c3a <__ascii_mbtowc+0x6>
 8011c38:	a901      	add	r1, sp, #4
 8011c3a:	b142      	cbz	r2, 8011c4e <__ascii_mbtowc+0x1a>
 8011c3c:	b14b      	cbz	r3, 8011c52 <__ascii_mbtowc+0x1e>
 8011c3e:	7813      	ldrb	r3, [r2, #0]
 8011c40:	600b      	str	r3, [r1, #0]
 8011c42:	7812      	ldrb	r2, [r2, #0]
 8011c44:	1e10      	subs	r0, r2, #0
 8011c46:	bf18      	it	ne
 8011c48:	2001      	movne	r0, #1
 8011c4a:	b002      	add	sp, #8
 8011c4c:	4770      	bx	lr
 8011c4e:	4610      	mov	r0, r2
 8011c50:	e7fb      	b.n	8011c4a <__ascii_mbtowc+0x16>
 8011c52:	f06f 0001 	mvn.w	r0, #1
 8011c56:	e7f8      	b.n	8011c4a <__ascii_mbtowc+0x16>

08011c58 <__swhatbuf_r>:
 8011c58:	b570      	push	{r4, r5, r6, lr}
 8011c5a:	460c      	mov	r4, r1
 8011c5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c60:	2900      	cmp	r1, #0
 8011c62:	b096      	sub	sp, #88	@ 0x58
 8011c64:	4615      	mov	r5, r2
 8011c66:	461e      	mov	r6, r3
 8011c68:	da07      	bge.n	8011c7a <__swhatbuf_r+0x22>
 8011c6a:	89a1      	ldrh	r1, [r4, #12]
 8011c6c:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 8011c70:	d117      	bne.n	8011ca2 <__swhatbuf_r+0x4a>
 8011c72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011c76:	4608      	mov	r0, r1
 8011c78:	e00f      	b.n	8011c9a <__swhatbuf_r+0x42>
 8011c7a:	466a      	mov	r2, sp
 8011c7c:	f000 fc82 	bl	8012584 <_fstat_r>
 8011c80:	2800      	cmp	r0, #0
 8011c82:	dbf2      	blt.n	8011c6a <__swhatbuf_r+0x12>
 8011c84:	9901      	ldr	r1, [sp, #4]
 8011c86:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011c8a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011c8e:	4259      	negs	r1, r3
 8011c90:	4159      	adcs	r1, r3
 8011c92:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8011c96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011c9a:	6031      	str	r1, [r6, #0]
 8011c9c:	602b      	str	r3, [r5, #0]
 8011c9e:	b016      	add	sp, #88	@ 0x58
 8011ca0:	bd70      	pop	{r4, r5, r6, pc}
 8011ca2:	2100      	movs	r1, #0
 8011ca4:	2340      	movs	r3, #64	@ 0x40
 8011ca6:	e7e6      	b.n	8011c76 <__swhatbuf_r+0x1e>

08011ca8 <__smakebuf_r>:
 8011ca8:	898b      	ldrh	r3, [r1, #12]
 8011caa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011cac:	079d      	lsls	r5, r3, #30
 8011cae:	4606      	mov	r6, r0
 8011cb0:	460c      	mov	r4, r1
 8011cb2:	d507      	bpl.n	8011cc4 <__smakebuf_r+0x1c>
 8011cb4:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 8011cb8:	6023      	str	r3, [r4, #0]
 8011cba:	6123      	str	r3, [r4, #16]
 8011cbc:	2301      	movs	r3, #1
 8011cbe:	6163      	str	r3, [r4, #20]
 8011cc0:	b003      	add	sp, #12
 8011cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011cc4:	ab01      	add	r3, sp, #4
 8011cc6:	466a      	mov	r2, sp
 8011cc8:	f7ff ffc6 	bl	8011c58 <__swhatbuf_r>
 8011ccc:	9f00      	ldr	r7, [sp, #0]
 8011cce:	4605      	mov	r5, r0
 8011cd0:	4639      	mov	r1, r7
 8011cd2:	4630      	mov	r0, r6
 8011cd4:	f7fc f808 	bl	800dce8 <_malloc_r>
 8011cd8:	b948      	cbnz	r0, 8011cee <__smakebuf_r+0x46>
 8011cda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011cde:	059a      	lsls	r2, r3, #22
 8011ce0:	d4ee      	bmi.n	8011cc0 <__smakebuf_r+0x18>
 8011ce2:	f023 0303 	bic.w	r3, r3, #3
 8011ce6:	f043 0302 	orr.w	r3, r3, #2
 8011cea:	81a3      	strh	r3, [r4, #12]
 8011cec:	e7e2      	b.n	8011cb4 <__smakebuf_r+0xc>
 8011cee:	89a3      	ldrh	r3, [r4, #12]
 8011cf0:	6020      	str	r0, [r4, #0]
 8011cf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011cf6:	81a3      	strh	r3, [r4, #12]
 8011cf8:	9b01      	ldr	r3, [sp, #4]
 8011cfa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011cfe:	b15b      	cbz	r3, 8011d18 <__smakebuf_r+0x70>
 8011d00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011d04:	4630      	mov	r0, r6
 8011d06:	f000 fc4f 	bl	80125a8 <_isatty_r>
 8011d0a:	b128      	cbz	r0, 8011d18 <__smakebuf_r+0x70>
 8011d0c:	89a3      	ldrh	r3, [r4, #12]
 8011d0e:	f023 0303 	bic.w	r3, r3, #3
 8011d12:	f043 0301 	orr.w	r3, r3, #1
 8011d16:	81a3      	strh	r3, [r4, #12]
 8011d18:	89a3      	ldrh	r3, [r4, #12]
 8011d1a:	431d      	orrs	r5, r3
 8011d1c:	81a5      	strh	r5, [r4, #12]
 8011d1e:	e7cf      	b.n	8011cc0 <__smakebuf_r+0x18>

08011d20 <_Balloc>:
 8011d20:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8011d22:	b570      	push	{r4, r5, r6, lr}
 8011d24:	4605      	mov	r5, r0
 8011d26:	460c      	mov	r4, r1
 8011d28:	b17b      	cbz	r3, 8011d4a <_Balloc+0x2a>
 8011d2a:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8011d2c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8011d30:	b9a0      	cbnz	r0, 8011d5c <_Balloc+0x3c>
 8011d32:	2101      	movs	r1, #1
 8011d34:	fa01 f604 	lsl.w	r6, r1, r4
 8011d38:	1d72      	adds	r2, r6, #5
 8011d3a:	0092      	lsls	r2, r2, #2
 8011d3c:	4628      	mov	r0, r5
 8011d3e:	f000 fcb1 	bl	80126a4 <_calloc_r>
 8011d42:	b148      	cbz	r0, 8011d58 <_Balloc+0x38>
 8011d44:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8011d48:	e00b      	b.n	8011d62 <_Balloc+0x42>
 8011d4a:	2221      	movs	r2, #33	@ 0x21
 8011d4c:	2104      	movs	r1, #4
 8011d4e:	f000 fca9 	bl	80126a4 <_calloc_r>
 8011d52:	6468      	str	r0, [r5, #68]	@ 0x44
 8011d54:	2800      	cmp	r0, #0
 8011d56:	d1e8      	bne.n	8011d2a <_Balloc+0xa>
 8011d58:	2000      	movs	r0, #0
 8011d5a:	bd70      	pop	{r4, r5, r6, pc}
 8011d5c:	6802      	ldr	r2, [r0, #0]
 8011d5e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8011d62:	2300      	movs	r3, #0
 8011d64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011d68:	e7f7      	b.n	8011d5a <_Balloc+0x3a>

08011d6a <_Bfree>:
 8011d6a:	b131      	cbz	r1, 8011d7a <_Bfree+0x10>
 8011d6c:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8011d6e:	684a      	ldr	r2, [r1, #4]
 8011d70:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011d74:	6008      	str	r0, [r1, #0]
 8011d76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8011d7a:	4770      	bx	lr

08011d7c <__multadd>:
 8011d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d80:	690d      	ldr	r5, [r1, #16]
 8011d82:	4607      	mov	r7, r0
 8011d84:	460c      	mov	r4, r1
 8011d86:	461e      	mov	r6, r3
 8011d88:	f101 0c14 	add.w	ip, r1, #20
 8011d8c:	2000      	movs	r0, #0
 8011d8e:	f8dc 3000 	ldr.w	r3, [ip]
 8011d92:	b299      	uxth	r1, r3
 8011d94:	fb02 6101 	mla	r1, r2, r1, r6
 8011d98:	0c1e      	lsrs	r6, r3, #16
 8011d9a:	0c0b      	lsrs	r3, r1, #16
 8011d9c:	fb02 3306 	mla	r3, r2, r6, r3
 8011da0:	b289      	uxth	r1, r1
 8011da2:	3001      	adds	r0, #1
 8011da4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011da8:	4285      	cmp	r5, r0
 8011daa:	f84c 1b04 	str.w	r1, [ip], #4
 8011dae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011db2:	dcec      	bgt.n	8011d8e <__multadd+0x12>
 8011db4:	b30e      	cbz	r6, 8011dfa <__multadd+0x7e>
 8011db6:	68a3      	ldr	r3, [r4, #8]
 8011db8:	42ab      	cmp	r3, r5
 8011dba:	dc19      	bgt.n	8011df0 <__multadd+0x74>
 8011dbc:	6861      	ldr	r1, [r4, #4]
 8011dbe:	4638      	mov	r0, r7
 8011dc0:	3101      	adds	r1, #1
 8011dc2:	f7ff ffad 	bl	8011d20 <_Balloc>
 8011dc6:	4680      	mov	r8, r0
 8011dc8:	b928      	cbnz	r0, 8011dd6 <__multadd+0x5a>
 8011dca:	4602      	mov	r2, r0
 8011dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8011e00 <__multadd+0x84>)
 8011dce:	480d      	ldr	r0, [pc, #52]	@ (8011e04 <__multadd+0x88>)
 8011dd0:	21ba      	movs	r1, #186	@ 0xba
 8011dd2:	f000 fc49 	bl	8012668 <__assert_func>
 8011dd6:	6922      	ldr	r2, [r4, #16]
 8011dd8:	3202      	adds	r2, #2
 8011dda:	f104 010c 	add.w	r1, r4, #12
 8011dde:	0092      	lsls	r2, r2, #2
 8011de0:	300c      	adds	r0, #12
 8011de2:	f7fe ff31 	bl	8010c48 <memcpy>
 8011de6:	4621      	mov	r1, r4
 8011de8:	4638      	mov	r0, r7
 8011dea:	f7ff ffbe 	bl	8011d6a <_Bfree>
 8011dee:	4644      	mov	r4, r8
 8011df0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011df4:	3501      	adds	r5, #1
 8011df6:	615e      	str	r6, [r3, #20]
 8011df8:	6125      	str	r5, [r4, #16]
 8011dfa:	4620      	mov	r0, r4
 8011dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e00:	080919ec 	.word	0x080919ec
 8011e04:	08091a55 	.word	0x08091a55

08011e08 <__hi0bits>:
 8011e08:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011e0c:	4603      	mov	r3, r0
 8011e0e:	bf36      	itet	cc
 8011e10:	0403      	lslcc	r3, r0, #16
 8011e12:	2000      	movcs	r0, #0
 8011e14:	2010      	movcc	r0, #16
 8011e16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011e1a:	bf3c      	itt	cc
 8011e1c:	021b      	lslcc	r3, r3, #8
 8011e1e:	3008      	addcc	r0, #8
 8011e20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011e24:	bf3c      	itt	cc
 8011e26:	011b      	lslcc	r3, r3, #4
 8011e28:	3004      	addcc	r0, #4
 8011e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011e2e:	bf3c      	itt	cc
 8011e30:	009b      	lslcc	r3, r3, #2
 8011e32:	3002      	addcc	r0, #2
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	db05      	blt.n	8011e44 <__hi0bits+0x3c>
 8011e38:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011e3c:	f100 0001 	add.w	r0, r0, #1
 8011e40:	bf08      	it	eq
 8011e42:	2020      	moveq	r0, #32
 8011e44:	4770      	bx	lr

08011e46 <__lo0bits>:
 8011e46:	6803      	ldr	r3, [r0, #0]
 8011e48:	4602      	mov	r2, r0
 8011e4a:	f013 0007 	ands.w	r0, r3, #7
 8011e4e:	d00b      	beq.n	8011e68 <__lo0bits+0x22>
 8011e50:	07d9      	lsls	r1, r3, #31
 8011e52:	d421      	bmi.n	8011e98 <__lo0bits+0x52>
 8011e54:	0798      	lsls	r0, r3, #30
 8011e56:	bf49      	itett	mi
 8011e58:	085b      	lsrmi	r3, r3, #1
 8011e5a:	089b      	lsrpl	r3, r3, #2
 8011e5c:	2001      	movmi	r0, #1
 8011e5e:	6013      	strmi	r3, [r2, #0]
 8011e60:	bf5c      	itt	pl
 8011e62:	6013      	strpl	r3, [r2, #0]
 8011e64:	2002      	movpl	r0, #2
 8011e66:	4770      	bx	lr
 8011e68:	b299      	uxth	r1, r3
 8011e6a:	b909      	cbnz	r1, 8011e70 <__lo0bits+0x2a>
 8011e6c:	0c1b      	lsrs	r3, r3, #16
 8011e6e:	2010      	movs	r0, #16
 8011e70:	b2d9      	uxtb	r1, r3
 8011e72:	b909      	cbnz	r1, 8011e78 <__lo0bits+0x32>
 8011e74:	3008      	adds	r0, #8
 8011e76:	0a1b      	lsrs	r3, r3, #8
 8011e78:	0719      	lsls	r1, r3, #28
 8011e7a:	bf04      	itt	eq
 8011e7c:	091b      	lsreq	r3, r3, #4
 8011e7e:	3004      	addeq	r0, #4
 8011e80:	0799      	lsls	r1, r3, #30
 8011e82:	bf04      	itt	eq
 8011e84:	089b      	lsreq	r3, r3, #2
 8011e86:	3002      	addeq	r0, #2
 8011e88:	07d9      	lsls	r1, r3, #31
 8011e8a:	d403      	bmi.n	8011e94 <__lo0bits+0x4e>
 8011e8c:	085b      	lsrs	r3, r3, #1
 8011e8e:	f100 0001 	add.w	r0, r0, #1
 8011e92:	d003      	beq.n	8011e9c <__lo0bits+0x56>
 8011e94:	6013      	str	r3, [r2, #0]
 8011e96:	4770      	bx	lr
 8011e98:	2000      	movs	r0, #0
 8011e9a:	4770      	bx	lr
 8011e9c:	2020      	movs	r0, #32
 8011e9e:	4770      	bx	lr

08011ea0 <__i2b>:
 8011ea0:	b510      	push	{r4, lr}
 8011ea2:	460c      	mov	r4, r1
 8011ea4:	2101      	movs	r1, #1
 8011ea6:	f7ff ff3b 	bl	8011d20 <_Balloc>
 8011eaa:	4602      	mov	r2, r0
 8011eac:	b928      	cbnz	r0, 8011eba <__i2b+0x1a>
 8011eae:	4b05      	ldr	r3, [pc, #20]	@ (8011ec4 <__i2b+0x24>)
 8011eb0:	4805      	ldr	r0, [pc, #20]	@ (8011ec8 <__i2b+0x28>)
 8011eb2:	f240 1145 	movw	r1, #325	@ 0x145
 8011eb6:	f000 fbd7 	bl	8012668 <__assert_func>
 8011eba:	2301      	movs	r3, #1
 8011ebc:	6144      	str	r4, [r0, #20]
 8011ebe:	6103      	str	r3, [r0, #16]
 8011ec0:	bd10      	pop	{r4, pc}
 8011ec2:	bf00      	nop
 8011ec4:	080919ec 	.word	0x080919ec
 8011ec8:	08091a55 	.word	0x08091a55

08011ecc <__multiply>:
 8011ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ed0:	4614      	mov	r4, r2
 8011ed2:	690a      	ldr	r2, [r1, #16]
 8011ed4:	6923      	ldr	r3, [r4, #16]
 8011ed6:	429a      	cmp	r2, r3
 8011ed8:	bfa8      	it	ge
 8011eda:	4623      	movge	r3, r4
 8011edc:	460f      	mov	r7, r1
 8011ede:	bfa4      	itt	ge
 8011ee0:	460c      	movge	r4, r1
 8011ee2:	461f      	movge	r7, r3
 8011ee4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8011ee8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8011eec:	68a3      	ldr	r3, [r4, #8]
 8011eee:	6861      	ldr	r1, [r4, #4]
 8011ef0:	eb0a 0609 	add.w	r6, sl, r9
 8011ef4:	42b3      	cmp	r3, r6
 8011ef6:	b085      	sub	sp, #20
 8011ef8:	bfb8      	it	lt
 8011efa:	3101      	addlt	r1, #1
 8011efc:	f7ff ff10 	bl	8011d20 <_Balloc>
 8011f00:	b930      	cbnz	r0, 8011f10 <__multiply+0x44>
 8011f02:	4602      	mov	r2, r0
 8011f04:	4b44      	ldr	r3, [pc, #272]	@ (8012018 <__multiply+0x14c>)
 8011f06:	4845      	ldr	r0, [pc, #276]	@ (801201c <__multiply+0x150>)
 8011f08:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011f0c:	f000 fbac 	bl	8012668 <__assert_func>
 8011f10:	f100 0514 	add.w	r5, r0, #20
 8011f14:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011f18:	462b      	mov	r3, r5
 8011f1a:	2200      	movs	r2, #0
 8011f1c:	4543      	cmp	r3, r8
 8011f1e:	d321      	bcc.n	8011f64 <__multiply+0x98>
 8011f20:	f107 0114 	add.w	r1, r7, #20
 8011f24:	f104 0214 	add.w	r2, r4, #20
 8011f28:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8011f2c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8011f30:	9302      	str	r3, [sp, #8]
 8011f32:	1b13      	subs	r3, r2, r4
 8011f34:	3b15      	subs	r3, #21
 8011f36:	f023 0303 	bic.w	r3, r3, #3
 8011f3a:	3304      	adds	r3, #4
 8011f3c:	f104 0715 	add.w	r7, r4, #21
 8011f40:	42ba      	cmp	r2, r7
 8011f42:	bf38      	it	cc
 8011f44:	2304      	movcc	r3, #4
 8011f46:	9301      	str	r3, [sp, #4]
 8011f48:	9b02      	ldr	r3, [sp, #8]
 8011f4a:	9103      	str	r1, [sp, #12]
 8011f4c:	428b      	cmp	r3, r1
 8011f4e:	d80c      	bhi.n	8011f6a <__multiply+0x9e>
 8011f50:	2e00      	cmp	r6, #0
 8011f52:	dd03      	ble.n	8011f5c <__multiply+0x90>
 8011f54:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d05b      	beq.n	8012014 <__multiply+0x148>
 8011f5c:	6106      	str	r6, [r0, #16]
 8011f5e:	b005      	add	sp, #20
 8011f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f64:	f843 2b04 	str.w	r2, [r3], #4
 8011f68:	e7d8      	b.n	8011f1c <__multiply+0x50>
 8011f6a:	f8b1 a000 	ldrh.w	sl, [r1]
 8011f6e:	f1ba 0f00 	cmp.w	sl, #0
 8011f72:	d024      	beq.n	8011fbe <__multiply+0xf2>
 8011f74:	f104 0e14 	add.w	lr, r4, #20
 8011f78:	46a9      	mov	r9, r5
 8011f7a:	f04f 0c00 	mov.w	ip, #0
 8011f7e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011f82:	f8d9 3000 	ldr.w	r3, [r9]
 8011f86:	fa1f fb87 	uxth.w	fp, r7
 8011f8a:	b29b      	uxth	r3, r3
 8011f8c:	fb0a 330b 	mla	r3, sl, fp, r3
 8011f90:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8011f94:	f8d9 7000 	ldr.w	r7, [r9]
 8011f98:	4463      	add	r3, ip
 8011f9a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011f9e:	fb0a c70b 	mla	r7, sl, fp, ip
 8011fa2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8011fa6:	b29b      	uxth	r3, r3
 8011fa8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011fac:	4572      	cmp	r2, lr
 8011fae:	f849 3b04 	str.w	r3, [r9], #4
 8011fb2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011fb6:	d8e2      	bhi.n	8011f7e <__multiply+0xb2>
 8011fb8:	9b01      	ldr	r3, [sp, #4]
 8011fba:	f845 c003 	str.w	ip, [r5, r3]
 8011fbe:	9b03      	ldr	r3, [sp, #12]
 8011fc0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011fc4:	3104      	adds	r1, #4
 8011fc6:	f1b9 0f00 	cmp.w	r9, #0
 8011fca:	d021      	beq.n	8012010 <__multiply+0x144>
 8011fcc:	682b      	ldr	r3, [r5, #0]
 8011fce:	f104 0c14 	add.w	ip, r4, #20
 8011fd2:	46ae      	mov	lr, r5
 8011fd4:	f04f 0a00 	mov.w	sl, #0
 8011fd8:	f8bc b000 	ldrh.w	fp, [ip]
 8011fdc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8011fe0:	fb09 770b 	mla	r7, r9, fp, r7
 8011fe4:	4457      	add	r7, sl
 8011fe6:	b29b      	uxth	r3, r3
 8011fe8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011fec:	f84e 3b04 	str.w	r3, [lr], #4
 8011ff0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011ff4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011ff8:	f8be 3000 	ldrh.w	r3, [lr]
 8011ffc:	fb09 330a 	mla	r3, r9, sl, r3
 8012000:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8012004:	4562      	cmp	r2, ip
 8012006:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801200a:	d8e5      	bhi.n	8011fd8 <__multiply+0x10c>
 801200c:	9f01      	ldr	r7, [sp, #4]
 801200e:	51eb      	str	r3, [r5, r7]
 8012010:	3504      	adds	r5, #4
 8012012:	e799      	b.n	8011f48 <__multiply+0x7c>
 8012014:	3e01      	subs	r6, #1
 8012016:	e79b      	b.n	8011f50 <__multiply+0x84>
 8012018:	080919ec 	.word	0x080919ec
 801201c:	08091a55 	.word	0x08091a55

08012020 <__pow5mult>:
 8012020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012024:	4615      	mov	r5, r2
 8012026:	f012 0203 	ands.w	r2, r2, #3
 801202a:	4607      	mov	r7, r0
 801202c:	460e      	mov	r6, r1
 801202e:	d007      	beq.n	8012040 <__pow5mult+0x20>
 8012030:	4c1a      	ldr	r4, [pc, #104]	@ (801209c <__pow5mult+0x7c>)
 8012032:	3a01      	subs	r2, #1
 8012034:	2300      	movs	r3, #0
 8012036:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801203a:	f7ff fe9f 	bl	8011d7c <__multadd>
 801203e:	4606      	mov	r6, r0
 8012040:	10ad      	asrs	r5, r5, #2
 8012042:	d027      	beq.n	8012094 <__pow5mult+0x74>
 8012044:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 8012046:	b944      	cbnz	r4, 801205a <__pow5mult+0x3a>
 8012048:	f240 2171 	movw	r1, #625	@ 0x271
 801204c:	4638      	mov	r0, r7
 801204e:	f7ff ff27 	bl	8011ea0 <__i2b>
 8012052:	2300      	movs	r3, #0
 8012054:	6438      	str	r0, [r7, #64]	@ 0x40
 8012056:	4604      	mov	r4, r0
 8012058:	6003      	str	r3, [r0, #0]
 801205a:	f04f 0900 	mov.w	r9, #0
 801205e:	07eb      	lsls	r3, r5, #31
 8012060:	d50a      	bpl.n	8012078 <__pow5mult+0x58>
 8012062:	4631      	mov	r1, r6
 8012064:	4622      	mov	r2, r4
 8012066:	4638      	mov	r0, r7
 8012068:	f7ff ff30 	bl	8011ecc <__multiply>
 801206c:	4631      	mov	r1, r6
 801206e:	4680      	mov	r8, r0
 8012070:	4638      	mov	r0, r7
 8012072:	f7ff fe7a 	bl	8011d6a <_Bfree>
 8012076:	4646      	mov	r6, r8
 8012078:	106d      	asrs	r5, r5, #1
 801207a:	d00b      	beq.n	8012094 <__pow5mult+0x74>
 801207c:	6820      	ldr	r0, [r4, #0]
 801207e:	b938      	cbnz	r0, 8012090 <__pow5mult+0x70>
 8012080:	4622      	mov	r2, r4
 8012082:	4621      	mov	r1, r4
 8012084:	4638      	mov	r0, r7
 8012086:	f7ff ff21 	bl	8011ecc <__multiply>
 801208a:	6020      	str	r0, [r4, #0]
 801208c:	f8c0 9000 	str.w	r9, [r0]
 8012090:	4604      	mov	r4, r0
 8012092:	e7e4      	b.n	801205e <__pow5mult+0x3e>
 8012094:	4630      	mov	r0, r6
 8012096:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801209a:	bf00      	nop
 801209c:	08091ab0 	.word	0x08091ab0

080120a0 <__lshift>:
 80120a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80120a4:	460c      	mov	r4, r1
 80120a6:	6849      	ldr	r1, [r1, #4]
 80120a8:	6923      	ldr	r3, [r4, #16]
 80120aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80120ae:	68a3      	ldr	r3, [r4, #8]
 80120b0:	4607      	mov	r7, r0
 80120b2:	4691      	mov	r9, r2
 80120b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80120b8:	f108 0601 	add.w	r6, r8, #1
 80120bc:	42b3      	cmp	r3, r6
 80120be:	db0b      	blt.n	80120d8 <__lshift+0x38>
 80120c0:	4638      	mov	r0, r7
 80120c2:	f7ff fe2d 	bl	8011d20 <_Balloc>
 80120c6:	4605      	mov	r5, r0
 80120c8:	b948      	cbnz	r0, 80120de <__lshift+0x3e>
 80120ca:	4602      	mov	r2, r0
 80120cc:	4b28      	ldr	r3, [pc, #160]	@ (8012170 <__lshift+0xd0>)
 80120ce:	4829      	ldr	r0, [pc, #164]	@ (8012174 <__lshift+0xd4>)
 80120d0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80120d4:	f000 fac8 	bl	8012668 <__assert_func>
 80120d8:	3101      	adds	r1, #1
 80120da:	005b      	lsls	r3, r3, #1
 80120dc:	e7ee      	b.n	80120bc <__lshift+0x1c>
 80120de:	2300      	movs	r3, #0
 80120e0:	f100 0114 	add.w	r1, r0, #20
 80120e4:	f100 0210 	add.w	r2, r0, #16
 80120e8:	4618      	mov	r0, r3
 80120ea:	4553      	cmp	r3, sl
 80120ec:	db33      	blt.n	8012156 <__lshift+0xb6>
 80120ee:	6920      	ldr	r0, [r4, #16]
 80120f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80120f4:	f104 0314 	add.w	r3, r4, #20
 80120f8:	f019 091f 	ands.w	r9, r9, #31
 80120fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012100:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012104:	d02b      	beq.n	801215e <__lshift+0xbe>
 8012106:	f1c9 0e20 	rsb	lr, r9, #32
 801210a:	468a      	mov	sl, r1
 801210c:	2200      	movs	r2, #0
 801210e:	6818      	ldr	r0, [r3, #0]
 8012110:	fa00 f009 	lsl.w	r0, r0, r9
 8012114:	4310      	orrs	r0, r2
 8012116:	f84a 0b04 	str.w	r0, [sl], #4
 801211a:	f853 2b04 	ldr.w	r2, [r3], #4
 801211e:	459c      	cmp	ip, r3
 8012120:	fa22 f20e 	lsr.w	r2, r2, lr
 8012124:	d8f3      	bhi.n	801210e <__lshift+0x6e>
 8012126:	ebac 0304 	sub.w	r3, ip, r4
 801212a:	3b15      	subs	r3, #21
 801212c:	f023 0303 	bic.w	r3, r3, #3
 8012130:	3304      	adds	r3, #4
 8012132:	f104 0015 	add.w	r0, r4, #21
 8012136:	4584      	cmp	ip, r0
 8012138:	bf38      	it	cc
 801213a:	2304      	movcc	r3, #4
 801213c:	50ca      	str	r2, [r1, r3]
 801213e:	b10a      	cbz	r2, 8012144 <__lshift+0xa4>
 8012140:	f108 0602 	add.w	r6, r8, #2
 8012144:	3e01      	subs	r6, #1
 8012146:	4638      	mov	r0, r7
 8012148:	612e      	str	r6, [r5, #16]
 801214a:	4621      	mov	r1, r4
 801214c:	f7ff fe0d 	bl	8011d6a <_Bfree>
 8012150:	4628      	mov	r0, r5
 8012152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012156:	f842 0f04 	str.w	r0, [r2, #4]!
 801215a:	3301      	adds	r3, #1
 801215c:	e7c5      	b.n	80120ea <__lshift+0x4a>
 801215e:	3904      	subs	r1, #4
 8012160:	f853 2b04 	ldr.w	r2, [r3], #4
 8012164:	f841 2f04 	str.w	r2, [r1, #4]!
 8012168:	459c      	cmp	ip, r3
 801216a:	d8f9      	bhi.n	8012160 <__lshift+0xc0>
 801216c:	e7ea      	b.n	8012144 <__lshift+0xa4>
 801216e:	bf00      	nop
 8012170:	080919ec 	.word	0x080919ec
 8012174:	08091a55 	.word	0x08091a55

08012178 <__mcmp>:
 8012178:	690a      	ldr	r2, [r1, #16]
 801217a:	4603      	mov	r3, r0
 801217c:	6900      	ldr	r0, [r0, #16]
 801217e:	1a80      	subs	r0, r0, r2
 8012180:	b530      	push	{r4, r5, lr}
 8012182:	d10e      	bne.n	80121a2 <__mcmp+0x2a>
 8012184:	3314      	adds	r3, #20
 8012186:	3114      	adds	r1, #20
 8012188:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801218c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012190:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012194:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012198:	4295      	cmp	r5, r2
 801219a:	d003      	beq.n	80121a4 <__mcmp+0x2c>
 801219c:	d205      	bcs.n	80121aa <__mcmp+0x32>
 801219e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80121a2:	bd30      	pop	{r4, r5, pc}
 80121a4:	42a3      	cmp	r3, r4
 80121a6:	d3f3      	bcc.n	8012190 <__mcmp+0x18>
 80121a8:	e7fb      	b.n	80121a2 <__mcmp+0x2a>
 80121aa:	2001      	movs	r0, #1
 80121ac:	e7f9      	b.n	80121a2 <__mcmp+0x2a>
	...

080121b0 <__mdiff>:
 80121b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121b4:	4689      	mov	r9, r1
 80121b6:	4606      	mov	r6, r0
 80121b8:	4611      	mov	r1, r2
 80121ba:	4648      	mov	r0, r9
 80121bc:	4614      	mov	r4, r2
 80121be:	f7ff ffdb 	bl	8012178 <__mcmp>
 80121c2:	1e05      	subs	r5, r0, #0
 80121c4:	d112      	bne.n	80121ec <__mdiff+0x3c>
 80121c6:	4629      	mov	r1, r5
 80121c8:	4630      	mov	r0, r6
 80121ca:	f7ff fda9 	bl	8011d20 <_Balloc>
 80121ce:	4602      	mov	r2, r0
 80121d0:	b928      	cbnz	r0, 80121de <__mdiff+0x2e>
 80121d2:	4b3f      	ldr	r3, [pc, #252]	@ (80122d0 <__mdiff+0x120>)
 80121d4:	f240 2137 	movw	r1, #567	@ 0x237
 80121d8:	483e      	ldr	r0, [pc, #248]	@ (80122d4 <__mdiff+0x124>)
 80121da:	f000 fa45 	bl	8012668 <__assert_func>
 80121de:	2301      	movs	r3, #1
 80121e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80121e4:	4610      	mov	r0, r2
 80121e6:	b003      	add	sp, #12
 80121e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121ec:	bfbc      	itt	lt
 80121ee:	464b      	movlt	r3, r9
 80121f0:	46a1      	movlt	r9, r4
 80121f2:	4630      	mov	r0, r6
 80121f4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80121f8:	bfba      	itte	lt
 80121fa:	461c      	movlt	r4, r3
 80121fc:	2501      	movlt	r5, #1
 80121fe:	2500      	movge	r5, #0
 8012200:	f7ff fd8e 	bl	8011d20 <_Balloc>
 8012204:	4602      	mov	r2, r0
 8012206:	b918      	cbnz	r0, 8012210 <__mdiff+0x60>
 8012208:	4b31      	ldr	r3, [pc, #196]	@ (80122d0 <__mdiff+0x120>)
 801220a:	f240 2145 	movw	r1, #581	@ 0x245
 801220e:	e7e3      	b.n	80121d8 <__mdiff+0x28>
 8012210:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8012214:	6926      	ldr	r6, [r4, #16]
 8012216:	60c5      	str	r5, [r0, #12]
 8012218:	f109 0310 	add.w	r3, r9, #16
 801221c:	f109 0514 	add.w	r5, r9, #20
 8012220:	f104 0e14 	add.w	lr, r4, #20
 8012224:	f100 0b14 	add.w	fp, r0, #20
 8012228:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801222c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8012230:	9301      	str	r3, [sp, #4]
 8012232:	46d9      	mov	r9, fp
 8012234:	f04f 0c00 	mov.w	ip, #0
 8012238:	9b01      	ldr	r3, [sp, #4]
 801223a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801223e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8012242:	9301      	str	r3, [sp, #4]
 8012244:	fa1f f38a 	uxth.w	r3, sl
 8012248:	4619      	mov	r1, r3
 801224a:	b283      	uxth	r3, r0
 801224c:	1acb      	subs	r3, r1, r3
 801224e:	0c00      	lsrs	r0, r0, #16
 8012250:	4463      	add	r3, ip
 8012252:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8012256:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801225a:	b29b      	uxth	r3, r3
 801225c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012260:	4576      	cmp	r6, lr
 8012262:	f849 3b04 	str.w	r3, [r9], #4
 8012266:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801226a:	d8e5      	bhi.n	8012238 <__mdiff+0x88>
 801226c:	1b33      	subs	r3, r6, r4
 801226e:	3b15      	subs	r3, #21
 8012270:	f023 0303 	bic.w	r3, r3, #3
 8012274:	3415      	adds	r4, #21
 8012276:	3304      	adds	r3, #4
 8012278:	42a6      	cmp	r6, r4
 801227a:	bf38      	it	cc
 801227c:	2304      	movcc	r3, #4
 801227e:	441d      	add	r5, r3
 8012280:	445b      	add	r3, fp
 8012282:	461e      	mov	r6, r3
 8012284:	462c      	mov	r4, r5
 8012286:	4544      	cmp	r4, r8
 8012288:	d30e      	bcc.n	80122a8 <__mdiff+0xf8>
 801228a:	f108 0103 	add.w	r1, r8, #3
 801228e:	1b49      	subs	r1, r1, r5
 8012290:	f021 0103 	bic.w	r1, r1, #3
 8012294:	3d03      	subs	r5, #3
 8012296:	45a8      	cmp	r8, r5
 8012298:	bf38      	it	cc
 801229a:	2100      	movcc	r1, #0
 801229c:	440b      	add	r3, r1
 801229e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80122a2:	b191      	cbz	r1, 80122ca <__mdiff+0x11a>
 80122a4:	6117      	str	r7, [r2, #16]
 80122a6:	e79d      	b.n	80121e4 <__mdiff+0x34>
 80122a8:	f854 1b04 	ldr.w	r1, [r4], #4
 80122ac:	46e6      	mov	lr, ip
 80122ae:	0c08      	lsrs	r0, r1, #16
 80122b0:	fa1c fc81 	uxtah	ip, ip, r1
 80122b4:	4471      	add	r1, lr
 80122b6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80122ba:	b289      	uxth	r1, r1
 80122bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80122c0:	f846 1b04 	str.w	r1, [r6], #4
 80122c4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80122c8:	e7dd      	b.n	8012286 <__mdiff+0xd6>
 80122ca:	3f01      	subs	r7, #1
 80122cc:	e7e7      	b.n	801229e <__mdiff+0xee>
 80122ce:	bf00      	nop
 80122d0:	080919ec 	.word	0x080919ec
 80122d4:	08091a55 	.word	0x08091a55

080122d8 <__d2b>:
 80122d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80122dc:	460f      	mov	r7, r1
 80122de:	2101      	movs	r1, #1
 80122e0:	ec59 8b10 	vmov	r8, r9, d0
 80122e4:	4616      	mov	r6, r2
 80122e6:	f7ff fd1b 	bl	8011d20 <_Balloc>
 80122ea:	4604      	mov	r4, r0
 80122ec:	b930      	cbnz	r0, 80122fc <__d2b+0x24>
 80122ee:	4602      	mov	r2, r0
 80122f0:	4b23      	ldr	r3, [pc, #140]	@ (8012380 <__d2b+0xa8>)
 80122f2:	4824      	ldr	r0, [pc, #144]	@ (8012384 <__d2b+0xac>)
 80122f4:	f240 310f 	movw	r1, #783	@ 0x30f
 80122f8:	f000 f9b6 	bl	8012668 <__assert_func>
 80122fc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012300:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012304:	b10d      	cbz	r5, 801230a <__d2b+0x32>
 8012306:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801230a:	9301      	str	r3, [sp, #4]
 801230c:	f1b8 0300 	subs.w	r3, r8, #0
 8012310:	d023      	beq.n	801235a <__d2b+0x82>
 8012312:	4668      	mov	r0, sp
 8012314:	9300      	str	r3, [sp, #0]
 8012316:	f7ff fd96 	bl	8011e46 <__lo0bits>
 801231a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801231e:	b1d0      	cbz	r0, 8012356 <__d2b+0x7e>
 8012320:	f1c0 0320 	rsb	r3, r0, #32
 8012324:	fa02 f303 	lsl.w	r3, r2, r3
 8012328:	430b      	orrs	r3, r1
 801232a:	40c2      	lsrs	r2, r0
 801232c:	6163      	str	r3, [r4, #20]
 801232e:	9201      	str	r2, [sp, #4]
 8012330:	9b01      	ldr	r3, [sp, #4]
 8012332:	61a3      	str	r3, [r4, #24]
 8012334:	2b00      	cmp	r3, #0
 8012336:	bf0c      	ite	eq
 8012338:	2201      	moveq	r2, #1
 801233a:	2202      	movne	r2, #2
 801233c:	6122      	str	r2, [r4, #16]
 801233e:	b1a5      	cbz	r5, 801236a <__d2b+0x92>
 8012340:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8012344:	4405      	add	r5, r0
 8012346:	603d      	str	r5, [r7, #0]
 8012348:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801234c:	6030      	str	r0, [r6, #0]
 801234e:	4620      	mov	r0, r4
 8012350:	b003      	add	sp, #12
 8012352:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012356:	6161      	str	r1, [r4, #20]
 8012358:	e7ea      	b.n	8012330 <__d2b+0x58>
 801235a:	a801      	add	r0, sp, #4
 801235c:	f7ff fd73 	bl	8011e46 <__lo0bits>
 8012360:	9b01      	ldr	r3, [sp, #4]
 8012362:	6163      	str	r3, [r4, #20]
 8012364:	3020      	adds	r0, #32
 8012366:	2201      	movs	r2, #1
 8012368:	e7e8      	b.n	801233c <__d2b+0x64>
 801236a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801236e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8012372:	6038      	str	r0, [r7, #0]
 8012374:	6918      	ldr	r0, [r3, #16]
 8012376:	f7ff fd47 	bl	8011e08 <__hi0bits>
 801237a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801237e:	e7e5      	b.n	801234c <__d2b+0x74>
 8012380:	080919ec 	.word	0x080919ec
 8012384:	08091a55 	.word	0x08091a55

08012388 <_fclose_r>:
 8012388:	b570      	push	{r4, r5, r6, lr}
 801238a:	4605      	mov	r5, r0
 801238c:	460c      	mov	r4, r1
 801238e:	b1b1      	cbz	r1, 80123be <_fclose_r+0x36>
 8012390:	b118      	cbz	r0, 801239a <_fclose_r+0x12>
 8012392:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8012394:	b90b      	cbnz	r3, 801239a <_fclose_r+0x12>
 8012396:	f7fe f947 	bl	8010628 <__sinit>
 801239a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801239c:	07de      	lsls	r6, r3, #31
 801239e:	d405      	bmi.n	80123ac <_fclose_r+0x24>
 80123a0:	89a3      	ldrh	r3, [r4, #12]
 80123a2:	0598      	lsls	r0, r3, #22
 80123a4:	d402      	bmi.n	80123ac <_fclose_r+0x24>
 80123a6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80123a8:	f7fe fc4c 	bl	8010c44 <__retarget_lock_acquire_recursive>
 80123ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80123b0:	b943      	cbnz	r3, 80123c4 <_fclose_r+0x3c>
 80123b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80123b4:	07d9      	lsls	r1, r3, #31
 80123b6:	d402      	bmi.n	80123be <_fclose_r+0x36>
 80123b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80123ba:	f7fe fc44 	bl	8010c46 <__retarget_lock_release_recursive>
 80123be:	2600      	movs	r6, #0
 80123c0:	4630      	mov	r0, r6
 80123c2:	bd70      	pop	{r4, r5, r6, pc}
 80123c4:	4621      	mov	r1, r4
 80123c6:	4628      	mov	r0, r5
 80123c8:	f7fd fff4 	bl	80103b4 <__sflush_r>
 80123cc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80123ce:	4606      	mov	r6, r0
 80123d0:	b133      	cbz	r3, 80123e0 <_fclose_r+0x58>
 80123d2:	69e1      	ldr	r1, [r4, #28]
 80123d4:	4628      	mov	r0, r5
 80123d6:	4798      	blx	r3
 80123d8:	2800      	cmp	r0, #0
 80123da:	bfb8      	it	lt
 80123dc:	f04f 36ff 	movlt.w	r6, #4294967295	@ 0xffffffff
 80123e0:	89a3      	ldrh	r3, [r4, #12]
 80123e2:	061a      	lsls	r2, r3, #24
 80123e4:	d503      	bpl.n	80123ee <_fclose_r+0x66>
 80123e6:	6921      	ldr	r1, [r4, #16]
 80123e8:	4628      	mov	r0, r5
 80123ea:	f7ff fb63 	bl	8011ab4 <_free_r>
 80123ee:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80123f0:	b141      	cbz	r1, 8012404 <_fclose_r+0x7c>
 80123f2:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 80123f6:	4299      	cmp	r1, r3
 80123f8:	d002      	beq.n	8012400 <_fclose_r+0x78>
 80123fa:	4628      	mov	r0, r5
 80123fc:	f7ff fb5a 	bl	8011ab4 <_free_r>
 8012400:	2300      	movs	r3, #0
 8012402:	6323      	str	r3, [r4, #48]	@ 0x30
 8012404:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8012406:	b121      	cbz	r1, 8012412 <_fclose_r+0x8a>
 8012408:	4628      	mov	r0, r5
 801240a:	f7ff fb53 	bl	8011ab4 <_free_r>
 801240e:	2300      	movs	r3, #0
 8012410:	6463      	str	r3, [r4, #68]	@ 0x44
 8012412:	f7fe f8fd 	bl	8010610 <__sfp_lock_acquire>
 8012416:	2300      	movs	r3, #0
 8012418:	81a3      	strh	r3, [r4, #12]
 801241a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801241c:	07db      	lsls	r3, r3, #31
 801241e:	d402      	bmi.n	8012426 <_fclose_r+0x9e>
 8012420:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012422:	f7fe fc10 	bl	8010c46 <__retarget_lock_release_recursive>
 8012426:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012428:	f7fe fc0b 	bl	8010c42 <__retarget_lock_close_recursive>
 801242c:	f7fe f8f6 	bl	801061c <__sfp_lock_release>
 8012430:	e7c6      	b.n	80123c0 <_fclose_r+0x38>

08012432 <__sread>:
 8012432:	b510      	push	{r4, lr}
 8012434:	460c      	mov	r4, r1
 8012436:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801243a:	f000 f8d7 	bl	80125ec <_read_r>
 801243e:	2800      	cmp	r0, #0
 8012440:	bfab      	itete	ge
 8012442:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 8012444:	89a3      	ldrhlt	r3, [r4, #12]
 8012446:	181b      	addge	r3, r3, r0
 8012448:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801244c:	bfac      	ite	ge
 801244e:	6523      	strge	r3, [r4, #80]	@ 0x50
 8012450:	81a3      	strhlt	r3, [r4, #12]
 8012452:	bd10      	pop	{r4, pc}

08012454 <__swrite>:
 8012454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012458:	461f      	mov	r7, r3
 801245a:	898b      	ldrh	r3, [r1, #12]
 801245c:	05db      	lsls	r3, r3, #23
 801245e:	4605      	mov	r5, r0
 8012460:	460c      	mov	r4, r1
 8012462:	4616      	mov	r6, r2
 8012464:	d505      	bpl.n	8012472 <__swrite+0x1e>
 8012466:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801246a:	2302      	movs	r3, #2
 801246c:	2200      	movs	r2, #0
 801246e:	f000 f8ab 	bl	80125c8 <_lseek_r>
 8012472:	89a3      	ldrh	r3, [r4, #12]
 8012474:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012478:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801247c:	81a3      	strh	r3, [r4, #12]
 801247e:	4632      	mov	r2, r6
 8012480:	463b      	mov	r3, r7
 8012482:	4628      	mov	r0, r5
 8012484:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012488:	f000 b8c2 	b.w	8012610 <_write_r>

0801248c <__sseek>:
 801248c:	b510      	push	{r4, lr}
 801248e:	460c      	mov	r4, r1
 8012490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012494:	f000 f898 	bl	80125c8 <_lseek_r>
 8012498:	1c43      	adds	r3, r0, #1
 801249a:	89a3      	ldrh	r3, [r4, #12]
 801249c:	bf15      	itete	ne
 801249e:	6520      	strne	r0, [r4, #80]	@ 0x50
 80124a0:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80124a4:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80124a8:	81a3      	strheq	r3, [r4, #12]
 80124aa:	bf18      	it	ne
 80124ac:	81a3      	strhne	r3, [r4, #12]
 80124ae:	bd10      	pop	{r4, pc}

080124b0 <__sclose>:
 80124b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80124b4:	f000 b856 	b.w	8012564 <_close_r>

080124b8 <__ascii_wctomb>:
 80124b8:	4603      	mov	r3, r0
 80124ba:	4608      	mov	r0, r1
 80124bc:	b141      	cbz	r1, 80124d0 <__ascii_wctomb+0x18>
 80124be:	2aff      	cmp	r2, #255	@ 0xff
 80124c0:	d904      	bls.n	80124cc <__ascii_wctomb+0x14>
 80124c2:	228a      	movs	r2, #138	@ 0x8a
 80124c4:	601a      	str	r2, [r3, #0]
 80124c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80124ca:	4770      	bx	lr
 80124cc:	700a      	strb	r2, [r1, #0]
 80124ce:	2001      	movs	r0, #1
 80124d0:	4770      	bx	lr

080124d2 <__swbuf_r>:
 80124d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124d4:	460e      	mov	r6, r1
 80124d6:	4614      	mov	r4, r2
 80124d8:	4605      	mov	r5, r0
 80124da:	b118      	cbz	r0, 80124e4 <__swbuf_r+0x12>
 80124dc:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80124de:	b90b      	cbnz	r3, 80124e4 <__swbuf_r+0x12>
 80124e0:	f7fe f8a2 	bl	8010628 <__sinit>
 80124e4:	69a3      	ldr	r3, [r4, #24]
 80124e6:	60a3      	str	r3, [r4, #8]
 80124e8:	89a3      	ldrh	r3, [r4, #12]
 80124ea:	0719      	lsls	r1, r3, #28
 80124ec:	d501      	bpl.n	80124f2 <__swbuf_r+0x20>
 80124ee:	6923      	ldr	r3, [r4, #16]
 80124f0:	b943      	cbnz	r3, 8012504 <__swbuf_r+0x32>
 80124f2:	4621      	mov	r1, r4
 80124f4:	4628      	mov	r0, r5
 80124f6:	f7fe fa19 	bl	801092c <__swsetup_r>
 80124fa:	b118      	cbz	r0, 8012504 <__swbuf_r+0x32>
 80124fc:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8012500:	4638      	mov	r0, r7
 8012502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012504:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012508:	b2f6      	uxtb	r6, r6
 801250a:	049a      	lsls	r2, r3, #18
 801250c:	4637      	mov	r7, r6
 801250e:	d406      	bmi.n	801251e <__swbuf_r+0x4c>
 8012510:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8012514:	81a3      	strh	r3, [r4, #12]
 8012516:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012518:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801251c:	6663      	str	r3, [r4, #100]	@ 0x64
 801251e:	6823      	ldr	r3, [r4, #0]
 8012520:	6922      	ldr	r2, [r4, #16]
 8012522:	1a98      	subs	r0, r3, r2
 8012524:	6963      	ldr	r3, [r4, #20]
 8012526:	4283      	cmp	r3, r0
 8012528:	dc05      	bgt.n	8012536 <__swbuf_r+0x64>
 801252a:	4621      	mov	r1, r4
 801252c:	4628      	mov	r0, r5
 801252e:	f7fd ffc9 	bl	80104c4 <_fflush_r>
 8012532:	2800      	cmp	r0, #0
 8012534:	d1e2      	bne.n	80124fc <__swbuf_r+0x2a>
 8012536:	68a3      	ldr	r3, [r4, #8]
 8012538:	3b01      	subs	r3, #1
 801253a:	60a3      	str	r3, [r4, #8]
 801253c:	6823      	ldr	r3, [r4, #0]
 801253e:	1c5a      	adds	r2, r3, #1
 8012540:	6022      	str	r2, [r4, #0]
 8012542:	701e      	strb	r6, [r3, #0]
 8012544:	6962      	ldr	r2, [r4, #20]
 8012546:	1c43      	adds	r3, r0, #1
 8012548:	429a      	cmp	r2, r3
 801254a:	d004      	beq.n	8012556 <__swbuf_r+0x84>
 801254c:	89a3      	ldrh	r3, [r4, #12]
 801254e:	07db      	lsls	r3, r3, #31
 8012550:	d5d6      	bpl.n	8012500 <__swbuf_r+0x2e>
 8012552:	2e0a      	cmp	r6, #10
 8012554:	d1d4      	bne.n	8012500 <__swbuf_r+0x2e>
 8012556:	4621      	mov	r1, r4
 8012558:	4628      	mov	r0, r5
 801255a:	f7fd ffb3 	bl	80104c4 <_fflush_r>
 801255e:	2800      	cmp	r0, #0
 8012560:	d0ce      	beq.n	8012500 <__swbuf_r+0x2e>
 8012562:	e7cb      	b.n	80124fc <__swbuf_r+0x2a>

08012564 <_close_r>:
 8012564:	b538      	push	{r3, r4, r5, lr}
 8012566:	4d06      	ldr	r5, [pc, #24]	@ (8012580 <_close_r+0x1c>)
 8012568:	2300      	movs	r3, #0
 801256a:	4604      	mov	r4, r0
 801256c:	4608      	mov	r0, r1
 801256e:	602b      	str	r3, [r5, #0]
 8012570:	f7fb faf3 	bl	800db5a <_close>
 8012574:	1c43      	adds	r3, r0, #1
 8012576:	d102      	bne.n	801257e <_close_r+0x1a>
 8012578:	682b      	ldr	r3, [r5, #0]
 801257a:	b103      	cbz	r3, 801257e <_close_r+0x1a>
 801257c:	6023      	str	r3, [r4, #0]
 801257e:	bd38      	pop	{r3, r4, r5, pc}
 8012580:	2000fe60 	.word	0x2000fe60

08012584 <_fstat_r>:
 8012584:	b538      	push	{r3, r4, r5, lr}
 8012586:	4d07      	ldr	r5, [pc, #28]	@ (80125a4 <_fstat_r+0x20>)
 8012588:	2300      	movs	r3, #0
 801258a:	4604      	mov	r4, r0
 801258c:	4608      	mov	r0, r1
 801258e:	4611      	mov	r1, r2
 8012590:	602b      	str	r3, [r5, #0]
 8012592:	f7fb faee 	bl	800db72 <_fstat>
 8012596:	1c43      	adds	r3, r0, #1
 8012598:	d102      	bne.n	80125a0 <_fstat_r+0x1c>
 801259a:	682b      	ldr	r3, [r5, #0]
 801259c:	b103      	cbz	r3, 80125a0 <_fstat_r+0x1c>
 801259e:	6023      	str	r3, [r4, #0]
 80125a0:	bd38      	pop	{r3, r4, r5, pc}
 80125a2:	bf00      	nop
 80125a4:	2000fe60 	.word	0x2000fe60

080125a8 <_isatty_r>:
 80125a8:	b538      	push	{r3, r4, r5, lr}
 80125aa:	4d06      	ldr	r5, [pc, #24]	@ (80125c4 <_isatty_r+0x1c>)
 80125ac:	2300      	movs	r3, #0
 80125ae:	4604      	mov	r4, r0
 80125b0:	4608      	mov	r0, r1
 80125b2:	602b      	str	r3, [r5, #0]
 80125b4:	f7fb faea 	bl	800db8c <_isatty>
 80125b8:	1c43      	adds	r3, r0, #1
 80125ba:	d102      	bne.n	80125c2 <_isatty_r+0x1a>
 80125bc:	682b      	ldr	r3, [r5, #0]
 80125be:	b103      	cbz	r3, 80125c2 <_isatty_r+0x1a>
 80125c0:	6023      	str	r3, [r4, #0]
 80125c2:	bd38      	pop	{r3, r4, r5, pc}
 80125c4:	2000fe60 	.word	0x2000fe60

080125c8 <_lseek_r>:
 80125c8:	b538      	push	{r3, r4, r5, lr}
 80125ca:	4d07      	ldr	r5, [pc, #28]	@ (80125e8 <_lseek_r+0x20>)
 80125cc:	4604      	mov	r4, r0
 80125ce:	4608      	mov	r0, r1
 80125d0:	4611      	mov	r1, r2
 80125d2:	2200      	movs	r2, #0
 80125d4:	602a      	str	r2, [r5, #0]
 80125d6:	461a      	mov	r2, r3
 80125d8:	f7fb fae4 	bl	800dba4 <_lseek>
 80125dc:	1c43      	adds	r3, r0, #1
 80125de:	d102      	bne.n	80125e6 <_lseek_r+0x1e>
 80125e0:	682b      	ldr	r3, [r5, #0]
 80125e2:	b103      	cbz	r3, 80125e6 <_lseek_r+0x1e>
 80125e4:	6023      	str	r3, [r4, #0]
 80125e6:	bd38      	pop	{r3, r4, r5, pc}
 80125e8:	2000fe60 	.word	0x2000fe60

080125ec <_read_r>:
 80125ec:	b538      	push	{r3, r4, r5, lr}
 80125ee:	4d07      	ldr	r5, [pc, #28]	@ (801260c <_read_r+0x20>)
 80125f0:	4604      	mov	r4, r0
 80125f2:	4608      	mov	r0, r1
 80125f4:	4611      	mov	r1, r2
 80125f6:	2200      	movs	r2, #0
 80125f8:	602a      	str	r2, [r5, #0]
 80125fa:	461a      	mov	r2, r3
 80125fc:	f7fb fa90 	bl	800db20 <_read>
 8012600:	1c43      	adds	r3, r0, #1
 8012602:	d102      	bne.n	801260a <_read_r+0x1e>
 8012604:	682b      	ldr	r3, [r5, #0]
 8012606:	b103      	cbz	r3, 801260a <_read_r+0x1e>
 8012608:	6023      	str	r3, [r4, #0]
 801260a:	bd38      	pop	{r3, r4, r5, pc}
 801260c:	2000fe60 	.word	0x2000fe60

08012610 <_write_r>:
 8012610:	b538      	push	{r3, r4, r5, lr}
 8012612:	4d07      	ldr	r5, [pc, #28]	@ (8012630 <_write_r+0x20>)
 8012614:	4604      	mov	r4, r0
 8012616:	4608      	mov	r0, r1
 8012618:	4611      	mov	r1, r2
 801261a:	2200      	movs	r2, #0
 801261c:	602a      	str	r2, [r5, #0]
 801261e:	461a      	mov	r2, r3
 8012620:	f7fb fa62 	bl	800dae8 <_write>
 8012624:	1c43      	adds	r3, r0, #1
 8012626:	d102      	bne.n	801262e <_write_r+0x1e>
 8012628:	682b      	ldr	r3, [r5, #0]
 801262a:	b103      	cbz	r3, 801262e <_write_r+0x1e>
 801262c:	6023      	str	r3, [r4, #0]
 801262e:	bd38      	pop	{r3, r4, r5, pc}
 8012630:	2000fe60 	.word	0x2000fe60

08012634 <__errno>:
 8012634:	4b01      	ldr	r3, [pc, #4]	@ (801263c <__errno+0x8>)
 8012636:	6818      	ldr	r0, [r3, #0]
 8012638:	4770      	bx	lr
 801263a:	bf00      	nop
 801263c:	20000598 	.word	0x20000598

08012640 <__libc_fini_array>:
 8012640:	b538      	push	{r3, r4, r5, lr}
 8012642:	4d07      	ldr	r5, [pc, #28]	@ (8012660 <__libc_fini_array+0x20>)
 8012644:	4c07      	ldr	r4, [pc, #28]	@ (8012664 <__libc_fini_array+0x24>)
 8012646:	1b64      	subs	r4, r4, r5
 8012648:	10a4      	asrs	r4, r4, #2
 801264a:	b91c      	cbnz	r4, 8012654 <__libc_fini_array+0x14>
 801264c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012650:	f000 b894 	b.w	801277c <_fini>
 8012654:	3c01      	subs	r4, #1
 8012656:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801265a:	4798      	blx	r3
 801265c:	e7f5      	b.n	801264a <__libc_fini_array+0xa>
 801265e:	bf00      	nop
 8012660:	08091c08 	.word	0x08091c08
 8012664:	08091c10 	.word	0x08091c10

08012668 <__assert_func>:
 8012668:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801266a:	4614      	mov	r4, r2
 801266c:	461a      	mov	r2, r3
 801266e:	4b09      	ldr	r3, [pc, #36]	@ (8012694 <__assert_func+0x2c>)
 8012670:	681b      	ldr	r3, [r3, #0]
 8012672:	4605      	mov	r5, r0
 8012674:	68d8      	ldr	r0, [r3, #12]
 8012676:	b954      	cbnz	r4, 801268e <__assert_func+0x26>
 8012678:	4b07      	ldr	r3, [pc, #28]	@ (8012698 <__assert_func+0x30>)
 801267a:	461c      	mov	r4, r3
 801267c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012680:	9100      	str	r1, [sp, #0]
 8012682:	462b      	mov	r3, r5
 8012684:	4905      	ldr	r1, [pc, #20]	@ (801269c <__assert_func+0x34>)
 8012686:	f000 f843 	bl	8012710 <fiprintf>
 801268a:	f7fb fb15 	bl	800dcb8 <abort>
 801268e:	4b04      	ldr	r3, [pc, #16]	@ (80126a0 <__assert_func+0x38>)
 8012690:	e7f4      	b.n	801267c <__assert_func+0x14>
 8012692:	bf00      	nop
 8012694:	20000598 	.word	0x20000598
 8012698:	08091beb 	.word	0x08091beb
 801269c:	08091bbd 	.word	0x08091bbd
 80126a0:	08091bb0 	.word	0x08091bb0

080126a4 <_calloc_r>:
 80126a4:	b538      	push	{r3, r4, r5, lr}
 80126a6:	fba1 1502 	umull	r1, r5, r1, r2
 80126aa:	b935      	cbnz	r5, 80126ba <_calloc_r+0x16>
 80126ac:	f7fb fb1c 	bl	800dce8 <_malloc_r>
 80126b0:	4604      	mov	r4, r0
 80126b2:	b938      	cbnz	r0, 80126c4 <_calloc_r+0x20>
 80126b4:	2400      	movs	r4, #0
 80126b6:	4620      	mov	r0, r4
 80126b8:	bd38      	pop	{r3, r4, r5, pc}
 80126ba:	f7ff ffbb 	bl	8012634 <__errno>
 80126be:	230c      	movs	r3, #12
 80126c0:	6003      	str	r3, [r0, #0]
 80126c2:	e7f7      	b.n	80126b4 <_calloc_r+0x10>
 80126c4:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80126c8:	f022 0203 	bic.w	r2, r2, #3
 80126cc:	3a04      	subs	r2, #4
 80126ce:	2a24      	cmp	r2, #36	@ 0x24
 80126d0:	d819      	bhi.n	8012706 <_calloc_r+0x62>
 80126d2:	2a13      	cmp	r2, #19
 80126d4:	d915      	bls.n	8012702 <_calloc_r+0x5e>
 80126d6:	2a1b      	cmp	r2, #27
 80126d8:	e9c0 5500 	strd	r5, r5, [r0]
 80126dc:	d806      	bhi.n	80126ec <_calloc_r+0x48>
 80126de:	f100 0308 	add.w	r3, r0, #8
 80126e2:	2200      	movs	r2, #0
 80126e4:	e9c3 2200 	strd	r2, r2, [r3]
 80126e8:	609a      	str	r2, [r3, #8]
 80126ea:	e7e4      	b.n	80126b6 <_calloc_r+0x12>
 80126ec:	2a24      	cmp	r2, #36	@ 0x24
 80126ee:	e9c0 5502 	strd	r5, r5, [r0, #8]
 80126f2:	bf11      	iteee	ne
 80126f4:	f100 0310 	addne.w	r3, r0, #16
 80126f8:	6105      	streq	r5, [r0, #16]
 80126fa:	f100 0318 	addeq.w	r3, r0, #24
 80126fe:	6145      	streq	r5, [r0, #20]
 8012700:	e7ef      	b.n	80126e2 <_calloc_r+0x3e>
 8012702:	4603      	mov	r3, r0
 8012704:	e7ed      	b.n	80126e2 <_calloc_r+0x3e>
 8012706:	4629      	mov	r1, r5
 8012708:	f7fe f9ea 	bl	8010ae0 <memset>
 801270c:	e7d3      	b.n	80126b6 <_calloc_r+0x12>
	...

08012710 <fiprintf>:
 8012710:	b40e      	push	{r1, r2, r3}
 8012712:	b503      	push	{r0, r1, lr}
 8012714:	4601      	mov	r1, r0
 8012716:	ab03      	add	r3, sp, #12
 8012718:	4805      	ldr	r0, [pc, #20]	@ (8012730 <fiprintf+0x20>)
 801271a:	f853 2b04 	ldr.w	r2, [r3], #4
 801271e:	6800      	ldr	r0, [r0, #0]
 8012720:	9301      	str	r3, [sp, #4]
 8012722:	f7fc ffcb 	bl	800f6bc <_vfiprintf_r>
 8012726:	b002      	add	sp, #8
 8012728:	f85d eb04 	ldr.w	lr, [sp], #4
 801272c:	b003      	add	sp, #12
 801272e:	4770      	bx	lr
 8012730:	20000598 	.word	0x20000598

08012734 <_getpid>:
 8012734:	4b02      	ldr	r3, [pc, #8]	@ (8012740 <_getpid+0xc>)
 8012736:	2258      	movs	r2, #88	@ 0x58
 8012738:	601a      	str	r2, [r3, #0]
 801273a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801273e:	4770      	bx	lr
 8012740:	2000fe60 	.word	0x2000fe60

08012744 <_kill>:
 8012744:	4b02      	ldr	r3, [pc, #8]	@ (8012750 <_kill+0xc>)
 8012746:	2258      	movs	r2, #88	@ 0x58
 8012748:	601a      	str	r2, [r3, #0]
 801274a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801274e:	4770      	bx	lr
 8012750:	2000fe60 	.word	0x2000fe60

08012754 <_sbrk>:
 8012754:	4a04      	ldr	r2, [pc, #16]	@ (8012768 <_sbrk+0x14>)
 8012756:	6811      	ldr	r1, [r2, #0]
 8012758:	4603      	mov	r3, r0
 801275a:	b909      	cbnz	r1, 8012760 <_sbrk+0xc>
 801275c:	4903      	ldr	r1, [pc, #12]	@ (801276c <_sbrk+0x18>)
 801275e:	6011      	str	r1, [r2, #0]
 8012760:	6810      	ldr	r0, [r2, #0]
 8012762:	4403      	add	r3, r0
 8012764:	6013      	str	r3, [r2, #0]
 8012766:	4770      	bx	lr
 8012768:	2000fe64 	.word	0x2000fe64
 801276c:	2000fe68 	.word	0x2000fe68

08012770 <_init>:
 8012770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012772:	bf00      	nop
 8012774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012776:	bc08      	pop	{r3}
 8012778:	469e      	mov	lr, r3
 801277a:	4770      	bx	lr

0801277c <_fini>:
 801277c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801277e:	bf00      	nop
 8012780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012782:	bc08      	pop	{r3}
 8012784:	469e      	mov	lr, r3
 8012786:	4770      	bx	lr
